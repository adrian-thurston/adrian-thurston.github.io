From vitaly.v.ch at chernooky.com  Fri Dec  3 10:53:08 2010
From: vitaly.v.ch at chernooky.com (Vitaly V. Ch)
Date: Fri, 3 Dec 2010 12:53:08 +0200
Subject: [ragel-users] Work On Binary datagrams
Message-ID: <AANLkTinniK24e+PJR_VLK9UES+ozPZNnki3Y5j+h-NUv@mail.gmail.com>

Hi!

I'm interested in any tips or examples of using ragel on binary datagrams.

\\wbr Vitaly Chernooky

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From twisolar at gmail.com  Fri Dec  3 11:17:43 2010
From: twisolar at gmail.com (Jonathan Castello)
Date: Fri, 3 Dec 2010 03:17:43 -0800
Subject: [ragel-users] Work On Binary datagrams
In-Reply-To: <AANLkTinniK24e+PJR_VLK9UES+ozPZNnki3Y5j+h-NUv@mail.gmail.com>
References: <AANLkTinniK24e+PJR_VLK9UES+ozPZNnki3Y5j+h-NUv@mail.gmail.com>
Message-ID: <AANLkTimxG-5JbXqstBaFmT7r1cfMDjPsPNsjHy+uEtk0@mail.gmail.com>

I used Ragel to build a parser for the Telnet protocol, is that what
you meant? You can find my work so far on GitHub [1].

~Jonathan

[1] https://github.com/Twisol/anachronism

On Fri, Dec 3, 2010 at 2:53 AM, Vitaly V. Ch <vitaly.v.ch at chernooky.com> wrote:
> Hi!
>
> I'm interested in any tips or examples of using ragel on binary datagrams.
>
> \\wbr Vitaly Chernooky
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users
>

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From vitaly.v.ch at chernooky.com  Fri Dec  3 11:35:11 2010
From: vitaly.v.ch at chernooky.com (Vitaly V. Ch)
Date: Fri, 3 Dec 2010 13:35:11 +0200
Subject: [ragel-users] Work On Binary datagrams
In-Reply-To: <AANLkTimxG-5JbXqstBaFmT7r1cfMDjPsPNsjHy+uEtk0@mail.gmail.com>
References: <AANLkTinniK24e+PJR_VLK9UES+ozPZNnki3Y5j+h-NUv@mail.gmail.com>
	<AANLkTimxG-5JbXqstBaFmT7r1cfMDjPsPNsjHy+uEtk0@mail.gmail.com>
Message-ID: <AANLkTinsQP2=p99knP8Xnu0tfCHG=vu2HSqgncnssqRU@mail.gmail.com>

On Fri, Dec 3, 2010 at 1:17 PM, Jonathan Castello <twisolar at gmail.com> wrote:
> I used Ragel to build a parser for the Telnet protocol, is that what
> you meant? You can find my work so far on GitHub [1].

Thanks, I't interested.

\\wbr Vitaly Chernooky

>
> ~Jonathan
>
> [1] https://github.com/Twisol/anachronism
>
> On Fri, Dec 3, 2010 at 2:53 AM, Vitaly V. Ch <vitaly.v.ch at chernooky.com> wrote:
>> Hi!
>>
>> I'm interested in any tips or examples of using ragel on binary datagrams.
>>
>> \\wbr Vitaly Chernooky
>>
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at complang.org
>> http://www.complang.org/mailman/listinfo/ragel-users
>>
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users
>

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From qkeen at yandex.ru  Fri Dec  3 23:18:52 2010
From: qkeen at yandex.ru (Qwertyon Keen)
Date: Sat, 04 Dec 2010 02:18:52 +0300
Subject: [ragel-users] parse error on line `wc -l adc.rl`+1
Message-ID: <593981291418332@web159.yandex.ru>

I've written adc.rl [ http://codepad.org/huyO8ERx ] as an attempt to define ADC protocol.
`ragel adc.rl` returns error message about parse error on line `wc -l adc.rl`+1 so I even can't figure out where error is.
I think it's a bug, so I post it here.
If you have some solution to this error -- I would appreciate your help.

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From adrian.thurston at esentire.com  Mon Dec  6 18:16:29 2010
From: adrian.thurston at esentire.com (Adrian Thurston)
Date: Mon, 06 Dec 2010 10:16:29 -0800
Subject: [ragel-users] Work On Binary datagrams
In-Reply-To: <AANLkTinniK24e+PJR_VLK9UES+ozPZNnki3Y5j+h-NUv@mail.gmail.com>
References: <AANLkTinniK24e+PJR_VLK9UES+ozPZNnki3Y5j+h-NUv@mail.gmail.com>
Message-ID: <4CFD287D.3010004@esentire.com>

I use ragel to parse binary protocols at work. Often, the most difficult 
part is dealing with lengths, or counts of things. A good example is the 
DNS protocol. There are several sections of N blocks of questions and 
resource records items. Inside the blocks you must also deal with 
lengths in names.

Unfortunately, there are not many open examples of parsing this way. 
Start by looking in the manual. I would like to improve Ragel's support 
for this kind of parsing.

-Adrian

On 10-12-03 02:53 AM, Vitaly V. Ch wrote:
> Hi!
>
> I'm interested in any tips or examples of using ragel on binary datagrams.
>
> \\wbr Vitaly Chernooky
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users
>

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From adrian.thurston at esentire.com  Mon Dec  6 18:19:36 2010
From: adrian.thurston at esentire.com (Adrian Thurston)
Date: Mon, 06 Dec 2010 10:19:36 -0800
Subject: [ragel-users] parse error on line `wc -l adc.rl`+1
In-Reply-To: <593981291418332@web159.yandex.ru>
References: <593981291418332@web159.yandex.ru>
Message-ID: <4CFD2938.9010209@esentire.com>

There is an unclosed literal string.

escape = '\';

Should be: '\\';

The error message could certainly use improvement!

-Adrian

On 10-12-03 03:18 PM, Qwertyon Keen wrote:
> I've written adc.rl [ http://codepad.org/huyO8ERx ] as an attempt to define ADC protocol.
> `ragel adc.rl` returns error message about parse error on line `wc -l adc.rl`+1 so I even can't figure out where error is.
> I think it's a bug, so I post it here.
> If you have some solution to this error -- I would appreciate your help.
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users
>

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From vitaly.v.ch at chernooky.com  Tue Dec  7 13:44:20 2010
From: vitaly.v.ch at chernooky.com (Vitaly V. Ch)
Date: Tue, 7 Dec 2010 15:44:20 +0200
Subject: [ragel-users] Own matching procedure
In-Reply-To: <AANLkTim60we1164CPkHFNQjYKGghVTNg5hEjAk29n-1e@mail.gmail.com>
References: <AANLkTim60we1164CPkHFNQjYKGghVTNg5hEjAk29n-1e@mail.gmail.com>
Message-ID: <AANLkTi=ewk+NEjsKr8c=jnU8uPCT8NuujKMxzOMjVBeV@mail.gmail.com>

Hi!

As far as I understand docs I can use own matching procedure for
"event"-detecting. But way for it is not transparent for me. I'm
interested in some tips or examples.

--
\\wbr Vitaly Chernooky

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From ibc at aliax.net  Wed Dec  8 21:23:26 2010
From: ibc at aliax.net (=?UTF-8?Q?I=C3=B1aki_Baz_Castillo?=)
Date: Wed, 8 Dec 2010 22:23:26 +0100
Subject: [ragel-users] Something like #define macros for Ragel grammar?
Message-ID: <AANLkTin8F5uHfGiOe1k1bsgYdGKXx8iHHN2dyOrMKctu@mail.gmail.com>

Hi, my Ragel grammar have many lines like "Via" below:

 via_parm   = ( sent_protocol LWS sent_by ( SEMI ( via_branch |
header_param ) )* )
                    >start_value %store_value;
 Via           = ( "Via"i | "v"i ) >write_value >start_field
%write_field HCOLON via_parm
                    ( COMMA %write_value via_parm )*;


So I would like to use smething like a C #define. This is, adding at
the top of my Ragel file:

  #define COMMA_SEPARATED_VALUES(VALUE) ">write_value >start_field
             %write_field HCOLON VALUE ( COMMA %write_value VALUE )*;"

And then in the machine write:

  Via = ( "Via"i | "v"i ) COMMA_SEPARATED_VALUE(via_parm)


Of course this doesn't work. Is there a way to use "define" macros in
Ragel prior to parsing the Ragel grammar? or must I use m4?

Thanks a lot.


-- 
Iñaki Baz Castillo
<ibc at aliax.net>

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From ibc at aliax.net  Sun Dec 12 16:54:17 2010
From: ibc at aliax.net (=?UTF-8?Q?I=C3=B1aki_Baz_Castillo?=)
Date: Sun, 12 Dec 2010 17:54:17 +0100
Subject: [ragel-users] Doubt about actions prioritity
Message-ID: <AANLkTimyJLVOUaThaQbvK-LajP7WvjTZyC6doTs5BgfV@mail.gmail.com>

Hi, let's suppose this simple case:

  user   =  token  >start_user %end_user
  host   =  token  >start_host %end_host
  uri      =  ( user "@" host )  >start_uri %end_uri
  main  := uri

I need actions being called in the following order:

- start_uri
- start_user
- end_user
- start_host
- end_host
- end_uri

Is it always true?

Thanks for any clarification.


-- 
Iñaki Baz Castillo
<ibc at aliax.net>

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From marktsuchida at gmail.com  Wed Dec 15 04:33:55 2010
From: marktsuchida at gmail.com (Mark Tsuchida)
Date: Tue, 14 Dec 2010 20:33:55 -0800
Subject: [ragel-users] Mandelbug causing segfault
Message-ID: <AANLkTi=hzxgDJnL-AUBk2R8zW7spjcwNfYVzBZT9G-QU@mail.gmail.com>

Dear Adrian,

Thank you for sharing this great tool.

I am getting a segfault when running Ragel on my input file.

Below is the simplest input file I've been able to create that
triggers the segfault (sorry it's still rather complex).
Whether or not Ragel crashes seems to be (depending on other parts of
the input file) sometimes sensitive to the names given to actions (or
at least the length of those names), among other things. Any given
input file always gives the same result (segfault or no crash),
though.

Giving Ragel the -n or -m option appears to prevent the crash, at
least with the input shown below.

Both version 6.6 and the svn head (r1683) experience the same issue.
I'm on Mac OS X 10.6 and Regal was compiled with g++ 4.2.1 (Xcode
3.2.5) (arch is x86_64 (LP64)).

Please let me know if there is anything else I can provide to help
track this down.

Thanks,
Mark


$ cat test.rl
%%{
machine test;

action action1 {}
action action2 {}

nl = ("\r\n" | [\n\r]);
kw = "aaaaa";
ident = "bbbbb" @action1;
normal = (kw | ident);

first = ([^\n\r] @action1)* . nl;

cont = (
    (" " @action1 when action1)* .
    (((([^\n\r] @action1)*) . nl @action1) when action1)
);

special = first (cont when action2)** ;

main := (normal when action1) | (special when action1);

}%%
$ ragel test.rl
Segmentation fault
$ ragel -V test.rl
Segmentation fault
$ ragel -T0 test.rl
Segmentation fault
$ ragel -T1 test.rl
Segmentation fault
$ ragel -F0 test.rl
Segmentation fault
$ ragel -F1 test.rl
Segmentation fault
$ ragel -d test.rl
Segmentation fault
$ ragel -e test.rl
Segmentation fault
$ ragel -n test.rl  # succeeds
$ ragel -m test.rl  # succeeds
$

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From marktsuchida at gmail.com  Wed Dec 15 21:55:26 2010
From: marktsuchida at gmail.com (Mark Tsuchida)
Date: Wed, 15 Dec 2010 13:55:26 -0800
Subject: [ragel-users] Mandelbug causing segfault
In-Reply-To: <AANLkTi=hzxgDJnL-AUBk2R8zW7spjcwNfYVzBZT9G-QU@mail.gmail.com>
References: <AANLkTi=hzxgDJnL-AUBk2R8zW7spjcwNfYVzBZT9G-QU@mail.gmail.com>
Message-ID: <AANLkTi=kdd7441G4yxhnnYAx=AbVmz9U6-jX_j1AkVKt@mail.gmail.com>

Hi again,

On Tue, Dec 14, 2010 at 20:33, Mark Tsuchida <marktsuchida at gmail.com> wrote:
> Dear Adrian,
>
> Thank you for sharing this great tool.
>
> I am getting a segfault when running Ragel on my input file.
>
> Below is the simplest input file I've been able to create that
> triggers the segfault (sorry it's still rather complex).
> Whether or not Ragel crashes seems to be (depending on other parts of
> the input file) sometimes sensitive to the names given to actions (or
> at least the length of those names), among other things. Any given
> input file always gives the same result (segfault or no crash),
> though.
>
> Giving Ragel the -n or -m option appears to prevent the crash, at
> least with the input shown below.
>
> Both version 6.6 and the svn head (r1683) experience the same issue.
> I'm on Mac OS X 10.6 and Regal was compiled with g++ 4.2.1 (Xcode
> 3.2.5) (arch is x86_64 (LP64)).
>
> Please let me know if there is anything else I can provide to help
> track this down.
>
> Thanks,
> Mark
>
>
> $ cat test.rl
> %%{
> machine test;
>
> action action1 {}
> action action2 {}
>
> nl = ("\r\n" | [\n\r]);
> kw = "aaaaa";
> ident = "bbbbb" @action1;
> normal = (kw | ident);
>
> first = ([^\n\r] @action1)* . nl;
>
> cont = (
>    (" " @action1 when action1)* .
>    (((([^\n\r] @action1)*) . nl @action1) when action1)
> );
>
> special = first (cont when action2)** ;
>
> main := (normal when action1) | (special when action1);
>
> }%%
> $ ragel test.rl
> Segmentation fault
> $ ragel -V test.rl
> Segmentation fault
> $ ragel -T0 test.rl
> Segmentation fault
> $ ragel -T1 test.rl
> Segmentation fault
> $ ragel -F0 test.rl
> Segmentation fault
> $ ragel -F1 test.rl
> Segmentation fault
> $ ragel -d test.rl
> Segmentation fault
> $ ragel -e test.rl
> Segmentation fault
> $ ragel -n test.rl  # succeeds
> $ ragel -m test.rl  # succeeds
> $
>

Here is a stack trace from the svn head version (trunk @ r1683):

(gdb) run test.rl
Starting program: /Users/mark/devel/ragel/trunk/ragel/ragel test.rl
Reading symbols for shared libraries ++. done

Program received signal EXC_BAD_ACCESS, Could not access memory.
Reason: KERN_INVALID_ADDRESS at address: 0x0000000000000048
0x00000001000161fb in NextTrans<TransAp>::load (this=0x7fff5fbfd788)
at fsmgraph.h:782
782                             next = trans->next;
(gdb) where
#0  0x00000001000161fb in NextTrans<TransAp>::load
(this=0x7fff5fbfd788) at fsmgraph.h:782
#1  0x0000000100016255 in NextTrans<TransAp>::set
(this=0x7fff5fbfd788, t=0x20) at fsmgraph.h:790
#2  0x0000000100025612 in PairIter<TransAp, StateCond>::findNext
(this=0x7fff5fbfd770) at fsmgraph.h:901
#3  0x0000000100025dab in PairIter<TransAp, StateCond>::PairIter
(this=0x7fff5fbfd770, list1=0x20, list2=0x10030c700) at fsmgraph.h:854
#4  0x000000010002050a in FsmAp::findEmbedExpansions
(this=0x1003085d0, expansionList=@0x7fff5fbfd9e0,
destState=0x100309900, condAction=0x100301b60, sense=true) at
fsmgraph.cpp:1298
#5  0x0000000100021b28 in FsmAp::embedCondition (this=0x1003085d0,
md=@0x7fff5fbfda50, state=0x100309900, condAction=0x100301b60,
sense=true) at fsmgraph.cpp:1403
#6  0x00000001000222f5 in FsmAp::embedCondition (this=0x1003085d0,
state=0x100309900, condAction=0x100301b60, sense=true) at
fsmgraph.cpp:1389
#7  0x0000000100029e3a in FsmAp::allTransCondition (this=0x1003085d0,
condAction=0x100301b60, sense=true) at fsmap.cpp:872
#8  0x000000010000555a in FactorWithAug::assignConditions
(this=0x100305f20, graph=0x1003085d0) at parsetree.cpp:1176
#9  0x0000000100008f34 in FactorWithAug::walk (this=0x100305f20,
pd=0x1003006e0) at parsetree.cpp:1226
#10 0x0000000100009660 in Term::walk (this=0x100306010,
pd=0x1003006e0, lastInSeq=true) at parsetree.cpp:948
#11 0x000000010000986b in Expression::walk (this=0x100306040,
pd=0x1003006e0, lastInSeq=true) at parsetree.cpp:782
#12 0x0000000100009a75 in Join::walk (this=0x100306070,
pd=0x1003006e0) at parsetree.cpp:598
#13 0x0000000100008139 in Factor::walk (this=0x1003060a0,
pd=0x1003006e0) at parsetree.cpp:1790
#14 0x0000000100008226 in FactorWithNeg::walk (this=0x100306100,
pd=0x1003006e0) at parsetree.cpp:1710
#15 0x0000000100008c74 in FactorWithRep::walk (this=0x100306130,
pd=0x1003006e0) at parsetree.cpp:1624
#16 0x0000000100008e1e in FactorWithAug::walk (this=0x100306180,
pd=0x1003006e0) at parsetree.cpp:1212
#17 0x0000000100009660 in Term::walk (this=0x100306210,
pd=0x1003006e0, lastInSeq=true) at parsetree.cpp:948
#18 0x000000010000970b in Expression::walk (this=0x100306240,
pd=0x1003006e0, lastInSeq=true) at parsetree.cpp:738
#19 0x0000000100009a75 in Join::walk (this=0x100306270,
pd=0x1003006e0) at parsetree.cpp:598
#20 0x0000000100009c94 in MachineDef::walk (this=0x1003062a0,
pd=0x1003006e0) at parsetree.cpp:533
#21 0x0000000100007f33 in VarDef::walk (this=0x100306320,
pd=0x1003006e0) at parsetree.cpp:94
#22 0x000000010000d639 in ParseData::makeInstance (this=0x1003006e0,
gdNode=0x1003062c0) at parsedata.cpp:1062
#23 0x000000010000f648 in ParseData::makeAll (this=0x1003006e0) at
parsedata.cpp:1189
#24 0x0000000100010f4d in ParseData::prepareMachineGenTBWrapped
(this=0x1003006e0, graphDictEl=0x0) at parsedata.cpp:1396
#25 0x0000000100011040 in ParseData::prepareMachineGen
(this=0x1003006e0, graphDictEl=0x0) at parsedata.cpp:1369
#26 0x0000000100048d76 in InputData::prepareMachineGen
(this=0x7fff5fbfe750) at inputdata.cpp:191
#27 0x0000000100001e33 in process (id=@0x7fff5fbfe750) at main.cpp:478
#28 0x00000001000029b2 in main (argc=2, argv=0x7fff5fbfe820) at main.cpp:559
(gdb)

Mark

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From flameeyes at gmail.com  Thu Dec 16 06:52:29 2010
From: flameeyes at gmail.com (=?UTF-8?q?Diego=20Elio=20Petten=C3=B2?=)
Date: Thu, 16 Dec 2010 07:52:29 +0100
Subject: [ragel-users] [PATCH] Fix generated code for Ruby 1.9 compatibility.
Message-ID: <1292482349-2518-1-git-send-email-flameeyes@gmail.com>

In Ruby 1.9, the String class no longer works as a C-style array of (8-bit)
characters, but supports multiple encoding. While it is obviously a task
for the developer to ensure that the data array passed to the
Ragel-generated code is in a compatible encoding, this also means that the
simple dereference is not going to work:

% ruby18 -e 'puts "foo"[0].class'
Fixnum
% ruby19 -e 'puts "foo"[0].class'
String

This is easily fixed by calling the #ord method on the dereferenced data,
which will provide the ASCII ordinal (or UNICODE codepoint) for the single
character.

The produced code works correctly both on Ruby 1.8 and 1.9.2.
---
 ragel/rubycodegen.cpp |    7 +++++--
 1 files changed, 5 insertions(+), 2 deletions(-)

diff --git a/ragel/rubycodegen.cpp b/ragel/rubycodegen.cpp
index 5117823..f329587 100644
--- a/ragel/rubycodegen.cpp
+++ b/ragel/rubycodegen.cpp
@@ -307,8 +307,11 @@ string RubyCodeGen::GET_KEY()
 		ret << ")";
 	}
 	else {
-		/* Expression for retrieving the key, use simple dereference. */
-		ret << DATA() << "[" << P() << "]";
+		/* Expression for retrieving the key, use dereference
+		 * and read ordinal, for compatibility with Ruby
+		 * 1.9.
+		 */
+		ret << DATA() << "[" << P() << "].ord";
 	}
 	return ret.str();
 }
-- 
1.7.3.3


_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From joseph.stewart at gmail.com  Thu Dec 16 14:24:29 2010
From: joseph.stewart at gmail.com (Joseph Stewart)
Date: Thu, 16 Dec 2010 09:24:29 -0500
Subject: [ragel-users] Work On Binary datagrams
In-Reply-To: <4CFD287D.3010004@esentire.com>
References: <AANLkTinniK24e+PJR_VLK9UES+ozPZNnki3Y5j+h-NUv@mail.gmail.com>
	<4CFD287D.3010004@esentire.com>
Message-ID: <AANLkTi=-aYB-dKhU1WR0uhLWSQtE8WWfOBo=3+0prnV7@mail.gmail.com>

Adrian,

Do you have any tips or small examples for dealing with lengths? While I
have something that works, it doesn't feel right and I don't have the
experience with Ragel to know if I'm doing this right.

Below is a shell I've started to parse/validate binary chunks out of
XML-like tags (BTW, I did not create the format... I'm just the victim).
Eventually I need to parse data inside the Bin chunks.

The graphviz output for this is so gigantic that I think I'm doing something
fundamentally wrong.

Suggestions are greatly appreciated!

-joe

--- code follows ---

#include <stdio.h>

/*

chunks in file look like

<XRNDATA08192020001>LenData</XRNDATA>
where "08192" is an ASCII type designator (can expect other types)
where "020001" is an ASCII information field
where Len is a 4-byte little endian length designator
where Data is binary data of Len length

*/

#define XRN 'X', 'R', 'N', 'D', 'A', 'T', 'A'
#define T1  '0', '8', '1', '9', '2'
#define T2  '0', '0', '0', '1', '6'
#define T3  '0', '0', '0', '0', '8'
#define T4  '0', '0', '0', '0', '1'
#define I1  '0', '2', '0', '0', '0', '1'

%%{
machine tds;
write data;
}%%

int main() {
int len = 0;
unsigned char buf[] = {
'<', XRN, T1, I1, '>', 0, 0, 0, 5, 48,49,50,51,52, '<', '/', XRN, '>',
'<', XRN, T2, I1, '>', 0, 0, 0, 1, 10, '<', '/', XRN, '>',
'<', XRN, T3, I1, '>', 0, 0, 0, 1, 10, '<', '/', XRN, '>',
'<', XRN, T4, I1, '>', 0, 0, 0, 1, 10, '<', '/', XRN, '>',
'<', XRN, T1, I1, '>', 0, 0, 0, 0, '<', '/', XRN, '>',
};
int cs, r = 0;
unsigned char *p = (unsigned char *)&buf;
unsigned char *pe = p + sizeof(buf);
printf("len=%d\n", len);
%%{
t1 = '08192' @{ printf("t1\n"); };
t2 = '00016' @{ printf("t2\n"); };
t3 = '00008' @{ printf("t3\n"); };
t4 = '00001' @{ printf("t4\n"); };
type = (t1 | t2 | t3 | t4);
info = '020001';
open = '<XRNDATA' type info '>' @{ printf("begin XRNDATA\n"); len = 0; };
len = extend{4} @{ printf("len = %d\n", (int)*p); len = (len*256) + (*p); };
buffer = (extend when {len--})* @{ printf("[%d]:%d\n", len, *p); };
close = '</XRNDATA>' @{ printf("end XRNDATA\n"); };
expr = open len buffer close;
main := expr*;
write init;
write exec;
}%%
return 0;
}



On Mon, Dec 6, 2010 at 1:16 PM, Adrian Thurston <
adrian.thurston at esentire.com> wrote:

> I use ragel to parse binary protocols at work. Often, the most difficult
> part is dealing with lengths, or counts of things. A good example is the DNS
> protocol. There are several sections of N blocks of questions and resource
> records items. Inside the blocks you must also deal with lengths in names.
>
> Unfortunately, there are not many open examples of parsing this way. Start
> by looking in the manual. I would like to improve Ragel's support for this
> kind of parsing.
>
> -Adrian
>
>
> On 10-12-03 02:53 AM, Vitaly V. Ch wrote:
>
>> Hi!
>>
>> I'm interested in any tips or examples of using ragel on binary datagrams.
>>
>> \\wbr Vitaly Chernooky
>>
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at complang.org
>> http://www.complang.org/mailman/listinfo/ragel-users
>>
>>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel/attachments/20101216/aa495f1a/attachment.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From joseph.stewart at gmail.com  Thu Dec 16 14:25:29 2010
From: joseph.stewart at gmail.com (Joseph Stewart)
Date: Thu, 16 Dec 2010 09:25:29 -0500
Subject: [ragel-users] Work On Binary datagrams
In-Reply-To: <AANLkTi=-aYB-dKhU1WR0uhLWSQtE8WWfOBo=3+0prnV7@mail.gmail.com>
References: <AANLkTinniK24e+PJR_VLK9UES+ozPZNnki3Y5j+h-NUv@mail.gmail.com>
	<4CFD287D.3010004@esentire.com>
	<AANLkTi=-aYB-dKhU1WR0uhLWSQtE8WWfOBo=3+0prnV7@mail.gmail.com>
Message-ID: <AANLkTimr_B5twU4v97CTjRusbg+DQui=3vtwDbEBdyLT@mail.gmail.com>

(whoops... the text should have read "Len is a big-endian length
designator")

On Thu, Dec 16, 2010 at 9:24 AM, Joseph Stewart <joseph.stewart at gmail.com>wrote:

> Adrian,
>
> Do you have any tips or small examples for dealing with lengths? While I
> have something that works, it doesn't feel right and I don't have the
> experience with Ragel to know if I'm doing this right.
>
> Below is a shell I've started to parse/validate binary chunks out of
> XML-like tags (BTW, I did not create the format... I'm just the victim).
> Eventually I need to parse data inside the Bin chunks.
>
> The graphviz output for this is so gigantic that I think I'm doing
> something fundamentally wrong.
>
> Suggestions are greatly appreciated!
>
> -joe
>
> --- code follows ---
>
> #include <stdio.h>
>
> /*
>
> chunks in file look like
>
> <XRNDATA08192020001>LenData</XRNDATA>
> where "08192" is an ASCII type designator (can expect other types)
> where "020001" is an ASCII information field
> where Len is a 4-byte little endian length designator
> where Data is binary data of Len length
>
> */
>
> #define XRN 'X', 'R', 'N', 'D', 'A', 'T', 'A'
> #define T1  '0', '8', '1', '9', '2'
> #define T2  '0', '0', '0', '1', '6'
> #define T3  '0', '0', '0', '0', '8'
> #define T4  '0', '0', '0', '0', '1'
> #define I1  '0', '2', '0', '0', '0', '1'
>
> %%{
> machine tds;
> write data;
> }%%
>
> int main() {
> int len = 0;
> unsigned char buf[] = {
>  '<', XRN, T1, I1, '>', 0, 0, 0, 5, 48,49,50,51,52, '<', '/', XRN, '>',
> '<', XRN, T2, I1, '>', 0, 0, 0, 1, 10, '<', '/', XRN, '>',
>  '<', XRN, T3, I1, '>', 0, 0, 0, 1, 10, '<', '/', XRN, '>',
> '<', XRN, T4, I1, '>', 0, 0, 0, 1, 10, '<', '/', XRN, '>',
>  '<', XRN, T1, I1, '>', 0, 0, 0, 0, '<', '/', XRN, '>',
> };
>  int cs, r = 0;
> unsigned char *p = (unsigned char *)&buf;
> unsigned char *pe = p + sizeof(buf);
>  printf("len=%d\n", len);
> %%{
> t1 = '08192' @{ printf("t1\n"); };
>  t2 = '00016' @{ printf("t2\n"); };
> t3 = '00008' @{ printf("t3\n"); };
>  t4 = '00001' @{ printf("t4\n"); };
> type = (t1 | t2 | t3 | t4);
>  info = '020001';
> open = '<XRNDATA' type info '>' @{ printf("begin XRNDATA\n"); len = 0; };
>  len = extend{4} @{ printf("len = %d\n", (int)*p); len = (len*256) + (*p);
> };
> buffer = (extend when {len--})* @{ printf("[%d]:%d\n", len, *p); };
>  close = '</XRNDATA>' @{ printf("end XRNDATA\n"); };
> expr = open len buffer close;
>  main := expr*;
> write init;
> write exec;
>  }%%
> return 0;
> }
>
>
>
> On Mon, Dec 6, 2010 at 1:16 PM, Adrian Thurston <
> adrian.thurston at esentire.com> wrote:
>
>> I use ragel to parse binary protocols at work. Often, the most difficult
>> part is dealing with lengths, or counts of things. A good example is the DNS
>> protocol. There are several sections of N blocks of questions and resource
>> records items. Inside the blocks you must also deal with lengths in names.
>>
>> Unfortunately, there are not many open examples of parsing this way. Start
>> by looking in the manual. I would like to improve Ragel's support for this
>> kind of parsing.
>>
>> -Adrian
>>
>>
>> On 10-12-03 02:53 AM, Vitaly V. Ch wrote:
>>
>>> Hi!
>>>
>>> I'm interested in any tips or examples of using ragel on binary
>>> datagrams.
>>>
>>> \\wbr Vitaly Chernooky
>>>
>>> _______________________________________________
>>> ragel-users mailing list
>>> ragel-users at complang.org
>>> http://www.complang.org/mailman/listinfo/ragel-users
>>>
>>>
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at complang.org
>> http://www.complang.org/mailman/listinfo/ragel-users
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel/attachments/20101216/0a8fad0f/attachment.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From adrian.thurston at esentire.com  Thu Dec 16 17:34:47 2010
From: adrian.thurston at esentire.com (Adrian Thurston)
Date: Thu, 16 Dec 2010 09:34:47 -0800
Subject: [ragel-users] Something like #define macros for Ragel grammar?
In-Reply-To: <AANLkTin8F5uHfGiOe1k1bsgYdGKXx8iHHN2dyOrMKctu@mail.gmail.com>
References: <AANLkTin8F5uHfGiOe1k1bsgYdGKXx8iHHN2dyOrMKctu@mail.gmail.com>
Message-ID: <4D0A4DB7.2090107@esentire.com>

This has been a desired feature for many years. A few times I've 
sketched out a solution, but it has never materialized. Your request has 
been noted it bumps the relative priority.

Thanks,
  Adrian

On 10-12-08 01:23 PM, Iñaki Baz Castillo wrote:
> Hi, my Ragel grammar have many lines like "Via" below:
>
>   via_parm   = ( sent_protocol LWS sent_by ( SEMI ( via_branch |
> header_param ) )* )
>                      >start_value %store_value;
>   Via           = ( "Via"i | "v"i )>write_value>start_field
> %write_field HCOLON via_parm
>                      ( COMMA %write_value via_parm )*;
>
>
> So I would like to use smething like a C #define. This is, adding at
> the top of my Ragel file:
>
>    #define COMMA_SEPARATED_VALUES(VALUE) ">write_value>start_field
>               %write_field HCOLON VALUE ( COMMA %write_value VALUE )*;"
>
> And then in the machine write:
>
>    Via = ( "Via"i | "v"i ) COMMA_SEPARATED_VALUE(via_parm)
>
>
> Of course this doesn't work. Is there a way to use "define" macros in
> Ragel prior to parsing the Ragel grammar? or must I use m4?
>
> Thanks a lot.
>
>

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From adrian.thurston at esentire.com  Thu Dec 16 17:36:06 2010
From: adrian.thurston at esentire.com (Adrian Thurston)
Date: Thu, 16 Dec 2010 09:36:06 -0800
Subject: [ragel-users] Doubt about actions prioritity
In-Reply-To: <AANLkTimyJLVOUaThaQbvK-LajP7WvjTZyC6doTs5BgfV@mail.gmail.com>
References: <AANLkTimyJLVOUaThaQbvK-LajP7WvjTZyC6doTs5BgfV@mail.gmail.com>
Message-ID: <4D0A4E06.3040201@esentire.com>

Yes it is always true. There is a section in the manual on this topic.

-Adrian

On 10-12-12 08:54 AM, Iñaki Baz Castillo wrote:
> Hi, let's suppose this simple case:
>
>    user   =  token>start_user %end_user
>    host   =  token>start_host %end_host
>    uri      =  ( user "@" host )>start_uri %end_uri
>    main  := uri
>
> I need actions being called in the following order:
>
> - start_uri
> - start_user
> - end_user
> - start_host
> - end_host
> - end_uri
>
> Is it always true?
>
> Thanks for any clarification.
>
>

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From adrian.thurston at esentire.com  Thu Dec 16 18:28:12 2010
From: adrian.thurston at esentire.com (Adrian Thurston)
Date: Thu, 16 Dec 2010 10:28:12 -0800
Subject: [ragel-users] Mandelbug causing segfault
In-Reply-To: <AANLkTi=kdd7441G4yxhnnYAx=AbVmz9U6-jX_j1AkVKt@mail.gmail.com>
References: <AANLkTi=hzxgDJnL-AUBk2R8zW7spjcwNfYVzBZT9G-QU@mail.gmail.com>
	<AANLkTi=kdd7441G4yxhnnYAx=AbVmz9U6-jX_j1AkVKt@mail.gmail.com>
Message-ID: <4D0A5A3C.4020307@esentire.com>

Hi Mark, Thanks for reporting this. The bug has been recorded (in my 
private tracker). Will aim to fix for 6.7.

Thanks,
  Adrian

On 10-12-15 01:55 PM, Mark Tsuchida wrote:
> Hi again,
>
> On Tue, Dec 14, 2010 at 20:33, Mark Tsuchida<marktsuchida at gmail.com>  wrote:
>> Dear Adrian,
>>
>> Thank you for sharing this great tool.
>>
>> I am getting a segfault when running Ragel on my input file.
>>
>> Below is the simplest input file I've been able to create that
>> triggers the segfault (sorry it's still rather complex).
>> Whether or not Ragel crashes seems to be (depending on other parts of
>> the input file) sometimes sensitive to the names given to actions (or
>> at least the length of those names), among other things. Any given
>> input file always gives the same result (segfault or no crash),
>> though.
>>
>> Giving Ragel the -n or -m option appears to prevent the crash, at
>> least with the input shown below.
>>
>> Both version 6.6 and the svn head (r1683) experience the same issue.
>> I'm on Mac OS X 10.6 and Regal was compiled with g++ 4.2.1 (Xcode
>> 3.2.5) (arch is x86_64 (LP64)).
>>
>> Please let me know if there is anything else I can provide to help
>> track this down.
>>
>> Thanks,
>> Mark
>>
>>
>> $ cat test.rl
>> %%{
>> machine test;
>>
>> action action1 {}
>> action action2 {}
>>
>> nl = ("\r\n" | [\n\r]);
>> kw = "aaaaa";
>> ident = "bbbbb" @action1;
>> normal = (kw | ident);
>>
>> first = ([^\n\r] @action1)* . nl;
>>
>> cont = (
>>     (" " @action1 when action1)* .
>>     (((([^\n\r] @action1)*) . nl @action1) when action1)
>> );
>>
>> special = first (cont when action2)** ;
>>
>> main := (normal when action1) | (special when action1);
>>
>> }%%
>> $ ragel test.rl
>> Segmentation fault
>> $ ragel -V test.rl
>> Segmentation fault
>> $ ragel -T0 test.rl
>> Segmentation fault
>> $ ragel -T1 test.rl
>> Segmentation fault
>> $ ragel -F0 test.rl
>> Segmentation fault
>> $ ragel -F1 test.rl
>> Segmentation fault
>> $ ragel -d test.rl
>> Segmentation fault
>> $ ragel -e test.rl
>> Segmentation fault
>> $ ragel -n test.rl  # succeeds
>> $ ragel -m test.rl  # succeeds
>> $
>>
>
> Here is a stack trace from the svn head version (trunk @ r1683):
>
> (gdb) run test.rl
> Starting program: /Users/mark/devel/ragel/trunk/ragel/ragel test.rl
> Reading symbols for shared libraries ++. done
>
> Program received signal EXC_BAD_ACCESS, Could not access memory.
> Reason: KERN_INVALID_ADDRESS at address: 0x0000000000000048
> 0x00000001000161fb in NextTrans<TransAp>::load (this=0x7fff5fbfd788)
> at fsmgraph.h:782
> 782                             next = trans->next;
> (gdb) where
> #0  0x00000001000161fb in NextTrans<TransAp>::load
> (this=0x7fff5fbfd788) at fsmgraph.h:782
> #1  0x0000000100016255 in NextTrans<TransAp>::set
> (this=0x7fff5fbfd788, t=0x20) at fsmgraph.h:790
> #2  0x0000000100025612 in PairIter<TransAp, StateCond>::findNext
> (this=0x7fff5fbfd770) at fsmgraph.h:901
> #3  0x0000000100025dab in PairIter<TransAp, StateCond>::PairIter
> (this=0x7fff5fbfd770, list1=0x20, list2=0x10030c700) at fsmgraph.h:854
> #4  0x000000010002050a in FsmAp::findEmbedExpansions
> (this=0x1003085d0, expansionList=@0x7fff5fbfd9e0,
> destState=0x100309900, condAction=0x100301b60, sense=true) at
> fsmgraph.cpp:1298
> #5  0x0000000100021b28 in FsmAp::embedCondition (this=0x1003085d0,
> md=@0x7fff5fbfda50, state=0x100309900, condAction=0x100301b60,
> sense=true) at fsmgraph.cpp:1403
> #6  0x00000001000222f5 in FsmAp::embedCondition (this=0x1003085d0,
> state=0x100309900, condAction=0x100301b60, sense=true) at
> fsmgraph.cpp:1389
> #7  0x0000000100029e3a in FsmAp::allTransCondition (this=0x1003085d0,
> condAction=0x100301b60, sense=true) at fsmap.cpp:872
> #8  0x000000010000555a in FactorWithAug::assignConditions
> (this=0x100305f20, graph=0x1003085d0) at parsetree.cpp:1176
> #9  0x0000000100008f34 in FactorWithAug::walk (this=0x100305f20,
> pd=0x1003006e0) at parsetree.cpp:1226
> #10 0x0000000100009660 in Term::walk (this=0x100306010,
> pd=0x1003006e0, lastInSeq=true) at parsetree.cpp:948
> #11 0x000000010000986b in Expression::walk (this=0x100306040,
> pd=0x1003006e0, lastInSeq=true) at parsetree.cpp:782
> #12 0x0000000100009a75 in Join::walk (this=0x100306070,
> pd=0x1003006e0) at parsetree.cpp:598
> #13 0x0000000100008139 in Factor::walk (this=0x1003060a0,
> pd=0x1003006e0) at parsetree.cpp:1790
> #14 0x0000000100008226 in FactorWithNeg::walk (this=0x100306100,
> pd=0x1003006e0) at parsetree.cpp:1710
> #15 0x0000000100008c74 in FactorWithRep::walk (this=0x100306130,
> pd=0x1003006e0) at parsetree.cpp:1624
> #16 0x0000000100008e1e in FactorWithAug::walk (this=0x100306180,
> pd=0x1003006e0) at parsetree.cpp:1212
> #17 0x0000000100009660 in Term::walk (this=0x100306210,
> pd=0x1003006e0, lastInSeq=true) at parsetree.cpp:948
> #18 0x000000010000970b in Expression::walk (this=0x100306240,
> pd=0x1003006e0, lastInSeq=true) at parsetree.cpp:738
> #19 0x0000000100009a75 in Join::walk (this=0x100306270,
> pd=0x1003006e0) at parsetree.cpp:598
> #20 0x0000000100009c94 in MachineDef::walk (this=0x1003062a0,
> pd=0x1003006e0) at parsetree.cpp:533
> #21 0x0000000100007f33 in VarDef::walk (this=0x100306320,
> pd=0x1003006e0) at parsetree.cpp:94
> #22 0x000000010000d639 in ParseData::makeInstance (this=0x1003006e0,
> gdNode=0x1003062c0) at parsedata.cpp:1062
> #23 0x000000010000f648 in ParseData::makeAll (this=0x1003006e0) at
> parsedata.cpp:1189
> #24 0x0000000100010f4d in ParseData::prepareMachineGenTBWrapped
> (this=0x1003006e0, graphDictEl=0x0) at parsedata.cpp:1396
> #25 0x0000000100011040 in ParseData::prepareMachineGen
> (this=0x1003006e0, graphDictEl=0x0) at parsedata.cpp:1369
> #26 0x0000000100048d76 in InputData::prepareMachineGen
> (this=0x7fff5fbfe750) at inputdata.cpp:191
> #27 0x0000000100001e33 in process (id=@0x7fff5fbfe750) at main.cpp:478
> #28 0x00000001000029b2 in main (argc=2, argv=0x7fff5fbfe820) at main.cpp:559
> (gdb)
>
> Mark
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From adrian.thurston at esentire.com  Thu Dec 16 18:30:51 2010
From: adrian.thurston at esentire.com (Adrian Thurston)
Date: Thu, 16 Dec 2010 10:30:51 -0800
Subject: [ragel-users] [PATCH] Fix generated code for Ruby 1.9
	compatibility.
In-Reply-To: <1292482349-2518-1-git-send-email-flameeyes@gmail.com>
References: <1292482349-2518-1-git-send-email-flameeyes@gmail.com>
Message-ID: <4D0A5ADB.1000904@esentire.com>

Thanks, in the queue for the next release.

-Adrian

On 10-12-15 10:52 PM, Diego Elio Pettenò wrote:
> In Ruby 1.9, the String class no longer works as a C-style array of (8-bit)
> characters, but supports multiple encoding. While it is obviously a task
> for the developer to ensure that the data array passed to the
> Ragel-generated code is in a compatible encoding, this also means that the
> simple dereference is not going to work:
>
> % ruby18 -e 'puts "foo"[0].class'
> Fixnum
> % ruby19 -e 'puts "foo"[0].class'
> String
>
> This is easily fixed by calling the #ord method on the dereferenced data,
> which will provide the ASCII ordinal (or UNICODE codepoint) for the single
> character.
>
> The produced code works correctly both on Ruby 1.8 and 1.9.2.
> ---
>   ragel/rubycodegen.cpp |    7 +++++--
>   1 files changed, 5 insertions(+), 2 deletions(-)
>
> diff --git a/ragel/rubycodegen.cpp b/ragel/rubycodegen.cpp
> index 5117823..f329587 100644
> --- a/ragel/rubycodegen.cpp
> +++ b/ragel/rubycodegen.cpp
> @@ -307,8 +307,11 @@ string RubyCodeGen::GET_KEY()
>   		ret<<  ")";
>   	}
>   	else {
> -		/* Expression for retrieving the key, use simple dereference. */
> -		ret<<  DATA()<<  "["<<  P()<<  "]";
> +		/* Expression for retrieving the key, use dereference
> +		 * and read ordinal, for compatibility with Ruby
> +		 * 1.9.
> +		 */
> +		ret<<  DATA()<<  "["<<  P()<<  "].ord";
>   	}
>   	return ret.str();
>   }

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From adrian.thurston at esentire.com  Thu Dec 16 18:34:06 2010
From: adrian.thurston at esentire.com (Adrian Thurston)
Date: Thu, 16 Dec 2010 10:34:06 -0800
Subject: [ragel-users] Work On Binary datagrams
In-Reply-To: <AANLkTi=-aYB-dKhU1WR0uhLWSQtE8WWfOBo=3+0prnV7@mail.gmail.com>
References: <AANLkTinniK24e+PJR_VLK9UES+ozPZNnki3Y5j+h-NUv@mail.gmail.com>	<4CFD287D.3010004@esentire.com>
	<AANLkTi=-aYB-dKhU1WR0uhLWSQtE8WWfOBo=3+0prnV7@mail.gmail.com>
Message-ID: <4D0A5B9E.3080802@esentire.com>

Right now there is no 'right' way. There are actually are many different 
ways each with their own ups and downs. There is some work I want to do 
on conditions to ease length processing (comes up at work a lot) and I'm 
hoping to soon be able to prescribe a recommended way of dealing with 
lengths that is general enough to apply to the majority of cases that I see.

On 10-12-16 06:24 AM, Joseph Stewart wrote:
> Adrian,
>
> Do you have any tips or small examples for dealing with lengths? While I
> have something that works, it doesn't feel right and I don't have the
> experience with Ragel to know if I'm doing this right.
>
> Below is a shell I've started to parse/validate binary chunks out of
> XML-like tags (BTW, I did not create the format... I'm just the victim).
> Eventually I need to parse data inside the Bin chunks.
>
> The graphviz output for this is so gigantic that I think I'm doing
> something fundamentally wrong.
>
> Suggestions are greatly appreciated!
>
> -joe
>
> --- code follows ---
>
> #include <stdio.h>
>
> /*
>
> chunks in file look like
>
> <XRNDATA08192020001>LenData</XRNDATA>
> where "08192" is an ASCII type designator (can expect other types)
> where "020001" is an ASCII information field
> where Len is a 4-byte little endian length designator
> where Data is binary data of Len length
>
> */
>
> #define XRN 'X', 'R', 'N', 'D', 'A', 'T', 'A'
> #define T1 '0', '8', '1', '9', '2'
> #define T2 '0', '0', '0', '1', '6'
> #define T3 '0', '0', '0', '0', '8'
> #define T4 '0', '0', '0', '0', '1'
> #define I1 '0', '2', '0', '0', '0', '1'
>
> %%{
> machine tds;
> write data;
> }%%
>
> int main() {
> int len = 0;
> unsigned char buf[] = {
> '<', XRN, T1, I1, '>', 0, 0, 0, 5, 48,49,50,51,52, '<', '/', XRN, '>',
> '<', XRN, T2, I1, '>', 0, 0, 0, 1, 10, '<', '/', XRN, '>',
> '<', XRN, T3, I1, '>', 0, 0, 0, 1, 10, '<', '/', XRN, '>',
> '<', XRN, T4, I1, '>', 0, 0, 0, 1, 10, '<', '/', XRN, '>',
> '<', XRN, T1, I1, '>', 0, 0, 0, 0, '<', '/', XRN, '>',
> };
> int cs, r = 0;
> unsigned char *p = (unsigned char *)&buf;
> unsigned char *pe = p + sizeof(buf);
> printf("len=%d\n", len);
> %%{
> t1 = '08192' @{ printf("t1\n"); };
> t2 = '00016' @{ printf("t2\n"); };
> t3 = '00008' @{ printf("t3\n"); };
> t4 = '00001' @{ printf("t4\n"); };
> type = (t1 | t2 | t3 | t4);
> info = '020001';
> open = '<XRNDATA' type info '>' @{ printf("begin XRNDATA\n"); len = 0; };
> len = extend{4} @{ printf("len = %d\n", (int)*p); len = (len*256) + (*p); };
> buffer = (extend when {len--})* @{ printf("[%d]:%d\n", len, *p); };
> close = '</XRNDATA>' @{ printf("end XRNDATA\n"); };
> expr = open len buffer close;
> main := expr*;
> write init;
> write exec;
> }%%
> return 0;
> }
>
>
>
> On Mon, Dec 6, 2010 at 1:16 PM, Adrian Thurston
> <adrian.thurston at esentire.com <mailto:adrian.thurston at esentire.com>> wrote:
>
>     I use ragel to parse binary protocols at work. Often, the most
>     difficult part is dealing with lengths, or counts of things. A good
>     example is the DNS protocol. There are several sections of N blocks
>     of questions and resource records items. Inside the blocks you must
>     also deal with lengths in names.
>
>     Unfortunately, there are not many open examples of parsing this way.
>     Start by looking in the manual. I would like to improve Ragel's
>     support for this kind of parsing.
>
>     -Adrian
>
>
>     On 10-12-03 02:53 AM, Vitaly V. Ch wrote:
>
>         Hi!
>
>         I'm interested in any tips or examples of using ragel on binary
>         datagrams.
>
>         \\wbr Vitaly Chernooky
>
>         _______________________________________________
>         ragel-users mailing list
>         ragel-users at complang.org <mailto:ragel-users at complang.org>
>         http://www.complang.org/mailman/listinfo/ragel-users
>
>
>     _______________________________________________
>     ragel-users mailing list
>     ragel-users at complang.org <mailto:ragel-users at complang.org>
>     http://www.complang.org/mailman/listinfo/ragel-users
>
>
>
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From alan at alanz.com  Thu Dec 16 19:45:33 2010
From: alan at alanz.com (Alan West)
Date: Thu, 16 Dec 2010 19:45:33 +0000
Subject: [ragel-users] Something like #define macros for Ragel grammar?
In-Reply-To: <4D0A4DB7.2090107@esentire.com>
References: <AANLkTin8F5uHfGiOe1k1bsgYdGKXx8iHHN2dyOrMKctu@mail.gmail.com>
	<4D0A4DB7.2090107@esentire.com>
Message-ID: <575C7252-0921-4290-A6AF-9E180EBF4CA9@alanz.com>

Not tried it but maybe something like this works on gcc:

cpp -dU -P -CC -o output.rl macroedsource.rl

On 16 Dec 2010, at 17:34, Adrian Thurston <adrian.thurston at esentire.com> wrote:

> This has been a desired feature for many years. A few times I've sketched out a solution, but it has never materialized. Your request has been noted it bumps the relative priority.
> 
> Thanks,
> Adrian
> 
> On 10-12-08 01:23 PM, Iñaki Baz Castillo wrote:
>> Hi, my Ragel grammar have many lines like "Via" below:
>> 
>>  via_parm   = ( sent_protocol LWS sent_by ( SEMI ( via_branch |
>> header_param ) )* )
>>                     >start_value %store_value;
>>  Via           = ( "Via"i | "v"i )>write_value>start_field
>> %write_field HCOLON via_parm
>>                     ( COMMA %write_value via_parm )*;
>> 
>> 
>> So I would like to use smething like a C #define. This is, adding at
>> the top of my Ragel file:
>> 
>>   #define COMMA_SEPARATED_VALUES(VALUE) ">write_value>start_field
>>              %write_field HCOLON VALUE ( COMMA %write_value VALUE )*;"
>> 
>> And then in the machine write:
>> 
>>   Via = ( "Via"i | "v"i ) COMMA_SEPARATED_VALUE(via_parm)
>> 
>> 
>> Of course this doesn't work. Is there a way to use "define" macros in
>> Ragel prior to parsing the Ragel grammar? or must I use m4?
>> 
>> Thanks a lot.
>> 
>> 
> 
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From joseph.stewart at gmail.com  Thu Dec 16 20:02:00 2010
From: joseph.stewart at gmail.com (Joseph Stewart)
Date: Thu, 16 Dec 2010 15:02:00 -0500
Subject: [ragel-users] Work On Binary datagrams
In-Reply-To: <4D0A5B9E.3080802@esentire.com>
References: <AANLkTinniK24e+PJR_VLK9UES+ozPZNnki3Y5j+h-NUv@mail.gmail.com>
	<4CFD287D.3010004@esentire.com>
	<AANLkTi=-aYB-dKhU1WR0uhLWSQtE8WWfOBo=3+0prnV7@mail.gmail.com>
	<4D0A5B9E.3080802@esentire.com>
Message-ID: <AANLkTiki4OQxDZShmKaRX+ADCTJk8_aBaHc_CVJC_tkd@mail.gmail.com>

Thanks. I'll be keeping an eye out for this and try to contribute if I come
up with any compelling ideas.

In the meantime, let me drone about my current state machine... looking at
the output from graphviz, it looks like the complexity is greater in the
graph output than what I expected (indeed I'm trying to sell my team on the
ragel approach, with one metric being that the state machines are
understandable via the graphviz output). This makes me think I've specified
my machine poorly.

At a high-level my data looks like:

open xml-like tag with parameters type and info
length
binary blog of length bytes
close xml-like tag

I'm hoping someone can increase my wisdom on matters of this sort.

BR,

-joe

On Thu, Dec 16, 2010 at 1:34 PM, Adrian Thurston <
adrian.thurston at esentire.com> wrote:

> Right now there is no 'right' way. There are actually are many different
> ways each with their own ups and downs. There is some work I want to do on
> conditions to ease length processing (comes up at work a lot) and I'm hoping
> to soon be able to prescribe a recommended way of dealing with lengths that
> is general enough to apply to the majority of cases that I see.
>
>
> On 10-12-16 06:24 AM, Joseph Stewart wrote:
>
>> Adrian,
>>
>> Do you have any tips or small examples for dealing with lengths? While I
>> have something that works, it doesn't feel right and I don't have the
>> experience with Ragel to know if I'm doing this right.
>>
>> Below is a shell I've started to parse/validate binary chunks out of
>> XML-like tags (BTW, I did not create the format... I'm just the victim).
>> Eventually I need to parse data inside the Bin chunks.
>>
>> The graphviz output for this is so gigantic that I think I'm doing
>> something fundamentally wrong.
>>
>> Suggestions are greatly appreciated!
>>
>> -joe
>>
>> --- code follows ---
>>
>> #include <stdio.h>
>>
>> /*
>>
>> chunks in file look like
>>
>> <XRNDATA08192020001>LenData</XRNDATA>
>> where "08192" is an ASCII type designator (can expect other types)
>> where "020001" is an ASCII information field
>> where Len is a 4-byte little endian length designator
>> where Data is binary data of Len length
>>
>> */
>>
>> #define XRN 'X', 'R', 'N', 'D', 'A', 'T', 'A'
>> #define T1 '0', '8', '1', '9', '2'
>> #define T2 '0', '0', '0', '1', '6'
>> #define T3 '0', '0', '0', '0', '8'
>> #define T4 '0', '0', '0', '0', '1'
>> #define I1 '0', '2', '0', '0', '0', '1'
>>
>> %%{
>> machine tds;
>> write data;
>> }%%
>>
>> int main() {
>> int len = 0;
>> unsigned char buf[] = {
>> '<', XRN, T1, I1, '>', 0, 0, 0, 5, 48,49,50,51,52, '<', '/', XRN, '>',
>> '<', XRN, T2, I1, '>', 0, 0, 0, 1, 10, '<', '/', XRN, '>',
>> '<', XRN, T3, I1, '>', 0, 0, 0, 1, 10, '<', '/', XRN, '>',
>> '<', XRN, T4, I1, '>', 0, 0, 0, 1, 10, '<', '/', XRN, '>',
>> '<', XRN, T1, I1, '>', 0, 0, 0, 0, '<', '/', XRN, '>',
>> };
>> int cs, r = 0;
>> unsigned char *p = (unsigned char *)&buf;
>> unsigned char *pe = p + sizeof(buf);
>> printf("len=%d\n", len);
>> %%{
>> t1 = '08192' @{ printf("t1\n"); };
>> t2 = '00016' @{ printf("t2\n"); };
>> t3 = '00008' @{ printf("t3\n"); };
>> t4 = '00001' @{ printf("t4\n"); };
>> type = (t1 | t2 | t3 | t4);
>> info = '020001';
>> open = '<XRNDATA' type info '>' @{ printf("begin XRNDATA\n"); len = 0; };
>> len = extend{4} @{ printf("len = %d\n", (int)*p); len = (len*256) + (*p);
>> };
>> buffer = (extend when {len--})* @{ printf("[%d]:%d\n", len, *p); };
>> close = '</XRNDATA>' @{ printf("end XRNDATA\n"); };
>> expr = open len buffer close;
>> main := expr*;
>> write init;
>> write exec;
>> }%%
>> return 0;
>> }
>>
>>
>>
>> On Mon, Dec 6, 2010 at 1:16 PM, Adrian Thurston
>> <adrian.thurston at esentire.com <mailto:adrian.thurston at esentire.com>>
>> wrote:
>>
>>    I use ragel to parse binary protocols at work. Often, the most
>>    difficult part is dealing with lengths, or counts of things. A good
>>    example is the DNS protocol. There are several sections of N blocks
>>    of questions and resource records items. Inside the blocks you must
>>    also deal with lengths in names.
>>
>>    Unfortunately, there are not many open examples of parsing this way.
>>    Start by looking in the manual. I would like to improve Ragel's
>>    support for this kind of parsing.
>>
>>    -Adrian
>>
>>
>>    On 10-12-03 02:53 AM, Vitaly V. Ch wrote:
>>
>>        Hi!
>>
>>        I'm interested in any tips or examples of using ragel on binary
>>        datagrams.
>>
>>        \\wbr Vitaly Chernooky
>>
>>        _______________________________________________
>>        ragel-users mailing list
>>        ragel-users at complang.org <mailto:ragel-users at complang.org>
>>
>>        http://www.complang.org/mailman/listinfo/ragel-users
>>
>>
>>    _______________________________________________
>>    ragel-users mailing list
>>    ragel-users at complang.org <mailto:ragel-users at complang.org>
>>
>>    http://www.complang.org/mailman/listinfo/ragel-users
>>
>>
>>
>>
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at complang.org
>> http://www.complang.org/mailman/listinfo/ragel-users
>>
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel/attachments/20101216/6802815c/attachment.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From ibc at aliax.net  Fri Dec 17 17:15:16 2010
From: ibc at aliax.net (=?UTF-8?Q?I=C3=B1aki_Baz_Castillo?=)
Date: Fri, 17 Dec 2010 18:15:16 +0100
Subject: [ragel-users] Doubt about actions prioritity
In-Reply-To: <4D0A4E06.3040201@esentire.com>
References: <AANLkTimyJLVOUaThaQbvK-LajP7WvjTZyC6doTs5BgfV@mail.gmail.com>
	<4D0A4E06.3040201@esentire.com>
Message-ID: <AANLkTikB2dC-Jb8ArKyzT9+7BK30cMQE9-95SqQs1V2D@mail.gmail.com>

2010/12/16 Adrian Thurston <adrian.thurston at esentire.com>:
> Yes it is always true. There is a section in the manual on this topic.

Thanks, I had already confirmed it by means of facts and testing, but
it's nice to know it0s the expected (and documented) behavior :)

-- 
Iñaki Baz Castillo
<ibc at aliax.net>

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From johannespfau at googlemail.com  Mon Dec 20 11:03:15 2010
From: johannespfau at googlemail.com (Johannes Pfau)
Date: Mon, 20 Dec 2010 12:03:15 +0100
Subject: [ragel-users] [PATCH] D2 support
Message-ID: <4D0F37F3.3050001@gmail.com>

Hello,
I attached a patch to add D2 support to Ragel. D2 is quite different
from D1 so I created new D2 subclasses in the cd* files. I chose -E for
the commandline switch, but it could be changed to something else. D2
also needs a special syntax for const pointers: const(uint)* is a
mutable pointer to a const uint. I introduced a PTR_CONST_END function
to generate that D2 output. The generated D2 code is entirely correct
now and I tested it with some HTML header parsers.

There's one performance related problem though: In D2 a ubyte[] is
different from a ubyte[n], even if both arrays are initialized at
compile time. The ubyte[] generates a resizeable array at runtime, which
causes a performance problem. The ubyte[n] syntax should instead be used
for static constant arrays. But as ragel doesn't pass the number of
array entries to the OPEN_ARRAY function, there's no easy way to fix
that. So I wanted to ask for advice on how to implement that properly.

-- 
Johannes Pfau

-------------- next part --------------
A non-text attachment was scrubbed...
Name: d2.patch
Type: text/x-patch
Size: 18965 bytes
Desc: not available
URL: <http://www.colm.net/pipermail/ragel/attachments/20101220/bbca977b/attachment.bin>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From thurston at complang.org  Tue Dec 21 06:22:15 2010
From: thurston at complang.org (Adrian Thurston)
Date: Mon, 20 Dec 2010 22:22:15 -0800
Subject: [ragel-users] [PATCH] D2 support
In-Reply-To: <4D0F37F3.3050001@gmail.com>
References: <4D0F37F3.3050001@gmail.com>
Message-ID: <4D104797.5040304@complang.org>

Hi thanks for your patch! I'm hoping to integrate it in the next couple 
of weeks. At that time I'll look into the issue of dynamic arrays that 
you pointed out.

Regards,
  Adrian

Johannes Pfau wrote:
> Hello,
> I attached a patch to add D2 support to Ragel. D2 is quite different
> from D1 so I created new D2 subclasses in the cd* files. I chose -E for
> the commandline switch, but it could be changed to something else. D2
> also needs a special syntax for const pointers: const(uint)* is a
> mutable pointer to a const uint. I introduced a PTR_CONST_END function
> to generate that D2 output. The generated D2 code is entirely correct
> now and I tested it with some HTML header parsers.
> 
> There's one performance related problem though: In D2 a ubyte[] is
> different from a ubyte[n], even if both arrays are initialized at
> compile time. The ubyte[] generates a resizeable array at runtime, which
> causes a performance problem. The ubyte[n] syntax should instead be used
> for static constant arrays. But as ragel doesn't pass the number of
> array entries to the OPEN_ARRAY function, there's no easy way to fix
> that. So I wanted to ask for advice on how to implement that properly.
> 
> 
> 
> ------------------------------------------------------------------------
> 
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From johannespfau at googlemail.com  Tue Dec 21 10:10:39 2010
From: johannespfau at googlemail.com (Johannes Pfau)
Date: Tue, 21 Dec 2010 11:10:39 +0100
Subject: [ragel-users] [PATCH] D2 support
In-Reply-To: <4D104797.5040304@complang.org>
References: <4D0F37F3.3050001@gmail.com> <4D104797.5040304@complang.org>
Message-ID: <4D107D1F.9040502@gmail.com>

On 21.12.2010 07:22, Adrian Thurston wrote:
> Hi thanks for your patch! I'm hoping to integrate it in the next
> couple of weeks. At that time I'll look into the issue of dynamic
> arrays that you pointed out.
>
> Regards,
>  Adrian
>
> Johannes Pfau wrote:
>> Hello,
>> I attached a patch to add D2 support to Ragel. D2 is quite different
>> from D1 so I created new D2 subclasses in the cd* files. I chose -E for
>> the commandline switch, but it could be changed to something else. D2
>> also needs a special syntax for const pointers: const(uint)* is a
>> mutable pointer to a const uint. I introduced a PTR_CONST_END function
>> to generate that D2 output. The generated D2 code is entirely correct
>> now and I tested it with some HTML header parsers.
>>
>> There's one performance related problem though: In D2 a ubyte[] is
>> different from a ubyte[n], even if both arrays are initialized at
>> compile time. The ubyte[] generates a resizeable array at runtime, which
>> causes a performance problem. The ubyte[n] syntax should instead be used
>> for static constant arrays. But as ragel doesn't pass the number of
>> array entries to the OPEN_ARRAY function, there's no easy way to fix
>> that. So I wanted to ask for advice on how to implement that properly.
>>
>>
>>
>> ------------------------------------------------------------------------
>>
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at complang.org
>> http://www.complang.org/mailman/listinfo/ragel-users
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users
Great!
When I asked about the array issue in the D newsgroup someone reported
another problem with the codegen: The D compiler sometimes needs two {
around the action code to correctly recognize it as a scope. I attached
an updated patch.

-- 
Johannes Pfau

-------------- next part --------------
A non-text attachment was scrubbed...
Name: ragel-d2.patch
Type: text/x-patch
Size: 20664 bytes
Desc: not available
URL: <http://www.colm.net/pipermail/ragel/attachments/20101221/f6ef02a0/attachment.bin>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From adrian.thurston at esentire.com  Tue Dec 21 17:48:07 2010
From: adrian.thurston at esentire.com (Adrian Thurston)
Date: Tue, 21 Dec 2010 09:48:07 -0800
Subject: [ragel-users] [PATCH] D2 support
In-Reply-To: <4D107D1F.9040502@gmail.com>
References: <4D0F37F3.3050001@gmail.com> <4D104797.5040304@complang.org>
	<4D107D1F.9040502@gmail.com>
Message-ID: <4D10E857.8040900@esentire.com>

Is it expected thath D2 will ultimately supersede D1? This is the first 
that I've heard of there being a new major revision of the language.

-Adrian

On 10-12-21 02:10 AM, Johannes Pfau wrote:
> On 21.12.2010 07:22, Adrian Thurston wrote:
>> Hi thanks for your patch! I'm hoping to integrate it in the next
>> couple of weeks. At that time I'll look into the issue of dynamic
>> arrays that you pointed out.
>>
>> Regards,
>>   Adrian
>>
>> Johannes Pfau wrote:
>>> Hello,
>>> I attached a patch to add D2 support to Ragel. D2 is quite different
>>> from D1 so I created new D2 subclasses in the cd* files. I chose -E for
>>> the commandline switch, but it could be changed to something else. D2
>>> also needs a special syntax for const pointers: const(uint)* is a
>>> mutable pointer to a const uint. I introduced a PTR_CONST_END function
>>> to generate that D2 output. The generated D2 code is entirely correct
>>> now and I tested it with some HTML header parsers.
>>>
>>> There's one performance related problem though: In D2 a ubyte[] is
>>> different from a ubyte[n], even if both arrays are initialized at
>>> compile time. The ubyte[] generates a resizeable array at runtime, which
>>> causes a performance problem. The ubyte[n] syntax should instead be used
>>> for static constant arrays. But as ragel doesn't pass the number of
>>> array entries to the OPEN_ARRAY function, there's no easy way to fix
>>> that. So I wanted to ask for advice on how to implement that properly.
>>>
>>>
>>>
>>> ------------------------------------------------------------------------
>>>
>>> _______________________________________________
>>> ragel-users mailing list
>>> ragel-users at complang.org
>>> http://www.complang.org/mailman/listinfo/ragel-users
>>
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at complang.org
>> http://www.complang.org/mailman/listinfo/ragel-users
> Great!
> When I asked about the array issue in the D newsgroup someone reported
> another problem with the codegen: The D compiler sometimes needs two {
> around the action code to correctly recognize it as a scope. I attached
> an updated patch.
>
>
>
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From johannespfau at googlemail.com  Tue Dec 21 19:36:47 2010
From: johannespfau at googlemail.com (Johannes Pfau)
Date: Tue, 21 Dec 2010 20:36:47 +0100
Subject: [ragel-users] [PATCH] D2 support
In-Reply-To: <4D10E857.8040900@esentire.com>
References: <4D0F37F3.3050001@gmail.com>
	<4D104797.5040304@complang.org>	<4D107D1F.9040502@gmail.com>
	<4D10E857.8040900@esentire.com>
Message-ID: <4D1101CF.9080500@gmail.com>

On 21.12.2010 18:48, Adrian Thurston wrote:
> Is it expected thath D2 will ultimately supersede D1? This is the
> first that I've heard of there being a new major revision of the
> language.
>
> -Adrian
>
> On 10-12-21 02:10 AM, Johannes Pfau wrote:
>> On 21.12.2010 07:22, Adrian Thurston wrote:
>>> Hi thanks for your patch! I'm hoping to integrate it in the next
>>> couple of weeks. At that time I'll look into the issue of dynamic
>>> arrays that you pointed out.
>>>
>>> Regards,
>>>   Adrian
>>>
>>> Johannes Pfau wrote:
>>>> Hello,
>>>> I attached a patch to add D2 support to Ragel. D2 is quite different
>>>> from D1 so I created new D2 subclasses in the cd* files. I chose -E
>>>> for
>>>> the commandline switch, but it could be changed to something else. D2
>>>> also needs a special syntax for const pointers: const(uint)* is a
>>>> mutable pointer to a const uint. I introduced a PTR_CONST_END function
>>>> to generate that D2 output. The generated D2 code is entirely correct
>>>> now and I tested it with some HTML header parsers.
>>>>
>>>> There's one performance related problem though: In D2 a ubyte[] is
>>>> different from a ubyte[n], even if both arrays are initialized at
>>>> compile time. The ubyte[] generates a resizeable array at runtime,
>>>> which
>>>> causes a performance problem. The ubyte[n] syntax should instead be
>>>> used
>>>> for static constant arrays. But as ragel doesn't pass the number of
>>>> array entries to the OPEN_ARRAY function, there's no easy way to fix
>>>> that. So I wanted to ask for advice on how to implement that properly.
>>>>
>>>>
>>>>
>>>> ------------------------------------------------------------------------
>>>>
>>>>
>>>> _______________________________________________
>>>> ragel-users mailing list
>>>> ragel-users at complang.org
>>>> http://www.complang.org/mailman/listinfo/ragel-users
>>>
>>> _______________________________________________
>>> ragel-users mailing list
>>> ragel-users at complang.org
>>> http://www.complang.org/mailman/listinfo/ragel-users
>> Great!
>> When I asked about the array issue in the D newsgroup someone reported
>> another problem with the codegen: The D compiler sometimes needs two {
>> around the action code to correctly recognize it as a scope. I attached
>> an updated patch.
>>
>>
>>
>>
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at complang.org
>> http://www.complang.org/mailman/listinfo/ragel-users
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users
I'm not sure if D2 will really supersede D1. The language designers
(Walter and Andrei) definitely promote D2 a lot lately, but many D1
users don't want to switch to D2 (yet). D2 added so many new features
that it's sometimes considered as a completely new language. And the D1
compiler is also still supported; new bugfix releases are published
about every month.

-- 
Johannes Pfau


_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From thurston at complang.org  Sat Dec 25 00:10:00 2010
From: thurston at complang.org (Adrian Thurston)
Date: Fri, 24 Dec 2010 16:10:00 -0800
Subject: [ragel-users] Work On Binary datagrams
In-Reply-To: <AANLkTiki4OQxDZShmKaRX+ADCTJk8_aBaHc_CVJC_tkd@mail.gmail.com>
References: <AANLkTinniK24e+PJR_VLK9UES+ozPZNnki3Y5j+h-NUv@mail.gmail.com>	<4CFD287D.3010004@esentire.com>	<AANLkTi=-aYB-dKhU1WR0uhLWSQtE8WWfOBo=3+0prnV7@mail.gmail.com>	<4D0A5B9E.3080802@esentire.com>
	<AANLkTiki4OQxDZShmKaRX+ADCTJk8_aBaHc_CVJC_tkd@mail.gmail.com>
Message-ID: <4D153658.2070605@complang.org>

I had a chance to have a little closer look. Do something like this.

Note theat the %when !check  syntax isn't documented yet. It's been 
around for a few years and works (I use it at work), I'm just not 
totally happy with the implementation.

action check {len--}

buffer =
     (any when check)*
     %when !check
     @{ printf("[%d]:%d\n", len, *p); };

close =
     '</XRNDATA>'
     @{ printf("end XRNDATA\n"); };

expr = open len buffer close;

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From joseph.stewart at gmail.com  Sat Dec 25 00:46:02 2010
From: joseph.stewart at gmail.com (Joseph Stewart)
Date: Fri, 24 Dec 2010 19:46:02 -0500
Subject: [ragel-users] Work On Binary datagrams
In-Reply-To: <4D153658.2070605@complang.org>
References: <AANLkTinniK24e+PJR_VLK9UES+ozPZNnki3Y5j+h-NUv@mail.gmail.com>
	<4CFD287D.3010004@esentire.com>
	<AANLkTi=-aYB-dKhU1WR0uhLWSQtE8WWfOBo=3+0prnV7@mail.gmail.com>
	<4D0A5B9E.3080802@esentire.com>
	<AANLkTiki4OQxDZShmKaRX+ADCTJk8_aBaHc_CVJC_tkd@mail.gmail.com>
	<4D153658.2070605@complang.org>
Message-ID: <AANLkTikaqzR6jdD31qjEqrfpKub6KJ1x-XSpr5aGpi9u@mail.gmail.com>

That's totally awesome (from a graphviz point of view at least)... the
parser works and the graphviz output is approachable.

Thanks for the early X-mas present!

-joe

On Fri, Dec 24, 2010 at 7:10 PM, Adrian Thurston <thurston at complang.org>wrote:

> I had a chance to have a little closer look. Do something like this.
>
> Note theat the %when !check  syntax isn't documented yet. It's been around
> for a few years and works (I use it at work), I'm just not totally happy
> with the implementation.
>
> action check {len--}
>
> buffer =
>    (any when check)*
>    %when !check
>
>    @{ printf("[%d]:%d\n", len, *p); };
>
> close =
>    '</XRNDATA>'
>    @{ printf("end XRNDATA\n"); };
>
> expr = open len buffer close;
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel/attachments/20101224/fc863c21/attachment.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From ibc at aliax.net  Thu Dec 30 00:47:09 2010
From: ibc at aliax.net (=?UTF-8?Q?I=C3=B1aki_Baz_Castillo?=)
Date: Thu, 30 Dec 2010 01:47:09 +0100
Subject: [ragel-users] Conditional parsing, is it possible?
Message-ID: <AANLkTi=0A+RAyofScD0=R2UQNSdrbxxEy6Fg62X8Wz8P@mail.gmail.com>

Hi, I wonder if there is a way to parse (or not) some fragments of the
stream depending on previous parsed elements.

For example, in HTTP, imagine I just want to parse a custom header
"X-MyHeader" (which has a specific value format)  in case the request
method is POST. But in case it's a GET then I just want to store the
header raw value.

I've never found a way to achieve it, but maybe I miss something :)

Thanks a lot.

-- 
Iñaki Baz Castillo
<ibc at aliax.net>

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From ibc at aliax.net  Thu Dec 30 01:26:48 2010
From: ibc at aliax.net (=?UTF-8?Q?I=C3=B1aki_Baz_Castillo?=)
Date: Thu, 30 Dec 2010 02:26:48 +0100
Subject: [ragel-users] Conditional parsing, is it possible?
In-Reply-To: <AANLkTi=0A+RAyofScD0=R2UQNSdrbxxEy6Fg62X8Wz8P@mail.gmail.com>
References: <AANLkTi=0A+RAyofScD0=R2UQNSdrbxxEy6Fg62X8Wz8P@mail.gmail.com>
Message-ID: <AANLkTi=-69sE81dnEDyvAYs7ZzDPSwFhan63PmOR=HMD@mail.gmail.com>

2010/12/30 Iñaki Baz Castillo <ibc at aliax.net>:
> Hi, I wonder if there is a way to parse (or not) some fragments of the
> stream depending on previous parsed elements.
>
> For example, in HTTP, imagine I just want to parse a custom header
> "X-MyHeader" (which has a specific value format)  in case the request
> method is POST. But in case it's a GET then I just want to store the
> header raw value.

This is, there would be two valid syntax for "X-MyHeader":


  generic_value = any* -CRLF;
  x_value = [0-9] ":" [a-z]+;
  x_myheader_value = generic_value | x_value;

If a previous field of the stream (the request method) is POST (an
action could set a variable) I want 'x_myheader_value' just to be
checked with 'x_value', and if the method is other, then
'x_myheader_value' should be just checked with 'generic_value'.

Thanks for any suggestion or clarification.


-- 
Iñaki Baz Castillo
<ibc at aliax.net>

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From adrian.thurston at esentire.com  Thu Dec 30 01:26:23 2010
From: adrian.thurston at esentire.com (Adrian Thurston)
Date: Wed, 29 Dec 2010 17:26:23 -0800
Subject: [ragel-users] Conditional parsing, is it possible?
In-Reply-To: <AANLkTi=-69sE81dnEDyvAYs7ZzDPSwFhan63PmOR=HMD@mail.gmail.com>
References: <AANLkTi=0A+RAyofScD0=R2UQNSdrbxxEy6Fg62X8Wz8P@mail.gmail.com>
	<AANLkTi=-69sE81dnEDyvAYs7ZzDPSwFhan63PmOR=HMD@mail.gmail.com>
Message-ID: <4D1BDFBF.2040608@esentire.com>

Hi Iñaki,

There are a few approaches. You can do it using fgoto/fcall/fret, but 
then you lose the single-regex property. You can also do it using 
conditions, which are a more recent feature. The drawback there is that 
you run into trouble if using int and unsigned int alphabet types (as 
opposed to char). That won't affect you though. See the manual and the 
mailing list for more info about conditions.

-Adrian

On 10-12-29 05:26 PM, Iñaki Baz Castillo wrote:
> 2010/12/30 Iñaki Baz Castillo<ibc at aliax.net>:
>> Hi, I wonder if there is a way to parse (or not) some fragments of the
>> stream depending on previous parsed elements.
>>
>> For example, in HTTP, imagine I just want to parse a custom header
>> "X-MyHeader" (which has a specific value format)  in case the request
>> method is POST. But in case it's a GET then I just want to store the
>> header raw value.
>
> This is, there would be two valid syntax for "X-MyHeader":
>
>
>    generic_value = any* -CRLF;
>    x_value = [0-9] ":" [a-z]+;
>    x_myheader_value = generic_value | x_value;
>
> If a previous field of the stream (the request method) is POST (an
> action could set a variable) I want 'x_myheader_value' just to be
> checked with 'x_value', and if the method is other, then
> 'x_myheader_value' should be just checked with 'generic_value'.
>
> Thanks for any suggestion or clarification.
>
>

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From ibc at aliax.net  Thu Dec 30 02:17:27 2010
From: ibc at aliax.net (=?UTF-8?Q?I=C3=B1aki_Baz_Castillo?=)
Date: Thu, 30 Dec 2010 03:17:27 +0100
Subject: [ragel-users] Conditional parsing, is it possible?
In-Reply-To: <4D1BDFBF.2040608@esentire.com>
References: <AANLkTi=0A+RAyofScD0=R2UQNSdrbxxEy6Fg62X8Wz8P@mail.gmail.com>
	<AANLkTi=-69sE81dnEDyvAYs7ZzDPSwFhan63PmOR=HMD@mail.gmail.com>
	<4D1BDFBF.2040608@esentire.com>
Message-ID: <AANLkTimQZeOcAiC_M8to48rY7N=XtGUwQScwB9yNKrhb@mail.gmail.com>

2010/12/30 Adrian Thurston <adrian.thurston at esentire.com>:
> You can also do it using conditions, which are a more recent feature.

I got it! great :)

Thanks a lot, I missed the new section (last one) in current manual.

-- 
Iñaki Baz Castillo
<ibc at aliax.net>

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From vitaly.v.ch at chernooky.com  Fri Dec  3 10:53:08 2010
From: vitaly.v.ch at chernooky.com (Vitaly V. Ch)
Date: Fri, 3 Dec 2010 12:53:08 +0200
Subject: [ragel-users] Work On Binary datagrams
Message-ID: <AANLkTinniK24e+PJR_VLK9UES+ozPZNnki3Y5j+h-NUv@mail.gmail.com>

Hi!

I'm interested in any tips or examples of using ragel on binary datagrams.

\\wbr Vitaly Chernooky

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From twisolar at gmail.com  Fri Dec  3 11:17:43 2010
From: twisolar at gmail.com (Jonathan Castello)
Date: Fri, 3 Dec 2010 03:17:43 -0800
Subject: [ragel-users] Work On Binary datagrams
In-Reply-To: <AANLkTinniK24e+PJR_VLK9UES+ozPZNnki3Y5j+h-NUv@mail.gmail.com>
References: <AANLkTinniK24e+PJR_VLK9UES+ozPZNnki3Y5j+h-NUv@mail.gmail.com>
Message-ID: <AANLkTimxG-5JbXqstBaFmT7r1cfMDjPsPNsjHy+uEtk0@mail.gmail.com>

I used Ragel to build a parser for the Telnet protocol, is that what
you meant? You can find my work so far on GitHub [1].

~Jonathan

[1] https://github.com/Twisol/anachronism

On Fri, Dec 3, 2010 at 2:53 AM, Vitaly V. Ch <vitaly.v.ch at chernooky.com> wrote:
> Hi!
>
> I'm interested in any tips or examples of using ragel on binary datagrams.
>
> \\wbr Vitaly Chernooky
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users
>

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From vitaly.v.ch at chernooky.com  Fri Dec  3 11:35:11 2010
From: vitaly.v.ch at chernooky.com (Vitaly V. Ch)
Date: Fri, 3 Dec 2010 13:35:11 +0200
Subject: [ragel-users] Work On Binary datagrams
In-Reply-To: <AANLkTimxG-5JbXqstBaFmT7r1cfMDjPsPNsjHy+uEtk0@mail.gmail.com>
References: <AANLkTinniK24e+PJR_VLK9UES+ozPZNnki3Y5j+h-NUv@mail.gmail.com>
	<AANLkTimxG-5JbXqstBaFmT7r1cfMDjPsPNsjHy+uEtk0@mail.gmail.com>
Message-ID: <AANLkTinsQP2=p99knP8Xnu0tfCHG=vu2HSqgncnssqRU@mail.gmail.com>

On Fri, Dec 3, 2010 at 1:17 PM, Jonathan Castello <twisolar at gmail.com> wrote:
> I used Ragel to build a parser for the Telnet protocol, is that what
> you meant? You can find my work so far on GitHub [1].

Thanks, I't interested.

\\wbr Vitaly Chernooky

>
> ~Jonathan
>
> [1] https://github.com/Twisol/anachronism
>
> On Fri, Dec 3, 2010 at 2:53 AM, Vitaly V. Ch <vitaly.v.ch at chernooky.com> wrote:
>> Hi!
>>
>> I'm interested in any tips or examples of using ragel on binary datagrams.
>>
>> \\wbr Vitaly Chernooky
>>
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at complang.org
>> http://www.complang.org/mailman/listinfo/ragel-users
>>
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users
>

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From qkeen at yandex.ru  Fri Dec  3 23:18:52 2010
From: qkeen at yandex.ru (Qwertyon Keen)
Date: Sat, 04 Dec 2010 02:18:52 +0300
Subject: [ragel-users] parse error on line `wc -l adc.rl`+1
Message-ID: <593981291418332@web159.yandex.ru>

I've written adc.rl [ http://codepad.org/huyO8ERx ] as an attempt to define ADC protocol.
`ragel adc.rl` returns error message about parse error on line `wc -l adc.rl`+1 so I even can't figure out where error is.
I think it's a bug, so I post it here.
If you have some solution to this error -- I would appreciate your help.

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From adrian.thurston at esentire.com  Mon Dec  6 18:16:29 2010
From: adrian.thurston at esentire.com (Adrian Thurston)
Date: Mon, 06 Dec 2010 10:16:29 -0800
Subject: [ragel-users] Work On Binary datagrams
In-Reply-To: <AANLkTinniK24e+PJR_VLK9UES+ozPZNnki3Y5j+h-NUv@mail.gmail.com>
References: <AANLkTinniK24e+PJR_VLK9UES+ozPZNnki3Y5j+h-NUv@mail.gmail.com>
Message-ID: <4CFD287D.3010004@esentire.com>

I use ragel to parse binary protocols at work. Often, the most difficult 
part is dealing with lengths, or counts of things. A good example is the 
DNS protocol. There are several sections of N blocks of questions and 
resource records items. Inside the blocks you must also deal with 
lengths in names.

Unfortunately, there are not many open examples of parsing this way. 
Start by looking in the manual. I would like to improve Ragel's support 
for this kind of parsing.

-Adrian

On 10-12-03 02:53 AM, Vitaly V. Ch wrote:
> Hi!
>
> I'm interested in any tips or examples of using ragel on binary datagrams.
>
> \\wbr Vitaly Chernooky
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users
>

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From adrian.thurston at esentire.com  Mon Dec  6 18:19:36 2010
From: adrian.thurston at esentire.com (Adrian Thurston)
Date: Mon, 06 Dec 2010 10:19:36 -0800
Subject: [ragel-users] parse error on line `wc -l adc.rl`+1
In-Reply-To: <593981291418332@web159.yandex.ru>
References: <593981291418332@web159.yandex.ru>
Message-ID: <4CFD2938.9010209@esentire.com>

There is an unclosed literal string.

escape = '\';

Should be: '\\';

The error message could certainly use improvement!

-Adrian

On 10-12-03 03:18 PM, Qwertyon Keen wrote:
> I've written adc.rl [ http://codepad.org/huyO8ERx ] as an attempt to define ADC protocol.
> `ragel adc.rl` returns error message about parse error on line `wc -l adc.rl`+1 so I even can't figure out where error is.
> I think it's a bug, so I post it here.
> If you have some solution to this error -- I would appreciate your help.
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users
>

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From vitaly.v.ch at chernooky.com  Tue Dec  7 13:44:20 2010
From: vitaly.v.ch at chernooky.com (Vitaly V. Ch)
Date: Tue, 7 Dec 2010 15:44:20 +0200
Subject: [ragel-users] Own matching procedure
In-Reply-To: <AANLkTim60we1164CPkHFNQjYKGghVTNg5hEjAk29n-1e@mail.gmail.com>
References: <AANLkTim60we1164CPkHFNQjYKGghVTNg5hEjAk29n-1e@mail.gmail.com>
Message-ID: <AANLkTi=ewk+NEjsKr8c=jnU8uPCT8NuujKMxzOMjVBeV@mail.gmail.com>

Hi!

As far as I understand docs I can use own matching procedure for
"event"-detecting. But way for it is not transparent for me. I'm
interested in some tips or examples.

--
\\wbr Vitaly Chernooky

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From ibc at aliax.net  Wed Dec  8 21:23:26 2010
From: ibc at aliax.net (=?UTF-8?Q?I=C3=B1aki_Baz_Castillo?=)
Date: Wed, 8 Dec 2010 22:23:26 +0100
Subject: [ragel-users] Something like #define macros for Ragel grammar?
Message-ID: <AANLkTin8F5uHfGiOe1k1bsgYdGKXx8iHHN2dyOrMKctu@mail.gmail.com>

Hi, my Ragel grammar have many lines like "Via" below:

 via_parm   = ( sent_protocol LWS sent_by ( SEMI ( via_branch |
header_param ) )* )
                    >start_value %store_value;
 Via           = ( "Via"i | "v"i ) >write_value >start_field
%write_field HCOLON via_parm
                    ( COMMA %write_value via_parm )*;


So I would like to use smething like a C #define. This is, adding at
the top of my Ragel file:

  #define COMMA_SEPARATED_VALUES(VALUE) ">write_value >start_field
             %write_field HCOLON VALUE ( COMMA %write_value VALUE )*;"

And then in the machine write:

  Via = ( "Via"i | "v"i ) COMMA_SEPARATED_VALUE(via_parm)


Of course this doesn't work. Is there a way to use "define" macros in
Ragel prior to parsing the Ragel grammar? or must I use m4?

Thanks a lot.


-- 
Iñaki Baz Castillo
<ibc at aliax.net>

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From ibc at aliax.net  Sun Dec 12 16:54:17 2010
From: ibc at aliax.net (=?UTF-8?Q?I=C3=B1aki_Baz_Castillo?=)
Date: Sun, 12 Dec 2010 17:54:17 +0100
Subject: [ragel-users] Doubt about actions prioritity
Message-ID: <AANLkTimyJLVOUaThaQbvK-LajP7WvjTZyC6doTs5BgfV@mail.gmail.com>

Hi, let's suppose this simple case:

  user   =  token  >start_user %end_user
  host   =  token  >start_host %end_host
  uri      =  ( user "@" host )  >start_uri %end_uri
  main  := uri

I need actions being called in the following order:

- start_uri
- start_user
- end_user
- start_host
- end_host
- end_uri

Is it always true?

Thanks for any clarification.


-- 
Iñaki Baz Castillo
<ibc at aliax.net>

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From marktsuchida at gmail.com  Wed Dec 15 04:33:55 2010
From: marktsuchida at gmail.com (Mark Tsuchida)
Date: Tue, 14 Dec 2010 20:33:55 -0800
Subject: [ragel-users] Mandelbug causing segfault
Message-ID: <AANLkTi=hzxgDJnL-AUBk2R8zW7spjcwNfYVzBZT9G-QU@mail.gmail.com>

Dear Adrian,

Thank you for sharing this great tool.

I am getting a segfault when running Ragel on my input file.

Below is the simplest input file I've been able to create that
triggers the segfault (sorry it's still rather complex).
Whether or not Ragel crashes seems to be (depending on other parts of
the input file) sometimes sensitive to the names given to actions (or
at least the length of those names), among other things. Any given
input file always gives the same result (segfault or no crash),
though.

Giving Ragel the -n or -m option appears to prevent the crash, at
least with the input shown below.

Both version 6.6 and the svn head (r1683) experience the same issue.
I'm on Mac OS X 10.6 and Regal was compiled with g++ 4.2.1 (Xcode
3.2.5) (arch is x86_64 (LP64)).

Please let me know if there is anything else I can provide to help
track this down.

Thanks,
Mark


$ cat test.rl
%%{
machine test;

action action1 {}
action action2 {}

nl = ("\r\n" | [\n\r]);
kw = "aaaaa";
ident = "bbbbb" @action1;
normal = (kw | ident);

first = ([^\n\r] @action1)* . nl;

cont = (
    (" " @action1 when action1)* .
    (((([^\n\r] @action1)*) . nl @action1) when action1)
);

special = first (cont when action2)** ;

main := (normal when action1) | (special when action1);

}%%
$ ragel test.rl
Segmentation fault
$ ragel -V test.rl
Segmentation fault
$ ragel -T0 test.rl
Segmentation fault
$ ragel -T1 test.rl
Segmentation fault
$ ragel -F0 test.rl
Segmentation fault
$ ragel -F1 test.rl
Segmentation fault
$ ragel -d test.rl
Segmentation fault
$ ragel -e test.rl
Segmentation fault
$ ragel -n test.rl  # succeeds
$ ragel -m test.rl  # succeeds
$

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From marktsuchida at gmail.com  Wed Dec 15 21:55:26 2010
From: marktsuchida at gmail.com (Mark Tsuchida)
Date: Wed, 15 Dec 2010 13:55:26 -0800
Subject: [ragel-users] Mandelbug causing segfault
In-Reply-To: <AANLkTi=hzxgDJnL-AUBk2R8zW7spjcwNfYVzBZT9G-QU@mail.gmail.com>
References: <AANLkTi=hzxgDJnL-AUBk2R8zW7spjcwNfYVzBZT9G-QU@mail.gmail.com>
Message-ID: <AANLkTi=kdd7441G4yxhnnYAx=AbVmz9U6-jX_j1AkVKt@mail.gmail.com>

Hi again,

On Tue, Dec 14, 2010 at 20:33, Mark Tsuchida <marktsuchida at gmail.com> wrote:
> Dear Adrian,
>
> Thank you for sharing this great tool.
>
> I am getting a segfault when running Ragel on my input file.
>
> Below is the simplest input file I've been able to create that
> triggers the segfault (sorry it's still rather complex).
> Whether or not Ragel crashes seems to be (depending on other parts of
> the input file) sometimes sensitive to the names given to actions (or
> at least the length of those names), among other things. Any given
> input file always gives the same result (segfault or no crash),
> though.
>
> Giving Ragel the -n or -m option appears to prevent the crash, at
> least with the input shown below.
>
> Both version 6.6 and the svn head (r1683) experience the same issue.
> I'm on Mac OS X 10.6 and Regal was compiled with g++ 4.2.1 (Xcode
> 3.2.5) (arch is x86_64 (LP64)).
>
> Please let me know if there is anything else I can provide to help
> track this down.
>
> Thanks,
> Mark
>
>
> $ cat test.rl
> %%{
> machine test;
>
> action action1 {}
> action action2 {}
>
> nl = ("\r\n" | [\n\r]);
> kw = "aaaaa";
> ident = "bbbbb" @action1;
> normal = (kw | ident);
>
> first = ([^\n\r] @action1)* . nl;
>
> cont = (
>    (" " @action1 when action1)* .
>    (((([^\n\r] @action1)*) . nl @action1) when action1)
> );
>
> special = first (cont when action2)** ;
>
> main := (normal when action1) | (special when action1);
>
> }%%
> $ ragel test.rl
> Segmentation fault
> $ ragel -V test.rl
> Segmentation fault
> $ ragel -T0 test.rl
> Segmentation fault
> $ ragel -T1 test.rl
> Segmentation fault
> $ ragel -F0 test.rl
> Segmentation fault
> $ ragel -F1 test.rl
> Segmentation fault
> $ ragel -d test.rl
> Segmentation fault
> $ ragel -e test.rl
> Segmentation fault
> $ ragel -n test.rl  # succeeds
> $ ragel -m test.rl  # succeeds
> $
>

Here is a stack trace from the svn head version (trunk @ r1683):

(gdb) run test.rl
Starting program: /Users/mark/devel/ragel/trunk/ragel/ragel test.rl
Reading symbols for shared libraries ++. done

Program received signal EXC_BAD_ACCESS, Could not access memory.
Reason: KERN_INVALID_ADDRESS at address: 0x0000000000000048
0x00000001000161fb in NextTrans<TransAp>::load (this=0x7fff5fbfd788)
at fsmgraph.h:782
782                             next = trans->next;
(gdb) where
#0  0x00000001000161fb in NextTrans<TransAp>::load
(this=0x7fff5fbfd788) at fsmgraph.h:782
#1  0x0000000100016255 in NextTrans<TransAp>::set
(this=0x7fff5fbfd788, t=0x20) at fsmgraph.h:790
#2  0x0000000100025612 in PairIter<TransAp, StateCond>::findNext
(this=0x7fff5fbfd770) at fsmgraph.h:901
#3  0x0000000100025dab in PairIter<TransAp, StateCond>::PairIter
(this=0x7fff5fbfd770, list1=0x20, list2=0x10030c700) at fsmgraph.h:854
#4  0x000000010002050a in FsmAp::findEmbedExpansions
(this=0x1003085d0, expansionList=@0x7fff5fbfd9e0,
destState=0x100309900, condAction=0x100301b60, sense=true) at
fsmgraph.cpp:1298
#5  0x0000000100021b28 in FsmAp::embedCondition (this=0x1003085d0,
md=@0x7fff5fbfda50, state=0x100309900, condAction=0x100301b60,
sense=true) at fsmgraph.cpp:1403
#6  0x00000001000222f5 in FsmAp::embedCondition (this=0x1003085d0,
state=0x100309900, condAction=0x100301b60, sense=true) at
fsmgraph.cpp:1389
#7  0x0000000100029e3a in FsmAp::allTransCondition (this=0x1003085d0,
condAction=0x100301b60, sense=true) at fsmap.cpp:872
#8  0x000000010000555a in FactorWithAug::assignConditions
(this=0x100305f20, graph=0x1003085d0) at parsetree.cpp:1176
#9  0x0000000100008f34 in FactorWithAug::walk (this=0x100305f20,
pd=0x1003006e0) at parsetree.cpp:1226
#10 0x0000000100009660 in Term::walk (this=0x100306010,
pd=0x1003006e0, lastInSeq=true) at parsetree.cpp:948
#11 0x000000010000986b in Expression::walk (this=0x100306040,
pd=0x1003006e0, lastInSeq=true) at parsetree.cpp:782
#12 0x0000000100009a75 in Join::walk (this=0x100306070,
pd=0x1003006e0) at parsetree.cpp:598
#13 0x0000000100008139 in Factor::walk (this=0x1003060a0,
pd=0x1003006e0) at parsetree.cpp:1790
#14 0x0000000100008226 in FactorWithNeg::walk (this=0x100306100,
pd=0x1003006e0) at parsetree.cpp:1710
#15 0x0000000100008c74 in FactorWithRep::walk (this=0x100306130,
pd=0x1003006e0) at parsetree.cpp:1624
#16 0x0000000100008e1e in FactorWithAug::walk (this=0x100306180,
pd=0x1003006e0) at parsetree.cpp:1212
#17 0x0000000100009660 in Term::walk (this=0x100306210,
pd=0x1003006e0, lastInSeq=true) at parsetree.cpp:948
#18 0x000000010000970b in Expression::walk (this=0x100306240,
pd=0x1003006e0, lastInSeq=true) at parsetree.cpp:738
#19 0x0000000100009a75 in Join::walk (this=0x100306270,
pd=0x1003006e0) at parsetree.cpp:598
#20 0x0000000100009c94 in MachineDef::walk (this=0x1003062a0,
pd=0x1003006e0) at parsetree.cpp:533
#21 0x0000000100007f33 in VarDef::walk (this=0x100306320,
pd=0x1003006e0) at parsetree.cpp:94
#22 0x000000010000d639 in ParseData::makeInstance (this=0x1003006e0,
gdNode=0x1003062c0) at parsedata.cpp:1062
#23 0x000000010000f648 in ParseData::makeAll (this=0x1003006e0) at
parsedata.cpp:1189
#24 0x0000000100010f4d in ParseData::prepareMachineGenTBWrapped
(this=0x1003006e0, graphDictEl=0x0) at parsedata.cpp:1396
#25 0x0000000100011040 in ParseData::prepareMachineGen
(this=0x1003006e0, graphDictEl=0x0) at parsedata.cpp:1369
#26 0x0000000100048d76 in InputData::prepareMachineGen
(this=0x7fff5fbfe750) at inputdata.cpp:191
#27 0x0000000100001e33 in process (id=@0x7fff5fbfe750) at main.cpp:478
#28 0x00000001000029b2 in main (argc=2, argv=0x7fff5fbfe820) at main.cpp:559
(gdb)

Mark

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From flameeyes at gmail.com  Thu Dec 16 06:52:29 2010
From: flameeyes at gmail.com (=?UTF-8?q?Diego=20Elio=20Petten=C3=B2?=)
Date: Thu, 16 Dec 2010 07:52:29 +0100
Subject: [ragel-users] [PATCH] Fix generated code for Ruby 1.9 compatibility.
Message-ID: <1292482349-2518-1-git-send-email-flameeyes@gmail.com>

In Ruby 1.9, the String class no longer works as a C-style array of (8-bit)
characters, but supports multiple encoding. While it is obviously a task
for the developer to ensure that the data array passed to the
Ragel-generated code is in a compatible encoding, this also means that the
simple dereference is not going to work:

% ruby18 -e 'puts "foo"[0].class'
Fixnum
% ruby19 -e 'puts "foo"[0].class'
String

This is easily fixed by calling the #ord method on the dereferenced data,
which will provide the ASCII ordinal (or UNICODE codepoint) for the single
character.

The produced code works correctly both on Ruby 1.8 and 1.9.2.
---
 ragel/rubycodegen.cpp |    7 +++++--
 1 files changed, 5 insertions(+), 2 deletions(-)

diff --git a/ragel/rubycodegen.cpp b/ragel/rubycodegen.cpp
index 5117823..f329587 100644
--- a/ragel/rubycodegen.cpp
+++ b/ragel/rubycodegen.cpp
@@ -307,8 +307,11 @@ string RubyCodeGen::GET_KEY()
 		ret << ")";
 	}
 	else {
-		/* Expression for retrieving the key, use simple dereference. */
-		ret << DATA() << "[" << P() << "]";
+		/* Expression for retrieving the key, use dereference
+		 * and read ordinal, for compatibility with Ruby
+		 * 1.9.
+		 */
+		ret << DATA() << "[" << P() << "].ord";
 	}
 	return ret.str();
 }
-- 
1.7.3.3


_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From joseph.stewart at gmail.com  Thu Dec 16 14:24:29 2010
From: joseph.stewart at gmail.com (Joseph Stewart)
Date: Thu, 16 Dec 2010 09:24:29 -0500
Subject: [ragel-users] Work On Binary datagrams
In-Reply-To: <4CFD287D.3010004@esentire.com>
References: <AANLkTinniK24e+PJR_VLK9UES+ozPZNnki3Y5j+h-NUv@mail.gmail.com>
	<4CFD287D.3010004@esentire.com>
Message-ID: <AANLkTi=-aYB-dKhU1WR0uhLWSQtE8WWfOBo=3+0prnV7@mail.gmail.com>

Adrian,

Do you have any tips or small examples for dealing with lengths? While I
have something that works, it doesn't feel right and I don't have the
experience with Ragel to know if I'm doing this right.

Below is a shell I've started to parse/validate binary chunks out of
XML-like tags (BTW, I did not create the format... I'm just the victim).
Eventually I need to parse data inside the Bin chunks.

The graphviz output for this is so gigantic that I think I'm doing something
fundamentally wrong.

Suggestions are greatly appreciated!

-joe

--- code follows ---

#include <stdio.h>

/*

chunks in file look like

<XRNDATA08192020001>LenData</XRNDATA>
where "08192" is an ASCII type designator (can expect other types)
where "020001" is an ASCII information field
where Len is a 4-byte little endian length designator
where Data is binary data of Len length

*/

#define XRN 'X', 'R', 'N', 'D', 'A', 'T', 'A'
#define T1  '0', '8', '1', '9', '2'
#define T2  '0', '0', '0', '1', '6'
#define T3  '0', '0', '0', '0', '8'
#define T4  '0', '0', '0', '0', '1'
#define I1  '0', '2', '0', '0', '0', '1'

%%{
machine tds;
write data;
}%%

int main() {
int len = 0;
unsigned char buf[] = {
'<', XRN, T1, I1, '>', 0, 0, 0, 5, 48,49,50,51,52, '<', '/', XRN, '>',
'<', XRN, T2, I1, '>', 0, 0, 0, 1, 10, '<', '/', XRN, '>',
'<', XRN, T3, I1, '>', 0, 0, 0, 1, 10, '<', '/', XRN, '>',
'<', XRN, T4, I1, '>', 0, 0, 0, 1, 10, '<', '/', XRN, '>',
'<', XRN, T1, I1, '>', 0, 0, 0, 0, '<', '/', XRN, '>',
};
int cs, r = 0;
unsigned char *p = (unsigned char *)&buf;
unsigned char *pe = p + sizeof(buf);
printf("len=%d\n", len);
%%{
t1 = '08192' @{ printf("t1\n"); };
t2 = '00016' @{ printf("t2\n"); };
t3 = '00008' @{ printf("t3\n"); };
t4 = '00001' @{ printf("t4\n"); };
type = (t1 | t2 | t3 | t4);
info = '020001';
open = '<XRNDATA' type info '>' @{ printf("begin XRNDATA\n"); len = 0; };
len = extend{4} @{ printf("len = %d\n", (int)*p); len = (len*256) + (*p); };
buffer = (extend when {len--})* @{ printf("[%d]:%d\n", len, *p); };
close = '</XRNDATA>' @{ printf("end XRNDATA\n"); };
expr = open len buffer close;
main := expr*;
write init;
write exec;
}%%
return 0;
}



On Mon, Dec 6, 2010 at 1:16 PM, Adrian Thurston <
adrian.thurston at esentire.com> wrote:

> I use ragel to parse binary protocols at work. Often, the most difficult
> part is dealing with lengths, or counts of things. A good example is the DNS
> protocol. There are several sections of N blocks of questions and resource
> records items. Inside the blocks you must also deal with lengths in names.
>
> Unfortunately, there are not many open examples of parsing this way. Start
> by looking in the manual. I would like to improve Ragel's support for this
> kind of parsing.
>
> -Adrian
>
>
> On 10-12-03 02:53 AM, Vitaly V. Ch wrote:
>
>> Hi!
>>
>> I'm interested in any tips or examples of using ragel on binary datagrams.
>>
>> \\wbr Vitaly Chernooky
>>
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at complang.org
>> http://www.complang.org/mailman/listinfo/ragel-users
>>
>>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20101216/aa495f1a/attachment-0001.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From joseph.stewart at gmail.com  Thu Dec 16 14:25:29 2010
From: joseph.stewart at gmail.com (Joseph Stewart)
Date: Thu, 16 Dec 2010 09:25:29 -0500
Subject: [ragel-users] Work On Binary datagrams
In-Reply-To: <AANLkTi=-aYB-dKhU1WR0uhLWSQtE8WWfOBo=3+0prnV7@mail.gmail.com>
References: <AANLkTinniK24e+PJR_VLK9UES+ozPZNnki3Y5j+h-NUv@mail.gmail.com>
	<4CFD287D.3010004@esentire.com>
	<AANLkTi=-aYB-dKhU1WR0uhLWSQtE8WWfOBo=3+0prnV7@mail.gmail.com>
Message-ID: <AANLkTimr_B5twU4v97CTjRusbg+DQui=3vtwDbEBdyLT@mail.gmail.com>

(whoops... the text should have read "Len is a big-endian length
designator")

On Thu, Dec 16, 2010 at 9:24 AM, Joseph Stewart <joseph.stewart at gmail.com>wrote:

> Adrian,
>
> Do you have any tips or small examples for dealing with lengths? While I
> have something that works, it doesn't feel right and I don't have the
> experience with Ragel to know if I'm doing this right.
>
> Below is a shell I've started to parse/validate binary chunks out of
> XML-like tags (BTW, I did not create the format... I'm just the victim).
> Eventually I need to parse data inside the Bin chunks.
>
> The graphviz output for this is so gigantic that I think I'm doing
> something fundamentally wrong.
>
> Suggestions are greatly appreciated!
>
> -joe
>
> --- code follows ---
>
> #include <stdio.h>
>
> /*
>
> chunks in file look like
>
> <XRNDATA08192020001>LenData</XRNDATA>
> where "08192" is an ASCII type designator (can expect other types)
> where "020001" is an ASCII information field
> where Len is a 4-byte little endian length designator
> where Data is binary data of Len length
>
> */
>
> #define XRN 'X', 'R', 'N', 'D', 'A', 'T', 'A'
> #define T1  '0', '8', '1', '9', '2'
> #define T2  '0', '0', '0', '1', '6'
> #define T3  '0', '0', '0', '0', '8'
> #define T4  '0', '0', '0', '0', '1'
> #define I1  '0', '2', '0', '0', '0', '1'
>
> %%{
> machine tds;
> write data;
> }%%
>
> int main() {
> int len = 0;
> unsigned char buf[] = {
>  '<', XRN, T1, I1, '>', 0, 0, 0, 5, 48,49,50,51,52, '<', '/', XRN, '>',
> '<', XRN, T2, I1, '>', 0, 0, 0, 1, 10, '<', '/', XRN, '>',
>  '<', XRN, T3, I1, '>', 0, 0, 0, 1, 10, '<', '/', XRN, '>',
> '<', XRN, T4, I1, '>', 0, 0, 0, 1, 10, '<', '/', XRN, '>',
>  '<', XRN, T1, I1, '>', 0, 0, 0, 0, '<', '/', XRN, '>',
> };
>  int cs, r = 0;
> unsigned char *p = (unsigned char *)&buf;
> unsigned char *pe = p + sizeof(buf);
>  printf("len=%d\n", len);
> %%{
> t1 = '08192' @{ printf("t1\n"); };
>  t2 = '00016' @{ printf("t2\n"); };
> t3 = '00008' @{ printf("t3\n"); };
>  t4 = '00001' @{ printf("t4\n"); };
> type = (t1 | t2 | t3 | t4);
>  info = '020001';
> open = '<XRNDATA' type info '>' @{ printf("begin XRNDATA\n"); len = 0; };
>  len = extend{4} @{ printf("len = %d\n", (int)*p); len = (len*256) + (*p);
> };
> buffer = (extend when {len--})* @{ printf("[%d]:%d\n", len, *p); };
>  close = '</XRNDATA>' @{ printf("end XRNDATA\n"); };
> expr = open len buffer close;
>  main := expr*;
> write init;
> write exec;
>  }%%
> return 0;
> }
>
>
>
> On Mon, Dec 6, 2010 at 1:16 PM, Adrian Thurston <
> adrian.thurston at esentire.com> wrote:
>
>> I use ragel to parse binary protocols at work. Often, the most difficult
>> part is dealing with lengths, or counts of things. A good example is the DNS
>> protocol. There are several sections of N blocks of questions and resource
>> records items. Inside the blocks you must also deal with lengths in names.
>>
>> Unfortunately, there are not many open examples of parsing this way. Start
>> by looking in the manual. I would like to improve Ragel's support for this
>> kind of parsing.
>>
>> -Adrian
>>
>>
>> On 10-12-03 02:53 AM, Vitaly V. Ch wrote:
>>
>>> Hi!
>>>
>>> I'm interested in any tips or examples of using ragel on binary
>>> datagrams.
>>>
>>> \\wbr Vitaly Chernooky
>>>
>>> _______________________________________________
>>> ragel-users mailing list
>>> ragel-users at complang.org
>>> http://www.complang.org/mailman/listinfo/ragel-users
>>>
>>>
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at complang.org
>> http://www.complang.org/mailman/listinfo/ragel-users
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20101216/0a8fad0f/attachment-0001.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From adrian.thurston at esentire.com  Thu Dec 16 17:34:47 2010
From: adrian.thurston at esentire.com (Adrian Thurston)
Date: Thu, 16 Dec 2010 09:34:47 -0800
Subject: [ragel-users] Something like #define macros for Ragel grammar?
In-Reply-To: <AANLkTin8F5uHfGiOe1k1bsgYdGKXx8iHHN2dyOrMKctu@mail.gmail.com>
References: <AANLkTin8F5uHfGiOe1k1bsgYdGKXx8iHHN2dyOrMKctu@mail.gmail.com>
Message-ID: <4D0A4DB7.2090107@esentire.com>

This has been a desired feature for many years. A few times I've 
sketched out a solution, but it has never materialized. Your request has 
been noted it bumps the relative priority.

Thanks,
  Adrian

On 10-12-08 01:23 PM, Iñaki Baz Castillo wrote:
> Hi, my Ragel grammar have many lines like "Via" below:
>
>   via_parm   = ( sent_protocol LWS sent_by ( SEMI ( via_branch |
> header_param ) )* )
>                      >start_value %store_value;
>   Via           = ( "Via"i | "v"i )>write_value>start_field
> %write_field HCOLON via_parm
>                      ( COMMA %write_value via_parm )*;
>
>
> So I would like to use smething like a C #define. This is, adding at
> the top of my Ragel file:
>
>    #define COMMA_SEPARATED_VALUES(VALUE) ">write_value>start_field
>               %write_field HCOLON VALUE ( COMMA %write_value VALUE )*;"
>
> And then in the machine write:
>
>    Via = ( "Via"i | "v"i ) COMMA_SEPARATED_VALUE(via_parm)
>
>
> Of course this doesn't work. Is there a way to use "define" macros in
> Ragel prior to parsing the Ragel grammar? or must I use m4?
>
> Thanks a lot.
>
>

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From adrian.thurston at esentire.com  Thu Dec 16 17:36:06 2010
From: adrian.thurston at esentire.com (Adrian Thurston)
Date: Thu, 16 Dec 2010 09:36:06 -0800
Subject: [ragel-users] Doubt about actions prioritity
In-Reply-To: <AANLkTimyJLVOUaThaQbvK-LajP7WvjTZyC6doTs5BgfV@mail.gmail.com>
References: <AANLkTimyJLVOUaThaQbvK-LajP7WvjTZyC6doTs5BgfV@mail.gmail.com>
Message-ID: <4D0A4E06.3040201@esentire.com>

Yes it is always true. There is a section in the manual on this topic.

-Adrian

On 10-12-12 08:54 AM, Iñaki Baz Castillo wrote:
> Hi, let's suppose this simple case:
>
>    user   =  token>start_user %end_user
>    host   =  token>start_host %end_host
>    uri      =  ( user "@" host )>start_uri %end_uri
>    main  := uri
>
> I need actions being called in the following order:
>
> - start_uri
> - start_user
> - end_user
> - start_host
> - end_host
> - end_uri
>
> Is it always true?
>
> Thanks for any clarification.
>
>

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From adrian.thurston at esentire.com  Thu Dec 16 18:28:12 2010
From: adrian.thurston at esentire.com (Adrian Thurston)
Date: Thu, 16 Dec 2010 10:28:12 -0800
Subject: [ragel-users] Mandelbug causing segfault
In-Reply-To: <AANLkTi=kdd7441G4yxhnnYAx=AbVmz9U6-jX_j1AkVKt@mail.gmail.com>
References: <AANLkTi=hzxgDJnL-AUBk2R8zW7spjcwNfYVzBZT9G-QU@mail.gmail.com>
	<AANLkTi=kdd7441G4yxhnnYAx=AbVmz9U6-jX_j1AkVKt@mail.gmail.com>
Message-ID: <4D0A5A3C.4020307@esentire.com>

Hi Mark, Thanks for reporting this. The bug has been recorded (in my 
private tracker). Will aim to fix for 6.7.

Thanks,
  Adrian

On 10-12-15 01:55 PM, Mark Tsuchida wrote:
> Hi again,
>
> On Tue, Dec 14, 2010 at 20:33, Mark Tsuchida<marktsuchida at gmail.com>  wrote:
>> Dear Adrian,
>>
>> Thank you for sharing this great tool.
>>
>> I am getting a segfault when running Ragel on my input file.
>>
>> Below is the simplest input file I've been able to create that
>> triggers the segfault (sorry it's still rather complex).
>> Whether or not Ragel crashes seems to be (depending on other parts of
>> the input file) sometimes sensitive to the names given to actions (or
>> at least the length of those names), among other things. Any given
>> input file always gives the same result (segfault or no crash),
>> though.
>>
>> Giving Ragel the -n or -m option appears to prevent the crash, at
>> least with the input shown below.
>>
>> Both version 6.6 and the svn head (r1683) experience the same issue.
>> I'm on Mac OS X 10.6 and Regal was compiled with g++ 4.2.1 (Xcode
>> 3.2.5) (arch is x86_64 (LP64)).
>>
>> Please let me know if there is anything else I can provide to help
>> track this down.
>>
>> Thanks,
>> Mark
>>
>>
>> $ cat test.rl
>> %%{
>> machine test;
>>
>> action action1 {}
>> action action2 {}
>>
>> nl = ("\r\n" | [\n\r]);
>> kw = "aaaaa";
>> ident = "bbbbb" @action1;
>> normal = (kw | ident);
>>
>> first = ([^\n\r] @action1)* . nl;
>>
>> cont = (
>>     (" " @action1 when action1)* .
>>     (((([^\n\r] @action1)*) . nl @action1) when action1)
>> );
>>
>> special = first (cont when action2)** ;
>>
>> main := (normal when action1) | (special when action1);
>>
>> }%%
>> $ ragel test.rl
>> Segmentation fault
>> $ ragel -V test.rl
>> Segmentation fault
>> $ ragel -T0 test.rl
>> Segmentation fault
>> $ ragel -T1 test.rl
>> Segmentation fault
>> $ ragel -F0 test.rl
>> Segmentation fault
>> $ ragel -F1 test.rl
>> Segmentation fault
>> $ ragel -d test.rl
>> Segmentation fault
>> $ ragel -e test.rl
>> Segmentation fault
>> $ ragel -n test.rl  # succeeds
>> $ ragel -m test.rl  # succeeds
>> $
>>
>
> Here is a stack trace from the svn head version (trunk @ r1683):
>
> (gdb) run test.rl
> Starting program: /Users/mark/devel/ragel/trunk/ragel/ragel test.rl
> Reading symbols for shared libraries ++. done
>
> Program received signal EXC_BAD_ACCESS, Could not access memory.
> Reason: KERN_INVALID_ADDRESS at address: 0x0000000000000048
> 0x00000001000161fb in NextTrans<TransAp>::load (this=0x7fff5fbfd788)
> at fsmgraph.h:782
> 782                             next = trans->next;
> (gdb) where
> #0  0x00000001000161fb in NextTrans<TransAp>::load
> (this=0x7fff5fbfd788) at fsmgraph.h:782
> #1  0x0000000100016255 in NextTrans<TransAp>::set
> (this=0x7fff5fbfd788, t=0x20) at fsmgraph.h:790
> #2  0x0000000100025612 in PairIter<TransAp, StateCond>::findNext
> (this=0x7fff5fbfd770) at fsmgraph.h:901
> #3  0x0000000100025dab in PairIter<TransAp, StateCond>::PairIter
> (this=0x7fff5fbfd770, list1=0x20, list2=0x10030c700) at fsmgraph.h:854
> #4  0x000000010002050a in FsmAp::findEmbedExpansions
> (this=0x1003085d0, expansionList=@0x7fff5fbfd9e0,
> destState=0x100309900, condAction=0x100301b60, sense=true) at
> fsmgraph.cpp:1298
> #5  0x0000000100021b28 in FsmAp::embedCondition (this=0x1003085d0,
> md=@0x7fff5fbfda50, state=0x100309900, condAction=0x100301b60,
> sense=true) at fsmgraph.cpp:1403
> #6  0x00000001000222f5 in FsmAp::embedCondition (this=0x1003085d0,
> state=0x100309900, condAction=0x100301b60, sense=true) at
> fsmgraph.cpp:1389
> #7  0x0000000100029e3a in FsmAp::allTransCondition (this=0x1003085d0,
> condAction=0x100301b60, sense=true) at fsmap.cpp:872
> #8  0x000000010000555a in FactorWithAug::assignConditions
> (this=0x100305f20, graph=0x1003085d0) at parsetree.cpp:1176
> #9  0x0000000100008f34 in FactorWithAug::walk (this=0x100305f20,
> pd=0x1003006e0) at parsetree.cpp:1226
> #10 0x0000000100009660 in Term::walk (this=0x100306010,
> pd=0x1003006e0, lastInSeq=true) at parsetree.cpp:948
> #11 0x000000010000986b in Expression::walk (this=0x100306040,
> pd=0x1003006e0, lastInSeq=true) at parsetree.cpp:782
> #12 0x0000000100009a75 in Join::walk (this=0x100306070,
> pd=0x1003006e0) at parsetree.cpp:598
> #13 0x0000000100008139 in Factor::walk (this=0x1003060a0,
> pd=0x1003006e0) at parsetree.cpp:1790
> #14 0x0000000100008226 in FactorWithNeg::walk (this=0x100306100,
> pd=0x1003006e0) at parsetree.cpp:1710
> #15 0x0000000100008c74 in FactorWithRep::walk (this=0x100306130,
> pd=0x1003006e0) at parsetree.cpp:1624
> #16 0x0000000100008e1e in FactorWithAug::walk (this=0x100306180,
> pd=0x1003006e0) at parsetree.cpp:1212
> #17 0x0000000100009660 in Term::walk (this=0x100306210,
> pd=0x1003006e0, lastInSeq=true) at parsetree.cpp:948
> #18 0x000000010000970b in Expression::walk (this=0x100306240,
> pd=0x1003006e0, lastInSeq=true) at parsetree.cpp:738
> #19 0x0000000100009a75 in Join::walk (this=0x100306270,
> pd=0x1003006e0) at parsetree.cpp:598
> #20 0x0000000100009c94 in MachineDef::walk (this=0x1003062a0,
> pd=0x1003006e0) at parsetree.cpp:533
> #21 0x0000000100007f33 in VarDef::walk (this=0x100306320,
> pd=0x1003006e0) at parsetree.cpp:94
> #22 0x000000010000d639 in ParseData::makeInstance (this=0x1003006e0,
> gdNode=0x1003062c0) at parsedata.cpp:1062
> #23 0x000000010000f648 in ParseData::makeAll (this=0x1003006e0) at
> parsedata.cpp:1189
> #24 0x0000000100010f4d in ParseData::prepareMachineGenTBWrapped
> (this=0x1003006e0, graphDictEl=0x0) at parsedata.cpp:1396
> #25 0x0000000100011040 in ParseData::prepareMachineGen
> (this=0x1003006e0, graphDictEl=0x0) at parsedata.cpp:1369
> #26 0x0000000100048d76 in InputData::prepareMachineGen
> (this=0x7fff5fbfe750) at inputdata.cpp:191
> #27 0x0000000100001e33 in process (id=@0x7fff5fbfe750) at main.cpp:478
> #28 0x00000001000029b2 in main (argc=2, argv=0x7fff5fbfe820) at main.cpp:559
> (gdb)
>
> Mark
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From adrian.thurston at esentire.com  Thu Dec 16 18:30:51 2010
From: adrian.thurston at esentire.com (Adrian Thurston)
Date: Thu, 16 Dec 2010 10:30:51 -0800
Subject: [ragel-users] [PATCH] Fix generated code for Ruby 1.9
	compatibility.
In-Reply-To: <1292482349-2518-1-git-send-email-flameeyes@gmail.com>
References: <1292482349-2518-1-git-send-email-flameeyes@gmail.com>
Message-ID: <4D0A5ADB.1000904@esentire.com>

Thanks, in the queue for the next release.

-Adrian

On 10-12-15 10:52 PM, Diego Elio Pettenò wrote:
> In Ruby 1.9, the String class no longer works as a C-style array of (8-bit)
> characters, but supports multiple encoding. While it is obviously a task
> for the developer to ensure that the data array passed to the
> Ragel-generated code is in a compatible encoding, this also means that the
> simple dereference is not going to work:
>
> % ruby18 -e 'puts "foo"[0].class'
> Fixnum
> % ruby19 -e 'puts "foo"[0].class'
> String
>
> This is easily fixed by calling the #ord method on the dereferenced data,
> which will provide the ASCII ordinal (or UNICODE codepoint) for the single
> character.
>
> The produced code works correctly both on Ruby 1.8 and 1.9.2.
> ---
>   ragel/rubycodegen.cpp |    7 +++++--
>   1 files changed, 5 insertions(+), 2 deletions(-)
>
> diff --git a/ragel/rubycodegen.cpp b/ragel/rubycodegen.cpp
> index 5117823..f329587 100644
> --- a/ragel/rubycodegen.cpp
> +++ b/ragel/rubycodegen.cpp
> @@ -307,8 +307,11 @@ string RubyCodeGen::GET_KEY()
>   		ret<<  ")";
>   	}
>   	else {
> -		/* Expression for retrieving the key, use simple dereference. */
> -		ret<<  DATA()<<  "["<<  P()<<  "]";
> +		/* Expression for retrieving the key, use dereference
> +		 * and read ordinal, for compatibility with Ruby
> +		 * 1.9.
> +		 */
> +		ret<<  DATA()<<  "["<<  P()<<  "].ord";
>   	}
>   	return ret.str();
>   }

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From adrian.thurston at esentire.com  Thu Dec 16 18:34:06 2010
From: adrian.thurston at esentire.com (Adrian Thurston)
Date: Thu, 16 Dec 2010 10:34:06 -0800
Subject: [ragel-users] Work On Binary datagrams
In-Reply-To: <AANLkTi=-aYB-dKhU1WR0uhLWSQtE8WWfOBo=3+0prnV7@mail.gmail.com>
References: <AANLkTinniK24e+PJR_VLK9UES+ozPZNnki3Y5j+h-NUv@mail.gmail.com>	<4CFD287D.3010004@esentire.com>
	<AANLkTi=-aYB-dKhU1WR0uhLWSQtE8WWfOBo=3+0prnV7@mail.gmail.com>
Message-ID: <4D0A5B9E.3080802@esentire.com>

Right now there is no 'right' way. There are actually are many different 
ways each with their own ups and downs. There is some work I want to do 
on conditions to ease length processing (comes up at work a lot) and I'm 
hoping to soon be able to prescribe a recommended way of dealing with 
lengths that is general enough to apply to the majority of cases that I see.

On 10-12-16 06:24 AM, Joseph Stewart wrote:
> Adrian,
>
> Do you have any tips or small examples for dealing with lengths? While I
> have something that works, it doesn't feel right and I don't have the
> experience with Ragel to know if I'm doing this right.
>
> Below is a shell I've started to parse/validate binary chunks out of
> XML-like tags (BTW, I did not create the format... I'm just the victim).
> Eventually I need to parse data inside the Bin chunks.
>
> The graphviz output for this is so gigantic that I think I'm doing
> something fundamentally wrong.
>
> Suggestions are greatly appreciated!
>
> -joe
>
> --- code follows ---
>
> #include <stdio.h>
>
> /*
>
> chunks in file look like
>
> <XRNDATA08192020001>LenData</XRNDATA>
> where "08192" is an ASCII type designator (can expect other types)
> where "020001" is an ASCII information field
> where Len is a 4-byte little endian length designator
> where Data is binary data of Len length
>
> */
>
> #define XRN 'X', 'R', 'N', 'D', 'A', 'T', 'A'
> #define T1 '0', '8', '1', '9', '2'
> #define T2 '0', '0', '0', '1', '6'
> #define T3 '0', '0', '0', '0', '8'
> #define T4 '0', '0', '0', '0', '1'
> #define I1 '0', '2', '0', '0', '0', '1'
>
> %%{
> machine tds;
> write data;
> }%%
>
> int main() {
> int len = 0;
> unsigned char buf[] = {
> '<', XRN, T1, I1, '>', 0, 0, 0, 5, 48,49,50,51,52, '<', '/', XRN, '>',
> '<', XRN, T2, I1, '>', 0, 0, 0, 1, 10, '<', '/', XRN, '>',
> '<', XRN, T3, I1, '>', 0, 0, 0, 1, 10, '<', '/', XRN, '>',
> '<', XRN, T4, I1, '>', 0, 0, 0, 1, 10, '<', '/', XRN, '>',
> '<', XRN, T1, I1, '>', 0, 0, 0, 0, '<', '/', XRN, '>',
> };
> int cs, r = 0;
> unsigned char *p = (unsigned char *)&buf;
> unsigned char *pe = p + sizeof(buf);
> printf("len=%d\n", len);
> %%{
> t1 = '08192' @{ printf("t1\n"); };
> t2 = '00016' @{ printf("t2\n"); };
> t3 = '00008' @{ printf("t3\n"); };
> t4 = '00001' @{ printf("t4\n"); };
> type = (t1 | t2 | t3 | t4);
> info = '020001';
> open = '<XRNDATA' type info '>' @{ printf("begin XRNDATA\n"); len = 0; };
> len = extend{4} @{ printf("len = %d\n", (int)*p); len = (len*256) + (*p); };
> buffer = (extend when {len--})* @{ printf("[%d]:%d\n", len, *p); };
> close = '</XRNDATA>' @{ printf("end XRNDATA\n"); };
> expr = open len buffer close;
> main := expr*;
> write init;
> write exec;
> }%%
> return 0;
> }
>
>
>
> On Mon, Dec 6, 2010 at 1:16 PM, Adrian Thurston
> <adrian.thurston at esentire.com <mailto:adrian.thurston at esentire.com>> wrote:
>
>     I use ragel to parse binary protocols at work. Often, the most
>     difficult part is dealing with lengths, or counts of things. A good
>     example is the DNS protocol. There are several sections of N blocks
>     of questions and resource records items. Inside the blocks you must
>     also deal with lengths in names.
>
>     Unfortunately, there are not many open examples of parsing this way.
>     Start by looking in the manual. I would like to improve Ragel's
>     support for this kind of parsing.
>
>     -Adrian
>
>
>     On 10-12-03 02:53 AM, Vitaly V. Ch wrote:
>
>         Hi!
>
>         I'm interested in any tips or examples of using ragel on binary
>         datagrams.
>
>         \\wbr Vitaly Chernooky
>
>         _______________________________________________
>         ragel-users mailing list
>         ragel-users at complang.org <mailto:ragel-users at complang.org>
>         http://www.complang.org/mailman/listinfo/ragel-users
>
>
>     _______________________________________________
>     ragel-users mailing list
>     ragel-users at complang.org <mailto:ragel-users at complang.org>
>     http://www.complang.org/mailman/listinfo/ragel-users
>
>
>
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From alan at alanz.com  Thu Dec 16 19:45:33 2010
From: alan at alanz.com (Alan West)
Date: Thu, 16 Dec 2010 19:45:33 +0000
Subject: [ragel-users] Something like #define macros for Ragel grammar?
In-Reply-To: <4D0A4DB7.2090107@esentire.com>
References: <AANLkTin8F5uHfGiOe1k1bsgYdGKXx8iHHN2dyOrMKctu@mail.gmail.com>
	<4D0A4DB7.2090107@esentire.com>
Message-ID: <575C7252-0921-4290-A6AF-9E180EBF4CA9@alanz.com>

Not tried it but maybe something like this works on gcc:

cpp -dU -P -CC -o output.rl macroedsource.rl

On 16 Dec 2010, at 17:34, Adrian Thurston <adrian.thurston at esentire.com> wrote:

> This has been a desired feature for many years. A few times I've sketched out a solution, but it has never materialized. Your request has been noted it bumps the relative priority.
> 
> Thanks,
> Adrian
> 
> On 10-12-08 01:23 PM, Iñaki Baz Castillo wrote:
>> Hi, my Ragel grammar have many lines like "Via" below:
>> 
>>  via_parm   = ( sent_protocol LWS sent_by ( SEMI ( via_branch |
>> header_param ) )* )
>>                     >start_value %store_value;
>>  Via           = ( "Via"i | "v"i )>write_value>start_field
>> %write_field HCOLON via_parm
>>                     ( COMMA %write_value via_parm )*;
>> 
>> 
>> So I would like to use smething like a C #define. This is, adding at
>> the top of my Ragel file:
>> 
>>   #define COMMA_SEPARATED_VALUES(VALUE) ">write_value>start_field
>>              %write_field HCOLON VALUE ( COMMA %write_value VALUE )*;"
>> 
>> And then in the machine write:
>> 
>>   Via = ( "Via"i | "v"i ) COMMA_SEPARATED_VALUE(via_parm)
>> 
>> 
>> Of course this doesn't work. Is there a way to use "define" macros in
>> Ragel prior to parsing the Ragel grammar? or must I use m4?
>> 
>> Thanks a lot.
>> 
>> 
> 
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From joseph.stewart at gmail.com  Thu Dec 16 20:02:00 2010
From: joseph.stewart at gmail.com (Joseph Stewart)
Date: Thu, 16 Dec 2010 15:02:00 -0500
Subject: [ragel-users] Work On Binary datagrams
In-Reply-To: <4D0A5B9E.3080802@esentire.com>
References: <AANLkTinniK24e+PJR_VLK9UES+ozPZNnki3Y5j+h-NUv@mail.gmail.com>
	<4CFD287D.3010004@esentire.com>
	<AANLkTi=-aYB-dKhU1WR0uhLWSQtE8WWfOBo=3+0prnV7@mail.gmail.com>
	<4D0A5B9E.3080802@esentire.com>
Message-ID: <AANLkTiki4OQxDZShmKaRX+ADCTJk8_aBaHc_CVJC_tkd@mail.gmail.com>

Thanks. I'll be keeping an eye out for this and try to contribute if I come
up with any compelling ideas.

In the meantime, let me drone about my current state machine... looking at
the output from graphviz, it looks like the complexity is greater in the
graph output than what I expected (indeed I'm trying to sell my team on the
ragel approach, with one metric being that the state machines are
understandable via the graphviz output). This makes me think I've specified
my machine poorly.

At a high-level my data looks like:

open xml-like tag with parameters type and info
length
binary blog of length bytes
close xml-like tag

I'm hoping someone can increase my wisdom on matters of this sort.

BR,

-joe

On Thu, Dec 16, 2010 at 1:34 PM, Adrian Thurston <
adrian.thurston at esentire.com> wrote:

> Right now there is no 'right' way. There are actually are many different
> ways each with their own ups and downs. There is some work I want to do on
> conditions to ease length processing (comes up at work a lot) and I'm hoping
> to soon be able to prescribe a recommended way of dealing with lengths that
> is general enough to apply to the majority of cases that I see.
>
>
> On 10-12-16 06:24 AM, Joseph Stewart wrote:
>
>> Adrian,
>>
>> Do you have any tips or small examples for dealing with lengths? While I
>> have something that works, it doesn't feel right and I don't have the
>> experience with Ragel to know if I'm doing this right.
>>
>> Below is a shell I've started to parse/validate binary chunks out of
>> XML-like tags (BTW, I did not create the format... I'm just the victim).
>> Eventually I need to parse data inside the Bin chunks.
>>
>> The graphviz output for this is so gigantic that I think I'm doing
>> something fundamentally wrong.
>>
>> Suggestions are greatly appreciated!
>>
>> -joe
>>
>> --- code follows ---
>>
>> #include <stdio.h>
>>
>> /*
>>
>> chunks in file look like
>>
>> <XRNDATA08192020001>LenData</XRNDATA>
>> where "08192" is an ASCII type designator (can expect other types)
>> where "020001" is an ASCII information field
>> where Len is a 4-byte little endian length designator
>> where Data is binary data of Len length
>>
>> */
>>
>> #define XRN 'X', 'R', 'N', 'D', 'A', 'T', 'A'
>> #define T1 '0', '8', '1', '9', '2'
>> #define T2 '0', '0', '0', '1', '6'
>> #define T3 '0', '0', '0', '0', '8'
>> #define T4 '0', '0', '0', '0', '1'
>> #define I1 '0', '2', '0', '0', '0', '1'
>>
>> %%{
>> machine tds;
>> write data;
>> }%%
>>
>> int main() {
>> int len = 0;
>> unsigned char buf[] = {
>> '<', XRN, T1, I1, '>', 0, 0, 0, 5, 48,49,50,51,52, '<', '/', XRN, '>',
>> '<', XRN, T2, I1, '>', 0, 0, 0, 1, 10, '<', '/', XRN, '>',
>> '<', XRN, T3, I1, '>', 0, 0, 0, 1, 10, '<', '/', XRN, '>',
>> '<', XRN, T4, I1, '>', 0, 0, 0, 1, 10, '<', '/', XRN, '>',
>> '<', XRN, T1, I1, '>', 0, 0, 0, 0, '<', '/', XRN, '>',
>> };
>> int cs, r = 0;
>> unsigned char *p = (unsigned char *)&buf;
>> unsigned char *pe = p + sizeof(buf);
>> printf("len=%d\n", len);
>> %%{
>> t1 = '08192' @{ printf("t1\n"); };
>> t2 = '00016' @{ printf("t2\n"); };
>> t3 = '00008' @{ printf("t3\n"); };
>> t4 = '00001' @{ printf("t4\n"); };
>> type = (t1 | t2 | t3 | t4);
>> info = '020001';
>> open = '<XRNDATA' type info '>' @{ printf("begin XRNDATA\n"); len = 0; };
>> len = extend{4} @{ printf("len = %d\n", (int)*p); len = (len*256) + (*p);
>> };
>> buffer = (extend when {len--})* @{ printf("[%d]:%d\n", len, *p); };
>> close = '</XRNDATA>' @{ printf("end XRNDATA\n"); };
>> expr = open len buffer close;
>> main := expr*;
>> write init;
>> write exec;
>> }%%
>> return 0;
>> }
>>
>>
>>
>> On Mon, Dec 6, 2010 at 1:16 PM, Adrian Thurston
>> <adrian.thurston at esentire.com <mailto:adrian.thurston at esentire.com>>
>> wrote:
>>
>>    I use ragel to parse binary protocols at work. Often, the most
>>    difficult part is dealing with lengths, or counts of things. A good
>>    example is the DNS protocol. There are several sections of N blocks
>>    of questions and resource records items. Inside the blocks you must
>>    also deal with lengths in names.
>>
>>    Unfortunately, there are not many open examples of parsing this way.
>>    Start by looking in the manual. I would like to improve Ragel's
>>    support for this kind of parsing.
>>
>>    -Adrian
>>
>>
>>    On 10-12-03 02:53 AM, Vitaly V. Ch wrote:
>>
>>        Hi!
>>
>>        I'm interested in any tips or examples of using ragel on binary
>>        datagrams.
>>
>>        \\wbr Vitaly Chernooky
>>
>>        _______________________________________________
>>        ragel-users mailing list
>>        ragel-users at complang.org <mailto:ragel-users at complang.org>
>>
>>        http://www.complang.org/mailman/listinfo/ragel-users
>>
>>
>>    _______________________________________________
>>    ragel-users mailing list
>>    ragel-users at complang.org <mailto:ragel-users at complang.org>
>>
>>    http://www.complang.org/mailman/listinfo/ragel-users
>>
>>
>>
>>
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at complang.org
>> http://www.complang.org/mailman/listinfo/ragel-users
>>
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20101216/6802815c/attachment-0001.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From ibc at aliax.net  Fri Dec 17 17:15:16 2010
From: ibc at aliax.net (=?UTF-8?Q?I=C3=B1aki_Baz_Castillo?=)
Date: Fri, 17 Dec 2010 18:15:16 +0100
Subject: [ragel-users] Doubt about actions prioritity
In-Reply-To: <4D0A4E06.3040201@esentire.com>
References: <AANLkTimyJLVOUaThaQbvK-LajP7WvjTZyC6doTs5BgfV@mail.gmail.com>
	<4D0A4E06.3040201@esentire.com>
Message-ID: <AANLkTikB2dC-Jb8ArKyzT9+7BK30cMQE9-95SqQs1V2D@mail.gmail.com>

2010/12/16 Adrian Thurston <adrian.thurston at esentire.com>:
> Yes it is always true. There is a section in the manual on this topic.

Thanks, I had already confirmed it by means of facts and testing, but
it's nice to know it0s the expected (and documented) behavior :)

-- 
Iñaki Baz Castillo
<ibc at aliax.net>

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From johannespfau at googlemail.com  Mon Dec 20 11:03:15 2010
From: johannespfau at googlemail.com (Johannes Pfau)
Date: Mon, 20 Dec 2010 12:03:15 +0100
Subject: [ragel-users] [PATCH] D2 support
Message-ID: <4D0F37F3.3050001@gmail.com>

Hello,
I attached a patch to add D2 support to Ragel. D2 is quite different
from D1 so I created new D2 subclasses in the cd* files. I chose -E for
the commandline switch, but it could be changed to something else. D2
also needs a special syntax for const pointers: const(uint)* is a
mutable pointer to a const uint. I introduced a PTR_CONST_END function
to generate that D2 output. The generated D2 code is entirely correct
now and I tested it with some HTML header parsers.

There's one performance related problem though: In D2 a ubyte[] is
different from a ubyte[n], even if both arrays are initialized at
compile time. The ubyte[] generates a resizeable array at runtime, which
causes a performance problem. The ubyte[n] syntax should instead be used
for static constant arrays. But as ragel doesn't pass the number of
array entries to the OPEN_ARRAY function, there's no easy way to fix
that. So I wanted to ask for advice on how to implement that properly.

-- 
Johannes Pfau

-------------- next part --------------
A non-text attachment was scrubbed...
Name: d2.patch
Type: text/x-patch
Size: 18965 bytes
Desc: not available
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20101220/bbca977b/attachment-0001.bin>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From thurston at complang.org  Tue Dec 21 06:22:15 2010
From: thurston at complang.org (Adrian Thurston)
Date: Mon, 20 Dec 2010 22:22:15 -0800
Subject: [ragel-users] [PATCH] D2 support
In-Reply-To: <4D0F37F3.3050001@gmail.com>
References: <4D0F37F3.3050001@gmail.com>
Message-ID: <4D104797.5040304@complang.org>

Hi thanks for your patch! I'm hoping to integrate it in the next couple 
of weeks. At that time I'll look into the issue of dynamic arrays that 
you pointed out.

Regards,
  Adrian

Johannes Pfau wrote:
> Hello,
> I attached a patch to add D2 support to Ragel. D2 is quite different
> from D1 so I created new D2 subclasses in the cd* files. I chose -E for
> the commandline switch, but it could be changed to something else. D2
> also needs a special syntax for const pointers: const(uint)* is a
> mutable pointer to a const uint. I introduced a PTR_CONST_END function
> to generate that D2 output. The generated D2 code is entirely correct
> now and I tested it with some HTML header parsers.
> 
> There's one performance related problem though: In D2 a ubyte[] is
> different from a ubyte[n], even if both arrays are initialized at
> compile time. The ubyte[] generates a resizeable array at runtime, which
> causes a performance problem. The ubyte[n] syntax should instead be used
> for static constant arrays. But as ragel doesn't pass the number of
> array entries to the OPEN_ARRAY function, there's no easy way to fix
> that. So I wanted to ask for advice on how to implement that properly.
> 
> 
> 
> ------------------------------------------------------------------------
> 
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From johannespfau at googlemail.com  Tue Dec 21 10:10:39 2010
From: johannespfau at googlemail.com (Johannes Pfau)
Date: Tue, 21 Dec 2010 11:10:39 +0100
Subject: [ragel-users] [PATCH] D2 support
In-Reply-To: <4D104797.5040304@complang.org>
References: <4D0F37F3.3050001@gmail.com> <4D104797.5040304@complang.org>
Message-ID: <4D107D1F.9040502@gmail.com>

On 21.12.2010 07:22, Adrian Thurston wrote:
> Hi thanks for your patch! I'm hoping to integrate it in the next
> couple of weeks. At that time I'll look into the issue of dynamic
> arrays that you pointed out.
>
> Regards,
>  Adrian
>
> Johannes Pfau wrote:
>> Hello,
>> I attached a patch to add D2 support to Ragel. D2 is quite different
>> from D1 so I created new D2 subclasses in the cd* files. I chose -E for
>> the commandline switch, but it could be changed to something else. D2
>> also needs a special syntax for const pointers: const(uint)* is a
>> mutable pointer to a const uint. I introduced a PTR_CONST_END function
>> to generate that D2 output. The generated D2 code is entirely correct
>> now and I tested it with some HTML header parsers.
>>
>> There's one performance related problem though: In D2 a ubyte[] is
>> different from a ubyte[n], even if both arrays are initialized at
>> compile time. The ubyte[] generates a resizeable array at runtime, which
>> causes a performance problem. The ubyte[n] syntax should instead be used
>> for static constant arrays. But as ragel doesn't pass the number of
>> array entries to the OPEN_ARRAY function, there's no easy way to fix
>> that. So I wanted to ask for advice on how to implement that properly.
>>
>>
>>
>> ------------------------------------------------------------------------
>>
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at complang.org
>> http://www.complang.org/mailman/listinfo/ragel-users
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users
Great!
When I asked about the array issue in the D newsgroup someone reported
another problem with the codegen: The D compiler sometimes needs two {
around the action code to correctly recognize it as a scope. I attached
an updated patch.

-- 
Johannes Pfau

-------------- next part --------------
A non-text attachment was scrubbed...
Name: ragel-d2.patch
Type: text/x-patch
Size: 20664 bytes
Desc: not available
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20101221/f6ef02a0/attachment-0001.bin>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From adrian.thurston at esentire.com  Tue Dec 21 17:48:07 2010
From: adrian.thurston at esentire.com (Adrian Thurston)
Date: Tue, 21 Dec 2010 09:48:07 -0800
Subject: [ragel-users] [PATCH] D2 support
In-Reply-To: <4D107D1F.9040502@gmail.com>
References: <4D0F37F3.3050001@gmail.com> <4D104797.5040304@complang.org>
	<4D107D1F.9040502@gmail.com>
Message-ID: <4D10E857.8040900@esentire.com>

Is it expected thath D2 will ultimately supersede D1? This is the first 
that I've heard of there being a new major revision of the language.

-Adrian

On 10-12-21 02:10 AM, Johannes Pfau wrote:
> On 21.12.2010 07:22, Adrian Thurston wrote:
>> Hi thanks for your patch! I'm hoping to integrate it in the next
>> couple of weeks. At that time I'll look into the issue of dynamic
>> arrays that you pointed out.
>>
>> Regards,
>>   Adrian
>>
>> Johannes Pfau wrote:
>>> Hello,
>>> I attached a patch to add D2 support to Ragel. D2 is quite different
>>> from D1 so I created new D2 subclasses in the cd* files. I chose -E for
>>> the commandline switch, but it could be changed to something else. D2
>>> also needs a special syntax for const pointers: const(uint)* is a
>>> mutable pointer to a const uint. I introduced a PTR_CONST_END function
>>> to generate that D2 output. The generated D2 code is entirely correct
>>> now and I tested it with some HTML header parsers.
>>>
>>> There's one performance related problem though: In D2 a ubyte[] is
>>> different from a ubyte[n], even if both arrays are initialized at
>>> compile time. The ubyte[] generates a resizeable array at runtime, which
>>> causes a performance problem. The ubyte[n] syntax should instead be used
>>> for static constant arrays. But as ragel doesn't pass the number of
>>> array entries to the OPEN_ARRAY function, there's no easy way to fix
>>> that. So I wanted to ask for advice on how to implement that properly.
>>>
>>>
>>>
>>> ------------------------------------------------------------------------
>>>
>>> _______________________________________________
>>> ragel-users mailing list
>>> ragel-users at complang.org
>>> http://www.complang.org/mailman/listinfo/ragel-users
>>
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at complang.org
>> http://www.complang.org/mailman/listinfo/ragel-users
> Great!
> When I asked about the array issue in the D newsgroup someone reported
> another problem with the codegen: The D compiler sometimes needs two {
> around the action code to correctly recognize it as a scope. I attached
> an updated patch.
>
>
>
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From johannespfau at googlemail.com  Tue Dec 21 19:36:47 2010
From: johannespfau at googlemail.com (Johannes Pfau)
Date: Tue, 21 Dec 2010 20:36:47 +0100
Subject: [ragel-users] [PATCH] D2 support
In-Reply-To: <4D10E857.8040900@esentire.com>
References: <4D0F37F3.3050001@gmail.com>
	<4D104797.5040304@complang.org>	<4D107D1F.9040502@gmail.com>
	<4D10E857.8040900@esentire.com>
Message-ID: <4D1101CF.9080500@gmail.com>

On 21.12.2010 18:48, Adrian Thurston wrote:
> Is it expected thath D2 will ultimately supersede D1? This is the
> first that I've heard of there being a new major revision of the
> language.
>
> -Adrian
>
> On 10-12-21 02:10 AM, Johannes Pfau wrote:
>> On 21.12.2010 07:22, Adrian Thurston wrote:
>>> Hi thanks for your patch! I'm hoping to integrate it in the next
>>> couple of weeks. At that time I'll look into the issue of dynamic
>>> arrays that you pointed out.
>>>
>>> Regards,
>>>   Adrian
>>>
>>> Johannes Pfau wrote:
>>>> Hello,
>>>> I attached a patch to add D2 support to Ragel. D2 is quite different
>>>> from D1 so I created new D2 subclasses in the cd* files. I chose -E
>>>> for
>>>> the commandline switch, but it could be changed to something else. D2
>>>> also needs a special syntax for const pointers: const(uint)* is a
>>>> mutable pointer to a const uint. I introduced a PTR_CONST_END function
>>>> to generate that D2 output. The generated D2 code is entirely correct
>>>> now and I tested it with some HTML header parsers.
>>>>
>>>> There's one performance related problem though: In D2 a ubyte[] is
>>>> different from a ubyte[n], even if both arrays are initialized at
>>>> compile time. The ubyte[] generates a resizeable array at runtime,
>>>> which
>>>> causes a performance problem. The ubyte[n] syntax should instead be
>>>> used
>>>> for static constant arrays. But as ragel doesn't pass the number of
>>>> array entries to the OPEN_ARRAY function, there's no easy way to fix
>>>> that. So I wanted to ask for advice on how to implement that properly.
>>>>
>>>>
>>>>
>>>> ------------------------------------------------------------------------
>>>>
>>>>
>>>> _______________________________________________
>>>> ragel-users mailing list
>>>> ragel-users at complang.org
>>>> http://www.complang.org/mailman/listinfo/ragel-users
>>>
>>> _______________________________________________
>>> ragel-users mailing list
>>> ragel-users at complang.org
>>> http://www.complang.org/mailman/listinfo/ragel-users
>> Great!
>> When I asked about the array issue in the D newsgroup someone reported
>> another problem with the codegen: The D compiler sometimes needs two {
>> around the action code to correctly recognize it as a scope. I attached
>> an updated patch.
>>
>>
>>
>>
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at complang.org
>> http://www.complang.org/mailman/listinfo/ragel-users
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users
I'm not sure if D2 will really supersede D1. The language designers
(Walter and Andrei) definitely promote D2 a lot lately, but many D1
users don't want to switch to D2 (yet). D2 added so many new features
that it's sometimes considered as a completely new language. And the D1
compiler is also still supported; new bugfix releases are published
about every month.

-- 
Johannes Pfau


_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From thurston at complang.org  Sat Dec 25 00:10:00 2010
From: thurston at complang.org (Adrian Thurston)
Date: Fri, 24 Dec 2010 16:10:00 -0800
Subject: [ragel-users] Work On Binary datagrams
In-Reply-To: <AANLkTiki4OQxDZShmKaRX+ADCTJk8_aBaHc_CVJC_tkd@mail.gmail.com>
References: <AANLkTinniK24e+PJR_VLK9UES+ozPZNnki3Y5j+h-NUv@mail.gmail.com>	<4CFD287D.3010004@esentire.com>	<AANLkTi=-aYB-dKhU1WR0uhLWSQtE8WWfOBo=3+0prnV7@mail.gmail.com>	<4D0A5B9E.3080802@esentire.com>
	<AANLkTiki4OQxDZShmKaRX+ADCTJk8_aBaHc_CVJC_tkd@mail.gmail.com>
Message-ID: <4D153658.2070605@complang.org>

I had a chance to have a little closer look. Do something like this.

Note theat the %when !check  syntax isn't documented yet. It's been 
around for a few years and works (I use it at work), I'm just not 
totally happy with the implementation.

action check {len--}

buffer =
     (any when check)*
     %when !check
     @{ printf("[%d]:%d\n", len, *p); };

close =
     '</XRNDATA>'
     @{ printf("end XRNDATA\n"); };

expr = open len buffer close;

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From joseph.stewart at gmail.com  Sat Dec 25 00:46:02 2010
From: joseph.stewart at gmail.com (Joseph Stewart)
Date: Fri, 24 Dec 2010 19:46:02 -0500
Subject: [ragel-users] Work On Binary datagrams
In-Reply-To: <4D153658.2070605@complang.org>
References: <AANLkTinniK24e+PJR_VLK9UES+ozPZNnki3Y5j+h-NUv@mail.gmail.com>
	<4CFD287D.3010004@esentire.com>
	<AANLkTi=-aYB-dKhU1WR0uhLWSQtE8WWfOBo=3+0prnV7@mail.gmail.com>
	<4D0A5B9E.3080802@esentire.com>
	<AANLkTiki4OQxDZShmKaRX+ADCTJk8_aBaHc_CVJC_tkd@mail.gmail.com>
	<4D153658.2070605@complang.org>
Message-ID: <AANLkTikaqzR6jdD31qjEqrfpKub6KJ1x-XSpr5aGpi9u@mail.gmail.com>

That's totally awesome (from a graphviz point of view at least)... the
parser works and the graphviz output is approachable.

Thanks for the early X-mas present!

-joe

On Fri, Dec 24, 2010 at 7:10 PM, Adrian Thurston <thurston at complang.org>wrote:

> I had a chance to have a little closer look. Do something like this.
>
> Note theat the %when !check  syntax isn't documented yet. It's been around
> for a few years and works (I use it at work), I'm just not totally happy
> with the implementation.
>
> action check {len--}
>
> buffer =
>    (any when check)*
>    %when !check
>
>    @{ printf("[%d]:%d\n", len, *p); };
>
> close =
>    '</XRNDATA>'
>    @{ printf("end XRNDATA\n"); };
>
> expr = open len buffer close;
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20101224/fc863c21/attachment-0001.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From ibc at aliax.net  Thu Dec 30 00:47:09 2010
From: ibc at aliax.net (=?UTF-8?Q?I=C3=B1aki_Baz_Castillo?=)
Date: Thu, 30 Dec 2010 01:47:09 +0100
Subject: [ragel-users] Conditional parsing, is it possible?
Message-ID: <AANLkTi=0A+RAyofScD0=R2UQNSdrbxxEy6Fg62X8Wz8P@mail.gmail.com>

Hi, I wonder if there is a way to parse (or not) some fragments of the
stream depending on previous parsed elements.

For example, in HTTP, imagine I just want to parse a custom header
"X-MyHeader" (which has a specific value format)  in case the request
method is POST. But in case it's a GET then I just want to store the
header raw value.

I've never found a way to achieve it, but maybe I miss something :)

Thanks a lot.

-- 
Iñaki Baz Castillo
<ibc at aliax.net>

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From ibc at aliax.net  Thu Dec 30 01:26:48 2010
From: ibc at aliax.net (=?UTF-8?Q?I=C3=B1aki_Baz_Castillo?=)
Date: Thu, 30 Dec 2010 02:26:48 +0100
Subject: [ragel-users] Conditional parsing, is it possible?
In-Reply-To: <AANLkTi=0A+RAyofScD0=R2UQNSdrbxxEy6Fg62X8Wz8P@mail.gmail.com>
References: <AANLkTi=0A+RAyofScD0=R2UQNSdrbxxEy6Fg62X8Wz8P@mail.gmail.com>
Message-ID: <AANLkTi=-69sE81dnEDyvAYs7ZzDPSwFhan63PmOR=HMD@mail.gmail.com>

2010/12/30 Iñaki Baz Castillo <ibc at aliax.net>:
> Hi, I wonder if there is a way to parse (or not) some fragments of the
> stream depending on previous parsed elements.
>
> For example, in HTTP, imagine I just want to parse a custom header
> "X-MyHeader" (which has a specific value format)  in case the request
> method is POST. But in case it's a GET then I just want to store the
> header raw value.

This is, there would be two valid syntax for "X-MyHeader":


  generic_value = any* -CRLF;
  x_value = [0-9] ":" [a-z]+;
  x_myheader_value = generic_value | x_value;

If a previous field of the stream (the request method) is POST (an
action could set a variable) I want 'x_myheader_value' just to be
checked with 'x_value', and if the method is other, then
'x_myheader_value' should be just checked with 'generic_value'.

Thanks for any suggestion or clarification.


-- 
Iñaki Baz Castillo
<ibc at aliax.net>

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From adrian.thurston at esentire.com  Thu Dec 30 01:26:23 2010
From: adrian.thurston at esentire.com (Adrian Thurston)
Date: Wed, 29 Dec 2010 17:26:23 -0800
Subject: [ragel-users] Conditional parsing, is it possible?
In-Reply-To: <AANLkTi=-69sE81dnEDyvAYs7ZzDPSwFhan63PmOR=HMD@mail.gmail.com>
References: <AANLkTi=0A+RAyofScD0=R2UQNSdrbxxEy6Fg62X8Wz8P@mail.gmail.com>
	<AANLkTi=-69sE81dnEDyvAYs7ZzDPSwFhan63PmOR=HMD@mail.gmail.com>
Message-ID: <4D1BDFBF.2040608@esentire.com>

Hi Iñaki,

There are a few approaches. You can do it using fgoto/fcall/fret, but 
then you lose the single-regex property. You can also do it using 
conditions, which are a more recent feature. The drawback there is that 
you run into trouble if using int and unsigned int alphabet types (as 
opposed to char). That won't affect you though. See the manual and the 
mailing list for more info about conditions.

-Adrian

On 10-12-29 05:26 PM, Iñaki Baz Castillo wrote:
> 2010/12/30 Iñaki Baz Castillo<ibc at aliax.net>:
>> Hi, I wonder if there is a way to parse (or not) some fragments of the
>> stream depending on previous parsed elements.
>>
>> For example, in HTTP, imagine I just want to parse a custom header
>> "X-MyHeader" (which has a specific value format)  in case the request
>> method is POST. But in case it's a GET then I just want to store the
>> header raw value.
>
> This is, there would be two valid syntax for "X-MyHeader":
>
>
>    generic_value = any* -CRLF;
>    x_value = [0-9] ":" [a-z]+;
>    x_myheader_value = generic_value | x_value;
>
> If a previous field of the stream (the request method) is POST (an
> action could set a variable) I want 'x_myheader_value' just to be
> checked with 'x_value', and if the method is other, then
> 'x_myheader_value' should be just checked with 'generic_value'.
>
> Thanks for any suggestion or clarification.
>
>

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From ibc at aliax.net  Thu Dec 30 02:17:27 2010
From: ibc at aliax.net (=?UTF-8?Q?I=C3=B1aki_Baz_Castillo?=)
Date: Thu, 30 Dec 2010 03:17:27 +0100
Subject: [ragel-users] Conditional parsing, is it possible?
In-Reply-To: <4D1BDFBF.2040608@esentire.com>
References: <AANLkTi=0A+RAyofScD0=R2UQNSdrbxxEy6Fg62X8Wz8P@mail.gmail.com>
	<AANLkTi=-69sE81dnEDyvAYs7ZzDPSwFhan63PmOR=HMD@mail.gmail.com>
	<4D1BDFBF.2040608@esentire.com>
Message-ID: <AANLkTimQZeOcAiC_M8to48rY7N=XtGUwQScwB9yNKrhb@mail.gmail.com>

2010/12/30 Adrian Thurston <adrian.thurston at esentire.com>:
> You can also do it using conditions, which are a more recent feature.

I got it! great :)

Thanks a lot, I missed the new section (last one) in current manual.

-- 
Iñaki Baz Castillo
<ibc at aliax.net>

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

