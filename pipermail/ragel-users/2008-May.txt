From jonathan.st... at gmail.com  Sat May  3 12:12:05 2008
From: jonathan.st... at gmail.com (Jonathan Stott)
Date: Sat, 3 May 2008 13:12:05 +0100
Subject: [ragel-users] Re: Surpressing Mulitple Matches
In-Reply-To: <47F98F9E.20...@cs.queensu.ca>
References: <20080405163425.bd67723f.jonathan.st...@gmail.com>
	<47F98F9E.20...@cs.queensu.ca>
Message-ID: <20080503131205.fec052b8.jonathan.st...@gmail.com>

> 
> Hi Jonathan,
> 
> I think you should consider using a scanner. Though you're not scanning
> tokens, you're scanning lines. Should multiple patterns match only one
> pattern action will be executed.
> 
> -Adrian
> 

Thanks for the suggestion.  Unfortunately real life got in the way of the little project I was coding this for, so I only just got around to actually reimplementing the machine as a scanner.  It's now all working though. :)

Regards,
Jon


From thurs... at cs.queensu.ca  Fri May  9 19:11:23 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Fri, 09 May 2008 15:11:23 -0400
Subject: 6.2 release -- bugfixes + include searching
Message-ID: <4824A1DB.7070209@cs.queensu.ca>

Hi,

I just released 6.2. This is mostly bug fixes, but it also has changes
to the include file searching. Files are now searched relative to the
current file location, not the place ragel was invoked. Some users may
need to update their build scripts. Also, there is now the -I option for
adding search locations.

Regards,
 Adrian


From halfacan... at gmail.com  Sun May 11 03:41:46 2008
From: halfacan... at gmail.com (Ross Thomas)
Date: Sat, 10 May 2008 20:41:46 -0700 (PDT)
Subject: Consider me converted
Message-ID: <80c22645-5836-4628-8737-96992ba85541@q24g2000prf.googlegroups.com>

Hi Adrian/all,

Just a brief note to say that Ragel is a truly remarkable piece of
software. I discovered it yesterday via erlang-questions [1] and am
frankly astonished by how much more quickly and easily I can create
much more efficient and robust code using it. It's not an exaggeration
to say that Ragel shattered my expectations regarding how much time
and effort need be invested to produce hyper-efficient code.

I fear I'm beginning to babble. Suffice to say: thanks! :)

-Ross


From franksh... at mailinator.com  Sun May 11 06:11:10 2008
From: franksh... at mailinator.com (frankshank)
Date: Sat, 10 May 2008 23:11:10 -0700 (PDT)
Subject: Newb's FSM troubles, part one.
Message-ID: <f8adea75-3b8d-41d6-b812-9b79db3d4191@i36g2000prf.googlegroups.com>

I'm trying to detect users mentioned in a string. Users have an "@"
before their name. Here's my current machine:

%{
  machine user_parser;
  action mark { mark = p; }
  action print_user { puts("user: #{data[mark..p]}"); }
  user_name = (lower . (lower | digit)*);
  user_tag = ("@">mark . user_name) % print_user;
  random_text = (0x20..0x3f | 0x41..0x7e)+; # all ascii, except for
'@'
  main := (random_text | user_tag)*;
}%%

When I run this against "@u1 @u2", i see this output:

user: @u1
user: @u1
user: @u2


From thurs... at cs.queensu.ca  Mon May 12 23:00:43 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Mon, 12 May 2008 19:00:43 -0400
Subject: [ragel-users] Newb's FSM troubles, part one.
In-Reply-To: <f8adea75-3b8d-41d6-b812-9b79db3d4191@i36g2000prf.googlegroups.com>
References: <f8adea75-3b8d-41d6-b812-9b79db3d4191@i36g2000prf.googlegroups.com>
Message-ID: <4828CC1B.90206@cs.queensu.ca>

Hi,

Change the last line to:

main := (random_text | user_tag)**;

See section 4.2.4 in the manual.

Cheers,
 Adrian

frankshank wrote:
> I'm trying to detect users mentioned in a string. Users have an "@"
> before their name. Here's my current machine:
> 
> %{
>   machine user_parser;
>   action mark { mark = p; }
>   action print_user { puts("user: #{data[mark..p]}"); }
>   user_name = (lower . (lower | digit)*);
>   user_tag = ("@">mark . user_name) % print_user;
>   random_text = (0x20..0x3f | 0x41..0x7e)+; # all ascii, except for
> '@'
>   main := (random_text | user_tag)*;
> }%%
> 
> When I run this against "@u1 @u2", i see this output:
> 
> user: @u1
> user: @u1
> user: @u2
> 
> Why is @u1 seen twice?
> > 
> 


From halfacan... at gmail.com  Sun May 11 18:09:07 2008
From: halfacan... at gmail.com (Ross Thomas)
Date: Sun, 11 May 2008 11:09:07 -0700 (PDT)
Subject: Patch for "unresolvable state reference crash" bug
Message-ID: <df79ef33-ecb4-4e89-82c5-9380dba8a5f8@w8g2000prd.googlegroups.com>

To duplicate, have an action fgoto a label that does not exist. The
below patch adds a check for this.

If this isn't the correct way to report a bug or submit a patch please
let me know.

-Ross

diff -urN trunk/ragel/parsedata.cpp trunk-unresolvable-state-reference/
ragel/parsedata.cpp
--- trunk/ragel/parsedata.cpp	2008-05-11 10:07:06.000000000 -0700
+++ trunk-unresolvable-state-reference/ragel/parsedata.cpp	2008-05-11
10:37:42.000000000 -0700
@@ -734,6 +734,8 @@
 			case InlineItem::Call: case InlineItem::Next: {
 				/* Resolve, pass action for local search. */
 				NameInst *target = resolveStateRef( *item->nameRef, item->loc,
action );
+				if ( 0 == target )
+					break;

 				/* Check if the target goes into a longest match. */
 				NameInst *search = target->parent;


From thurs... at cs.queensu.ca  Mon May 12 23:17:28 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Mon, 12 May 2008 19:17:28 -0400
Subject: [ragel-users] Patch for "unresolvable state reference crash"
 bug
In-Reply-To: <df79ef33-ecb4-4e89-82c5-9380dba8a5f8@w8g2000prd.googlegroups.com>
References: <df79ef33-ecb4-4e89-82c5-9380dba8a5f8@w8g2000prd.googlegroups.com>
Message-ID: <4828D008.9050009@cs.queensu.ca>

Thanks! I just fixed this. Also, I'm glad you like ragel :)

Cheers,
 Adrian

Ross Thomas wrote:
> To duplicate, have an action fgoto a label that does not exist. The
> below patch adds a check for this.
> 
> If this isn't the correct way to report a bug or submit a patch please
> let me know.
> 
> -Ross
> 
> diff -urN trunk/ragel/parsedata.cpp trunk-unresolvable-state-reference/
> ragel/parsedata.cpp
> --- trunk/ragel/parsedata.cpp	2008-05-11 10:07:06.000000000 -0700
> +++ trunk-unresolvable-state-reference/ragel/parsedata.cpp	2008-05-11
> 10:37:42.000000000 -0700
> @@ -734,6 +734,8 @@
>  			case InlineItem::Call: case InlineItem::Next: {
>  				/* Resolve, pass action for local search. */
>  				NameInst *target = resolveStateRef( *item->nameRef, item->loc,
> action );
> +				if ( 0 == target )
> +					break;
> 
>  				/* Check if the target goes into a longest match. */
>  				NameInst *search = target->parent;
> 
> > 
> 


From halfacan... at gmail.com  Sun May 11 18:57:46 2008
From: halfacan... at gmail.com (Ross Thomas)
Date: Sun, 11 May 2008 11:57:46 -0700 (PDT)
Subject: Any suggestions on implementing SMTP protocol in Ragel?
Message-ID: <17e3e3eb-5aaf-42b8-9556-510609c45cb3@z24g2000prf.googlegroups.com>

While hacking up a parser for SMTP (in an unprecedentedly small amount
of time, naturally :)) it occurred to me that given Ragel's ability to
mix regular expressions with state charts I could make the same
machine double-up as an SMTP protocol handler too. At least, I think I
could. Because a significant portion of my work involves the client/
server model this is an aspect of Ragel I'd very much like to explore
in more detail...

I've browsed around on the list and read Zed's post on state charts
but still don't have a totally clear idea on how this might be
implemented. Can anyone out there with more Ragel experience point me
in the right direction?


From halfacan... at gmail.com  Mon May 12 22:17:27 2008
From: halfacan... at gmail.com (Ross Thomas)
Date: Mon, 12 May 2008 15:17:27 -0700
Subject: Any suggestions on implementing SMTP protocol in Ragel?
In-Reply-To: <17e3e3eb-5aaf-42b8-9556-510609c45...@z24g2000prf.googlegroups.com>
References: <17e3e3eb-5aaf-42b8-9556-510609c45...@z24g2000prf.googlegroups.com>
Message-ID: <ce0f6e0c0805121517k41e25d4el9c416ae116c23d8e@mail.gmail.com>

To reduce the scope of my question a little, here is the general
structure I have so far:

    main := (
        start: (
            helo @copy_helo @resp_250 -> wait_mail |
            mail @resp_503 -> start |
            vrfy @resp_503 -> start |
            ...
        wait_mail: (
            helo @resp_250 -> wait_mail |
            mail @copy_mail @resp_250 -> wait_rcpt |
            vrfy @resp_252 -> wait_mail |
            ...
    );

Each "helo", "mail", "vrfy" etc. machine corresponds to the SMTP
command of the same name. They are defined as:

    helo = (("HELO"i | "EHLO"i) " "       %sarg graph+ %earg     eol);
    mail = ( "MAIL"i            " FROM:<" %sarg path*  %earg ">" eol);
    vrfy = ( "VRFY"i            " "       %sarg graph+ %earg     eol);
    ...

So the idea is that the top-level state chart handles logical flow and
knows which commands are valid in which states, and calls the
appropriate actions. The tokenizing is done "inline", as it were.

Does this strike anyone as a particularly foolish approach? Is there a
better way?

-Ross


On Sun, May 11, 2008 at 11:57 AM, Ross Thomas <halfacan... at gmail.com> wrote:
>
> While hacking up a parser for SMTP (in an unprecedentedly small amount
> of time, naturally :)) it occurred to me that given Ragel's ability to
> mix regular expressions with state charts I could make the same
> machine double-up as an SMTP protocol handler too. At least, I think I
> could. Because a significant portion of my work involves the client/
> server model this is an aspect of Ragel I'd very much like to explore
> in more detail...
>
> I've browsed around on the list and read Zed's post on state charts
> but still don't have a totally clear idea on how this might be
> implemented. Can anyone out there with more Ragel experience point me
> in the right direction?
>
> -Ross


From thurs... at cs.queensu.ca  Tue May 13 01:15:10 2008
From: thurs... at cs.queensu.ca (=?utf-8?B?QWRyaWFuIFRodXJzdG9u?=)
Date: Tue, 13 May 2008 01:15:10 +0000
Subject: [ragel-users] Re: Any suggestions on implementing SMTP protocol inRagel?
In-Reply-To: <ce0f6e0c0805121517k41e25d4el9c416ae116c23d8e@mail.gmail.com>
References: <17e3e3eb-5aaf-42b8-9556-510609c45cb3@z24g2000prf.googlegroups.com><ce0f6e0c0805121517k41e25d4el9c416ae116c23d8e@mail.gmail.com>
Message-ID: <762981520-1210641299-cardhu_decombobulator_blackberry.rim.net-601514575-@bxe150.bisx.prod.on.blackberry>

Hi Ross,

To be honest I don't have much experience with this approach. Statecharts were originally made for small low-level machines that are awkward to do with regular expressions. But they turned out to be more useful. The only issue I can think of is dealing with whitespace ... but I don't know SMTP well enough to say for sure. Let us know if if you pursue it and it works out :)

Adrian
-----Original Message-----
From: "Ross Thomas" <halfacanuck at gmail.com>

Date: Mon, 12 May 2008 15:17:27 
To:ragel-users <ragel-users at googlegroups.com>
Subject: [ragel-users] Re: Any suggestions on implementing SMTP protocol in
 Ragel?



To reduce the scope of my question a little, here is the general
structure I have so far:

    main := (
        start: (
            helo @copy_helo @resp_250 -> wait_mail |
            mail @resp_503 -> start |
            vrfy @resp_503 -> start |
            ...
        wait_mail: (
            helo @resp_250 -> wait_mail |
            mail @copy_mail @resp_250 -> wait_rcpt |
            vrfy @resp_252 -> wait_mail |
            ...
    );

Each "helo", "mail", "vrfy" etc. machine corresponds to the SMTP
command of the same name. They are defined as:

    helo = (("HELO"i | "EHLO"i) " "       %sarg graph+ %earg     eol);
    mail = ( "MAIL"i            " FROM:<" %sarg path*  %earg ">" eol);
    vrfy = ( "VRFY"i            " "       %sarg graph+ %earg     eol);
    ...

So the idea is that the top-level state chart handles logical flow and
knows which commands are valid in which states, and calls the
appropriate actions. The tokenizing is done "inline", as it were.

Does this strike anyone as a particularly foolish approach? Is there a
better way?

-Ross


On Sun, May 11, 2008 at 11:57 AM, Ross Thomas <halfacanuck at gmail.com> wrote:
>
> While hacking up a parser for SMTP (in an unprecedentedly small amount
> of time, naturally :)) it occurred to me that given Ragel's ability to
> mix regular expressions with state charts I could make the same
> machine double-up as an SMTP protocol handler too. At least, I think I
> could. Because a significant portion of my work involves the client/
> server model this is an aspect of Ragel I'd very much like to explore
> in more detail...
>
> I've browsed around on the list and read Zed's post on state charts
> but still don't have a totally clear idea on how this might be
> implemented. Can anyone out there with more Ragel experience point me
> in the right direction?
>
> -Ross




From halfacan... at gmail.com  Tue May 13 04:46:48 2008
From: halfacan... at gmail.com (Ross Thomas)
Date: Mon, 12 May 2008 21:46:48 -0700
Subject: [ragel-users] Re: Any suggestions on implementing SMTP protocol inRagel?
In-Reply-To: <762981520-1210641299-cardhu_decombobulator_blackberry.rim.net-6015145...@bxe150.bisx.prod.on.blackberry>
References: <17e3e3eb-5aaf-42b8-9556-510609c45...@z24g2000prf.googlegroups.com>
	 <ce0f6e0c0805121517k41e25d4el9c416ae116c23...@mail.gmail.com>
	 <762981520-1210641299-cardhu_decombobulator_blackberry.rim.net-6015145...@bxe150.bisx.prod.on.blackberry>
Message-ID: <ce0f6e0c0805122146j3e336d78j91a974e3c20cf806@mail.gmail.com>

It seems to me that the approach I describe cannot work as I wanted it
to, because the regexps matching the commands are duplicated for each
state, only with a different target state. For example:

main := (
    start: (
        1 -> a
    ),
    a: (
        1 -> b
    ),
    ...
);

Given the input [1, 1] the machine will end up in state "a", not state
"final" as I thought. Which makes sense now I think about it.

Back to the drawing board... :)

-Ross


On Mon, May 12, 2008 at 6:15 PM, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> Hi Ross,
>
> To be honest I don't have much experience with this approach. Statecharts were originally made for small low-level machines that are awkward to do with regular expressions. But they turned out to be more useful. The only issue I can think of is dealing with whitespace ... but I don't know SMTP well enough to say for sure. Let us know if if you pursue it and it works out :)
>
> Adrian
> -----Original Message-----
> From: "Ross Thomas" <halfacan... at gmail.com>
>
> Date: Mon, 12 May 2008 15:17:27
> To:ragel-users <ragel-users at googlegroups.com>
> Subject: [ragel-users] Re: Any suggestions on implementing SMTP protocol in
>  Ragel?
>
>
>
> To reduce the scope of my question a little, here is the general
> structure I have so far:
>
>    main := (
>        start: (
>            helo @copy_helo @resp_250 -> wait_mail |
>            mail @resp_503 -> start |
>            vrfy @resp_503 -> start |
>            ...
>        wait_mail: (
>            helo @resp_250 -> wait_mail |
>            mail @copy_mail @resp_250 -> wait_rcpt |
>            vrfy @resp_252 -> wait_mail |
>            ...
>    );
>
> Each "helo", "mail", "vrfy" etc. machine corresponds to the SMTP
> command of the same name. They are defined as:
>
>    helo = (("HELO"i | "EHLO"i) " "       %sarg graph+ %earg     eol);
>    mail = ( "MAIL"i            " FROM:<" %sarg path*  %earg ">" eol);
>    vrfy = ( "VRFY"i            " "       %sarg graph+ %earg     eol);
>    ...
>
> So the idea is that the top-level state chart handles logical flow and
> knows which commands are valid in which states, and calls the
> appropriate actions. The tokenizing is done "inline", as it were.
>
> Does this strike anyone as a particularly foolish approach? Is there a
> better way?
>
> -Ross
>
>
> On Sun, May 11, 2008 at 11:57 AM, Ross Thomas <halfacan... at gmail.com> wrote:
>>
>> While hacking up a parser for SMTP (in an unprecedentedly small amount
>> of time, naturally :)) it occurred to me that given Ragel's ability to
>> mix regular expressions with state charts I could make the same
>> machine double-up as an SMTP protocol handler too. At least, I think I
>> could. Because a significant portion of my work involves the client/
>> server model this is an aspect of Ragel I'd very much like to explore
>> in more detail...
>>
>> I've browsed around on the list and read Zed's post on state charts
>> but still don't have a totally clear idea on how this might be
>> implemented. Can anyone out there with more Ragel experience point me
>> in the right direction?
>>
>> -Ross
>
>
>
>
> >
>


From er... at atlasocean.com  Tue May 13 13:43:39 2008
From: er... at atlasocean.com (Erich Ocean)
Date: Tue, 13 May 2008 06:43:39 -0700
Subject: [ragel-users] Re: Any suggestions on implementing SMTP protocol inRagel?
In-Reply-To: <ce0f6e0c0805122146j3e336d78j91a974e3c20cf806@mail.gmail.com>
References: <17e3e3eb-5aaf-42b8-9556-510609c45cb3@z24g2000prf.googlegroups.com> <ce0f6e0c0805121517k41e25d4el9c416ae116c23d8e@mail.gmail.com> <762981520-1210641299-cardhu_decombobulator_blackberry.rim.net-601514575-@bxe150.bisx.prod.on.blackberry> <ce0f6e0c0805122146j3e336d78j91a974e3c20cf806@mail.gmail.com>
Message-ID: <BC3E0313-F8B6-4E45-806A-1409B99DE56E@atlasocean.com>

Ross,

Statecharts are trivial to code by hand, using case and switch  
statements, and result in roughly the same amount of code as a  
straight Ragel implementation would. In addition, the hand-coded  
variants are more flexible, since you can implement the full "spec" as  
designed by Harel. You can also easily embed Ragel regex-style  
machines in the various states as needed when you hand code, and  
Adrian's code generation approach makes that particularly easy.

Bottom-line: hand-code statecharts. The hard part is creating the  
statecharts themselves (I use OmniGraffle), not coding them up.

That said, I wouldn't create a protocol handler without them. They are  
extraordinarily efficient, **easy** to debug, and quick to modify. I  
create and modify statechart-based code daily at my day job, and use  
statecharts on my own projects.

Zed Shaw has done some work with Ragel and statecharts if you still  
want to go down that path:

	http://www.zedshaw.com/tips/ragel_state_charts.html

Best, Erich

On May 12, 2008, at 9:46 PM, Ross Thomas wrote:

>
> It seems to me that the approach I describe cannot work as I wanted it
> to, because the regexps matching the commands are duplicated for each
> state, only with a different target state. For example:
>
> main := (
>    start: (
>        1 -> a
>    ),
>    a: (
>        1 -> b
>    ),
>    ...
> );
>
> Given the input [1, 1] the machine will end up in state "a", not state
> "final" as I thought. Which makes sense now I think about it.
>
> Back to the drawing board... :)
>
> -Ross
>
>
> On Mon, May 12, 2008 at 6:15 PM, Adrian Thurston <thurs... at cs.queensu.ca 
> > wrote:
>> Hi Ross,
>>
>> To be honest I don't have much experience with this approach.  
>> Statecharts were originally made for small low-level machines that  
>> are awkward to do with regular expressions. But they turned out to  
>> be more useful. The only issue I can think of is dealing with  
>> whitespace ... but I don't know SMTP well enough to say for sure.  
>> Let us know if if you pursue it and it works out :)
>>
>> Adrian
>> -----Original Message-----
>> From: "Ross Thomas" <halfacan... at gmail.com>
>>
>> Date: Mon, 12 May 2008 15:17:27
>> To:ragel-users <ragel-users at googlegroups.com>
>> Subject: [ragel-users] Re: Any suggestions on implementing SMTP  
>> protocol in
>> Ragel?
>>
>>
>>
>> To reduce the scope of my question a little, here is the general
>> structure I have so far:
>>
>>   main := (
>>       start: (
>>           helo @copy_helo @resp_250 -> wait_mail |
>>           mail @resp_503 -> start |
>>           vrfy @resp_503 -> start |
>>           ...
>>       wait_mail: (
>>           helo @resp_250 -> wait_mail |
>>           mail @copy_mail @resp_250 -> wait_rcpt |
>>           vrfy @resp_252 -> wait_mail |
>>           ...
>>   );
>>
>> Each "helo", "mail", "vrfy" etc. machine corresponds to the SMTP
>> command of the same name. They are defined as:
>>
>>   helo = (("HELO"i | "EHLO"i) " "       %sarg graph+ %earg     eol);
>>   mail = ( "MAIL"i            " FROM:<" %sarg path*  %earg ">" eol);
>>   vrfy = ( "VRFY"i            " "       %sarg graph+ %earg     eol);
>>   ...
>>
>> So the idea is that the top-level state chart handles logical flow  
>> and
>> knows which commands are valid in which states, and calls the
>> appropriate actions. The tokenizing is done "inline", as it were.
>>
>> Does this strike anyone as a particularly foolish approach? Is  
>> there a
>> better way?
>>
>> -Ross
>>
>>
>> On Sun, May 11, 2008 at 11:57 AM, Ross Thomas  
>> <halfacan... at gmail.com> wrote:
>>>
>>> While hacking up a parser for SMTP (in an unprecedentedly small  
>>> amount
>>> of time, naturally :)) it occurred to me that given Ragel's  
>>> ability to
>>> mix regular expressions with state charts I could make the same
>>> machine double-up as an SMTP protocol handler too. At least, I  
>>> think I
>>> could. Because a significant portion of my work involves the client/
>>> server model this is an aspect of Ragel I'd very much like to  
>>> explore
>>> in more detail...
>>>
>>> I've browsed around on the list and read Zed's post on state charts
>>> but still don't have a totally clear idea on how this might be
>>> implemented. Can anyone out there with more Ragel experience point  
>>> me
>>> in the right direction?
>>>
>>> -Ross
>>
>>
>>
>>
>>>
>>
>
> >


From halfacan... at gmail.com  Wed May 14 05:27:31 2008
From: halfacan... at gmail.com (Ross Thomas)
Date: Tue, 13 May 2008 22:27:31 -0700
Subject: [ragel-users] Re: Any suggestions on implementing SMTP protocol inRagel?
In-Reply-To: <BC3E0313-F8B6-4E45-806A-1409B99DE...@atlasocean.com>
References: <17e3e3eb-5aaf-42b8-9556-510609c45...@z24g2000prf.googlegroups.com>
	 <ce0f6e0c0805121517k41e25d4el9c416ae116c23...@mail.gmail.com>
	 <762981520-1210641299-cardhu_decombobulator_blackberry.rim.net-6015145...@bxe150.bisx.prod.on.blackberry>
	 <ce0f6e0c0805122146j3e336d78j91a974e3c20cf...@mail.gmail.com>
	 <BC3E0313-F8B6-4E45-806A-1409B99DE...@atlasocean.com>
Message-ID: <ce0f6e0c0805132227u463e373ehdcc865296d686bbf@mail.gmail.com>

Hi Erich,

I had not come across Harel's work before (believe it or not) so I read the
paper containing the "spec" you mentioned. It was, needless to say,
extremely interesting, and very relevant for the systems I design at work
(which, I have only recently come to realize, are soft real-time systems).
Having poked around in Ragel a little more I see that you are of course
right when you say that it should complement rather than replace a
hand-coded statechart.

Do you know of any examples of statecharts describing a protocol handler, or
any good resources around statechart diagrams in general?

-Ross


On Tue, May 13, 2008 at 6:43 AM, Erich Ocean <er... at atlasocean.com> wrote:

>
> Ross,
>
> Statecharts are trivial to code by hand, using case and switch
> statements, and result in roughly the same amount of code as a
> straight Ragel implementation would. In addition, the hand-coded
> variants are more flexible, since you can implement the full "spec" as
> designed by Harel. You can also easily embed Ragel regex-style
> machines in the various states as needed when you hand code, and
> Adrian's code generation approach makes that particularly easy.
>
> Bottom-line: hand-code statecharts. The hard part is creating the
> statecharts themselves (I use OmniGraffle), not coding them up.
>
> That said, I wouldn't create a protocol handler without them. They are
> extraordinarily efficient, **easy** to debug, and quick to modify. I
> create and modify statechart-based code daily at my day job, and use
> statecharts on my own projects.
>
> Zed Shaw has done some work with Ragel and statecharts if you still
> want to go down that path:
>
>        http://www.zedshaw.com/tips/ragel_state_charts.html
>
> Best, Erich
>
> On May 12, 2008, at 9:46 PM, Ross Thomas wrote:
>
> >
> > It seems to me that the approach I describe cannot work as I wanted it
> > to, because the regexps matching the commands are duplicated for each
> > state, only with a different target state. For example:
> >
> > main := (
> >    start: (
> >        1 -> a
> >    ),
> >    a: (
> >        1 -> b
> >    ),
> >    ...
> > );
> >
> > Given the input [1, 1] the machine will end up in state "a", not state
> > "final" as I thought. Which makes sense now I think about it.
> >
> > Back to the drawing board... :)
> >
> > -Ross
> >
> >
> > On Mon, May 12, 2008 at 6:15 PM, Adrian Thurston <thurs... at cs.queensu.ca
> > > wrote:
> >> Hi Ross,
> >>
> >> To be honest I don't have much experience with this approach.
> >> Statecharts were originally made for small low-level machines that
> >> are awkward to do with regular expressions. But they turned out to
> >> be more useful. The only issue I can think of is dealing with
> >> whitespace ... but I don't know SMTP well enough to say for sure.
> >> Let us know if if you pursue it and it works out :)
> >>
> >> Adrian
> >> -----Original Message-----
> >> From: "Ross Thomas" <halfacan... at gmail.com>
> >>
> >> Date: Mon, 12 May 2008 15:17:27
> >> To:ragel-users <ragel-users at googlegroups.com>
> >> Subject: [ragel-users] Re: Any suggestions on implementing SMTP
> >> protocol in
> >> Ragel?
> >>
> >>
> >>
> >> To reduce the scope of my question a little, here is the general
> >> structure I have so far:
> >>
> >>   main := (
> >>       start: (
> >>           helo @copy_helo @resp_250 -> wait_mail |
> >>           mail @resp_503 -> start |
> >>           vrfy @resp_503 -> start |
> >>           ...
> >>       wait_mail: (
> >>           helo @resp_250 -> wait_mail |
> >>           mail @copy_mail @resp_250 -> wait_rcpt |
> >>           vrfy @resp_252 -> wait_mail |
> >>           ...
> >>   );
> >>
> >> Each "helo", "mail", "vrfy" etc. machine corresponds to the SMTP
> >> command of the same name. They are defined as:
> >>
> >>   helo = (("HELO"i | "EHLO"i) " "       %sarg graph+ %earg     eol);
> >>   mail = ( "MAIL"i            " FROM:<" %sarg path*  %earg ">" eol);
> >>   vrfy = ( "VRFY"i            " "       %sarg graph+ %earg     eol);
> >>   ...
> >>
> >> So the idea is that the top-level state chart handles logical flow
> >> and
> >> knows which commands are valid in which states, and calls the
> >> appropriate actions. The tokenizing is done "inline", as it were.
> >>
> >> Does this strike anyone as a particularly foolish approach? Is
> >> there a
> >> better way?
> >>
> >> -Ross
> >>
> >>
> >> On Sun, May 11, 2008 at 11:57 AM, Ross Thomas
> >> <halfacan... at gmail.com> wrote:
> >>>
> >>> While hacking up a parser for SMTP (in an unprecedentedly small
> >>> amount
> >>> of time, naturally :)) it occurred to me that given Ragel's
> >>> ability to
> >>> mix regular expressions with state charts I could make the same
> >>> machine double-up as an SMTP protocol handler too. At least, I
> >>> think I
> >>> could. Because a significant portion of my work involves the client/
> >>> server model this is an aspect of Ragel I'd very much like to
> >>> explore
> >>> in more detail...
> >>>
> >>> I've browsed around on the list and read Zed's post on state charts
> >>> but still don't have a totally clear idea on how this might be
> >>> implemented. Can anyone out there with more Ragel experience point
> >>> me
> >>> in the right direction?
> >>>
> >>> -Ross
> >>
> >>
> >>
> >>
> >>>
> >>
> >
> > >
>
>
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel/attachments/20080513/da09cb2f/attachment.html>

From zeds... at zedshaw.com  Wed May 14 06:09:10 2008
From: zeds... at zedshaw.com (Zed A. Shaw)
Date: Wed, 14 May 2008 02:09:10 -0400
Subject: [ragel-users] Re: Any suggestions on implementing SMTP protocol
 inRagel?
In-Reply-To: <BC3E0313-F8B6-4E45-806A-1409B99DE56E@atlasocean.com>
References: <17e3e3eb-5aaf-42b8-9556-510609c45cb3@z24g2000prf.googlegroups.com>
	<ce0f6e0c0805121517k41e25d4el9c416ae116c23d8e@mail.gmail.com>
	<762981520-1210641299-cardhu_decombobulator_blackberry.rim.net-601514575-@bxe150.bisx.prod.on.blackberry>
	<ce0f6e0c0805122146j3e336d78j91a974e3c20cf806@mail.gmail.com>
	<BC3E0313-F8B6-4E45-806A-1409B99DE56E@atlasocean.com>
Message-ID: <20080514020910.7756e93c.zedshaw@zedshaw.com>

On Tue, 13 May 2008 06:43:39 -0700
Erich Ocean <er... at atlasocean.com> wrote:

> 
> Ross,
> 
> Statecharts are trivial to code by hand, using case and switch  
> statements, and result in roughly the same amount of code as a  
> straight Ragel implementation would. In addition, the hand-coded  
> variants are more flexible, since you can implement the full "spec" as  
> designed by Harel. You can also easily embed Ragel regex-style  
> machines in the various states as needed when you hand code, and  
> Adrian's code generation approach makes that particularly easy.

It is easy to code simple ones, but hand-coded ones have the following
limitations:

1) Nobody can read the mass of case/switch crap later on, not even the
dude who wrote it initially.
2) Debugging them is a pain in the ass, usually involving tracing
statements.
3) The compiler can't tell you if you have cycles, invalid
transitions, and doesn't minimize your states.  Ragel does all that.
4) You can't generate dot graphs from your stuff.

Now, what I've done in the past to remove 1-3 is to use statecharts
implemented as C macros and function call semantics.  You should also
go grab:

http://www.quantum-leaps.com/

Ignore the hyperbole about "quantum programming" and just buy the
book. Miro Samek knows tons and tons and tons about doing statecharts
in hand-coded C++ and is also able to explain many concepts about
hierarchical FSM.

But still, it's a pain in the ass compared to using Ragel.

> Bottom-line: hand-code statecharts. The hard part is creating the  
> statecharts themselves (I use OmniGraffle), not coding them up.

That's only because the distance from drawing to implementation is so
wide.  When you use Ragel the same syntax produces the diagram and the
code, so the distance is much shorter.

> That said, I wouldn't create a protocol handler without them. They are  
> extraordinarily efficient, **easy** to debug, and quick to modify. I  
> create and modify statechart-based code daily at my day job, and use  
> statecharts on my own projects.

I totally agree with this.  Servers that don't have them are so much
harder to use.  I'm working on a new HTTP server/proxy and I'm totally
taking the methods I worked up for Utu in this one.  It's so much
easier.
 
> Zed Shaw has done some work with Ragel and statecharts if you still  
> want to go down that path:
> 
> 	http://www.zedshaw.com/tips/ragel_state_charts.html

I'll be doing a new one of that for my new web server project.  Stay
tuned, I'll drop an announce here.

-- 
Zed A. Shaw
- Hate: http://savingtheinternetwithhate.com/
- Good: http://www.zedshaw.com/
- Evil: http://yearofevil.com/


From er... at atlasocean.com  Wed May 14 14:22:02 2008
From: er... at atlasocean.com (Erich Ocean)
Date: Wed, 14 May 2008 07:22:02 -0700
Subject: [ragel-users] Re: Any suggestions on implementing SMTP protocol inRagel?
In-Reply-To: <20080514020910.7756e93c.zedshaw@zedshaw.com>
References: <17e3e3eb-5aaf-42b8-9556-510609c45cb3@z24g2000prf.googlegroups.com> <ce0f6e0c0805121517k41e25d4el9c416ae116c23d8e@mail.gmail.com> <762981520-1210641299-cardhu_decombobulator_blackberry.rim.net-601514575-@bxe150.bisx.prod.on.blackberry> <ce0f6e0c0805122146j3e336d78j91a974e3c20cf806@mail.gmail.com> <BC3E0313-F8B6-4E45-806A-1409B99DE56E@atlasocean.com> <20080514020910.7756e93c.zedshaw@zedshaw.com>
Message-ID: <D130FCE8-7AD9-4E4F-94BD-A3B1F25FF76C@atlasocean.com>

On May 13, 2008, at 11:09 PM, Zed A. Shaw wrote:

> On Tue, 13 May 2008 06:43:39 -0700
> Erich Ocean <er... at atlasocean.com> wrote:
>
>> Ross,
>>
>> Statecharts are trivial to code by hand, using case and switch
>> statements, and result in roughly the same amount of code as a
>> straight Ragel implementation would. In addition, the hand-coded
>> variants are more flexible, since you can implement the full "spec"  
>> as
>> designed by Harel. You can also easily embed Ragel regex-style
>> machines in the various states as needed when you hand code, and
>> Adrian's code generation approach makes that particularly easy.
>
> It is easy to code simple ones, but hand-coded ones have the following
> limitations:
>
> 1) Nobody can read the mass of case/switch crap later on, not even the
> dude who wrote it initially.
> 2) Debugging them is a pain in the ass, usually involving tracing
> statements.
> 3) The compiler can't tell you if you have cycles, invalid
> transitions, and doesn't minimize your states.  Ragel does all that.
> 4) You can't generate dot graphs from your stuff.

I have not uncovered the limitations with hand-coding statecharts  
described by Zed. My guess is that we learned different strategies for  
implementing them. Here's who I learned from:

	Constructing the User Interface with Statecharts
	by Ian Horrocks, Addison-Wesley, 1999

	http://www.amazon.com/Constructing-User-Interface-Statecharts-Horrocks/dp/0201342782

The book is out of print, and a guy at work recently bought a used  
copy for $100 (it originally sold for $40, I think). The book is  
oriented towards writing the control layer in MVC software, but you  
can use statecharts anywhere. I use them in all three layers, client,  
server, and with databases. Basically, whenever the control logic  
degenerates to testing boolean flags* and changing behavior as a  
result, I immediately switch to statecharts because I know the  
resulting code will:

1. accurately reflect the control code as designed by me
2. be easy to debug and _verify_ using "white box" techniques
3. be easily enhanced over the lifetime of the system**

* The first boolean flag in code is usually a harbinger of more  
boolean flags to come. By switching to statecharts early, I can handle  
enhanced logic later in-stride and without impacting my schedule/budget.

** Ragel is particularly ill-suited to implementing statecharts that  
are modified over time, precisely _because_ it minimizes states. You  
don't want states combined or minimized because it makes it very  
difficult to extend and modify objects whose state is archived (e.g.  
in a database, on disk, whatever). Zed might not have run into this  
problem yet because he writes clients and servers in-sync, and they  
start with "fresh state" at each startup. Long-running systems can't  
rely on that behavior because they have persistent state.

There is a wide sense among programmers that state machines, including  
statecharts, make code hard to understand. I have no idea why this is  
the case, since my experience is the complete opposite.

As evidence, the first thing I do when working with a new library/API  
is to document what the API does with statecharts, where the "events"  
are function calls into the APIs (including pseudo-function calls if  
the API exposes data-as-symbols). I then translate that statecharts to  
code (in mock object fashion) and do "forwarding" calls to the real  
API during development. This has had two major advantages:

1. I can quickly and easily understand how the underlying API "works"  
from an external perspective, and _test those assumptions_ quickly and  
easily.
2. By running my own code against the mock object(s) (I call the mock  
objects constructed in this fashion "state guards"), I can be sure  
that I'm using the API consistently and within specifications at all  
times. An unhandled "event" (aka function call) in my state guard is  
evidence that I did something out-of-order, such as calling library  
code before calling the libraries "init" function.

I can't think of a higher complement to the understandability of  
statecharts than that. I find most code horrendously hard to read,  
regardless of how it was implemented. Statecharts remove all of that  
for me, quickly and easily, and forever. With stateguards and the  
graphical statechart diagrams, I can answer any question about the  
behavior of the API years down the road in seconds. _No other approach  
I've discovered can make that claim._

Zed makes good points based on his experience, and rather than try and  
refute each of them based on mine, I'll just quote from the book  
mentioned above. If the claims look good to you, I recommend tracking  
down the book and giving it a whirl. I can personally vouch for all of  
the benefits (as well as the limitations) given for statecharts.

Best, Erich

 From __Constructing the User Interface with Statecharts__ by Ian  
Horrocks, Addison-Wesley, 1999:

Advantages of the statechart approach
=====================================

General
-------

- a low number of bugs
- a language independent notation
- complicated user interfaces can be developed with ease
- the speed of user interface development is not reduced
- the performance of the software is not affected
- statecharts are easier to understand than code alone

Design
------

- the designs are precise and consistent
- the designs are modular
- the designs are compact
- the designs are kept up-to-date
- the designs can be reused


Coding
------

- simple and consistent code
- no requirements work during the coding phase
- the code is easy to debug
- the code facilitates walk-throughs

Testing
-------

- unit testing is thorough
- regression testing is efficient and effective
- the unit test cases are compact

Maintenance
-----------

- faults can be traced easily
- changes are local in effect
- very big changes to a user interface are relatively easy to achieve
- it is easy to maintain unfamiliar software
- estimates are more accurate

Some possible limitations of the statechart approach
====================================================

- translating a statechart to code is boring
- the code may not adhere to the design (if you modify the code  
without updating the design)
- the code can be indecipherable to people not familiar with the  
statechart notation
- the method will take a reasonable amount of time to learn
- developers, particularly weak developers, may resist the technique  
because of its rigour

> Now, what I've done in the past to remove 1-3 is to use statecharts
> implemented as C macros and function call semantics.  You should also
> go grab:
>
> http://www.quantum-leaps.com/
>
> Ignore the hyperbole about "quantum programming" and just buy the
> book. Miro Samek knows tons and tons and tons about doing statecharts
> in hand-coded C++ and is also able to explain many concepts about
> hierarchical FSM.
>
> But still, it's a pain in the ass compared to using Ragel.
>
>> Bottom-line: hand-code statecharts. The hard part is creating the
>> statecharts themselves (I use OmniGraffle), not coding them up.
>
> That's only because the distance from drawing to implementation is so
> wide.  When you use Ragel the same syntax produces the diagram and the
> code, so the distance is much shorter.
>
>> That said, I wouldn't create a protocol handler without them. They  
>> are
>> extraordinarily efficient, **easy** to debug, and quick to modify. I
>> create and modify statechart-based code daily at my day job, and use
>> statecharts on my own projects.
>
> I totally agree with this.  Servers that don't have them are so much
> harder to use.  I'm working on a new HTTP server/proxy and I'm totally
> taking the methods I worked up for Utu in this one.  It's so much
> easier.
>
>> Zed Shaw has done some work with Ragel and statecharts if you still
>> want to go down that path:
>>
>> 	http://www.zedshaw.com/tips/ragel_state_charts.html
>
> I'll be doing a new one of that for my new web server project.  Stay
> tuned, I'll drop an announce here.
>
> -- 
> Zed A. Shaw
> - Hate: http://savingtheinternetwithhate.com/
> - Good: http://www.zedshaw.com/
> - Evil: http://yearofevil.com/
>
> >


From pazzodaleg... at gmail.com  Wed May 21 20:07:25 2008
From: pazzodaleg... at gmail.com (Pazzo Da Legare)
Date: Wed, 21 May 2008 22:07:25 +0200
Subject: mapping uml state chart to ragel state chart
Message-ID: <1a26b4920805211307x1b05c7ddj6d70ce6c69183a1@mail.gmail.com>

Dears All,

I'm start using ragel since a couple of days and it seems to me really
powerful. I wonder if someone try to implement  an UML state chart
which could be hierarchical using ragel. In particular I would like to
map common action to a set of states, is there a straightforward way?

pazzodalegare


From thurs... at cs.queensu.ca  Thu May 22 18:13:54 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Thu, 22 May 2008 14:13:54 -0400
Subject: [ragel-users] mapping uml state chart to ragel state chart
In-Reply-To: <1a26b4920805211307x1b05c7ddj6d70ce6c69183a1@mail.gmail.com>
References: <1a26b4920805211307x1b05c7ddj6d70ce6c69183a1@mail.gmail.com>
Message-ID: <4835B7E2.7050000@cs.queensu.ca>

Hi Pazzo,

I'm not aware of anyone who has done this.

Regards,
 Adrian

Pazzo Da Legare wrote:
> Dears All,
> 
> I'm start using ragel since a couple of days and it seems to me really
> powerful. I wonder if someone try to implement  an UML state chart
> which could be hierarchical using ragel. In particular I would like to
> map common action to a set of states, is there a straightforward way?
> 
> pazzodalegare
> 
> > 
> 


From pazzodaleg... at gmail.com  Thu May 22 21:49:57 2008
From: pazzodaleg... at gmail.com (pazzodalegare)
Date: Thu, 22 May 2008 14:49:57 -0700 (PDT)
Subject: mapping uml state chart to ragel state chart
In-Reply-To: <4835B7E2.7050000@cs.queensu.ca>
References: <1a26b4920805211307x1b05c7ddj6d70ce6c69183a1@mail.gmail.com> 
	<4835B7E2.7050000@cs.queensu.ca>
Message-ID: <613599b7-8c6c-4abd-bd62-3e74e4592852@r66g2000hsg.googlegroups.com>

Hi Adrian,

thank you for your answer! I will try to go more in depth through
ragel documentation.

Best Regards,

p


On 22 Mag, 20:13, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> Hi Pazzo,
>
> I'm not aware of anyone who has done this.
>
> Regards,
>  Adrian


From hsan... at gmail.com  Fri May 23 01:56:52 2008
From: hsan... at gmail.com (hsanson)
Date: Thu, 22 May 2008 18:56:52 -0700 (PDT)
Subject: Golomb parser
Message-ID: <362d7665-788e-4d70-8c0c-6f3393cb810b@h1g2000prh.googlegroups.com>

Is it possible to create a VLC (Variable Length Code) syntax like
Golomb or CABAC used in video codecs using Ragel??

If so how difficult can this be??


thanks


From thurs... at cs.queensu.ca  Fri May 23 15:05:27 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Fri, 23 May 2008 11:05:27 -0400
Subject: [ragel-users] Golomb parser
In-Reply-To: <362d7665-788e-4d70-8c0c-6f3393cb810b@h1g2000prh.googlegroups.com>
References: <362d7665-788e-4d70-8c0c-6f3393cb810b@h1g2000prh.googlegroups.com>
Message-ID: <4836DD37.3010206@cs.queensu.ca>

Hi Horacio,

I'm not sure ... I haven't heard of these languages before. If you do
try using Ragel it would be great if you could let us know how it worked
out.

Regards,
 Adrian

hsanson wrote:
> Is it possible to create a VLC (Variable Length Code) syntax like
> Golomb or CABAC used in video codecs using Ragel??
> 
> If so how difficult can this be??
> 
> 
> thanks
> Horacio
> > 
> 


From mforal.n... at gmail.com  Fri May 23 22:29:01 2008
From: mforal.n... at gmail.com (mitchell)
Date: Fri, 23 May 2008 15:29:01 -0700 (PDT)
Subject: Multiple inclusions cause multiple definitions => compile error
Message-ID: <713a2eaf-6781-4ba2-9af2-6ebd164864ab@w7g2000hsa.googlegroups.com>

Adrian,

This is a result of my previous thread on multiple inclusion errors.

Here's what I'm working with:
  css.rl - a CSS parser
  javascript.rl - a Javascript parser
  html.rl - a HTML parser that 'include's css.rl and javascript.rl.

css.rl 'include's a common.rl while javascript.rl and html.rl do not
(as you asked in my previous thread)

I get no compilation errors from ragel, but when I compile the
generated C code, specifically html.c, I get 'previous definition was
here' errors from gcc. I went into the code and one of the 2 dozen or
so redeclarations was:
  static const char _html_actions[] = {
    ...
  }
It was declared 3 times throughout html.c. I removed the javascript.rl
'include' statement and tried to compile again. This time the same
_html_actions was declared 2 times. It seems 'include' has some
strange effects.

Any idea what's going wrong? Do you need more information?

Thanks,


From mforal.n... at gmail.com  Fri May 23 22:33:24 2008
From: mforal.n... at gmail.com (mitchell)
Date: Fri, 23 May 2008 15:33:24 -0700 (PDT)
Subject: Multiple inclusions cause multiple definitions => compile error
In-Reply-To: <713a2eaf-6781-4ba2-9af2-6ebd164864ab@w7g2000hsa.googlegroups.com>
References: <713a2eaf-6781-4ba2-9af2-6ebd164864ab@w7g2000hsa.googlegroups.com>
Message-ID: <7d6c272e-c38f-49da-8b56-3fa8d49189be@56g2000hsm.googlegroups.com>

> This is a result of my previous thread on multiple inclusion errors.

Apologies for the ambiguous title. This is multiple include statements
of *different* files that result in *gcc* compile errors; not ragel
ones


From thurs... at cs.queensu.ca  Sat May 24 18:38:17 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Sat, 24 May 2008 14:38:17 -0400
Subject: [ragel-users] Re: Multiple inclusions cause multiple definitions
 => compile error
In-Reply-To: <7d6c272e-c38f-49da-8b56-3fa8d49189be@56g2000hsm.googlegroups.com>
References: <713a2eaf-6781-4ba2-9af2-6ebd164864ab@w7g2000hsa.googlegroups.com> <7d6c272e-c38f-49da-8b56-3fa8d49189be@56g2000hsm.googlegroups.com>
Message-ID: <48386099.4080000@cs.queensu.ca>

Hey Mitchell,

Do all of the files have write statements? Somehow multiple write
commands for the html machine have been issued.

-Adrian


mitchell wrote:
>> This is a result of my previous thread on multiple inclusion errors.
> 
> Apologies for the ambiguous title. This is multiple include statements
> of *different* files that result in *gcc* compile errors; not ragel
> ones
> 
> -Mitchell;
> > 
> 


From mforal.n... at gmail.com  Sat May 24 22:43:59 2008
From: mforal.n... at gmail.com (mitchell)
Date: Sat, 24 May 2008 15:43:59 -0700 (PDT)
Subject: Multiple inclusions cause multiple definitions => compile error
In-Reply-To: <48386099.4080000@cs.queensu.ca>
References: <713a2eaf-6781-4ba2-9af2-6ebd164864ab@w7g2000hsa.googlegroups.com> 
	<7d6c272e-c38f-49da-8b56-3fa8d49189be@56g2000hsm.googlegroups.com> 
	<48386099.4080000@cs.queensu.ca>
Message-ID: <3cc1bc46-4fff-48fb-9964-c7958ae81f3f@k37g2000hsf.googlegroups.com>

Adrian,

> Do all of the files have write statements? Somehow multiple write
> commands for the html machine have been issued.

Yes, all have write statements because all are intended to be used
individually. That was the issue.

I guess now the question is, can I somehow specify a conditional so I
not do any writing for parsers that are being 'include'd? In this case
I normally want javascript.rl and css.rl to write data when they are
used individually, but I don't want them to write anything when being
'include'd by html.rl.

I'm not sure how familiar you are with Lua, but I used to write parser
modules in it. Each parser module had a name in a global namespace so
I could just do a:
  if [parser] then
    ... -- this parser is being included by [parser]
  end

Thanks,


From mforal.n... at gmail.com  Sun May 25 04:22:47 2008
From: mforal.n... at gmail.com (mitchell)
Date: Sat, 24 May 2008 21:22:47 -0700 (PDT)
Subject: Multiple inclusions cause multiple definitions => compile error
In-Reply-To: <3cc1bc46-4fff-48fb-9964-c7958ae81f3f@k37g2000hsf.googlegroups.com>
References: <713a2eaf-6781-4ba2-9af2-6ebd164864ab@w7g2000hsa.googlegroups.com> 
	<7d6c272e-c38f-49da-8b56-3fa8d49189be@56g2000hsm.googlegroups.com> 
	<48386099.4080000@cs.queensu.ca> <3cc1bc46-4fff-48fb-9964-c7958ae81f3f@k37g2000hsf.googlegroups.com>
Message-ID: <96e6b3ca-5e86-40b1-a62a-9834898345d0@m36g2000hse.googlegroups.com>

> I could just do a:
>   if [parser] then
>     ... -- this parser is being included by [parser]
>   end

I guess a Ragel equivalent of C's #ifdef, #ifndef, #define, etc. would
be perfect.


From hsan... at gmail.com  Fri May 23 06:10:47 2008
From: hsan... at gmail.com (hsanson)
Date: Thu, 22 May 2008 23:10:47 -0700 (PDT)
Subject: Simple URL parser
Message-ID: <952a0db1-e92f-4d74-882b-6a94645df9ba@a9g2000prl.googlegroups.com>

To learn how to use Ragel I am implementing a simple URL parser that
receives something like "http://www.ragel.com:8080/file.txt" and
returns each part (scheme, hostname, port, path) as strings. As I
understand doing this with Ragel should be a breeze.

Still there is something I am not getting right and would like some
advice, see code below:

The scheme part seems to work so I assume my understanding of Ragel is
not that bad. The problem is with the hostname and port parts. The
hostname action gets called for each character on the hostname, that
is not the intended behavior and the port action never gets called.

Any tips to take me back on track would be greatly appreciated.

Horacio

//###################################
#include <string.h>
#include <stdio.h>
#include <stdlib.h>

typedef struct {
    char *scheme;
    char *hostname;
    char *service;
    char *path;
    char *uri;
} suj_url;

%%{
    machine uri_parser;

# Actions
    action mark_start {
        start = fpc;
        printf("Mark start at %c\n", fc);
    }

    action scheme {
        size_t len = fpc - start + 1;
        url->scheme = calloc(len,sizeof(char));
        strncpy(url->scheme, start, len);
        url->scheme[len]='\0';
        printf("scheme: %s\n",url->scheme);
    }

    action host {
        size_t len = fpc - start + 1;
        url->hostname = calloc(len,sizeof(char));
        strncpy(url->hostname, start, len);
        url->hostname[len]='\0';
        printf("host: %s\n",url->hostname);
    }

    action port {
        size_t len = fpc - start + 1;
        url->service = calloc(len,sizeof(char));
        strncpy(url->service, start, len);
        url->service[len]='\0';
        printf("service: %s\n",url->service);
    }
# Grammar
    escaped = ("%" xdigit xdigit);
    scheme = ("http"i | "rtsp"i | "rtp"i) >mark_start @scheme;
    port   = (":" digit+) >mark_start %port;
    host   = (any* -- ("/" | ":")) >mark_start @host;

    uri = (scheme "://" host  port ) . '\0';

# Main
    main := uri;

}%%

%%write data;

suj_url * suj_url_new(char *uri)
{
    suj_url *url;
    char *start;
    char *end;

    int cs;
    %% write init;

    char *p = uri;
    char *pe = p + strlen(uri);

    url = calloc(1,sizeof(url));
    url->uri = calloc(strlen(uri),sizeof(char));
    strncpy(url->uri,uri, strlen(uri));

    %% write exec;

    return url;
}

int main(int argc, char **argv)
{
    suj_url *url;
    url = suj_url_new("rtp://www.ragel.org:8080");
}


From hsan... at gmail.com  Fri May 23 09:07:17 2008
From: hsan... at gmail.com (hsanson)
Date: Fri, 23 May 2008 18:07:17 +0900
Subject: [ragel-users] Simple URL parser
In-Reply-To: <952a0db1-e92f-4d74-882b-6a94645df...@a9g2000prl.googlegroups.com>
References: <952a0db1-e92f-4d74-882b-6a94645df...@a9g2000prl.googlegroups.com>
Message-ID: <48368945.9000...@gmail.com>

Ok, so I tried harder and read the URL spec (RFC 1738) and did a direct 
translation from the ABNF syntax to Ragel syntax and now it works (almost).

I still have a few (actually a lot) of questions:

1 - If you see my code (attached) you will see I parse the scheme, 
hostname, port and path parts of the URL using almost identical
     actions. The only difference is the variables used to store the 
parsed strings. Is there a way to pass the actions some variables?
     So I can create a single function and pass the variable to store as 
a parameter?

2 - For some reason the last parsing never finishes. If I pass an URL 
like "http://hostname" the parser gives me the scheme "http" but
     not the hostname. If I pass an URL like "http://hostname:8080" the 
parser outputs the scheme and hostname but not the port. And if
     I provide a path like "http://hostname:8080/file.html" the parser 
gives me all except for the path. As you see the last string never get's
     parsed and I don't know why??.

3 - Is there a better/cleaner way to do this??

thanks
Horacio

hsanson wrote:
> To learn how to use Ragel I am implementing a simple URL parser that
> receives something like "http://www.ragel.com:8080/file.txt" and
> returns each part (scheme, hostname, port, path) as strings. As I
> understand doing this with Ragel should be a breeze.
>
> Still there is something I am not getting right and would like some
> advice, see code below:
>
> The scheme part seems to work so I assume my understanding of Ragel is
> not that bad. The problem is with the hostname and port parts. The
> hostname action gets called for each character on the hostname, that
> is not the intended behavior and the port action never gets called.
>
> Any tips to take me back on track would be greatly appreciated.
>
> Horacio
>   

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: url.rl
URL: <http://www.colm.net/pipermail/ragel/attachments/20080523/476352ef/attachment.ksh>

From thurs... at cs.queensu.ca  Fri May 23 18:07:43 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Fri, 23 May 2008 14:07:43 -0400
Subject: [ragel-users] Simple URL parser
In-Reply-To: <952a0db1-e92f-4d74-882b-6a94645df9ba@a9g2000prl.googlegroups.com>
References: <952a0db1-e92f-4d74-882b-6a94645df9ba@a9g2000prl.googlegroups.com>
Message-ID: <483707EF.9050901@cs.queensu.ca>

Hey Horacio,

The host action is executed on every character of the host name because
the finishing operator is used on a repeated machine. Finishing actions
are executed every time the state machine moves into a final state,
which is every character in the case of a single character that is
repeated. Use % instead.

-Adrian

hsanson wrote:
> To learn how to use Ragel I am implementing a simple URL parser that
> receives something like "http://www.ragel.com:8080/file.txt" and
> returns each part (scheme, hostname, port, path) as strings. As I
> understand doing this with Ragel should be a breeze.
> 
> Still there is something I am not getting right and would like some
> advice, see code below:
> 
> The scheme part seems to work so I assume my understanding of Ragel is
> not that bad. The problem is with the hostname and port parts. The
> hostname action gets called for each character on the hostname, that
> is not the intended behavior and the port action never gets called.
> 
> Any tips to take me back on track would be greatly appreciated.
> 
> Horacio
> 
> //###################################
> #include <string.h>
> #include <stdio.h>
> #include <stdlib.h>
> 
> typedef struct {
>     char *scheme;
>     char *hostname;
>     char *service;
>     char *path;
>     char *uri;
> } suj_url;
> 
> %%{
>     machine uri_parser;
> 
> # Actions
>     action mark_start {
>         start = fpc;
>         printf("Mark start at %c\n", fc);
>     }
> 
>     action scheme {
>         size_t len = fpc - start + 1;
>         url->scheme = calloc(len,sizeof(char));
>         strncpy(url->scheme, start, len);
>         url->scheme[len]='\0';
>         printf("scheme: %s\n",url->scheme);
>     }
> 
>     action host {
>         size_t len = fpc - start + 1;
>         url->hostname = calloc(len,sizeof(char));
>         strncpy(url->hostname, start, len);
>         url->hostname[len]='\0';
>         printf("host: %s\n",url->hostname);
>     }
> 
>     action port {
>         size_t len = fpc - start + 1;
>         url->service = calloc(len,sizeof(char));
>         strncpy(url->service, start, len);
>         url->service[len]='\0';
>         printf("service: %s\n",url->service);
>     }
> # Grammar
>     escaped = ("%" xdigit xdigit);
>     scheme = ("http"i | "rtsp"i | "rtp"i) >mark_start @scheme;
>     port   = (":" digit+) >mark_start %port;
>     host   = (any* -- ("/" | ":")) >mark_start @host;
> 
>     uri = (scheme "://" host  port ) . '\0';
> 
> # Main
>     main := uri;
> 
> }%%
> 
> %%write data;
> 
> suj_url * suj_url_new(char *uri)
> {
>     suj_url *url;
>     char *start;
>     char *end;
> 
>     int cs;
>     %% write init;
> 
>     char *p = uri;
>     char *pe = p + strlen(uri);
> 
>     url = calloc(1,sizeof(url));
>     url->uri = calloc(strlen(uri),sizeof(char));
>     strncpy(url->uri,uri, strlen(uri));
> 
>     %% write exec;
> 
>     return url;
> }
> 
> int main(int argc, char **argv)
> {
>     suj_url *url;
>     url = suj_url_new("rtp://www.ragel.org:8080");
> }
> 
> 
> > 
> 


From thurs... at cs.queensu.ca  Fri May 23 18:24:05 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Fri, 23 May 2008 14:24:05 -0400
Subject: [ragel-users] Re: Simple URL parser
In-Reply-To: <48368945.9000605@gmail.com>
References: <952a0db1-e92f-4d74-882b-6a94645df9ba@a9g2000prl.googlegroups.com> <48368945.9000605@gmail.com>
Message-ID: <48370BC5.7040806@cs.queensu.ca>

Hey

hsanson wrote:
> 1 - If you see my code (attached) you will see I parse the scheme, 
> hostname, port and path parts of the URL using almost identical
>      actions. The only difference is the variables used to store the 
> parsed strings. Is there a way to pass the actions some variables?
>      So I can create a single function and pass the variable to store as 
> a parameter?

Not currently, this is the single most requested feature for Ragel and
I'm hoping to do something about it soon.

> 2 - For some reason the last parsing never finishes. If I pass an URL 
> like "http://hostname" the parser gives me the scheme "http" but
>      not the hostname. If I pass an URL like "http://hostname:8080" the 
> parser outputs the scheme and hostname but not the port. And if
>      I provide a path like "http://hostname:8080/file.html" the parser 
> gives me all except for the path. As you see the last string never get's
>      parsed and I don't know why??.

If you're using 5.X (which you seem to be) then you should do one of the
following:

1. Also embed the *_write actions as EOF actions and add a "write eof"
following all the processing.

2. Send an additional character (such as 0) after the url.

If you're using 6.X then just add "char *eof = pe;" after the
declarations of p and pe.

> 3 - Is there a better/cleaner way to do this??

Looks good to me. One thing to be aware of is that RFCs are sometimes
ambiguous so if you work directly from them you sometimes run into
problems. See chapter four of the manual for more info on resolving
ambiguities.

-Adrian


From hsan... at gmail.com  Sat May 24 15:09:34 2008
From: hsan... at gmail.com (Horacio Sanson)
Date: Sun, 25 May 2008 00:09:34 +0900
Subject: [ragel-users] Re: Simple URL parser
In-Reply-To: <48370BC5.7040...@cs.queensu.ca>
References: <952a0db1-e92f-4d74-882b-6a94645df...@a9g2000prl.googlegroups.com>
	 <48368945.9000...@gmail.com> <48370BC5.7040...@cs.queensu.ca>
Message-ID: <6156dd8b0805240809h99b70b8t4f48e1e86f87d0ac@mail.gmail.com>

On Sat, May 24, 2008 at 3:24 AM, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>
> Hey
>
> hsanson wrote:
>> 1 - If you see my code (attached) you will see I parse the scheme,
>> hostname, port and path parts of the URL using almost identical
>>      actions. The only difference is the variables used to store the
>> parsed strings. Is there a way to pass the actions some variables?
>>      So I can create a single function and pass the variable to store as
>> a parameter?
>
> Not currently, this is the single most requested feature for Ragel and
> I'm hoping to do something about it soon.
>
>> 2 - For some reason the last parsing never finishes. If I pass an URL
>> like "http://hostname" the parser gives me the scheme "http" but
>>      not the hostname. If I pass an URL like "http://hostname:8080" the
>> parser outputs the scheme and hostname but not the port. And if
>>      I provide a path like "http://hostname:8080/file.html" the parser
>> gives me all except for the path. As you see the last string never get's
>>      parsed and I don't know why??.
>
> If you're using 5.X (which you seem to be) then you should do one of the
> following:
>
> 1. Also embed the *_write actions as EOF actions and add a "write eof"
> following all the processing.
>
> 2. Send an additional character (such as 0) after the url.
>
> If you're using 6.X then just add "char *eof = pe;" after the
> declarations of p and pe.

Strange, I installed ragel 6.2 and tried your last recommendation (use
char *eof = pe) but I get the same behavior. The last write action
never gets executed....

BTW, this new version of ragel directly generates the C code (no xml
in between) is this correct behavior or am I doing something wrong??

Horacio
>
>> 3 - Is there a better/cleaner way to do this??
>
> Looks good to me. One thing to be aware of is that RFCs are sometimes
> ambiguous so if you work directly from them you sometimes run into
> problems. See chapter four of the manual for more info on resolving
> ambiguities.
>
> -Adrian
>
> >
>


From thurs... at cs.queensu.ca  Sat May 24 18:32:34 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Sat, 24 May 2008 14:32:34 -0400
Subject: [ragel-users] Re: Simple URL parser
In-Reply-To: <6156dd8b0805240809h99b70b8t4f48e1e86f87d0ac@mail.gmail.com>
References: <952a0db1-e92f-4d74-882b-6a94645df9ba@a9g2000prl.googlegroups.com> <48368945.9000605@gmail.com> <48370BC5.7040806@cs.queensu.ca> <6156dd8b0805240809h99b70b8t4f48e1e86f87d0ac@mail.gmail.com>
Message-ID: <48385F42.4090008@cs.queensu.ca>

Hi Horacio,

The machine is not succeeding. It looks like hsegment is missing a
repetition operator.

Yep, that's right, in version 6 the backend is called automatically.

-Adrian


Horacio Sanson wrote:
> Strange, I installed ragel 6.2 and tried your last recommendation (use
> char *eof = pe) but I get the same behavior. The last write action
> never gets executed....
> 
> BTW, this new version of ragel directly generates the C code (no xml
> in between) is this correct behavior or am I doing something wrong??


From hsan... at gmail.com  Mon May 26 01:35:44 2008
From: hsan... at gmail.com (hsanson)
Date: Mon, 26 May 2008 10:35:44 +0900
Subject: [ragel-users] Re: Simple URL parser
In-Reply-To: <48385F42.4090...@cs.queensu.ca>
References: <952a0db1-e92f-4d74-882b-6a94645df...@a9g2000prl.googlegroups.com> <48368945.9000...@gmail.com> <48370BC5.7040...@cs.queensu.ca> <6156dd8b0805240809h99b70b8t4f48e1e86f87d...@mail.gmail.com> <48385F42.4090...@cs.queensu.ca>
Message-ID: <483A13F0.5080...@gmail.com>

Adrian Thurston wrote:
> Hi Horacio,
>
> The machine is not succeeding. It looks like hsegment is missing a
> repetition operator.
>
> Yep, that's right, in version 6 the backend is called automatically.
>
> -Adrian
>
>   
Adrian,  thanks very much for your support... I appreciate it. 
Unfortunately I am unable to grasp how Ragel works. I added the eof 
variable definition and created a very simple machine:

main := ("http") $eof{ printf("reached eof\n"); };

If I understand correctly I should see "reached eof" printed on console 
as soon as the parser finishes testing for the last "p" of "http". 
Running this under a debugger (gdb) I can see the eof condition is never 
tested and I get no output in console. And of course the url parser I am 
trying to implement also never reaches eof.

Am I misunderstanding how ragel is supposed to work??

thanks
Horacio
> Horacio Sanson wrote:
>   
>> Strange, I installed ragel 6.2 and tried your last recommendation (use
>> char *eof = pe) but I get the same behavior. The last write action
>> never gets executed....
>>
>> BTW, this new version of ragel directly generates the C code (no xml
>> in between) is this correct behavior or am I doing something wrong??
>>     
>
>
> >
>   

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: test_url2.rl
URL: <http://www.colm.net/pipermail/ragel/attachments/20080526/8d52302e/attachment.ksh>

From thurs... at cs.queensu.ca  Wed May 28 20:59:57 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Wed, 28 May 2008 16:59:57 -0400
Subject: [ragel-users] Re: Simple URL parser
In-Reply-To: <483A13F0.5080700@gmail.com>
References: <952a0db1-e92f-4d74-882b-6a94645df9ba@a9g2000prl.googlegroups.com> <48368945.9000605@gmail.com> <48370BC5.7040806@cs.queensu.ca> <6156dd8b0805240809h99b70b8t4f48e1e86f87d0ac@mail.gmail.com> <48385F42.4090008@cs.queensu.ca> <483A13F0.5080700@gmail.com>
Message-ID: <483DC7CD.6060102@cs.queensu.ca>

The eof actions are executed when p reaches eof, which is normally after
the last character in the buffer (assuming eof has been set to pe).

-Adrian

hsanson wrote:
> Adrian Thurston wrote:
>> Hi Horacio,
>>
>> The machine is not succeeding. It looks like hsegment is missing a
>> repetition operator.
>>
>> Yep, that's right, in version 6 the backend is called automatically.
>>
>> -Adrian
>>
>>   
> Adrian,  thanks very much for your support... I appreciate it. 
> Unfortunately I am unable to grasp how Ragel works. I added the eof 
> variable definition and created a very simple machine:
> 
> main := ("http") $eof{ printf("reached eof\n"); };
> 
> If I understand correctly I should see "reached eof" printed on console 
> as soon as the parser finishes testing for the last "p" of "http". 
> Running this under a debugger (gdb) I can see the eof condition is never 
> tested and I get no output in console. And of course the url parser I am 
> trying to implement also never reaches eof.
> 
> Am I misunderstanding how ragel is supposed to work??
> 
> thanks
> Horacio
>> Horacio Sanson wrote:
>>   
>>> Strange, I installed ragel 6.2 and tried your last recommendation (use
>>> char *eof = pe) but I get the same behavior. The last write action
>>> never gets executed....
>>>
>>> BTW, this new version of ragel directly generates the C code (no xml
>>> in between) is this correct behavior or am I doing something wrong??
>>>     
>>
>>   
> 
> 
> > 
> 


From mforal.n... at gmail.com  Wed May 28 16:30:46 2008
From: mforal.n... at gmail.com (mitchell)
Date: Wed, 28 May 2008 09:30:46 -0700 (PDT)
Subject: Preprocessor System Proposal
Message-ID: <a718208b-e6ae-4126-bef3-feef80c05a2f@z66g2000hsc.googlegroups.com>

Adrian,

I just wanted to condense a couple of earlier topics I started into a
proposal for a kind of preprocessor system.

If you weren't already aware, I'm interning at Ohloh this summer for
Google summer of Code and we've been very impressed with Ragel over
the last few weeks. I've talked with the project leaders about the
problems I've run into (discussed in my topics here), and they're very
interested in a solution -- even offering incentives (though they
wouldn't divulge any details).

My first problem was the multiple inclusions of the same file. My
second problem was duplicate 'write' statements I want to perform
conditionally. I believe both can be solved by a preprocessor system.

I'm no expert with Ragel's source code, but I think I may have an idea
of how this can be implemented.

In rlscan.rl's 'section_parse' machine we can add some preprocessor
statements. All I was thinking of for now was 'define' and 'if'. Each
would have an "action" comprised of C code that is executed. 'define'
would have nothing after the "action", so something like:
  define { int foo = 1; };
would suffice.

The 'if' statement would be slightly more complicated. There are two
ideas I had on structure:

Idea #1:

  if { foo } {
    include 'some_file.rl';
    write 'something';
    # do other things conditionally
  }
  So this 'if' acts like the 'when' conditional, but the block of
Ragel *after* the "action" is parsed if "action" evaluates to true.

Idea #2:

  {
    include 'some_file.rl';
    write 'something';
    # do other things conditionally
  } when { foo };
  In this case we don't need an 'if', but use the existing 'when'
keyword. This might be easier to implement, but could be a strange
read to developers browsing Ragel code.

Either way we will need to parse the Ragel inside the { }'s using the
'main' machine which will be modified to contain this preprocessor
system.

Overall I think this system using the embedded C statements would be
much easier than keeping a list of defines in the Ragel source code
and writing your own preprocessor executor for an 'if' statement. I
think it will also provide for more flexibility.

Thanks for your time,


From thurs... at cs.queensu.ca  Wed May 28 21:14:01 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Wed, 28 May 2008 17:14:01 -0400
Subject: [ragel-users] Preprocessor System Proposal
In-Reply-To: <a718208b-e6ae-4126-bef3-feef80c05a2f@z66g2000hsc.googlegroups.com>
References: <a718208b-e6ae-4126-bef3-feef80c05a2f@z66g2000hsc.googlegroups.com>
Message-ID: <483DCB19.8010807@cs.queensu.ca>

Hi Mitchell,

So I've been meaning to work on some kind of macro language for a long
time now, but haven't had the chance to sit down and do it. I'm hoping
in the latter part of 2008, by then I should be finished with my thesis.
I'm actually planning on using my thesis project to implement the macro
system, which is another reason I've been delaying on the macros.

The macro system needs to solve a whole lot of problems at once so I'm
expecting it to take quite a bit of research/work.

Using the C preprocessing language is attractive, but unfortunately
won't do since the general trend with ragel is language independence. We
do need something a lot like it though.

-Adrian

mitchell wrote:
> Adrian,
> 
> I just wanted to condense a couple of earlier topics I started into a
> proposal for a kind of preprocessor system.
> 
> If you weren't already aware, I'm interning at Ohloh this summer for
> Google summer of Code and we've been very impressed with Ragel over
> the last few weeks. I've talked with the project leaders about the
> problems I've run into (discussed in my topics here), and they're very
> interested in a solution -- even offering incentives (though they
> wouldn't divulge any details).
> 
> My first problem was the multiple inclusions of the same file. My
> second problem was duplicate 'write' statements I want to perform
> conditionally. I believe both can be solved by a preprocessor system.
> 
> I'm no expert with Ragel's source code, but I think I may have an idea
> of how this can be implemented.
> 
> In rlscan.rl's 'section_parse' machine we can add some preprocessor
> statements. All I was thinking of for now was 'define' and 'if'. Each
> would have an "action" comprised of C code that is executed. 'define'
> would have nothing after the "action", so something like:
>   define { int foo = 1; };
> would suffice.
> 
> The 'if' statement would be slightly more complicated. There are two
> ideas I had on structure:
> 
> Idea #1:
> 
>   if { foo } {
>     include 'some_file.rl';
>     write 'something';
>     # do other things conditionally
>   }
>   So this 'if' acts like the 'when' conditional, but the block of
> Ragel *after* the "action" is parsed if "action" evaluates to true.
> 
> Idea #2:
> 
>   {
>     include 'some_file.rl';
>     write 'something';
>     # do other things conditionally
>   } when { foo };
>   In this case we don't need an 'if', but use the existing 'when'
> keyword. This might be easier to implement, but could be a strange
> read to developers browsing Ragel code.
> 
> Either way we will need to parse the Ragel inside the { }'s using the
> 'main' machine which will be modified to contain this preprocessor
> system.
> 
> Overall I think this system using the embedded C statements would be
> much easier than keeping a list of defines in the Ragel source code
> and writing your own preprocessor executor for an 'if' statement. I
> think it will also provide for more flexibility.
> 
> Thanks for your time,
> -Mitchell;
> > 
> 


From mforal.n... at gmail.com  Sat May 31 19:41:48 2008
From: mforal.n... at gmail.com (mitchell)
Date: Sat, 31 May 2008 12:41:48 -0700 (PDT)
Subject: Testing beginning of line in a scanner
Message-ID: <bd3afb52-1fbe-429a-82f2-ea3bdc7c35ba@z66g2000hsc.googlegroups.com>

Hi,

I'm trying to test for a character that occurs only at the beginning
of a line in a scanner:

  special = '!' when starts_line @callback;
  line := |*
    [\t ]+ => callback;
    special;
    newline => callback;
    '!' when not_starts_line => callback;
    ^(space | '!') => callback;
  *|;

I get a
  ragel: fsmgraph.h:385: TransAp::TransAp(const TransAp&): Assertion
  `lmActionTable.length() == 0 && other.lmActionTable.length() == 0'
failed
error.

If I remove the "'!' when not_starts_line" line, Ragel compiles, but I
cannot detect any '!'s in a place other than the beginning of a line
which is no good.

Any ideas?

Thanks,


From jup... at hotmail.de  Mon May 12 06:00:39 2008
From: jup... at hotmail.de (jupp_g)
Date: Sun, 11 May 2008 23:00:39 -0700 (PDT)
Subject: Windows binaries updated to vs. 6.2
Message-ID: <2ceb33ef-ec50-4585-b513-3bd5657b5fe3@y38g2000hsy.googlegroups.com>

I have updated the precompiled Windows files to vs. 6.2. The new C#
code generator is also included.
Binaries: http://www.jgoettgens.de/Meine_Bilder_und_Dateien/ragel-6.2-win32-vs2008-bin.zip
Sources with VisualStudio project files:
http://www.jgoettgens.de/Meine_Bilder_und_Dateien/ragel-6.2-win32-vs2008-src.zip


From thurs... at cs.queensu.ca  Tue May 13 01:05:12 2008
From: thurs... at cs.queensu.ca (=?utf-8?B?QWRyaWFuIFRodXJzdG9u?=)
Date: Tue, 13 May 2008 01:05:12 +0000
Subject: [ragel-users] Windows binaries updated to vs. 6.2
In-Reply-To: <2ceb33ef-ec50-4585-b513-3bd5657b5fe3@y38g2000hsy.googlegroups.com>
References: <2ceb33ef-ec50-4585-b513-3bd5657b5fe3@y38g2000hsy.googlegroups.com>
Message-ID: <1548496711-1210640696-cardhu_decombobulator_blackberry.rim.net-1505493164-@bxe150.bisx.prod.on.blackberry>

Great, thanks! I just updated the link using midpssh on my phone. Hopefully I got it right :)

Cheers,
 Adrian 
-----Original Message-----
From: jupp_g <jupp_g at hotmail.de>

Date: Sun, 11 May 2008 23:00:39 
To:ragel-users <ragel-users at googlegroups.com>
Subject: [ragel-users] Windows binaries updated to vs. 6.2



I have updated the precompiled Windows files to vs. 6.2. The new C#
code generator is also included.
Binaries: http://www.jgoettgens.de/Meine_Bilder_und_Dateien/ragel-6.2-win32-vs2008-bin.zip
Sources with VisualStudio project files:
http://www.jgoettgens.de/Meine_Bilder_und_Dateien/ragel-6.2-win32-vs2008-src.zip




From mforal.n... at gmail.com  Thu May 22 23:39:51 2008
From: mforal.n... at gmail.com (mitchell)
Date: Thu, 22 May 2008 16:39:51 -0700 (PDT)
Subject: Bypass "previously defined" errors?
Message-ID: <c212c291-3789-462e-bb99-70ba3ef14b95@w7g2000hsa.googlegroups.com>

Hi,

I have a set of Ragel files that all include a common Ragel file;
sometimes I want to include one Ragel file in another, but I get the
"fsm previously defined" error. Is there any way to ignore the
warnings and run Ragel successfully? Or is there any way around this?
Maybe even allow definitions to be overwritten or reassigned in a
future release?

Thanks,


From thurs... at cs.queensu.ca  Fri May 23 01:27:36 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Thu, 22 May 2008 21:27:36 -0400
Subject: [ragel-users] Bypass "previously defined" errors?
In-Reply-To: <c212c291-3789-462e-bb99-70ba3ef14b95@w7g2000hsa.googlegroups.com>
References: <c212c291-3789-462e-bb99-70ba3ef14b95@w7g2000hsa.googlegroups.com>
Message-ID: <48361D88.3080409@cs.queensu.ca>

Hey Mitchell,

Sorry I keep missing you on the IRC channel. I check it about once daily
 but you're usually logged out by the time I connect to the screen session.

Could you give a bit more information about the use case? I haven't
heard of anyone needing to do this before. Is it because you've got some
stock ragel parser and you want to specialize it to some task by
redefining things?

-Adrian



mitchell wrote:
> Hi,
> 
> I have a set of Ragel files that all include a common Ragel file;
> sometimes I want to include one Ragel file in another, but I get the
> "fsm previously defined" error. Is there any way to ignore the
> warnings and run Ragel successfully? Or is there any way around this?
> Maybe even allow definitions to be overwritten or reassigned in a
> future release?
> 
> Thanks,
> -Mitchell;
> > 
> 


From mforal.n... at gmail.com  Fri May 23 04:43:39 2008
From: mforal.n... at gmail.com (mitchell)
Date: Thu, 22 May 2008 21:43:39 -0700 (PDT)
Subject: Bypass "previously defined" errors?
In-Reply-To: <48361D88.3080409@cs.queensu.ca>
References: <c212c291-3789-462e-bb99-70ba3ef14b95@w7g2000hsa.googlegroups.com> 
	<48361D88.3080409@cs.queensu.ca>
Message-ID: <af172ad5-a382-4d5a-a5cf-a59611c57e9e@m45g2000hsb.googlegroups.com>

Adrian,

> Could you give a bit more information about the use case? I haven't
> heard of anyone needing to do this before. Is it because you've got some
> stock ragel parser and you want to specialize it to some task by
> redefining things?

I am writing programming language parsers. Some languages have other
languages embedded in them. I want to "include" an embedded (child)
language into a parent one. However, since either language parser can
be used separately on its own, both "include" a common.rl file that
contains common definitions and actions used by most parsers. Thus
there is a double inclusion of common.rl and the error message for a
parent-child language parser.

Thanks for your time,


From thurs... at cs.queensu.ca  Fri May 23 17:57:45 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Fri, 23 May 2008 13:57:45 -0400
Subject: [ragel-users] Re: Bypass "previously defined" errors?
In-Reply-To: <af172ad5-a382-4d5a-a5cf-a59611c57e9e@m45g2000hsb.googlegroups.com>
References: <c212c291-3789-462e-bb99-70ba3ef14b95@w7g2000hsa.googlegroups.com>  <48361D88.3080409@cs.queensu.ca> <af172ad5-a382-4d5a-a5cf-a59611c57e9e@m45g2000hsb.googlegroups.com>
Message-ID: <48370599.6010000@cs.queensu.ca>

What if we blocked files from being included more than once? In the
meantime can you lift the common include into the top-level ragel file?

-Adrian

mitchell wrote:
> Adrian,
> 
>> Could you give a bit more information about the use case? I haven't
>> heard of anyone needing to do this before. Is it because you've got some
>> stock ragel parser and you want to specialize it to some task by
>> redefining things?
> 
> I am writing programming language parsers. Some languages have other
> languages embedded in them. I want to "include" an embedded (child)
> language into a parent one. However, since either language parser can
> be used separately on its own, both "include" a common.rl file that
> contains common definitions and actions used by most parsers. Thus
> there is a double inclusion of common.rl and the error message for a
> parent-child language parser.
> 
> Thanks for your time,
> -Mitchell;
> > 
> 


From mforal.n... at gmail.com  Fri May 23 19:06:28 2008
From: mforal.n... at gmail.com (mitchell)
Date: Fri, 23 May 2008 12:06:28 -0700 (PDT)
Subject: Bypass "previously defined" errors?
In-Reply-To: <48370599.6010000@cs.queensu.ca>
References: <c212c291-3789-462e-bb99-70ba3ef14b95@w7g2000hsa.googlegroups.com> 
	<48361D88.3080409@cs.queensu.ca> <af172ad5-a382-4d5a-a5cf-a59611c57e9e@m45g2000hsb.googlegroups.com> 
	<48370599.6010000@cs.queensu.ca>
Message-ID: <37081ebe-ca1d-4750-ba21-529460daeb5a@w7g2000hsa.googlegroups.com>

Adrian,

> What if we blocked files from being included more than once?

That sounds great.

> In the
> meantime can you lift the common include into the top-level ragel file?

It's possible, but of course not optimal.

Thanks!


From jonathan.st... at gmail.com  Sat May  3 12:12:05 2008
From: jonathan.st... at gmail.com (Jonathan Stott)
Date: Sat, 3 May 2008 13:12:05 +0100
Subject: [ragel-users] Re: Surpressing Mulitple Matches
In-Reply-To: <47F98F9E.20...@cs.queensu.ca>
References: <20080405163425.bd67723f.jonathan.st...@gmail.com>
	<47F98F9E.20...@cs.queensu.ca>
Message-ID: <20080503131205.fec052b8.jonathan.st...@gmail.com>

> 
> Hi Jonathan,
> 
> I think you should consider using a scanner. Though you're not scanning
> tokens, you're scanning lines. Should multiple patterns match only one
> pattern action will be executed.
> 
> -Adrian
> 

Thanks for the suggestion.  Unfortunately real life got in the way of the little project I was coding this for, so I only just got around to actually reimplementing the machine as a scanner.  It's now all working though. :)

Regards,
Jon


From thurs... at cs.queensu.ca  Fri May  9 19:11:23 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Fri, 09 May 2008 15:11:23 -0400
Subject: 6.2 release -- bugfixes + include searching
Message-ID: <4824A1DB.7070209@cs.queensu.ca>

Hi,

I just released 6.2. This is mostly bug fixes, but it also has changes
to the include file searching. Files are now searched relative to the
current file location, not the place ragel was invoked. Some users may
need to update their build scripts. Also, there is now the -I option for
adding search locations.

Regards,
 Adrian


From halfacan... at gmail.com  Sun May 11 03:41:46 2008
From: halfacan... at gmail.com (Ross Thomas)
Date: Sat, 10 May 2008 20:41:46 -0700 (PDT)
Subject: Consider me converted
Message-ID: <80c22645-5836-4628-8737-96992ba85541@q24g2000prf.googlegroups.com>

Hi Adrian/all,

Just a brief note to say that Ragel is a truly remarkable piece of
software. I discovered it yesterday via erlang-questions [1] and am
frankly astonished by how much more quickly and easily I can create
much more efficient and robust code using it. It's not an exaggeration
to say that Ragel shattered my expectations regarding how much time
and effort need be invested to produce hyper-efficient code.

I fear I'm beginning to babble. Suffice to say: thanks! :)

-Ross


From franksh... at mailinator.com  Sun May 11 06:11:10 2008
From: franksh... at mailinator.com (frankshank)
Date: Sat, 10 May 2008 23:11:10 -0700 (PDT)
Subject: Newb's FSM troubles, part one.
Message-ID: <f8adea75-3b8d-41d6-b812-9b79db3d4191@i36g2000prf.googlegroups.com>

I'm trying to detect users mentioned in a string. Users have an "@"
before their name. Here's my current machine:

%{
  machine user_parser;
  action mark { mark = p; }
  action print_user { puts("user: #{data[mark..p]}"); }
  user_name = (lower . (lower | digit)*);
  user_tag = ("@">mark . user_name) % print_user;
  random_text = (0x20..0x3f | 0x41..0x7e)+; # all ascii, except for
'@'
  main := (random_text | user_tag)*;
}%%

When I run this against "@u1 @u2", i see this output:

user: @u1
user: @u1
user: @u2


From thurs... at cs.queensu.ca  Mon May 12 23:00:43 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Mon, 12 May 2008 19:00:43 -0400
Subject: [ragel-users] Newb's FSM troubles, part one.
In-Reply-To: <f8adea75-3b8d-41d6-b812-9b79db3d4191@i36g2000prf.googlegroups.com>
References: <f8adea75-3b8d-41d6-b812-9b79db3d4191@i36g2000prf.googlegroups.com>
Message-ID: <4828CC1B.90206@cs.queensu.ca>

Hi,

Change the last line to:

main := (random_text | user_tag)**;

See section 4.2.4 in the manual.

Cheers,
 Adrian

frankshank wrote:
> I'm trying to detect users mentioned in a string. Users have an "@"
> before their name. Here's my current machine:
> 
> %{
>   machine user_parser;
>   action mark { mark = p; }
>   action print_user { puts("user: #{data[mark..p]}"); }
>   user_name = (lower . (lower | digit)*);
>   user_tag = ("@">mark . user_name) % print_user;
>   random_text = (0x20..0x3f | 0x41..0x7e)+; # all ascii, except for
> '@'
>   main := (random_text | user_tag)*;
> }%%
> 
> When I run this against "@u1 @u2", i see this output:
> 
> user: @u1
> user: @u1
> user: @u2
> 
> Why is @u1 seen twice?
> > 
> 


From halfacan... at gmail.com  Sun May 11 18:09:07 2008
From: halfacan... at gmail.com (Ross Thomas)
Date: Sun, 11 May 2008 11:09:07 -0700 (PDT)
Subject: Patch for "unresolvable state reference crash" bug
Message-ID: <df79ef33-ecb4-4e89-82c5-9380dba8a5f8@w8g2000prd.googlegroups.com>

To duplicate, have an action fgoto a label that does not exist. The
below patch adds a check for this.

If this isn't the correct way to report a bug or submit a patch please
let me know.

-Ross

diff -urN trunk/ragel/parsedata.cpp trunk-unresolvable-state-reference/
ragel/parsedata.cpp
--- trunk/ragel/parsedata.cpp	2008-05-11 10:07:06.000000000 -0700
+++ trunk-unresolvable-state-reference/ragel/parsedata.cpp	2008-05-11
10:37:42.000000000 -0700
@@ -734,6 +734,8 @@
 			case InlineItem::Call: case InlineItem::Next: {
 				/* Resolve, pass action for local search. */
 				NameInst *target = resolveStateRef( *item->nameRef, item->loc,
action );
+				if ( 0 == target )
+					break;

 				/* Check if the target goes into a longest match. */
 				NameInst *search = target->parent;


From thurs... at cs.queensu.ca  Mon May 12 23:17:28 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Mon, 12 May 2008 19:17:28 -0400
Subject: [ragel-users] Patch for "unresolvable state reference crash"
 bug
In-Reply-To: <df79ef33-ecb4-4e89-82c5-9380dba8a5f8@w8g2000prd.googlegroups.com>
References: <df79ef33-ecb4-4e89-82c5-9380dba8a5f8@w8g2000prd.googlegroups.com>
Message-ID: <4828D008.9050009@cs.queensu.ca>

Thanks! I just fixed this. Also, I'm glad you like ragel :)

Cheers,
 Adrian

Ross Thomas wrote:
> To duplicate, have an action fgoto a label that does not exist. The
> below patch adds a check for this.
> 
> If this isn't the correct way to report a bug or submit a patch please
> let me know.
> 
> -Ross
> 
> diff -urN trunk/ragel/parsedata.cpp trunk-unresolvable-state-reference/
> ragel/parsedata.cpp
> --- trunk/ragel/parsedata.cpp	2008-05-11 10:07:06.000000000 -0700
> +++ trunk-unresolvable-state-reference/ragel/parsedata.cpp	2008-05-11
> 10:37:42.000000000 -0700
> @@ -734,6 +734,8 @@
>  			case InlineItem::Call: case InlineItem::Next: {
>  				/* Resolve, pass action for local search. */
>  				NameInst *target = resolveStateRef( *item->nameRef, item->loc,
> action );
> +				if ( 0 == target )
> +					break;
> 
>  				/* Check if the target goes into a longest match. */
>  				NameInst *search = target->parent;
> 
> > 
> 


From halfacan... at gmail.com  Sun May 11 18:57:46 2008
From: halfacan... at gmail.com (Ross Thomas)
Date: Sun, 11 May 2008 11:57:46 -0700 (PDT)
Subject: Any suggestions on implementing SMTP protocol in Ragel?
Message-ID: <17e3e3eb-5aaf-42b8-9556-510609c45cb3@z24g2000prf.googlegroups.com>

While hacking up a parser for SMTP (in an unprecedentedly small amount
of time, naturally :)) it occurred to me that given Ragel's ability to
mix regular expressions with state charts I could make the same
machine double-up as an SMTP protocol handler too. At least, I think I
could. Because a significant portion of my work involves the client/
server model this is an aspect of Ragel I'd very much like to explore
in more detail...

I've browsed around on the list and read Zed's post on state charts
but still don't have a totally clear idea on how this might be
implemented. Can anyone out there with more Ragel experience point me
in the right direction?


From halfacan... at gmail.com  Mon May 12 22:17:27 2008
From: halfacan... at gmail.com (Ross Thomas)
Date: Mon, 12 May 2008 15:17:27 -0700
Subject: Any suggestions on implementing SMTP protocol in Ragel?
In-Reply-To: <17e3e3eb-5aaf-42b8-9556-510609c45...@z24g2000prf.googlegroups.com>
References: <17e3e3eb-5aaf-42b8-9556-510609c45...@z24g2000prf.googlegroups.com>
Message-ID: <ce0f6e0c0805121517k41e25d4el9c416ae116c23d8e@mail.gmail.com>

To reduce the scope of my question a little, here is the general
structure I have so far:

    main := (
        start: (
            helo @copy_helo @resp_250 -> wait_mail |
            mail @resp_503 -> start |
            vrfy @resp_503 -> start |
            ...
        wait_mail: (
            helo @resp_250 -> wait_mail |
            mail @copy_mail @resp_250 -> wait_rcpt |
            vrfy @resp_252 -> wait_mail |
            ...
    );

Each "helo", "mail", "vrfy" etc. machine corresponds to the SMTP
command of the same name. They are defined as:

    helo = (("HELO"i | "EHLO"i) " "       %sarg graph+ %earg     eol);
    mail = ( "MAIL"i            " FROM:<" %sarg path*  %earg ">" eol);
    vrfy = ( "VRFY"i            " "       %sarg graph+ %earg     eol);
    ...

So the idea is that the top-level state chart handles logical flow and
knows which commands are valid in which states, and calls the
appropriate actions. The tokenizing is done "inline", as it were.

Does this strike anyone as a particularly foolish approach? Is there a
better way?

-Ross


On Sun, May 11, 2008 at 11:57 AM, Ross Thomas <halfacan... at gmail.com> wrote:
>
> While hacking up a parser for SMTP (in an unprecedentedly small amount
> of time, naturally :)) it occurred to me that given Ragel's ability to
> mix regular expressions with state charts I could make the same
> machine double-up as an SMTP protocol handler too. At least, I think I
> could. Because a significant portion of my work involves the client/
> server model this is an aspect of Ragel I'd very much like to explore
> in more detail...
>
> I've browsed around on the list and read Zed's post on state charts
> but still don't have a totally clear idea on how this might be
> implemented. Can anyone out there with more Ragel experience point me
> in the right direction?
>
> -Ross


From thurs... at cs.queensu.ca  Tue May 13 01:15:10 2008
From: thurs... at cs.queensu.ca (=?utf-8?B?QWRyaWFuIFRodXJzdG9u?=)
Date: Tue, 13 May 2008 01:15:10 +0000
Subject: [ragel-users] Re: Any suggestions on implementing SMTP protocol inRagel?
In-Reply-To: <ce0f6e0c0805121517k41e25d4el9c416ae116c23d8e@mail.gmail.com>
References: <17e3e3eb-5aaf-42b8-9556-510609c45cb3@z24g2000prf.googlegroups.com><ce0f6e0c0805121517k41e25d4el9c416ae116c23d8e@mail.gmail.com>
Message-ID: <762981520-1210641299-cardhu_decombobulator_blackberry.rim.net-601514575-@bxe150.bisx.prod.on.blackberry>

Hi Ross,

To be honest I don't have much experience with this approach. Statecharts were originally made for small low-level machines that are awkward to do with regular expressions. But they turned out to be more useful. The only issue I can think of is dealing with whitespace ... but I don't know SMTP well enough to say for sure. Let us know if if you pursue it and it works out :)

Adrian
-----Original Message-----
From: "Ross Thomas" <halfacanuck at gmail.com>

Date: Mon, 12 May 2008 15:17:27 
To:ragel-users <ragel-users at googlegroups.com>
Subject: [ragel-users] Re: Any suggestions on implementing SMTP protocol in
 Ragel?



To reduce the scope of my question a little, here is the general
structure I have so far:

    main := (
        start: (
            helo @copy_helo @resp_250 -> wait_mail |
            mail @resp_503 -> start |
            vrfy @resp_503 -> start |
            ...
        wait_mail: (
            helo @resp_250 -> wait_mail |
            mail @copy_mail @resp_250 -> wait_rcpt |
            vrfy @resp_252 -> wait_mail |
            ...
    );

Each "helo", "mail", "vrfy" etc. machine corresponds to the SMTP
command of the same name. They are defined as:

    helo = (("HELO"i | "EHLO"i) " "       %sarg graph+ %earg     eol);
    mail = ( "MAIL"i            " FROM:<" %sarg path*  %earg ">" eol);
    vrfy = ( "VRFY"i            " "       %sarg graph+ %earg     eol);
    ...

So the idea is that the top-level state chart handles logical flow and
knows which commands are valid in which states, and calls the
appropriate actions. The tokenizing is done "inline", as it were.

Does this strike anyone as a particularly foolish approach? Is there a
better way?

-Ross


On Sun, May 11, 2008 at 11:57 AM, Ross Thomas <halfacanuck at gmail.com> wrote:
>
> While hacking up a parser for SMTP (in an unprecedentedly small amount
> of time, naturally :)) it occurred to me that given Ragel's ability to
> mix regular expressions with state charts I could make the same
> machine double-up as an SMTP protocol handler too. At least, I think I
> could. Because a significant portion of my work involves the client/
> server model this is an aspect of Ragel I'd very much like to explore
> in more detail...
>
> I've browsed around on the list and read Zed's post on state charts
> but still don't have a totally clear idea on how this might be
> implemented. Can anyone out there with more Ragel experience point me
> in the right direction?
>
> -Ross




From halfacan... at gmail.com  Tue May 13 04:46:48 2008
From: halfacan... at gmail.com (Ross Thomas)
Date: Mon, 12 May 2008 21:46:48 -0700
Subject: [ragel-users] Re: Any suggestions on implementing SMTP protocol inRagel?
In-Reply-To: <762981520-1210641299-cardhu_decombobulator_blackberry.rim.net-6015145...@bxe150.bisx.prod.on.blackberry>
References: <17e3e3eb-5aaf-42b8-9556-510609c45...@z24g2000prf.googlegroups.com>
	 <ce0f6e0c0805121517k41e25d4el9c416ae116c23...@mail.gmail.com>
	 <762981520-1210641299-cardhu_decombobulator_blackberry.rim.net-6015145...@bxe150.bisx.prod.on.blackberry>
Message-ID: <ce0f6e0c0805122146j3e336d78j91a974e3c20cf806@mail.gmail.com>

It seems to me that the approach I describe cannot work as I wanted it
to, because the regexps matching the commands are duplicated for each
state, only with a different target state. For example:

main := (
    start: (
        1 -> a
    ),
    a: (
        1 -> b
    ),
    ...
);

Given the input [1, 1] the machine will end up in state "a", not state
"final" as I thought. Which makes sense now I think about it.

Back to the drawing board... :)

-Ross


On Mon, May 12, 2008 at 6:15 PM, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> Hi Ross,
>
> To be honest I don't have much experience with this approach. Statecharts were originally made for small low-level machines that are awkward to do with regular expressions. But they turned out to be more useful. The only issue I can think of is dealing with whitespace ... but I don't know SMTP well enough to say for sure. Let us know if if you pursue it and it works out :)
>
> Adrian
> -----Original Message-----
> From: "Ross Thomas" <halfacan... at gmail.com>
>
> Date: Mon, 12 May 2008 15:17:27
> To:ragel-users <ragel-users at googlegroups.com>
> Subject: [ragel-users] Re: Any suggestions on implementing SMTP protocol in
>  Ragel?
>
>
>
> To reduce the scope of my question a little, here is the general
> structure I have so far:
>
>    main := (
>        start: (
>            helo @copy_helo @resp_250 -> wait_mail |
>            mail @resp_503 -> start |
>            vrfy @resp_503 -> start |
>            ...
>        wait_mail: (
>            helo @resp_250 -> wait_mail |
>            mail @copy_mail @resp_250 -> wait_rcpt |
>            vrfy @resp_252 -> wait_mail |
>            ...
>    );
>
> Each "helo", "mail", "vrfy" etc. machine corresponds to the SMTP
> command of the same name. They are defined as:
>
>    helo = (("HELO"i | "EHLO"i) " "       %sarg graph+ %earg     eol);
>    mail = ( "MAIL"i            " FROM:<" %sarg path*  %earg ">" eol);
>    vrfy = ( "VRFY"i            " "       %sarg graph+ %earg     eol);
>    ...
>
> So the idea is that the top-level state chart handles logical flow and
> knows which commands are valid in which states, and calls the
> appropriate actions. The tokenizing is done "inline", as it were.
>
> Does this strike anyone as a particularly foolish approach? Is there a
> better way?
>
> -Ross
>
>
> On Sun, May 11, 2008 at 11:57 AM, Ross Thomas <halfacan... at gmail.com> wrote:
>>
>> While hacking up a parser for SMTP (in an unprecedentedly small amount
>> of time, naturally :)) it occurred to me that given Ragel's ability to
>> mix regular expressions with state charts I could make the same
>> machine double-up as an SMTP protocol handler too. At least, I think I
>> could. Because a significant portion of my work involves the client/
>> server model this is an aspect of Ragel I'd very much like to explore
>> in more detail...
>>
>> I've browsed around on the list and read Zed's post on state charts
>> but still don't have a totally clear idea on how this might be
>> implemented. Can anyone out there with more Ragel experience point me
>> in the right direction?
>>
>> -Ross
>
>
>
>
> >
>


From er... at atlasocean.com  Tue May 13 13:43:39 2008
From: er... at atlasocean.com (Erich Ocean)
Date: Tue, 13 May 2008 06:43:39 -0700
Subject: [ragel-users] Re: Any suggestions on implementing SMTP protocol inRagel?
In-Reply-To: <ce0f6e0c0805122146j3e336d78j91a974e3c20cf806@mail.gmail.com>
References: <17e3e3eb-5aaf-42b8-9556-510609c45cb3@z24g2000prf.googlegroups.com> <ce0f6e0c0805121517k41e25d4el9c416ae116c23d8e@mail.gmail.com> <762981520-1210641299-cardhu_decombobulator_blackberry.rim.net-601514575-@bxe150.bisx.prod.on.blackberry> <ce0f6e0c0805122146j3e336d78j91a974e3c20cf806@mail.gmail.com>
Message-ID: <BC3E0313-F8B6-4E45-806A-1409B99DE56E@atlasocean.com>

Ross,

Statecharts are trivial to code by hand, using case and switch  
statements, and result in roughly the same amount of code as a  
straight Ragel implementation would. In addition, the hand-coded  
variants are more flexible, since you can implement the full "spec" as  
designed by Harel. You can also easily embed Ragel regex-style  
machines in the various states as needed when you hand code, and  
Adrian's code generation approach makes that particularly easy.

Bottom-line: hand-code statecharts. The hard part is creating the  
statecharts themselves (I use OmniGraffle), not coding them up.

That said, I wouldn't create a protocol handler without them. They are  
extraordinarily efficient, **easy** to debug, and quick to modify. I  
create and modify statechart-based code daily at my day job, and use  
statecharts on my own projects.

Zed Shaw has done some work with Ragel and statecharts if you still  
want to go down that path:

	http://www.zedshaw.com/tips/ragel_state_charts.html

Best, Erich

On May 12, 2008, at 9:46 PM, Ross Thomas wrote:

>
> It seems to me that the approach I describe cannot work as I wanted it
> to, because the regexps matching the commands are duplicated for each
> state, only with a different target state. For example:
>
> main := (
>    start: (
>        1 -> a
>    ),
>    a: (
>        1 -> b
>    ),
>    ...
> );
>
> Given the input [1, 1] the machine will end up in state "a", not state
> "final" as I thought. Which makes sense now I think about it.
>
> Back to the drawing board... :)
>
> -Ross
>
>
> On Mon, May 12, 2008 at 6:15 PM, Adrian Thurston <thurs... at cs.queensu.ca 
> > wrote:
>> Hi Ross,
>>
>> To be honest I don't have much experience with this approach.  
>> Statecharts were originally made for small low-level machines that  
>> are awkward to do with regular expressions. But they turned out to  
>> be more useful. The only issue I can think of is dealing with  
>> whitespace ... but I don't know SMTP well enough to say for sure.  
>> Let us know if if you pursue it and it works out :)
>>
>> Adrian
>> -----Original Message-----
>> From: "Ross Thomas" <halfacan... at gmail.com>
>>
>> Date: Mon, 12 May 2008 15:17:27
>> To:ragel-users <ragel-users at googlegroups.com>
>> Subject: [ragel-users] Re: Any suggestions on implementing SMTP  
>> protocol in
>> Ragel?
>>
>>
>>
>> To reduce the scope of my question a little, here is the general
>> structure I have so far:
>>
>>   main := (
>>       start: (
>>           helo @copy_helo @resp_250 -> wait_mail |
>>           mail @resp_503 -> start |
>>           vrfy @resp_503 -> start |
>>           ...
>>       wait_mail: (
>>           helo @resp_250 -> wait_mail |
>>           mail @copy_mail @resp_250 -> wait_rcpt |
>>           vrfy @resp_252 -> wait_mail |
>>           ...
>>   );
>>
>> Each "helo", "mail", "vrfy" etc. machine corresponds to the SMTP
>> command of the same name. They are defined as:
>>
>>   helo = (("HELO"i | "EHLO"i) " "       %sarg graph+ %earg     eol);
>>   mail = ( "MAIL"i            " FROM:<" %sarg path*  %earg ">" eol);
>>   vrfy = ( "VRFY"i            " "       %sarg graph+ %earg     eol);
>>   ...
>>
>> So the idea is that the top-level state chart handles logical flow  
>> and
>> knows which commands are valid in which states, and calls the
>> appropriate actions. The tokenizing is done "inline", as it were.
>>
>> Does this strike anyone as a particularly foolish approach? Is  
>> there a
>> better way?
>>
>> -Ross
>>
>>
>> On Sun, May 11, 2008 at 11:57 AM, Ross Thomas  
>> <halfacan... at gmail.com> wrote:
>>>
>>> While hacking up a parser for SMTP (in an unprecedentedly small  
>>> amount
>>> of time, naturally :)) it occurred to me that given Ragel's  
>>> ability to
>>> mix regular expressions with state charts I could make the same
>>> machine double-up as an SMTP protocol handler too. At least, I  
>>> think I
>>> could. Because a significant portion of my work involves the client/
>>> server model this is an aspect of Ragel I'd very much like to  
>>> explore
>>> in more detail...
>>>
>>> I've browsed around on the list and read Zed's post on state charts
>>> but still don't have a totally clear idea on how this might be
>>> implemented. Can anyone out there with more Ragel experience point  
>>> me
>>> in the right direction?
>>>
>>> -Ross
>>
>>
>>
>>
>>>
>>
>
> >


From halfacan... at gmail.com  Wed May 14 05:27:31 2008
From: halfacan... at gmail.com (Ross Thomas)
Date: Tue, 13 May 2008 22:27:31 -0700
Subject: [ragel-users] Re: Any suggestions on implementing SMTP protocol inRagel?
In-Reply-To: <BC3E0313-F8B6-4E45-806A-1409B99DE...@atlasocean.com>
References: <17e3e3eb-5aaf-42b8-9556-510609c45...@z24g2000prf.googlegroups.com>
	 <ce0f6e0c0805121517k41e25d4el9c416ae116c23...@mail.gmail.com>
	 <762981520-1210641299-cardhu_decombobulator_blackberry.rim.net-6015145...@bxe150.bisx.prod.on.blackberry>
	 <ce0f6e0c0805122146j3e336d78j91a974e3c20cf...@mail.gmail.com>
	 <BC3E0313-F8B6-4E45-806A-1409B99DE...@atlasocean.com>
Message-ID: <ce0f6e0c0805132227u463e373ehdcc865296d686bbf@mail.gmail.com>

Hi Erich,

I had not come across Harel's work before (believe it or not) so I read the
paper containing the "spec" you mentioned. It was, needless to say,
extremely interesting, and very relevant for the systems I design at work
(which, I have only recently come to realize, are soft real-time systems).
Having poked around in Ragel a little more I see that you are of course
right when you say that it should complement rather than replace a
hand-coded statechart.

Do you know of any examples of statecharts describing a protocol handler, or
any good resources around statechart diagrams in general?

-Ross


On Tue, May 13, 2008 at 6:43 AM, Erich Ocean <er... at atlasocean.com> wrote:

>
> Ross,
>
> Statecharts are trivial to code by hand, using case and switch
> statements, and result in roughly the same amount of code as a
> straight Ragel implementation would. In addition, the hand-coded
> variants are more flexible, since you can implement the full "spec" as
> designed by Harel. You can also easily embed Ragel regex-style
> machines in the various states as needed when you hand code, and
> Adrian's code generation approach makes that particularly easy.
>
> Bottom-line: hand-code statecharts. The hard part is creating the
> statecharts themselves (I use OmniGraffle), not coding them up.
>
> That said, I wouldn't create a protocol handler without them. They are
> extraordinarily efficient, **easy** to debug, and quick to modify. I
> create and modify statechart-based code daily at my day job, and use
> statecharts on my own projects.
>
> Zed Shaw has done some work with Ragel and statecharts if you still
> want to go down that path:
>
>        http://www.zedshaw.com/tips/ragel_state_charts.html
>
> Best, Erich
>
> On May 12, 2008, at 9:46 PM, Ross Thomas wrote:
>
> >
> > It seems to me that the approach I describe cannot work as I wanted it
> > to, because the regexps matching the commands are duplicated for each
> > state, only with a different target state. For example:
> >
> > main := (
> >    start: (
> >        1 -> a
> >    ),
> >    a: (
> >        1 -> b
> >    ),
> >    ...
> > );
> >
> > Given the input [1, 1] the machine will end up in state "a", not state
> > "final" as I thought. Which makes sense now I think about it.
> >
> > Back to the drawing board... :)
> >
> > -Ross
> >
> >
> > On Mon, May 12, 2008 at 6:15 PM, Adrian Thurston <thurs... at cs.queensu.ca
> > > wrote:
> >> Hi Ross,
> >>
> >> To be honest I don't have much experience with this approach.
> >> Statecharts were originally made for small low-level machines that
> >> are awkward to do with regular expressions. But they turned out to
> >> be more useful. The only issue I can think of is dealing with
> >> whitespace ... but I don't know SMTP well enough to say for sure.
> >> Let us know if if you pursue it and it works out :)
> >>
> >> Adrian
> >> -----Original Message-----
> >> From: "Ross Thomas" <halfacan... at gmail.com>
> >>
> >> Date: Mon, 12 May 2008 15:17:27
> >> To:ragel-users <ragel-users at googlegroups.com>
> >> Subject: [ragel-users] Re: Any suggestions on implementing SMTP
> >> protocol in
> >> Ragel?
> >>
> >>
> >>
> >> To reduce the scope of my question a little, here is the general
> >> structure I have so far:
> >>
> >>   main := (
> >>       start: (
> >>           helo @copy_helo @resp_250 -> wait_mail |
> >>           mail @resp_503 -> start |
> >>           vrfy @resp_503 -> start |
> >>           ...
> >>       wait_mail: (
> >>           helo @resp_250 -> wait_mail |
> >>           mail @copy_mail @resp_250 -> wait_rcpt |
> >>           vrfy @resp_252 -> wait_mail |
> >>           ...
> >>   );
> >>
> >> Each "helo", "mail", "vrfy" etc. machine corresponds to the SMTP
> >> command of the same name. They are defined as:
> >>
> >>   helo = (("HELO"i | "EHLO"i) " "       %sarg graph+ %earg     eol);
> >>   mail = ( "MAIL"i            " FROM:<" %sarg path*  %earg ">" eol);
> >>   vrfy = ( "VRFY"i            " "       %sarg graph+ %earg     eol);
> >>   ...
> >>
> >> So the idea is that the top-level state chart handles logical flow
> >> and
> >> knows which commands are valid in which states, and calls the
> >> appropriate actions. The tokenizing is done "inline", as it were.
> >>
> >> Does this strike anyone as a particularly foolish approach? Is
> >> there a
> >> better way?
> >>
> >> -Ross
> >>
> >>
> >> On Sun, May 11, 2008 at 11:57 AM, Ross Thomas
> >> <halfacan... at gmail.com> wrote:
> >>>
> >>> While hacking up a parser for SMTP (in an unprecedentedly small
> >>> amount
> >>> of time, naturally :)) it occurred to me that given Ragel's
> >>> ability to
> >>> mix regular expressions with state charts I could make the same
> >>> machine double-up as an SMTP protocol handler too. At least, I
> >>> think I
> >>> could. Because a significant portion of my work involves the client/
> >>> server model this is an aspect of Ragel I'd very much like to
> >>> explore
> >>> in more detail...
> >>>
> >>> I've browsed around on the list and read Zed's post on state charts
> >>> but still don't have a totally clear idea on how this might be
> >>> implemented. Can anyone out there with more Ragel experience point
> >>> me
> >>> in the right direction?
> >>>
> >>> -Ross
> >>
> >>
> >>
> >>
> >>>
> >>
> >
> > >
>
>
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20080513/da09cb2f/attachment-0001.html>

From zeds... at zedshaw.com  Wed May 14 06:09:10 2008
From: zeds... at zedshaw.com (Zed A. Shaw)
Date: Wed, 14 May 2008 02:09:10 -0400
Subject: [ragel-users] Re: Any suggestions on implementing SMTP protocol
 inRagel?
In-Reply-To: <BC3E0313-F8B6-4E45-806A-1409B99DE56E@atlasocean.com>
References: <17e3e3eb-5aaf-42b8-9556-510609c45cb3@z24g2000prf.googlegroups.com>
	<ce0f6e0c0805121517k41e25d4el9c416ae116c23d8e@mail.gmail.com>
	<762981520-1210641299-cardhu_decombobulator_blackberry.rim.net-601514575-@bxe150.bisx.prod.on.blackberry>
	<ce0f6e0c0805122146j3e336d78j91a974e3c20cf806@mail.gmail.com>
	<BC3E0313-F8B6-4E45-806A-1409B99DE56E@atlasocean.com>
Message-ID: <20080514020910.7756e93c.zedshaw@zedshaw.com>

On Tue, 13 May 2008 06:43:39 -0700
Erich Ocean <er... at atlasocean.com> wrote:

> 
> Ross,
> 
> Statecharts are trivial to code by hand, using case and switch  
> statements, and result in roughly the same amount of code as a  
> straight Ragel implementation would. In addition, the hand-coded  
> variants are more flexible, since you can implement the full "spec" as  
> designed by Harel. You can also easily embed Ragel regex-style  
> machines in the various states as needed when you hand code, and  
> Adrian's code generation approach makes that particularly easy.

It is easy to code simple ones, but hand-coded ones have the following
limitations:

1) Nobody can read the mass of case/switch crap later on, not even the
dude who wrote it initially.
2) Debugging them is a pain in the ass, usually involving tracing
statements.
3) The compiler can't tell you if you have cycles, invalid
transitions, and doesn't minimize your states.  Ragel does all that.
4) You can't generate dot graphs from your stuff.

Now, what I've done in the past to remove 1-3 is to use statecharts
implemented as C macros and function call semantics.  You should also
go grab:

http://www.quantum-leaps.com/

Ignore the hyperbole about "quantum programming" and just buy the
book. Miro Samek knows tons and tons and tons about doing statecharts
in hand-coded C++ and is also able to explain many concepts about
hierarchical FSM.

But still, it's a pain in the ass compared to using Ragel.

> Bottom-line: hand-code statecharts. The hard part is creating the  
> statecharts themselves (I use OmniGraffle), not coding them up.

That's only because the distance from drawing to implementation is so
wide.  When you use Ragel the same syntax produces the diagram and the
code, so the distance is much shorter.

> That said, I wouldn't create a protocol handler without them. They are  
> extraordinarily efficient, **easy** to debug, and quick to modify. I  
> create and modify statechart-based code daily at my day job, and use  
> statecharts on my own projects.

I totally agree with this.  Servers that don't have them are so much
harder to use.  I'm working on a new HTTP server/proxy and I'm totally
taking the methods I worked up for Utu in this one.  It's so much
easier.
 
> Zed Shaw has done some work with Ragel and statecharts if you still  
> want to go down that path:
> 
> 	http://www.zedshaw.com/tips/ragel_state_charts.html

I'll be doing a new one of that for my new web server project.  Stay
tuned, I'll drop an announce here.

-- 
Zed A. Shaw
- Hate: http://savingtheinternetwithhate.com/
- Good: http://www.zedshaw.com/
- Evil: http://yearofevil.com/


From er... at atlasocean.com  Wed May 14 14:22:02 2008
From: er... at atlasocean.com (Erich Ocean)
Date: Wed, 14 May 2008 07:22:02 -0700
Subject: [ragel-users] Re: Any suggestions on implementing SMTP protocol inRagel?
In-Reply-To: <20080514020910.7756e93c.zedshaw@zedshaw.com>
References: <17e3e3eb-5aaf-42b8-9556-510609c45cb3@z24g2000prf.googlegroups.com> <ce0f6e0c0805121517k41e25d4el9c416ae116c23d8e@mail.gmail.com> <762981520-1210641299-cardhu_decombobulator_blackberry.rim.net-601514575-@bxe150.bisx.prod.on.blackberry> <ce0f6e0c0805122146j3e336d78j91a974e3c20cf806@mail.gmail.com> <BC3E0313-F8B6-4E45-806A-1409B99DE56E@atlasocean.com> <20080514020910.7756e93c.zedshaw@zedshaw.com>
Message-ID: <D130FCE8-7AD9-4E4F-94BD-A3B1F25FF76C@atlasocean.com>

On May 13, 2008, at 11:09 PM, Zed A. Shaw wrote:

> On Tue, 13 May 2008 06:43:39 -0700
> Erich Ocean <er... at atlasocean.com> wrote:
>
>> Ross,
>>
>> Statecharts are trivial to code by hand, using case and switch
>> statements, and result in roughly the same amount of code as a
>> straight Ragel implementation would. In addition, the hand-coded
>> variants are more flexible, since you can implement the full "spec"  
>> as
>> designed by Harel. You can also easily embed Ragel regex-style
>> machines in the various states as needed when you hand code, and
>> Adrian's code generation approach makes that particularly easy.
>
> It is easy to code simple ones, but hand-coded ones have the following
> limitations:
>
> 1) Nobody can read the mass of case/switch crap later on, not even the
> dude who wrote it initially.
> 2) Debugging them is a pain in the ass, usually involving tracing
> statements.
> 3) The compiler can't tell you if you have cycles, invalid
> transitions, and doesn't minimize your states.  Ragel does all that.
> 4) You can't generate dot graphs from your stuff.

I have not uncovered the limitations with hand-coding statecharts  
described by Zed. My guess is that we learned different strategies for  
implementing them. Here's who I learned from:

	Constructing the User Interface with Statecharts
	by Ian Horrocks, Addison-Wesley, 1999

	http://www.amazon.com/Constructing-User-Interface-Statecharts-Horrocks/dp/0201342782

The book is out of print, and a guy at work recently bought a used  
copy for $100 (it originally sold for $40, I think). The book is  
oriented towards writing the control layer in MVC software, but you  
can use statecharts anywhere. I use them in all three layers, client,  
server, and with databases. Basically, whenever the control logic  
degenerates to testing boolean flags* and changing behavior as a  
result, I immediately switch to statecharts because I know the  
resulting code will:

1. accurately reflect the control code as designed by me
2. be easy to debug and _verify_ using "white box" techniques
3. be easily enhanced over the lifetime of the system**

* The first boolean flag in code is usually a harbinger of more  
boolean flags to come. By switching to statecharts early, I can handle  
enhanced logic later in-stride and without impacting my schedule/budget.

** Ragel is particularly ill-suited to implementing statecharts that  
are modified over time, precisely _because_ it minimizes states. You  
don't want states combined or minimized because it makes it very  
difficult to extend and modify objects whose state is archived (e.g.  
in a database, on disk, whatever). Zed might not have run into this  
problem yet because he writes clients and servers in-sync, and they  
start with "fresh state" at each startup. Long-running systems can't  
rely on that behavior because they have persistent state.

There is a wide sense among programmers that state machines, including  
statecharts, make code hard to understand. I have no idea why this is  
the case, since my experience is the complete opposite.

As evidence, the first thing I do when working with a new library/API  
is to document what the API does with statecharts, where the "events"  
are function calls into the APIs (including pseudo-function calls if  
the API exposes data-as-symbols). I then translate that statecharts to  
code (in mock object fashion) and do "forwarding" calls to the real  
API during development. This has had two major advantages:

1. I can quickly and easily understand how the underlying API "works"  
from an external perspective, and _test those assumptions_ quickly and  
easily.
2. By running my own code against the mock object(s) (I call the mock  
objects constructed in this fashion "state guards"), I can be sure  
that I'm using the API consistently and within specifications at all  
times. An unhandled "event" (aka function call) in my state guard is  
evidence that I did something out-of-order, such as calling library  
code before calling the libraries "init" function.

I can't think of a higher complement to the understandability of  
statecharts than that. I find most code horrendously hard to read,  
regardless of how it was implemented. Statecharts remove all of that  
for me, quickly and easily, and forever. With stateguards and the  
graphical statechart diagrams, I can answer any question about the  
behavior of the API years down the road in seconds. _No other approach  
I've discovered can make that claim._

Zed makes good points based on his experience, and rather than try and  
refute each of them based on mine, I'll just quote from the book  
mentioned above. If the claims look good to you, I recommend tracking  
down the book and giving it a whirl. I can personally vouch for all of  
the benefits (as well as the limitations) given for statecharts.

Best, Erich

 From __Constructing the User Interface with Statecharts__ by Ian  
Horrocks, Addison-Wesley, 1999:

Advantages of the statechart approach
=====================================

General
-------

- a low number of bugs
- a language independent notation
- complicated user interfaces can be developed with ease
- the speed of user interface development is not reduced
- the performance of the software is not affected
- statecharts are easier to understand than code alone

Design
------

- the designs are precise and consistent
- the designs are modular
- the designs are compact
- the designs are kept up-to-date
- the designs can be reused


Coding
------

- simple and consistent code
- no requirements work during the coding phase
- the code is easy to debug
- the code facilitates walk-throughs

Testing
-------

- unit testing is thorough
- regression testing is efficient and effective
- the unit test cases are compact

Maintenance
-----------

- faults can be traced easily
- changes are local in effect
- very big changes to a user interface are relatively easy to achieve
- it is easy to maintain unfamiliar software
- estimates are more accurate

Some possible limitations of the statechart approach
====================================================

- translating a statechart to code is boring
- the code may not adhere to the design (if you modify the code  
without updating the design)
- the code can be indecipherable to people not familiar with the  
statechart notation
- the method will take a reasonable amount of time to learn
- developers, particularly weak developers, may resist the technique  
because of its rigour

> Now, what I've done in the past to remove 1-3 is to use statecharts
> implemented as C macros and function call semantics.  You should also
> go grab:
>
> http://www.quantum-leaps.com/
>
> Ignore the hyperbole about "quantum programming" and just buy the
> book. Miro Samek knows tons and tons and tons about doing statecharts
> in hand-coded C++ and is also able to explain many concepts about
> hierarchical FSM.
>
> But still, it's a pain in the ass compared to using Ragel.
>
>> Bottom-line: hand-code statecharts. The hard part is creating the
>> statecharts themselves (I use OmniGraffle), not coding them up.
>
> That's only because the distance from drawing to implementation is so
> wide.  When you use Ragel the same syntax produces the diagram and the
> code, so the distance is much shorter.
>
>> That said, I wouldn't create a protocol handler without them. They  
>> are
>> extraordinarily efficient, **easy** to debug, and quick to modify. I
>> create and modify statechart-based code daily at my day job, and use
>> statecharts on my own projects.
>
> I totally agree with this.  Servers that don't have them are so much
> harder to use.  I'm working on a new HTTP server/proxy and I'm totally
> taking the methods I worked up for Utu in this one.  It's so much
> easier.
>
>> Zed Shaw has done some work with Ragel and statecharts if you still
>> want to go down that path:
>>
>> 	http://www.zedshaw.com/tips/ragel_state_charts.html
>
> I'll be doing a new one of that for my new web server project.  Stay
> tuned, I'll drop an announce here.
>
> -- 
> Zed A. Shaw
> - Hate: http://savingtheinternetwithhate.com/
> - Good: http://www.zedshaw.com/
> - Evil: http://yearofevil.com/
>
> >


From pazzodaleg... at gmail.com  Wed May 21 20:07:25 2008
From: pazzodaleg... at gmail.com (Pazzo Da Legare)
Date: Wed, 21 May 2008 22:07:25 +0200
Subject: mapping uml state chart to ragel state chart
Message-ID: <1a26b4920805211307x1b05c7ddj6d70ce6c69183a1@mail.gmail.com>

Dears All,

I'm start using ragel since a couple of days and it seems to me really
powerful. I wonder if someone try to implement  an UML state chart
which could be hierarchical using ragel. In particular I would like to
map common action to a set of states, is there a straightforward way?

pazzodalegare


From thurs... at cs.queensu.ca  Thu May 22 18:13:54 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Thu, 22 May 2008 14:13:54 -0400
Subject: [ragel-users] mapping uml state chart to ragel state chart
In-Reply-To: <1a26b4920805211307x1b05c7ddj6d70ce6c69183a1@mail.gmail.com>
References: <1a26b4920805211307x1b05c7ddj6d70ce6c69183a1@mail.gmail.com>
Message-ID: <4835B7E2.7050000@cs.queensu.ca>

Hi Pazzo,

I'm not aware of anyone who has done this.

Regards,
 Adrian

Pazzo Da Legare wrote:
> Dears All,
> 
> I'm start using ragel since a couple of days and it seems to me really
> powerful. I wonder if someone try to implement  an UML state chart
> which could be hierarchical using ragel. In particular I would like to
> map common action to a set of states, is there a straightforward way?
> 
> pazzodalegare
> 
> > 
> 


From pazzodaleg... at gmail.com  Thu May 22 21:49:57 2008
From: pazzodaleg... at gmail.com (pazzodalegare)
Date: Thu, 22 May 2008 14:49:57 -0700 (PDT)
Subject: mapping uml state chart to ragel state chart
In-Reply-To: <4835B7E2.7050000@cs.queensu.ca>
References: <1a26b4920805211307x1b05c7ddj6d70ce6c69183a1@mail.gmail.com> 
	<4835B7E2.7050000@cs.queensu.ca>
Message-ID: <613599b7-8c6c-4abd-bd62-3e74e4592852@r66g2000hsg.googlegroups.com>

Hi Adrian,

thank you for your answer! I will try to go more in depth through
ragel documentation.

Best Regards,

p


On 22 Mag, 20:13, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> Hi Pazzo,
>
> I'm not aware of anyone who has done this.
>
> Regards,
>  Adrian


From hsan... at gmail.com  Fri May 23 01:56:52 2008
From: hsan... at gmail.com (hsanson)
Date: Thu, 22 May 2008 18:56:52 -0700 (PDT)
Subject: Golomb parser
Message-ID: <362d7665-788e-4d70-8c0c-6f3393cb810b@h1g2000prh.googlegroups.com>

Is it possible to create a VLC (Variable Length Code) syntax like
Golomb or CABAC used in video codecs using Ragel??

If so how difficult can this be??


thanks


From thurs... at cs.queensu.ca  Fri May 23 15:05:27 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Fri, 23 May 2008 11:05:27 -0400
Subject: [ragel-users] Golomb parser
In-Reply-To: <362d7665-788e-4d70-8c0c-6f3393cb810b@h1g2000prh.googlegroups.com>
References: <362d7665-788e-4d70-8c0c-6f3393cb810b@h1g2000prh.googlegroups.com>
Message-ID: <4836DD37.3010206@cs.queensu.ca>

Hi Horacio,

I'm not sure ... I haven't heard of these languages before. If you do
try using Ragel it would be great if you could let us know how it worked
out.

Regards,
 Adrian

hsanson wrote:
> Is it possible to create a VLC (Variable Length Code) syntax like
> Golomb or CABAC used in video codecs using Ragel??
> 
> If so how difficult can this be??
> 
> 
> thanks
> Horacio
> > 
> 


From mforal.n... at gmail.com  Fri May 23 22:29:01 2008
From: mforal.n... at gmail.com (mitchell)
Date: Fri, 23 May 2008 15:29:01 -0700 (PDT)
Subject: Multiple inclusions cause multiple definitions => compile error
Message-ID: <713a2eaf-6781-4ba2-9af2-6ebd164864ab@w7g2000hsa.googlegroups.com>

Adrian,

This is a result of my previous thread on multiple inclusion errors.

Here's what I'm working with:
  css.rl - a CSS parser
  javascript.rl - a Javascript parser
  html.rl - a HTML parser that 'include's css.rl and javascript.rl.

css.rl 'include's a common.rl while javascript.rl and html.rl do not
(as you asked in my previous thread)

I get no compilation errors from ragel, but when I compile the
generated C code, specifically html.c, I get 'previous definition was
here' errors from gcc. I went into the code and one of the 2 dozen or
so redeclarations was:
  static const char _html_actions[] = {
    ...
  }
It was declared 3 times throughout html.c. I removed the javascript.rl
'include' statement and tried to compile again. This time the same
_html_actions was declared 2 times. It seems 'include' has some
strange effects.

Any idea what's going wrong? Do you need more information?

Thanks,


From mforal.n... at gmail.com  Fri May 23 22:33:24 2008
From: mforal.n... at gmail.com (mitchell)
Date: Fri, 23 May 2008 15:33:24 -0700 (PDT)
Subject: Multiple inclusions cause multiple definitions => compile error
In-Reply-To: <713a2eaf-6781-4ba2-9af2-6ebd164864ab@w7g2000hsa.googlegroups.com>
References: <713a2eaf-6781-4ba2-9af2-6ebd164864ab@w7g2000hsa.googlegroups.com>
Message-ID: <7d6c272e-c38f-49da-8b56-3fa8d49189be@56g2000hsm.googlegroups.com>

> This is a result of my previous thread on multiple inclusion errors.

Apologies for the ambiguous title. This is multiple include statements
of *different* files that result in *gcc* compile errors; not ragel
ones


From thurs... at cs.queensu.ca  Sat May 24 18:38:17 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Sat, 24 May 2008 14:38:17 -0400
Subject: [ragel-users] Re: Multiple inclusions cause multiple definitions
 => compile error
In-Reply-To: <7d6c272e-c38f-49da-8b56-3fa8d49189be@56g2000hsm.googlegroups.com>
References: <713a2eaf-6781-4ba2-9af2-6ebd164864ab@w7g2000hsa.googlegroups.com> <7d6c272e-c38f-49da-8b56-3fa8d49189be@56g2000hsm.googlegroups.com>
Message-ID: <48386099.4080000@cs.queensu.ca>

Hey Mitchell,

Do all of the files have write statements? Somehow multiple write
commands for the html machine have been issued.

-Adrian


mitchell wrote:
>> This is a result of my previous thread on multiple inclusion errors.
> 
> Apologies for the ambiguous title. This is multiple include statements
> of *different* files that result in *gcc* compile errors; not ragel
> ones
> 
> -Mitchell;
> > 
> 


From mforal.n... at gmail.com  Sat May 24 22:43:59 2008
From: mforal.n... at gmail.com (mitchell)
Date: Sat, 24 May 2008 15:43:59 -0700 (PDT)
Subject: Multiple inclusions cause multiple definitions => compile error
In-Reply-To: <48386099.4080000@cs.queensu.ca>
References: <713a2eaf-6781-4ba2-9af2-6ebd164864ab@w7g2000hsa.googlegroups.com> 
	<7d6c272e-c38f-49da-8b56-3fa8d49189be@56g2000hsm.googlegroups.com> 
	<48386099.4080000@cs.queensu.ca>
Message-ID: <3cc1bc46-4fff-48fb-9964-c7958ae81f3f@k37g2000hsf.googlegroups.com>

Adrian,

> Do all of the files have write statements? Somehow multiple write
> commands for the html machine have been issued.

Yes, all have write statements because all are intended to be used
individually. That was the issue.

I guess now the question is, can I somehow specify a conditional so I
not do any writing for parsers that are being 'include'd? In this case
I normally want javascript.rl and css.rl to write data when they are
used individually, but I don't want them to write anything when being
'include'd by html.rl.

I'm not sure how familiar you are with Lua, but I used to write parser
modules in it. Each parser module had a name in a global namespace so
I could just do a:
  if [parser] then
    ... -- this parser is being included by [parser]
  end

Thanks,


From mforal.n... at gmail.com  Sun May 25 04:22:47 2008
From: mforal.n... at gmail.com (mitchell)
Date: Sat, 24 May 2008 21:22:47 -0700 (PDT)
Subject: Multiple inclusions cause multiple definitions => compile error
In-Reply-To: <3cc1bc46-4fff-48fb-9964-c7958ae81f3f@k37g2000hsf.googlegroups.com>
References: <713a2eaf-6781-4ba2-9af2-6ebd164864ab@w7g2000hsa.googlegroups.com> 
	<7d6c272e-c38f-49da-8b56-3fa8d49189be@56g2000hsm.googlegroups.com> 
	<48386099.4080000@cs.queensu.ca> <3cc1bc46-4fff-48fb-9964-c7958ae81f3f@k37g2000hsf.googlegroups.com>
Message-ID: <96e6b3ca-5e86-40b1-a62a-9834898345d0@m36g2000hse.googlegroups.com>

> I could just do a:
>   if [parser] then
>     ... -- this parser is being included by [parser]
>   end

I guess a Ragel equivalent of C's #ifdef, #ifndef, #define, etc. would
be perfect.


From hsan... at gmail.com  Fri May 23 06:10:47 2008
From: hsan... at gmail.com (hsanson)
Date: Thu, 22 May 2008 23:10:47 -0700 (PDT)
Subject: Simple URL parser
Message-ID: <952a0db1-e92f-4d74-882b-6a94645df9ba@a9g2000prl.googlegroups.com>

To learn how to use Ragel I am implementing a simple URL parser that
receives something like "http://www.ragel.com:8080/file.txt" and
returns each part (scheme, hostname, port, path) as strings. As I
understand doing this with Ragel should be a breeze.

Still there is something I am not getting right and would like some
advice, see code below:

The scheme part seems to work so I assume my understanding of Ragel is
not that bad. The problem is with the hostname and port parts. The
hostname action gets called for each character on the hostname, that
is not the intended behavior and the port action never gets called.

Any tips to take me back on track would be greatly appreciated.

Horacio

//###################################
#include <string.h>
#include <stdio.h>
#include <stdlib.h>

typedef struct {
    char *scheme;
    char *hostname;
    char *service;
    char *path;
    char *uri;
} suj_url;

%%{
    machine uri_parser;

# Actions
    action mark_start {
        start = fpc;
        printf("Mark start at %c\n", fc);
    }

    action scheme {
        size_t len = fpc - start + 1;
        url->scheme = calloc(len,sizeof(char));
        strncpy(url->scheme, start, len);
        url->scheme[len]='\0';
        printf("scheme: %s\n",url->scheme);
    }

    action host {
        size_t len = fpc - start + 1;
        url->hostname = calloc(len,sizeof(char));
        strncpy(url->hostname, start, len);
        url->hostname[len]='\0';
        printf("host: %s\n",url->hostname);
    }

    action port {
        size_t len = fpc - start + 1;
        url->service = calloc(len,sizeof(char));
        strncpy(url->service, start, len);
        url->service[len]='\0';
        printf("service: %s\n",url->service);
    }
# Grammar
    escaped = ("%" xdigit xdigit);
    scheme = ("http"i | "rtsp"i | "rtp"i) >mark_start @scheme;
    port   = (":" digit+) >mark_start %port;
    host   = (any* -- ("/" | ":")) >mark_start @host;

    uri = (scheme "://" host  port ) . '\0';

# Main
    main := uri;

}%%

%%write data;

suj_url * suj_url_new(char *uri)
{
    suj_url *url;
    char *start;
    char *end;

    int cs;
    %% write init;

    char *p = uri;
    char *pe = p + strlen(uri);

    url = calloc(1,sizeof(url));
    url->uri = calloc(strlen(uri),sizeof(char));
    strncpy(url->uri,uri, strlen(uri));

    %% write exec;

    return url;
}

int main(int argc, char **argv)
{
    suj_url *url;
    url = suj_url_new("rtp://www.ragel.org:8080");
}


From hsan... at gmail.com  Fri May 23 09:07:17 2008
From: hsan... at gmail.com (hsanson)
Date: Fri, 23 May 2008 18:07:17 +0900
Subject: [ragel-users] Simple URL parser
In-Reply-To: <952a0db1-e92f-4d74-882b-6a94645df...@a9g2000prl.googlegroups.com>
References: <952a0db1-e92f-4d74-882b-6a94645df...@a9g2000prl.googlegroups.com>
Message-ID: <48368945.9000...@gmail.com>

Ok, so I tried harder and read the URL spec (RFC 1738) and did a direct 
translation from the ABNF syntax to Ragel syntax and now it works (almost).

I still have a few (actually a lot) of questions:

1 - If you see my code (attached) you will see I parse the scheme, 
hostname, port and path parts of the URL using almost identical
     actions. The only difference is the variables used to store the 
parsed strings. Is there a way to pass the actions some variables?
     So I can create a single function and pass the variable to store as 
a parameter?

2 - For some reason the last parsing never finishes. If I pass an URL 
like "http://hostname" the parser gives me the scheme "http" but
     not the hostname. If I pass an URL like "http://hostname:8080" the 
parser outputs the scheme and hostname but not the port. And if
     I provide a path like "http://hostname:8080/file.html" the parser 
gives me all except for the path. As you see the last string never get's
     parsed and I don't know why??.

3 - Is there a better/cleaner way to do this??

thanks
Horacio

hsanson wrote:
> To learn how to use Ragel I am implementing a simple URL parser that
> receives something like "http://www.ragel.com:8080/file.txt" and
> returns each part (scheme, hostname, port, path) as strings. As I
> understand doing this with Ragel should be a breeze.
>
> Still there is something I am not getting right and would like some
> advice, see code below:
>
> The scheme part seems to work so I assume my understanding of Ragel is
> not that bad. The problem is with the hostname and port parts. The
> hostname action gets called for each character on the hostname, that
> is not the intended behavior and the port action never gets called.
>
> Any tips to take me back on track would be greatly appreciated.
>
> Horacio
>   

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: url.rl
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20080523/476352ef/attachment-0001.ksh>

From thurs... at cs.queensu.ca  Fri May 23 18:07:43 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Fri, 23 May 2008 14:07:43 -0400
Subject: [ragel-users] Simple URL parser
In-Reply-To: <952a0db1-e92f-4d74-882b-6a94645df9ba@a9g2000prl.googlegroups.com>
References: <952a0db1-e92f-4d74-882b-6a94645df9ba@a9g2000prl.googlegroups.com>
Message-ID: <483707EF.9050901@cs.queensu.ca>

Hey Horacio,

The host action is executed on every character of the host name because
the finishing operator is used on a repeated machine. Finishing actions
are executed every time the state machine moves into a final state,
which is every character in the case of a single character that is
repeated. Use % instead.

-Adrian

hsanson wrote:
> To learn how to use Ragel I am implementing a simple URL parser that
> receives something like "http://www.ragel.com:8080/file.txt" and
> returns each part (scheme, hostname, port, path) as strings. As I
> understand doing this with Ragel should be a breeze.
> 
> Still there is something I am not getting right and would like some
> advice, see code below:
> 
> The scheme part seems to work so I assume my understanding of Ragel is
> not that bad. The problem is with the hostname and port parts. The
> hostname action gets called for each character on the hostname, that
> is not the intended behavior and the port action never gets called.
> 
> Any tips to take me back on track would be greatly appreciated.
> 
> Horacio
> 
> //###################################
> #include <string.h>
> #include <stdio.h>
> #include <stdlib.h>
> 
> typedef struct {
>     char *scheme;
>     char *hostname;
>     char *service;
>     char *path;
>     char *uri;
> } suj_url;
> 
> %%{
>     machine uri_parser;
> 
> # Actions
>     action mark_start {
>         start = fpc;
>         printf("Mark start at %c\n", fc);
>     }
> 
>     action scheme {
>         size_t len = fpc - start + 1;
>         url->scheme = calloc(len,sizeof(char));
>         strncpy(url->scheme, start, len);
>         url->scheme[len]='\0';
>         printf("scheme: %s\n",url->scheme);
>     }
> 
>     action host {
>         size_t len = fpc - start + 1;
>         url->hostname = calloc(len,sizeof(char));
>         strncpy(url->hostname, start, len);
>         url->hostname[len]='\0';
>         printf("host: %s\n",url->hostname);
>     }
> 
>     action port {
>         size_t len = fpc - start + 1;
>         url->service = calloc(len,sizeof(char));
>         strncpy(url->service, start, len);
>         url->service[len]='\0';
>         printf("service: %s\n",url->service);
>     }
> # Grammar
>     escaped = ("%" xdigit xdigit);
>     scheme = ("http"i | "rtsp"i | "rtp"i) >mark_start @scheme;
>     port   = (":" digit+) >mark_start %port;
>     host   = (any* -- ("/" | ":")) >mark_start @host;
> 
>     uri = (scheme "://" host  port ) . '\0';
> 
> # Main
>     main := uri;
> 
> }%%
> 
> %%write data;
> 
> suj_url * suj_url_new(char *uri)
> {
>     suj_url *url;
>     char *start;
>     char *end;
> 
>     int cs;
>     %% write init;
> 
>     char *p = uri;
>     char *pe = p + strlen(uri);
> 
>     url = calloc(1,sizeof(url));
>     url->uri = calloc(strlen(uri),sizeof(char));
>     strncpy(url->uri,uri, strlen(uri));
> 
>     %% write exec;
> 
>     return url;
> }
> 
> int main(int argc, char **argv)
> {
>     suj_url *url;
>     url = suj_url_new("rtp://www.ragel.org:8080");
> }
> 
> 
> > 
> 


From thurs... at cs.queensu.ca  Fri May 23 18:24:05 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Fri, 23 May 2008 14:24:05 -0400
Subject: [ragel-users] Re: Simple URL parser
In-Reply-To: <48368945.9000605@gmail.com>
References: <952a0db1-e92f-4d74-882b-6a94645df9ba@a9g2000prl.googlegroups.com> <48368945.9000605@gmail.com>
Message-ID: <48370BC5.7040806@cs.queensu.ca>

Hey

hsanson wrote:
> 1 - If you see my code (attached) you will see I parse the scheme, 
> hostname, port and path parts of the URL using almost identical
>      actions. The only difference is the variables used to store the 
> parsed strings. Is there a way to pass the actions some variables?
>      So I can create a single function and pass the variable to store as 
> a parameter?

Not currently, this is the single most requested feature for Ragel and
I'm hoping to do something about it soon.

> 2 - For some reason the last parsing never finishes. If I pass an URL 
> like "http://hostname" the parser gives me the scheme "http" but
>      not the hostname. If I pass an URL like "http://hostname:8080" the 
> parser outputs the scheme and hostname but not the port. And if
>      I provide a path like "http://hostname:8080/file.html" the parser 
> gives me all except for the path. As you see the last string never get's
>      parsed and I don't know why??.

If you're using 5.X (which you seem to be) then you should do one of the
following:

1. Also embed the *_write actions as EOF actions and add a "write eof"
following all the processing.

2. Send an additional character (such as 0) after the url.

If you're using 6.X then just add "char *eof = pe;" after the
declarations of p and pe.

> 3 - Is there a better/cleaner way to do this??

Looks good to me. One thing to be aware of is that RFCs are sometimes
ambiguous so if you work directly from them you sometimes run into
problems. See chapter four of the manual for more info on resolving
ambiguities.

-Adrian


From hsan... at gmail.com  Sat May 24 15:09:34 2008
From: hsan... at gmail.com (Horacio Sanson)
Date: Sun, 25 May 2008 00:09:34 +0900
Subject: [ragel-users] Re: Simple URL parser
In-Reply-To: <48370BC5.7040...@cs.queensu.ca>
References: <952a0db1-e92f-4d74-882b-6a94645df...@a9g2000prl.googlegroups.com>
	 <48368945.9000...@gmail.com> <48370BC5.7040...@cs.queensu.ca>
Message-ID: <6156dd8b0805240809h99b70b8t4f48e1e86f87d0ac@mail.gmail.com>

On Sat, May 24, 2008 at 3:24 AM, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>
> Hey
>
> hsanson wrote:
>> 1 - If you see my code (attached) you will see I parse the scheme,
>> hostname, port and path parts of the URL using almost identical
>>      actions. The only difference is the variables used to store the
>> parsed strings. Is there a way to pass the actions some variables?
>>      So I can create a single function and pass the variable to store as
>> a parameter?
>
> Not currently, this is the single most requested feature for Ragel and
> I'm hoping to do something about it soon.
>
>> 2 - For some reason the last parsing never finishes. If I pass an URL
>> like "http://hostname" the parser gives me the scheme "http" but
>>      not the hostname. If I pass an URL like "http://hostname:8080" the
>> parser outputs the scheme and hostname but not the port. And if
>>      I provide a path like "http://hostname:8080/file.html" the parser
>> gives me all except for the path. As you see the last string never get's
>>      parsed and I don't know why??.
>
> If you're using 5.X (which you seem to be) then you should do one of the
> following:
>
> 1. Also embed the *_write actions as EOF actions and add a "write eof"
> following all the processing.
>
> 2. Send an additional character (such as 0) after the url.
>
> If you're using 6.X then just add "char *eof = pe;" after the
> declarations of p and pe.

Strange, I installed ragel 6.2 and tried your last recommendation (use
char *eof = pe) but I get the same behavior. The last write action
never gets executed....

BTW, this new version of ragel directly generates the C code (no xml
in between) is this correct behavior or am I doing something wrong??

Horacio
>
>> 3 - Is there a better/cleaner way to do this??
>
> Looks good to me. One thing to be aware of is that RFCs are sometimes
> ambiguous so if you work directly from them you sometimes run into
> problems. See chapter four of the manual for more info on resolving
> ambiguities.
>
> -Adrian
>
> >
>


From thurs... at cs.queensu.ca  Sat May 24 18:32:34 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Sat, 24 May 2008 14:32:34 -0400
Subject: [ragel-users] Re: Simple URL parser
In-Reply-To: <6156dd8b0805240809h99b70b8t4f48e1e86f87d0ac@mail.gmail.com>
References: <952a0db1-e92f-4d74-882b-6a94645df9ba@a9g2000prl.googlegroups.com> <48368945.9000605@gmail.com> <48370BC5.7040806@cs.queensu.ca> <6156dd8b0805240809h99b70b8t4f48e1e86f87d0ac@mail.gmail.com>
Message-ID: <48385F42.4090008@cs.queensu.ca>

Hi Horacio,

The machine is not succeeding. It looks like hsegment is missing a
repetition operator.

Yep, that's right, in version 6 the backend is called automatically.

-Adrian


Horacio Sanson wrote:
> Strange, I installed ragel 6.2 and tried your last recommendation (use
> char *eof = pe) but I get the same behavior. The last write action
> never gets executed....
> 
> BTW, this new version of ragel directly generates the C code (no xml
> in between) is this correct behavior or am I doing something wrong??


From hsan... at gmail.com  Mon May 26 01:35:44 2008
From: hsan... at gmail.com (hsanson)
Date: Mon, 26 May 2008 10:35:44 +0900
Subject: [ragel-users] Re: Simple URL parser
In-Reply-To: <48385F42.4090...@cs.queensu.ca>
References: <952a0db1-e92f-4d74-882b-6a94645df...@a9g2000prl.googlegroups.com> <48368945.9000...@gmail.com> <48370BC5.7040...@cs.queensu.ca> <6156dd8b0805240809h99b70b8t4f48e1e86f87d...@mail.gmail.com> <48385F42.4090...@cs.queensu.ca>
Message-ID: <483A13F0.5080...@gmail.com>

Adrian Thurston wrote:
> Hi Horacio,
>
> The machine is not succeeding. It looks like hsegment is missing a
> repetition operator.
>
> Yep, that's right, in version 6 the backend is called automatically.
>
> -Adrian
>
>   
Adrian,  thanks very much for your support... I appreciate it. 
Unfortunately I am unable to grasp how Ragel works. I added the eof 
variable definition and created a very simple machine:

main := ("http") $eof{ printf("reached eof\n"); };

If I understand correctly I should see "reached eof" printed on console 
as soon as the parser finishes testing for the last "p" of "http". 
Running this under a debugger (gdb) I can see the eof condition is never 
tested and I get no output in console. And of course the url parser I am 
trying to implement also never reaches eof.

Am I misunderstanding how ragel is supposed to work??

thanks
Horacio
> Horacio Sanson wrote:
>   
>> Strange, I installed ragel 6.2 and tried your last recommendation (use
>> char *eof = pe) but I get the same behavior. The last write action
>> never gets executed....
>>
>> BTW, this new version of ragel directly generates the C code (no xml
>> in between) is this correct behavior or am I doing something wrong??
>>     
>
>
> >
>   

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: test_url2.rl
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20080526/8d52302e/attachment-0001.ksh>

From thurs... at cs.queensu.ca  Wed May 28 20:59:57 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Wed, 28 May 2008 16:59:57 -0400
Subject: [ragel-users] Re: Simple URL parser
In-Reply-To: <483A13F0.5080700@gmail.com>
References: <952a0db1-e92f-4d74-882b-6a94645df9ba@a9g2000prl.googlegroups.com> <48368945.9000605@gmail.com> <48370BC5.7040806@cs.queensu.ca> <6156dd8b0805240809h99b70b8t4f48e1e86f87d0ac@mail.gmail.com> <48385F42.4090008@cs.queensu.ca> <483A13F0.5080700@gmail.com>
Message-ID: <483DC7CD.6060102@cs.queensu.ca>

The eof actions are executed when p reaches eof, which is normally after
the last character in the buffer (assuming eof has been set to pe).

-Adrian

hsanson wrote:
> Adrian Thurston wrote:
>> Hi Horacio,
>>
>> The machine is not succeeding. It looks like hsegment is missing a
>> repetition operator.
>>
>> Yep, that's right, in version 6 the backend is called automatically.
>>
>> -Adrian
>>
>>   
> Adrian,  thanks very much for your support... I appreciate it. 
> Unfortunately I am unable to grasp how Ragel works. I added the eof 
> variable definition and created a very simple machine:
> 
> main := ("http") $eof{ printf("reached eof\n"); };
> 
> If I understand correctly I should see "reached eof" printed on console 
> as soon as the parser finishes testing for the last "p" of "http". 
> Running this under a debugger (gdb) I can see the eof condition is never 
> tested and I get no output in console. And of course the url parser I am 
> trying to implement also never reaches eof.
> 
> Am I misunderstanding how ragel is supposed to work??
> 
> thanks
> Horacio
>> Horacio Sanson wrote:
>>   
>>> Strange, I installed ragel 6.2 and tried your last recommendation (use
>>> char *eof = pe) but I get the same behavior. The last write action
>>> never gets executed....
>>>
>>> BTW, this new version of ragel directly generates the C code (no xml
>>> in between) is this correct behavior or am I doing something wrong??
>>>     
>>
>>   
> 
> 
> > 
> 


From mforal.n... at gmail.com  Wed May 28 16:30:46 2008
From: mforal.n... at gmail.com (mitchell)
Date: Wed, 28 May 2008 09:30:46 -0700 (PDT)
Subject: Preprocessor System Proposal
Message-ID: <a718208b-e6ae-4126-bef3-feef80c05a2f@z66g2000hsc.googlegroups.com>

Adrian,

I just wanted to condense a couple of earlier topics I started into a
proposal for a kind of preprocessor system.

If you weren't already aware, I'm interning at Ohloh this summer for
Google summer of Code and we've been very impressed with Ragel over
the last few weeks. I've talked with the project leaders about the
problems I've run into (discussed in my topics here), and they're very
interested in a solution -- even offering incentives (though they
wouldn't divulge any details).

My first problem was the multiple inclusions of the same file. My
second problem was duplicate 'write' statements I want to perform
conditionally. I believe both can be solved by a preprocessor system.

I'm no expert with Ragel's source code, but I think I may have an idea
of how this can be implemented.

In rlscan.rl's 'section_parse' machine we can add some preprocessor
statements. All I was thinking of for now was 'define' and 'if'. Each
would have an "action" comprised of C code that is executed. 'define'
would have nothing after the "action", so something like:
  define { int foo = 1; };
would suffice.

The 'if' statement would be slightly more complicated. There are two
ideas I had on structure:

Idea #1:

  if { foo } {
    include 'some_file.rl';
    write 'something';
    # do other things conditionally
  }
  So this 'if' acts like the 'when' conditional, but the block of
Ragel *after* the "action" is parsed if "action" evaluates to true.

Idea #2:

  {
    include 'some_file.rl';
    write 'something';
    # do other things conditionally
  } when { foo };
  In this case we don't need an 'if', but use the existing 'when'
keyword. This might be easier to implement, but could be a strange
read to developers browsing Ragel code.

Either way we will need to parse the Ragel inside the { }'s using the
'main' machine which will be modified to contain this preprocessor
system.

Overall I think this system using the embedded C statements would be
much easier than keeping a list of defines in the Ragel source code
and writing your own preprocessor executor for an 'if' statement. I
think it will also provide for more flexibility.

Thanks for your time,


From thurs... at cs.queensu.ca  Wed May 28 21:14:01 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Wed, 28 May 2008 17:14:01 -0400
Subject: [ragel-users] Preprocessor System Proposal
In-Reply-To: <a718208b-e6ae-4126-bef3-feef80c05a2f@z66g2000hsc.googlegroups.com>
References: <a718208b-e6ae-4126-bef3-feef80c05a2f@z66g2000hsc.googlegroups.com>
Message-ID: <483DCB19.8010807@cs.queensu.ca>

Hi Mitchell,

So I've been meaning to work on some kind of macro language for a long
time now, but haven't had the chance to sit down and do it. I'm hoping
in the latter part of 2008, by then I should be finished with my thesis.
I'm actually planning on using my thesis project to implement the macro
system, which is another reason I've been delaying on the macros.

The macro system needs to solve a whole lot of problems at once so I'm
expecting it to take quite a bit of research/work.

Using the C preprocessing language is attractive, but unfortunately
won't do since the general trend with ragel is language independence. We
do need something a lot like it though.

-Adrian

mitchell wrote:
> Adrian,
> 
> I just wanted to condense a couple of earlier topics I started into a
> proposal for a kind of preprocessor system.
> 
> If you weren't already aware, I'm interning at Ohloh this summer for
> Google summer of Code and we've been very impressed with Ragel over
> the last few weeks. I've talked with the project leaders about the
> problems I've run into (discussed in my topics here), and they're very
> interested in a solution -- even offering incentives (though they
> wouldn't divulge any details).
> 
> My first problem was the multiple inclusions of the same file. My
> second problem was duplicate 'write' statements I want to perform
> conditionally. I believe both can be solved by a preprocessor system.
> 
> I'm no expert with Ragel's source code, but I think I may have an idea
> of how this can be implemented.
> 
> In rlscan.rl's 'section_parse' machine we can add some preprocessor
> statements. All I was thinking of for now was 'define' and 'if'. Each
> would have an "action" comprised of C code that is executed. 'define'
> would have nothing after the "action", so something like:
>   define { int foo = 1; };
> would suffice.
> 
> The 'if' statement would be slightly more complicated. There are two
> ideas I had on structure:
> 
> Idea #1:
> 
>   if { foo } {
>     include 'some_file.rl';
>     write 'something';
>     # do other things conditionally
>   }
>   So this 'if' acts like the 'when' conditional, but the block of
> Ragel *after* the "action" is parsed if "action" evaluates to true.
> 
> Idea #2:
> 
>   {
>     include 'some_file.rl';
>     write 'something';
>     # do other things conditionally
>   } when { foo };
>   In this case we don't need an 'if', but use the existing 'when'
> keyword. This might be easier to implement, but could be a strange
> read to developers browsing Ragel code.
> 
> Either way we will need to parse the Ragel inside the { }'s using the
> 'main' machine which will be modified to contain this preprocessor
> system.
> 
> Overall I think this system using the embedded C statements would be
> much easier than keeping a list of defines in the Ragel source code
> and writing your own preprocessor executor for an 'if' statement. I
> think it will also provide for more flexibility.
> 
> Thanks for your time,
> -Mitchell;
> > 
> 


From mforal.n... at gmail.com  Sat May 31 19:41:48 2008
From: mforal.n... at gmail.com (mitchell)
Date: Sat, 31 May 2008 12:41:48 -0700 (PDT)
Subject: Testing beginning of line in a scanner
Message-ID: <bd3afb52-1fbe-429a-82f2-ea3bdc7c35ba@z66g2000hsc.googlegroups.com>

Hi,

I'm trying to test for a character that occurs only at the beginning
of a line in a scanner:

  special = '!' when starts_line @callback;
  line := |*
    [\t ]+ => callback;
    special;
    newline => callback;
    '!' when not_starts_line => callback;
    ^(space | '!') => callback;
  *|;

I get a
  ragel: fsmgraph.h:385: TransAp::TransAp(const TransAp&): Assertion
  `lmActionTable.length() == 0 && other.lmActionTable.length() == 0'
failed
error.

If I remove the "'!' when not_starts_line" line, Ragel compiles, but I
cannot detect any '!'s in a place other than the beginning of a line
which is no good.

Any ideas?

Thanks,


From jup... at hotmail.de  Mon May 12 06:00:39 2008
From: jup... at hotmail.de (jupp_g)
Date: Sun, 11 May 2008 23:00:39 -0700 (PDT)
Subject: Windows binaries updated to vs. 6.2
Message-ID: <2ceb33ef-ec50-4585-b513-3bd5657b5fe3@y38g2000hsy.googlegroups.com>

I have updated the precompiled Windows files to vs. 6.2. The new C#
code generator is also included.
Binaries: http://www.jgoettgens.de/Meine_Bilder_und_Dateien/ragel-6.2-win32-vs2008-bin.zip
Sources with VisualStudio project files:
http://www.jgoettgens.de/Meine_Bilder_und_Dateien/ragel-6.2-win32-vs2008-src.zip


From thurs... at cs.queensu.ca  Tue May 13 01:05:12 2008
From: thurs... at cs.queensu.ca (=?utf-8?B?QWRyaWFuIFRodXJzdG9u?=)
Date: Tue, 13 May 2008 01:05:12 +0000
Subject: [ragel-users] Windows binaries updated to vs. 6.2
In-Reply-To: <2ceb33ef-ec50-4585-b513-3bd5657b5fe3@y38g2000hsy.googlegroups.com>
References: <2ceb33ef-ec50-4585-b513-3bd5657b5fe3@y38g2000hsy.googlegroups.com>
Message-ID: <1548496711-1210640696-cardhu_decombobulator_blackberry.rim.net-1505493164-@bxe150.bisx.prod.on.blackberry>

Great, thanks! I just updated the link using midpssh on my phone. Hopefully I got it right :)

Cheers,
 Adrian 
-----Original Message-----
From: jupp_g <jupp_g at hotmail.de>

Date: Sun, 11 May 2008 23:00:39 
To:ragel-users <ragel-users at googlegroups.com>
Subject: [ragel-users] Windows binaries updated to vs. 6.2



I have updated the precompiled Windows files to vs. 6.2. The new C#
code generator is also included.
Binaries: http://www.jgoettgens.de/Meine_Bilder_und_Dateien/ragel-6.2-win32-vs2008-bin.zip
Sources with VisualStudio project files:
http://www.jgoettgens.de/Meine_Bilder_und_Dateien/ragel-6.2-win32-vs2008-src.zip




From mforal.n... at gmail.com  Thu May 22 23:39:51 2008
From: mforal.n... at gmail.com (mitchell)
Date: Thu, 22 May 2008 16:39:51 -0700 (PDT)
Subject: Bypass "previously defined" errors?
Message-ID: <c212c291-3789-462e-bb99-70ba3ef14b95@w7g2000hsa.googlegroups.com>

Hi,

I have a set of Ragel files that all include a common Ragel file;
sometimes I want to include one Ragel file in another, but I get the
"fsm previously defined" error. Is there any way to ignore the
warnings and run Ragel successfully? Or is there any way around this?
Maybe even allow definitions to be overwritten or reassigned in a
future release?

Thanks,


From thurs... at cs.queensu.ca  Fri May 23 01:27:36 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Thu, 22 May 2008 21:27:36 -0400
Subject: [ragel-users] Bypass "previously defined" errors?
In-Reply-To: <c212c291-3789-462e-bb99-70ba3ef14b95@w7g2000hsa.googlegroups.com>
References: <c212c291-3789-462e-bb99-70ba3ef14b95@w7g2000hsa.googlegroups.com>
Message-ID: <48361D88.3080409@cs.queensu.ca>

Hey Mitchell,

Sorry I keep missing you on the IRC channel. I check it about once daily
 but you're usually logged out by the time I connect to the screen session.

Could you give a bit more information about the use case? I haven't
heard of anyone needing to do this before. Is it because you've got some
stock ragel parser and you want to specialize it to some task by
redefining things?

-Adrian



mitchell wrote:
> Hi,
> 
> I have a set of Ragel files that all include a common Ragel file;
> sometimes I want to include one Ragel file in another, but I get the
> "fsm previously defined" error. Is there any way to ignore the
> warnings and run Ragel successfully? Or is there any way around this?
> Maybe even allow definitions to be overwritten or reassigned in a
> future release?
> 
> Thanks,
> -Mitchell;
> > 
> 


From mforal.n... at gmail.com  Fri May 23 04:43:39 2008
From: mforal.n... at gmail.com (mitchell)
Date: Thu, 22 May 2008 21:43:39 -0700 (PDT)
Subject: Bypass "previously defined" errors?
In-Reply-To: <48361D88.3080409@cs.queensu.ca>
References: <c212c291-3789-462e-bb99-70ba3ef14b95@w7g2000hsa.googlegroups.com> 
	<48361D88.3080409@cs.queensu.ca>
Message-ID: <af172ad5-a382-4d5a-a5cf-a59611c57e9e@m45g2000hsb.googlegroups.com>

Adrian,

> Could you give a bit more information about the use case? I haven't
> heard of anyone needing to do this before. Is it because you've got some
> stock ragel parser and you want to specialize it to some task by
> redefining things?

I am writing programming language parsers. Some languages have other
languages embedded in them. I want to "include" an embedded (child)
language into a parent one. However, since either language parser can
be used separately on its own, both "include" a common.rl file that
contains common definitions and actions used by most parsers. Thus
there is a double inclusion of common.rl and the error message for a
parent-child language parser.

Thanks for your time,


From thurs... at cs.queensu.ca  Fri May 23 17:57:45 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Fri, 23 May 2008 13:57:45 -0400
Subject: [ragel-users] Re: Bypass "previously defined" errors?
In-Reply-To: <af172ad5-a382-4d5a-a5cf-a59611c57e9e@m45g2000hsb.googlegroups.com>
References: <c212c291-3789-462e-bb99-70ba3ef14b95@w7g2000hsa.googlegroups.com>  <48361D88.3080409@cs.queensu.ca> <af172ad5-a382-4d5a-a5cf-a59611c57e9e@m45g2000hsb.googlegroups.com>
Message-ID: <48370599.6010000@cs.queensu.ca>

What if we blocked files from being included more than once? In the
meantime can you lift the common include into the top-level ragel file?

-Adrian

mitchell wrote:
> Adrian,
> 
>> Could you give a bit more information about the use case? I haven't
>> heard of anyone needing to do this before. Is it because you've got some
>> stock ragel parser and you want to specialize it to some task by
>> redefining things?
> 
> I am writing programming language parsers. Some languages have other
> languages embedded in them. I want to "include" an embedded (child)
> language into a parent one. However, since either language parser can
> be used separately on its own, both "include" a common.rl file that
> contains common definitions and actions used by most parsers. Thus
> there is a double inclusion of common.rl and the error message for a
> parent-child language parser.
> 
> Thanks for your time,
> -Mitchell;
> > 
> 


From mforal.n... at gmail.com  Fri May 23 19:06:28 2008
From: mforal.n... at gmail.com (mitchell)
Date: Fri, 23 May 2008 12:06:28 -0700 (PDT)
Subject: Bypass "previously defined" errors?
In-Reply-To: <48370599.6010000@cs.queensu.ca>
References: <c212c291-3789-462e-bb99-70ba3ef14b95@w7g2000hsa.googlegroups.com> 
	<48361D88.3080409@cs.queensu.ca> <af172ad5-a382-4d5a-a5cf-a59611c57e9e@m45g2000hsb.googlegroups.com> 
	<48370599.6010000@cs.queensu.ca>
Message-ID: <37081ebe-ca1d-4750-ba21-529460daeb5a@w7g2000hsa.googlegroups.com>

Adrian,

> What if we blocked files from being included more than once?

That sounds great.

> In the
> meantime can you lift the common include into the top-level ragel file?

It's possible, but of course not optimal.

Thanks!


