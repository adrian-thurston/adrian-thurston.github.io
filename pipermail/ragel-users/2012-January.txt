From nison.mael at gmail.com  Thu Jan  5 15:18:59 2012
From: nison.mael at gmail.com (=?ISO-8859-1?Q?Ma=EBl_Nison?=)
Date: Thu, 5 Jan 2012 16:18:59 +0100
Subject: [ragel-users] getNextToken() : how to return ?
Message-ID: <CANiF4iBAEANc02XWFFET7PQkvOu24izyYMUJypg03wz04e+YYA@mail.gmail.com>

Hi,
I would like to write a very basic function taking a c++ char const
*&, and returning the first token type.The reference would imply that
the cstring pointer's target is, afterthe function call, the very next
character of the returned token.
Then I would be able to make :while ( token = getNextToken( foo ) )
std::cout << token << std::endl;
I've tried to use something like that (example, probably does
notcompile),  but the value of 'p' is not modified when
returning(infinite loop) :
#include "Token.hh"%%machine foo;%%write data;
int getNextToken( char const * & p ) {   %%{       foo = "foo";
main := |* foo => { return Foo; }; *|;   }%%;
   int cs;   int act;   char const * ts;   char const * te;   char const * eof;
   %% write init;   %% write exec noend;}
Additionnaly, I've seen in the documentation that getkey could
beemployed to change the buffer input. Is there an example
usingstandard c++ istreams ?

Thanks : )
-- 
Maël Nison
Epitech 2014, Paris - Astek

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From nison.mael at gmail.com  Thu Jan  5 15:20:57 2012
From: nison.mael at gmail.com (=?ISO-8859-1?Q?Ma=EBl_Nison?=)
Date: Thu, 5 Jan 2012 16:20:57 +0100
Subject: [ragel-users] getNextToken() : how to return ?
In-Reply-To: <CANiF4iBAEANc02XWFFET7PQkvOu24izyYMUJypg03wz04e+YYA@mail.gmail.com>
References: <CANiF4iBAEANc02XWFFET7PQkvOu24izyYMUJypg03wz04e+YYA@mail.gmail.com>
Message-ID: <CANiF4iCdNGCG0ZuTXE02gkCmwZ1zrujKq8wx76gAM-+YKniSRw@mail.gmail.com>

Epic formatting fail. I hope it will be better this time. Sorry ..

Hi,

I would like to write a very basic function taking a c++ char const *
&, and returning the first token type.
The reference would imply that the cstring pointer's target is, after
the function call, the very next character of the returned token.

Then I would be able to make :
while ( token = getNextToken( foo ) )
  std::cout << token << std::endl;

I've tried to use something like that (example, probably does not
compile),  but the value of 'p' is not modified when returning
(infinite loop) :

#include "Token.hh"
%%machine foo;
%%write data;

int getNextToken( char const * & p ) {
  %%{
    foo = "foo";
    main := |* foo => { return Foo; }; *|;
  }%%;

  int cs;
  int act;
  char const * ts;
  char const * te;
  char const * eof;

  %% write init;
  %% write exec noend;
}

Additionally, I've seen in the documentation that getkey could be
employed to change the buffer input. Is there an example using
standard c++ istreams ?

-- 
Maël Nison
Epitech 2014, Paris - Astek
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel/attachments/20120105/6cbdf01a/attachment.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From nison.mael at gmail.com  Thu Jan  5 15:44:05 2012
From: nison.mael at gmail.com (=?ISO-8859-1?Q?Ma=EBl_Nison?=)
Date: Thu, 5 Jan 2012 16:44:05 +0100
Subject: [ragel-users] getNextToken() : how to return ?
In-Reply-To: <CANiF4iCdNGCG0ZuTXE02gkCmwZ1zrujKq8wx76gAM-+YKniSRw@mail.gmail.com>
References: <CANiF4iBAEANc02XWFFET7PQkvOu24izyYMUJypg03wz04e+YYA@mail.gmail.com>
	<CANiF4iCdNGCG0ZuTXE02gkCmwZ1zrujKq8wx76gAM-+YKniSRw@mail.gmail.com>
Message-ID: <CANiF4iC8YLWC9rn08xwH1tEuRRevyHvx4m70UAYZPH3Fc4zj3g@mail.gmail.com>

It seems to work if I manually set p = te; just before returning, but I
don't really know if it's a good practice.

On 5 January 2012 16:20, Maël Nison <nison.mael at gmail.com> wrote:

> Epic formatting fail. I hope it will be better this time. Sorry ..
>
> Hi,
>
> I would like to write a very basic function taking a c++ char const *
> &, and returning the first token type.
> The reference would imply that the cstring pointer's target is, after
> the function call, the very next character of the returned token.
>
> Then I would be able to make :
> while ( token = getNextToken( foo ) )
>   std::cout << token << std::endl;
>
> I've tried to use something like that (example, probably does not
> compile),  but the value of 'p' is not modified when returning
> (infinite loop) :
>
> #include "Token.hh"
> %%machine foo;
> %%write data;
>
> int getNextToken( char const * & p ) {
>   %%{
>     foo = "foo";
>     main := |* foo => { return Foo; }; *|;
>   }%%;
>
>   int cs;
>   int act;
>   char const * ts;
>   char const * te;
>   char const * eof;
>
>   %% write init;
>   %% write exec noend;
> }
>
> Additionally, I've seen in the documentation that getkey could be
> employed to change the buffer input. Is there an example using
> standard c++ istreams ?
>
> --
> Maël Nison
> Epitech 2014, Paris - Astek
>
>


-- 
Maël Nison
Epitech 2014, Paris - Astek
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel/attachments/20120105/5ac55ca6/attachment.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From silverdirk-rgl at silverdirk.com  Thu Jan  5 18:13:37 2012
From: silverdirk-rgl at silverdirk.com (M Conrad)
Date: Thu, 05 Jan 2012 13:13:37 -0500
Subject: [ragel-users] getNextToken() : how to return ?
In-Reply-To: <CANiF4iC8YLWC9rn08xwH1tEuRRevyHvx4m70UAYZPH3Fc4zj3g@mail.gmail.com>
References: <CANiF4iBAEANc02XWFFET7PQkvOu24izyYMUJypg03wz04e+YYA@mail.gmail.com>
	<CANiF4iCdNGCG0ZuTXE02gkCmwZ1zrujKq8wx76gAM-+YKniSRw@mail.gmail.com>
	<CANiF4iC8YLWC9rn08xwH1tEuRRevyHvx4m70UAYZPH3Fc4zj3g@mail.gmail.com>
Message-ID: <op.v7mh8zb3ah38gt@osangar.int.intellitree.com>

> On 5 January 2012 16:20, Maël Nison <nison.mael at gmail.com> wrote:
>> I would like to write a very basic function taking a c++ char const *
>> &, and returning the first token type.
>> The reference would imply that the cstring pointer's target is, after
>> the function call, the very next character of the returned token.
...
>> I've tried to use something like that (example, probably does not
>> compile),  but the value of 'p' is not modified when returning
>> (infinite loop) :

"p" works exactly like you expect it should.  i.e. it is always
pointing to the next character that will be consumed by the state
machine.  If "p" didn't get modified, it means the state machine
didn't consume any characters.

> It seems to work if I manually set p = te; just before returning, but I
> don't really know if it's a good practice.

The only reason to modify "p" is if you intend to skip characters.

>>   %%{
>>     foo = "foo";
>>     main := |* foo => { return Foo; }; *|;
>>   }%%;

I've never tried "return" from inside the action code... that is
likely your problem.  Try "tok= Foo; fbreak;" (and define a local
var named "tok")

Also, since "p" is used quite often in the generated code, you
might consider the following, so that the compiler can optimize
it into a register:

     int getNextToken( const char **pos ) {
       int tok= -1;
       const char* p= *pos;
       ...
       ...
       ...
       *pos= p;
       return tok;
     }

Whether to use references or pointers is a style preference, but
with a pointer you make it clear to the caller that they need to
pass an lvalue.

Also, since you're doing this in C++, you might consider wrapping
it all in a class and using fields instead of a parameter.

-Mike

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From lxu4net at gmail.com  Mon Jan  9 11:02:11 2012
From: lxu4net at gmail.com (=?UTF-8?B?5b6Q5Lqu?=)
Date: Mon, 9 Jan 2012 19:02:11 +0800
Subject: [ragel-users] Failed to convert URL parser regular expression to
	Ragel
Message-ID: <CADA6EctF0y8MnV22g-ma8Dou7cYkGydy55iCWhL+qySZxv6HMg@mail.gmail.com>

I have posted a question in
StackOverflow<http://stackoverflow.com/questions/8784903/failed-to-convert-url-parser-regular-expression-to-ragel>about
it.

I found an URL parser regular expression at RFC 2396 and RFC 3986.

    ^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?

I converted it to Ragel:

    %%{
      # RFC 3986 URI Generic Syntax (January 2005)
      machine url_parser;

      action pchar     {
        printf("%c", fc);
      }
      action scheme            { printf("scheme\n"); }
      action scheme_end     { printf("\nscheme_end\n"); }
      action authority           { printf("authority\n"); }
      action authority_end    { printf("\nauthority_end\n"); }
      action path                  { printf("path\n"); }
      action path_end           { printf("\npath_end\n"); }
      action query                { printf("query\n"); }
      action query_end         { printf("\nquery_end\n"); }
      action fragment           { printf("fragment\n"); }
      action fragment_end    { printf("\nfragment_end\n"); }

      scheme    = (any - [:/?#])+ >scheme    $pchar %scheme_end ;
      authority = (any - [/?#])*  >authority $pchar %authority_end ;
      path      = (any - [?#])*   >path      $pchar %path_end ;
      query     = (any - [#])*    >query     $pchar %query_end ;
      fragment  = (any)*          >fragment  $pchar %fragment_end ;
      main     := (( scheme ":" )?) <: (( "//" authority )?) <: path ( "?"
query )? ( "#" fragment )?;
    }%%

    #include <cstdio>
    #include <cstdlib>
    #include <string>

    /** Data **/
    %% write data;

    int main(int argc, char **argv) {
      std::string str(argv[1]);
      char const* p = str.c_str();
      char const* pe = p + str.size();
      char const* eof = pe;
      int cs = 0;

      %% write init;
      %% write exec;

      return p - str.c_str();
    }

It's work when I input absolute URI.

    liangxu at dev64:~$ ./uri_test "
http://www.ics.uci.edu/pub/ietf/uri/?c=www&rot=1&e=%20%20"
    scheme
    http
    scheme_end
    authority
    www.ics.uci.edu
    authority_end
    path
    /pub/ietf/uri/
    path_end
    query
    c=www&rot=1&e=%20%20
    query_end

And success when I input authority and path:

    liangxu at dev64:~$ ./uri_test "//
www.ics.uci.edu/pub/ietf/uri/?c=www&rot=1&e=%20%20"
    authority
    www.ics.uci.edu
    authority_end
    path
    /pub/ietf/uri/
    path_end
    query
    c=www&rot=1&e=%20%20
    query_end

But failed when I input only path:

    liangxu at dev64:~$ ./uri_test "/pub/ietf/uri"

What's wrong?

-- 
Liang Xu
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel/attachments/20120109/e8efb89f/attachment.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From ragel-user at jgoettgens.de  Mon Jan  9 14:50:06 2012
From: ragel-user at jgoettgens.de (ragel-user at jgoettgens.de)
Date: Mon, 9 Jan 2012 15:50:06 +0100
Subject: [ragel-users] Failed to convert URL parser regular expression
	toRagel
In-Reply-To: <CADA6EctF0y8MnV22g-ma8Dou7cYkGydy55iCWhL+qySZxv6HMg@mail.gmail.com>
References: <CADA6EctF0y8MnV22g-ma8Dou7cYkGydy55iCWhL+qySZxv6HMg@mail.gmail.com>
Message-ID: <AC5861DBA9574090900CC28F5042240E@localdomain>

Liang,

your problem is likely to be caused by the relative priorities on whether to stay or leave any of the partial FS machines due to common character sequences.

There is an interesting side effect in the way you have written your specification. The path “/pub/ietf/uri” may not get accepted, but “:/pub/ietf/uri” does!

Rebalancing your machine slightly, so it reads

    main     := (( scheme ":" )?) <: (( "//" authority** )?)  path ( "?" query )? ( "#" fragment )?;

lets it now accept the initial path spec. Of course, I have not checked whether there are now new unwanted effects. In case of ambiguities like this my preferred method to study it is by looking at the graphviz output.

jg
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel/attachments/20120109/a95b02bb/attachment.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From umdkenshalo at yahoo.com  Sat Jan 21 14:11:50 2012
From: umdkenshalo at yahoo.com (Daniel Kenshalo)
Date: Sat, 21 Jan 2012 06:11:50 -0800 (PST)
Subject: [ragel-users] Ragel question
Message-ID: <1327155110.58119.YahooMailNeo@web114719.mail.gq1.yahoo.com>

Really like ragel.  I have a question about the best way to implement a parser for the following format which can be repeated in a given file


ZCZC

<well formatted fixed width text> = meta-data machine


ZEM

ID:
   <any punct. etc>

IDXXX:

    <any, characters, punct. etc>

ID WITH SPACE:

   <any-text>


NNNN


A very simplified version of my machine is:
report = ('ZCZC' meta-data 'ZEM' body :>> 'NNNN')
main := report*

For the body machine I am struggling to define a machine that captures the 
identifier (always at start of line and has ':' character) and reads 
until the next occurrence of any identifier.  The identifiers may or may not be present for example one file may have ID, IDXXX and the next can have ID, ID WITH SPACE.  Really I'm just looking for text at the 
beginning of a line with a ':' character.  It's challenging b/c there is no way to tell when I'm done reading "any" and start a new ID 
<any> block.

Thanks for any help or insight you may provide.  I was thinking that scanner 
may be the only way for this type of input where I scan for the tokens 
and read in my host language until the next token, but this seems sorta 
"hack-tackulous" 


My scanner would be (which I have tested and seems to for) and then I 
would use smaller machines to further process down the input

action token {
// read line by line until line that starts w/ '\n' [A-Z ] ':' is reached
// insert each line in buffer/some key value pair map etc.
}

body := |*
'\n' [A-Z ]{3, 10} ':' @token  // the {3,10} is b/c tokens at beginning of line are no longer than 10 characters
*|;
Dan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel/attachments/20120121/08f610f0/attachment.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From gerald.gutierrez at gmail.com  Mon Jan 23 07:11:28 2012
From: gerald.gutierrez at gmail.com (Gerald Gutierrez)
Date: Sun, 22 Jan 2012 23:11:28 -0800
Subject: [ragel-users] Parsing of names with spaces in them
Message-ID: <CAPZrZPOBD9wQVznqhiEcKq_m1frP48S86BKrUMVh+-AFWenpjQ@mail.gmail.com>

Hello folks,

I recently found Ragel and have discovered that it is a very pleasant
piece of software. That said, I've run into a problem that I was
hoping is common and a solution available.

Please see the example code at https://gist.github.com/1661150.

Basically, I'd like to parse the following:

name:name

where the names start and end with an alnum, and can contain any
combination of alnum and spaces inside. They could also be blank. My
rules for this are:

identifier = alnum (space* alnum)*;
name       = (identifier | zlen) >sName $pName %fName;

The names can be separated by a colon and optionally spaces inbetween
the names and the colon. My rules for this are:

sep = space* ":" space*;
main := name sep name;

This doesn't work because apparently the space* in identifier and the
space* in sep confuse the parser. I end up getting the action fName
executed in every space of the name.

If I change sep to:

sep = ":";

then everything is fine. How do I modify these rules so that the
parser does what I intend?

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From gerald.gutierrez at gmail.com  Mon Jan 23 07:36:57 2012
From: gerald.gutierrez at gmail.com (Gerald Gutierrez)
Date: Sun, 22 Jan 2012 23:36:57 -0800
Subject: [ragel-users] Parsing of names with spaces in them
In-Reply-To: <CAPZrZPOBD9wQVznqhiEcKq_m1frP48S86BKrUMVh+-AFWenpjQ@mail.gmail.com>
References: <CAPZrZPOBD9wQVznqhiEcKq_m1frP48S86BKrUMVh+-AFWenpjQ@mail.gmail.com>
Message-ID: <CAPZrZPPSsrmijOSPU_4nh7fWx0AAtTzHthtVJeO9Y-jYLfg_QA@mail.gmail.com>

To elaborate a bit on this problem:

I've defined the name as containing only alnum's and spaces, and must
start and end with an alnum.

I've also defined the separator as having a colon (:), possibly
surrounded by spaces.

If I parse "aa bb cc : dd ee ff", the only correct way to parse this
must be for the first name to be "aa bb cc" and the second to be "dd
ee ff". There is no other way to interpret this as the two names must
start and end with a letter.

In other words, the leaving action should be called only once for each
name. But it's not.

Instead, I get this output instead:

Name = aa
Name = aa bb
Name = aa bb cc
Name = dd ee ff

Very confused. Is this a bug or intended behavior?


Gerald.


On Sun, Jan 22, 2012 at 23:11, Gerald Gutierrez
<gerald.gutierrez at gmail.com> wrote:
> Hello folks,
>
> I recently found Ragel and have discovered that it is a very pleasant
> piece of software. That said, I've run into a problem that I was
> hoping is common and a solution available.
>
> Please see the example code at https://gist.github.com/1661150.
>
> Basically, I'd like to parse the following:
>
> name:name
>
> where the names start and end with an alnum, and can contain any
> combination of alnum and spaces inside. They could also be blank. My
> rules for this are:
>
> identifier = alnum (space* alnum)*;
> name       = (identifier | zlen) >sName $pName %fName;
>
> The names can be separated by a colon and optionally spaces inbetween
> the names and the colon. My rules for this are:
>
> sep = space* ":" space*;
> main := name sep name;
>
> This doesn't work because apparently the space* in identifier and the
> space* in sep confuse the parser. I end up getting the action fName
> executed in every space of the name.
>
> If I change sep to:
>
> sep = ":";
>
> then everything is fine. How do I modify these rules so that the
> parser does what I intend?

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From khim at chromium.org  Mon Jan 23 08:26:54 2012
From: khim at chromium.org (Victor Khimenko)
Date: Mon, 23 Jan 2012 11:26:54 +0300
Subject: [ragel-users] Parsing of names with spaces in them
In-Reply-To: <CAPZrZPOBD9wQVznqhiEcKq_m1frP48S86BKrUMVh+-AFWenpjQ@mail.gmail.com>
References: <CAPZrZPOBD9wQVznqhiEcKq_m1frP48S86BKrUMVh+-AFWenpjQ@mail.gmail.com>
Message-ID: <CABLBYvSk0xm-cLWTbaGe2HL9uUHaQnpG1nJowiHoJ4LpebaL2w@mail.gmail.com>

On Mon, Jan 23, 2012 at 11:11 AM, Gerald Gutierrez <
gerald.gutierrez at gmail.com> wrote:

> Hello folks,
>
> I recently found Ragel and have discovered that it is a very pleasant
> piece of software. That said, I've run into a problem that I was
> hoping is common and a solution available.
>
> Sadly the problem is common but solution is quite explicitly is NOT
available.


> Please see the example code at https://gist.github.com/1661150.
>
> Basically, I'd like to parse the following:
>
> name:name
>
> where the names start and end with an alnum, and can contain any
> combination of alnum and spaces inside. They could also be blank. My
> rules for this are:
>
> identifier = alnum (space* alnum)*;
> name       = (identifier | zlen) >sName $pName %fName;
>
> The names can be separated by a colon and optionally spaces inbetween
> the names and the colon. My rules for this are:
>
> sep = space* ":" space*;
> main := name sep name;
>
> This doesn't work because apparently the space* in identifier and the
> space* in sep confuse the parser. I end up getting the action fName
> executed in every space of the name.
>
> If I change sep to:
>
> sep = ":";
>
> then everything is fine. How do I modify these rules so that the
> parser does what I intend?
>

The answer is simple: you can't. Ragel generates DFA with actions attached.
This means: symbol in => action out.

Your definition is ambigous: when you see a space you have no idea if it
belongs to the identifier or not. You must scan ahead and look for the next
non-space char: if it's colon then the previous space was not part of the
identifier, if it's alnum then it is. This is not something DFA can/should
do...

To solve your problem you need something more powerful: scanner (see the
last chapter of ragel documentation), or full-blown parser: kelbt -
http://www.complang.org/kelbt/ (ragel itself uses it), bison -
http://www.gnu.org/software/bison/ (most commonly used parser), etc.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel/attachments/20120123/73984075/attachment.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From silverdirk-rgl at silverdirk.com  Mon Jan 23 16:07:55 2012
From: silverdirk-rgl at silverdirk.com (M Conrad)
Date: Mon, 23 Jan 2012 11:07:55 -0500
Subject: [ragel-users] Parsing of names with spaces in them
Message-ID: <op.v8jofhk0ah38gt@osangar>

On Mon, 23 Jan 2012 03:26:54 -0500, Victor Khimenko <khim at chromium.org>
wrote:

> On Mon, Jan 23, 2012 at 11:11 AM, Gerald Gutierrez <
> gerald.gutierrez at gmail.com> wrote:
>
>> Hello folks,
>>
>> I recently found Ragel and have discovered that it is a very pleasant
>> piece of software. That said, I've run into a problem that I was
>> hoping is common and a solution available.
>>
> Sadly the problem is common but solution is quite explicitly is NOT
> available.

I think it is misleading to say that.  All he needs to do is alter the
rules to remove the ambiguity.  A scanner is certainly not required,
though may be desirable.

Gerald- Ragel operates on a principle where all state machines (meaning
all smaller machines within the larger machine) are continuously matching
the input.  Unless you make the machine decide which state to go into, it
will go into *both*, in kind of an uncertainty-principle theme.  It will
run any applicable actions for any transition that occurs, even if it
hasn't decided which state it is really in.

Writing actions for Ragel is different than for a typical backtracking
scanner.  You need to first make sure that it is possible to write your
machine without backtracking.  (If you need backtracking, Ragel also
provides a syntax for defining scanners, which is in the manual.)

Next, if your problem is that you want certain characters to indicate the
end of a previous loop (like ':' in your case), check out the priority
system.  If staying in a machine has equal priority with leaving it to go
to the next, Ragel will do both.  But, if one is prioritized, Ragel will
pick the transition with higher priority.

Finally, if you just need a tiny little bit of backtracking, but don't
want a full-blown scanner, you can try using actions that record character
positions, then other actions that use them.  For instance, every time you
see a non-space during 'name', you record the position "{lastAlpha=p;}",
then add priority to your rule to not leave 'name' (until it sees
something that can't be a name, like a ":"), then in the action for
leaving 'name' you can trim off "p-lastAlpha" number of characters,
knowing they are trailing spaces.


Hopefully that helps.  I would write an example but I'm a bit rusty on it
and short on time.  Let us know if you need one.

-Mike

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From gerald.gutierrez at gmail.com  Mon Jan 23 16:12:30 2012
From: gerald.gutierrez at gmail.com (Gerald Gutierrez)
Date: Mon, 23 Jan 2012 08:12:30 -0800
Subject: [ragel-users] Parsing of names with spaces in them
In-Reply-To: <CABLBYvSk0xm-cLWTbaGe2HL9uUHaQnpG1nJowiHoJ4LpebaL2w@mail.gmail.com>
References: <CAPZrZPOBD9wQVznqhiEcKq_m1frP48S86BKrUMVh+-AFWenpjQ@mail.gmail.com>
	<CABLBYvSk0xm-cLWTbaGe2HL9uUHaQnpG1nJowiHoJ4LpebaL2w@mail.gmail.com>
Message-ID: <E876032C-1533-4C99-A3CB-B918DFFA6C03@gmail.com>



On 2012-01-23, at 0:26, Victor Khimenko <khim at chromium.org> wrote:

> The answer is simple: you can't. Ragel generates DFA with actions attached. This means: symbol in => action out.
> 
> Your definition is ambigous: when you see a space you have no idea if it belongs to the identifier or not. You must scan ahead and look for the next non-space char: if it's colon then the previous space was not part of the identifier, if it's alnum then it is. This is not something DFA can/should do...

Hi Victor,

There is a chapter in the documentation about nondeterminism. Anything something there that can help in this situation? 

Gerald
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From khim at chromium.org  Mon Jan 23 16:31:19 2012
From: khim at chromium.org (Victor Khimenko)
Date: Mon, 23 Jan 2012 20:31:19 +0400
Subject: [ragel-users] Parsing of names with spaces in them
In-Reply-To: <E876032C-1533-4C99-A3CB-B918DFFA6C03@gmail.com>
References: <CAPZrZPOBD9wQVznqhiEcKq_m1frP48S86BKrUMVh+-AFWenpjQ@mail.gmail.com>
	<CABLBYvSk0xm-cLWTbaGe2HL9uUHaQnpG1nJowiHoJ4LpebaL2w@mail.gmail.com>
	<E876032C-1533-4C99-A3CB-B918DFFA6C03@gmail.com>
Message-ID: <CABLBYvQFSk_hW7pYJR-1YgaBZCn4OwTX-CppfrvpMbL5Zk-Ajg@mail.gmail.com>

On Mon, Jan 23, 2012 at 8:07 PM, M Conrad <silverdirk-rgl at silverdirk.com>
 wrote:

>
> Next, if your problem is that you want certain characters to indicate the
> end of a previous loop (like ':' in your case), check out the priority
> system.  If staying in a machine has equal priority with leaving it to go
> to the next, Ragel will do both.  But, if one is prioritized, Ragel will
> pick the transition with higher priority.
>
> Here it'll not work. Priorities prune some branches - this is Ok in some
limited circumstances, but is case like this one you'll get parser which
will start rejecting correct input.

On Mon, Jan 23, 2012 at 8:12 PM, Gerald Gutierrez <
gerald.gutierrez at gmail.com> wrote:

>
>
> On 2012-01-23, at 0:26, Victor Khimenko <khim at chromium.org> wrote:
>
> > The answer is simple: you can't. Ragel generates DFA with actions
> attached. This means: symbol in => action out.
> >
> > Your definition is ambigous: when you see a space you have no idea if it
> belongs to the identifier or not. You must scan ahead and look for the next
> non-space char: if it's colon then the previous space was not part of the
> identifier, if it's alnum then it is. This is not something DFA can/should
> do...
>
> Hi Victor,
>
> There is a chapter in the documentation about nondeterminism. Anything
> something there that can help in this situation?
>
> No. The task (as you've formulated it) principally can not be solved using
your definition: to know if identifier is finished or not you need
unlimited lookahead or backtracking.

How would I solve this dilemma? I'll accept the fact that leaving action
can be called many times - this not a problem for me: I'll store beginning
of the identifier in the enter action and the end in the leaving action.
EVERYTHING ELSE I'll move to the action triggered by other elements (colon,
etc). At this point I'll know both beginning and the end of the identifier
and can do whatever I want with it.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel/attachments/20120123/ec6f5cbe/attachment.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From gerald.gutierrez at gmail.com  Mon Jan 23 17:16:46 2012
From: gerald.gutierrez at gmail.com (Gerald Gutierrez)
Date: Mon, 23 Jan 2012 09:16:46 -0800
Subject: [ragel-users] Parsing of names with spaces in them
In-Reply-To: <CABLBYvQFSk_hW7pYJR-1YgaBZCn4OwTX-CppfrvpMbL5Zk-Ajg@mail.gmail.com>
References: <CAPZrZPOBD9wQVznqhiEcKq_m1frP48S86BKrUMVh+-AFWenpjQ@mail.gmail.com>
	<CABLBYvSk0xm-cLWTbaGe2HL9uUHaQnpG1nJowiHoJ4LpebaL2w@mail.gmail.com>
	<E876032C-1533-4C99-A3CB-B918DFFA6C03@gmail.com>
	<CABLBYvQFSk_hW7pYJR-1YgaBZCn4OwTX-CppfrvpMbL5Zk-Ajg@mail.gmail.com>
Message-ID: <CAPZrZPN7ndeaGEkSvSsK3Ue1CiF_ykCiS7KAMfCp4bF=14ck=Q@mail.gmail.com>

On Mon, Jan 23, 2012 at 08:31, Victor Khimenko <khim at chromium.org> wrote:

>> Hi Victor,
>>
>> There is a chapter in the documentation about nondeterminism. Anything
>> something there that can help in this situation?
>>
> No. The task (as you've formulated it) principally can not be solved using
> your definition: to know if identifier is finished or not you need unlimited
> lookahead or backtracking.

I understand. What I've done instead is to match on [^:]* and qualify
the content of the name in code. This doesn't seem like the best way,
but is clean enough to work with for the time being.

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From ming.fu at netsweeper.com  Mon Jan 23 18:19:46 2012
From: ming.fu at netsweeper.com (Ming Fu)
Date: Mon, 23 Jan 2012 13:19:46 -0500
Subject: [ragel-users] eof action
Message-ID: <4F1DA4C2.9030200@netsweeper.com>

Hi,

I am new to the ragel, I was trying to see the effect of eof action.

I made up some patterns and defines an eof action for the pattern3.

something like:

pattern1 = ....
pattern2 = ....
pattern3 = ( pattern1 | pattern2) $eof myaction ;

I send in a block of data that would match pattern1, the machine report 
matching pattern3 and the myaction is not run.

If I send in the same block of data, but in two chunks, the machine 
report matching after the second chunk is processed, but myaction is not 
run. I would expect the myaction would be run when the machine consumes 
the first chunk and waiting for the rest of the data to complete the 
matching.

Regards,
Ming

All the information contained in this e-mail and its attachments is confidential.
Please consider the environment before printing this e-mail


_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From kerzum at yandex.ru  Fri Jan 27 15:49:07 2012
From: kerzum at yandex.ru (=?koi8-r?B?8KPU0g==?=)
Date: Fri, 27 Jan 2012 19:49:07 +0400
Subject: [ragel-users] eof action
In-Reply-To: <4F1DA4C2.9030200@netsweeper.com>
References: <4F1DA4C2.9030200@netsweeper.com>
Message-ID: <31191327679348@web34.yandex.ru>

An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel/attachments/20120127/507163ac/attachment.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From thurston at complang.org  Fri Jan 27 21:25:42 2012
From: thurston at complang.org (Adrian Thurston)
Date: Fri, 27 Jan 2012 13:25:42 -0800
Subject: [ragel-users] ten years!
Message-ID: <4F231656.6060209@complang.org>

It's been ten years since I released Ragel 1.0 ... thank you to everyone!

-Adrian

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From landon at 360vl.com  Fri Jan 27 22:44:55 2012
From: landon at 360vl.com (Landon Cox)
Date: Fri, 27 Jan 2012 15:44:55 -0700
Subject: [ragel-users] ten years!
In-Reply-To: <4F231656.6060209@complang.org>
References: <4F231656.6060209@complang.org>
Message-ID: <54574F4D-E05B-45D2-84F5-57EDD6989244@360vl.com>

Wow, nice going Adrian.  Congratulations and thank you.

Landon

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From b at bvanderveen.com  Sat Jan 28 03:21:15 2012
From: b at bvanderveen.com (Benjamin van der Veen)
Date: Fri, 27 Jan 2012 19:21:15 -0800
Subject: [ragel-users] ten years!
In-Reply-To: <4F231656.6060209@complang.org>
References: <4F231656.6060209@complang.org>
Message-ID: <29EA75EB-C53B-4220-AB8B-FA5B1F3E91B8@bvanderveen.com>



On Jan 27, 2012, at 13:25, Adrian Thurston <thurston at complang.org> wrote:

> It's been ten years since I released Ragel 1.0 ... thank you to everyone!
> 
> -Adrian

Congratulations and many thanks for your continued support of this valuable tool!
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From kevin.t.ryan at gmail.com  Sat Jan 28 03:51:52 2012
From: kevin.t.ryan at gmail.com (Kevin T. Ryan)
Date: Fri, 27 Jan 2012 22:51:52 -0500
Subject: [ragel-users] ten years!
In-Reply-To: <4F231656.6060209@complang.org>
References: <4F231656.6060209@complang.org>
Message-ID: <CALBzPRnfUvSpLnrDSAUXB3VruZVKzGq7O8kk4xe8+fFZW+bwoA@mail.gmail.com>

Thanks for such a great tool!  Here's to 10 more successful years :)

On Fri, Jan 27, 2012 at 4:25 PM, Adrian Thurston <thurston at complang.org> wrote:
> It's been ten years since I released Ragel 1.0 ... thank you to everyone!
>
> -Adrian
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From joseph.stewart at gmail.com  Sat Jan 28 17:55:28 2012
From: joseph.stewart at gmail.com (Joseph Stewart)
Date: Sat, 28 Jan 2012 09:55:28 -0800
Subject: [ragel-users] ten years!
In-Reply-To: <CALBzPRnfUvSpLnrDSAUXB3VruZVKzGq7O8kk4xe8+fFZW+bwoA@mail.gmail.com>
References: <4F231656.6060209@complang.org>
	<CALBzPRnfUvSpLnrDSAUXB3VruZVKzGq7O8kk4xe8+fFZW+bwoA@mail.gmail.com>
Message-ID: <CANGQBe5U6utuL=tMQ+xqD-M_zSRFQ6e2MV4hC8yXMP7cXr7JDw@mail.gmail.com>

+1 on the congrats!

On Fri, Jan 27, 2012 at 7:51 PM, Kevin T. Ryan <kevin.t.ryan at gmail.com>wrote:

> Thanks for such a great tool!  Here's to 10 more successful years :)
>
> On Fri, Jan 27, 2012 at 4:25 PM, Adrian Thurston <thurston at complang.org>
> wrote:
> > It's been ten years since I released Ragel 1.0 ... thank you to everyone!
> >
> > -Adrian
> >
> > _______________________________________________
> > ragel-users mailing list
> > ragel-users at complang.org
> > http://www.complang.org/mailman/listinfo/ragel-users
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel/attachments/20120128/daa73fff/attachment.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From pazzodalegare at gmail.com  Sun Jan 29 08:57:46 2012
From: pazzodalegare at gmail.com (Pazzo Da Legare)
Date: Sun, 29 Jan 2012 09:57:46 +0100
Subject: [ragel-users] ten years!
In-Reply-To: <4F231656.6060209@complang.org>
References: <4F231656.6060209@complang.org>
Message-ID: <CAAbqRXX+Gtgi9kkxzocsJXSdh9QDvGuOBskVLu_UnMcUsTtvoQ@mail.gmail.com>

Thank you Adrian for your tool and your time!
Il giorno 27/gen/2012 22:27, "Adrian Thurston" <thurston at complang.org> ha
scritto:

> It's been ten years since I released Ragel 1.0 ... thank you to everyone!
>
> -Adrian
>
> ______________________________**_________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/**mailman/listinfo/ragel-users<http://www.complang.org/mailman/listinfo/ragel-users>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel/attachments/20120129/1a5ff9e7/attachment.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From sow at semworks.com  Sun Jan 29 11:46:44 2012
From: sow at semworks.com (Sow Thierno M.)
Date: Sun, 29 Jan 2012 11:46:44 +0000
Subject: [ragel-users] 10 years
Message-ID: <W37429322342841327837604@webmail102>


Un grand Bravo pour cet outil hors du commun!

Thierno Sow
-----Original Message-----

From: ragel-users-request at complang.org [mailto:ragel-users-request at complang.org]
Sent: Saturday, January 28, 2012 09:00 PM
To: ragel-users at complang.org
Subject: ragel-users Digest, Vol 40, Issue 7

Send ragel-users mailing list submissions to	ragel-users at complang.orgTo subscribe or unsubscribe via the World Wide Web, visit	http://www.complang.org/mailman/listinfo/ragel-usersor, via email, send a message with subject or body 'help' to	ragel-users-request at complang.orgYou can reach the person managing the list at	ragel-users-owner at complang.orgWhen replying, please edit your Subject line so it is more specificthan "Re: Contents of ragel-users digest..."Today's Topics: 1. ten years! (Adrian Thurston) 2. Re: ten years! (Landon Cox) 3. Re: ten years! (Benjamin van der Veen) 4. Re: ten years! (Kevin T. Ryan) 5. Re: ten years! (Joseph Stewart)----------------------------------------------------------------------Message: 1Date: Fri, 27 Jan 2012 13:25:42 -0800From: Adrian Thurston To: ragel-users at complang.orgSubject: [ragel-users] ten years!Message-ID: <4F231656.6060209 at complang.org>Content-Type: text/plain; charset=ISO-8859-1; format=flowedIt's been ten years since I released Ragel 1.0 ... thank you to everyone!-Adrian------------------------------Message: 2Date: Fri, 27 Jan 2012 15:44:55 -0700From: Landon Cox To: ragel-users at complang.orgSubject: Re: [ragel-users] ten years!Message-ID: <54574F4D-E05B-45D2-84F5-57EDD6989244 at 360vl.com>Content-Type: text/plain; charset=us-asciiWow, nice going Adrian. Congratulations and thank you.Landon------------------------------Message: 3Date: Fri, 27 Jan 2012 19:21:15 -0800From: Benjamin van der Veen To: "ragel-users at complang.org" Subject: Re: [ragel-users] ten years!Message-ID: <29EA75EB-C53B-4220-AB8B-FA5B1F3E91B8 at bvanderveen.com>Content-Type: text/plain;	charset=us-asciiOn Jan 27, 2012, at 13:25, Adrian Thurston  wrote:> It's been ten years since I released Ragel 1.0 ... thank you to everyone!> > -AdrianCongratulations and many thanks for your continued support of this valuable tool!------------------------------Message: 4Date: Fri, 27 Jan 2012 22:51:52 -0500From: "Kevin T. Ryan" To: ragel-users at complang.orgSubject: Re: [ragel-users] ten years!Message-ID:	Content-Type: text/plain; charset=ISO-8859-1Thanks for such a great tool! Here's to 10 more successful years :)On Fri, Jan 27, 2012 at 4:25 PM, Adrian Thurston  wrote:> It's been ten years since I released Ragel 1.0 ... thank you to everyone!>> -Adrian>> _______________________________________________> ragel-users mailing list> ragel-users at complang.org> http://www.complang.org/mailman/listinfo/ragel-users------------------------------Message: 5Date: Sat, 28 Jan 2012 09:55:28 -0800From: Joseph Stewart To: ragel-users at complang.orgSubject: Re: [ragel-users] ten years!Message-ID:	Content-Type: text/plain; charset="iso-8859-1"+1 on the congrats!On Fri, Jan 27, 2012 at 7:51 PM, Kevin T. Ryan wrote:> Thanks for such a great tool! Here's to 10 more successful years :)>> On Fri, Jan 27, 2012 at 4:25 PM, Adrian Thurston > wrote:> > It's been ten years since I released Ragel 1.0 ... thank you to everyone!> >> > -Adrian> >> > _______________________________________________> > ragel-users mailing list> > ragel-users at complang.org> > http://www.complang.org/mailman/listinfo/ragel-users>> _______________________________________________> ragel-users mailing list> ragel-users at complang.org> http://www.complang.org/mailman/listinfo/ragel-users>-------------- next part --------------An HTML attachment was scrubbed...URL: ------------------------------_______________________________________________ragel-users mailing listragel-users at complang.orghttp://www.complang.org/mailman/listinfo/ragel-usersEnd of ragel-users Digest, Vol 40, Issue 7******************************************
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel/attachments/20120129/5f932dfe/attachment.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From jq at quinteiro.org  Sun Jan 29 16:25:49 2012
From: jq at quinteiro.org (Jose Quinteiro)
Date: Sun, 29 Jan 2012 08:25:49 -0800
Subject: [ragel-users] ten years!
In-Reply-To: <54574F4D-E05B-45D2-84F5-57EDD6989244@360vl.com>
References: <4F231656.6060209@complang.org>
	<54574F4D-E05B-45D2-84F5-57EDD6989244@360vl.com>
Message-ID: <4F25730D.5020108@quinteiro.org>

Thank you very much for writing Ragel and sharing it with us.

On 1/27/12 2:44 PM, Landon Cox wrote:
> Wow, nice going Adrian.  Congratulations and thank you.
>
> Landon
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users


_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From nison.mael at gmail.com  Thu Jan  5 15:18:59 2012
From: nison.mael at gmail.com (=?ISO-8859-1?Q?Ma=EBl_Nison?=)
Date: Thu, 5 Jan 2012 16:18:59 +0100
Subject: [ragel-users] getNextToken() : how to return ?
Message-ID: <CANiF4iBAEANc02XWFFET7PQkvOu24izyYMUJypg03wz04e+YYA@mail.gmail.com>

Hi,
I would like to write a very basic function taking a c++ char const
*&, and returning the first token type.The reference would imply that
the cstring pointer's target is, afterthe function call, the very next
character of the returned token.
Then I would be able to make :while ( token = getNextToken( foo ) )
std::cout << token << std::endl;
I've tried to use something like that (example, probably does
notcompile),  but the value of 'p' is not modified when
returning(infinite loop) :
#include "Token.hh"%%machine foo;%%write data;
int getNextToken( char const * & p ) {   %%{       foo = "foo";
main := |* foo => { return Foo; }; *|;   }%%;
   int cs;   int act;   char const * ts;   char const * te;   char const * eof;
   %% write init;   %% write exec noend;}
Additionnaly, I've seen in the documentation that getkey could
beemployed to change the buffer input. Is there an example
usingstandard c++ istreams ?

Thanks : )
-- 
Maël Nison
Epitech 2014, Paris - Astek

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From nison.mael at gmail.com  Thu Jan  5 15:20:57 2012
From: nison.mael at gmail.com (=?ISO-8859-1?Q?Ma=EBl_Nison?=)
Date: Thu, 5 Jan 2012 16:20:57 +0100
Subject: [ragel-users] getNextToken() : how to return ?
In-Reply-To: <CANiF4iBAEANc02XWFFET7PQkvOu24izyYMUJypg03wz04e+YYA@mail.gmail.com>
References: <CANiF4iBAEANc02XWFFET7PQkvOu24izyYMUJypg03wz04e+YYA@mail.gmail.com>
Message-ID: <CANiF4iCdNGCG0ZuTXE02gkCmwZ1zrujKq8wx76gAM-+YKniSRw@mail.gmail.com>

Epic formatting fail. I hope it will be better this time. Sorry ..

Hi,

I would like to write a very basic function taking a c++ char const *
&, and returning the first token type.
The reference would imply that the cstring pointer's target is, after
the function call, the very next character of the returned token.

Then I would be able to make :
while ( token = getNextToken( foo ) )
  std::cout << token << std::endl;

I've tried to use something like that (example, probably does not
compile),  but the value of 'p' is not modified when returning
(infinite loop) :

#include "Token.hh"
%%machine foo;
%%write data;

int getNextToken( char const * & p ) {
  %%{
    foo = "foo";
    main := |* foo => { return Foo; }; *|;
  }%%;

  int cs;
  int act;
  char const * ts;
  char const * te;
  char const * eof;

  %% write init;
  %% write exec noend;
}

Additionally, I've seen in the documentation that getkey could be
employed to change the buffer input. Is there an example using
standard c++ istreams ?

-- 
Maël Nison
Epitech 2014, Paris - Astek
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20120105/6cbdf01a/attachment-0001.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From nison.mael at gmail.com  Thu Jan  5 15:44:05 2012
From: nison.mael at gmail.com (=?ISO-8859-1?Q?Ma=EBl_Nison?=)
Date: Thu, 5 Jan 2012 16:44:05 +0100
Subject: [ragel-users] getNextToken() : how to return ?
In-Reply-To: <CANiF4iCdNGCG0ZuTXE02gkCmwZ1zrujKq8wx76gAM-+YKniSRw@mail.gmail.com>
References: <CANiF4iBAEANc02XWFFET7PQkvOu24izyYMUJypg03wz04e+YYA@mail.gmail.com>
	<CANiF4iCdNGCG0ZuTXE02gkCmwZ1zrujKq8wx76gAM-+YKniSRw@mail.gmail.com>
Message-ID: <CANiF4iC8YLWC9rn08xwH1tEuRRevyHvx4m70UAYZPH3Fc4zj3g@mail.gmail.com>

It seems to work if I manually set p = te; just before returning, but I
don't really know if it's a good practice.

On 5 January 2012 16:20, Maël Nison <nison.mael at gmail.com> wrote:

> Epic formatting fail. I hope it will be better this time. Sorry ..
>
> Hi,
>
> I would like to write a very basic function taking a c++ char const *
> &, and returning the first token type.
> The reference would imply that the cstring pointer's target is, after
> the function call, the very next character of the returned token.
>
> Then I would be able to make :
> while ( token = getNextToken( foo ) )
>   std::cout << token << std::endl;
>
> I've tried to use something like that (example, probably does not
> compile),  but the value of 'p' is not modified when returning
> (infinite loop) :
>
> #include "Token.hh"
> %%machine foo;
> %%write data;
>
> int getNextToken( char const * & p ) {
>   %%{
>     foo = "foo";
>     main := |* foo => { return Foo; }; *|;
>   }%%;
>
>   int cs;
>   int act;
>   char const * ts;
>   char const * te;
>   char const * eof;
>
>   %% write init;
>   %% write exec noend;
> }
>
> Additionally, I've seen in the documentation that getkey could be
> employed to change the buffer input. Is there an example using
> standard c++ istreams ?
>
> --
> Maël Nison
> Epitech 2014, Paris - Astek
>
>


-- 
Maël Nison
Epitech 2014, Paris - Astek
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20120105/5ac55ca6/attachment-0001.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From silverdirk-rgl at silverdirk.com  Thu Jan  5 18:13:37 2012
From: silverdirk-rgl at silverdirk.com (M Conrad)
Date: Thu, 05 Jan 2012 13:13:37 -0500
Subject: [ragel-users] getNextToken() : how to return ?
In-Reply-To: <CANiF4iC8YLWC9rn08xwH1tEuRRevyHvx4m70UAYZPH3Fc4zj3g@mail.gmail.com>
References: <CANiF4iBAEANc02XWFFET7PQkvOu24izyYMUJypg03wz04e+YYA@mail.gmail.com>
	<CANiF4iCdNGCG0ZuTXE02gkCmwZ1zrujKq8wx76gAM-+YKniSRw@mail.gmail.com>
	<CANiF4iC8YLWC9rn08xwH1tEuRRevyHvx4m70UAYZPH3Fc4zj3g@mail.gmail.com>
Message-ID: <op.v7mh8zb3ah38gt@osangar.int.intellitree.com>

> On 5 January 2012 16:20, Maël Nison <nison.mael at gmail.com> wrote:
>> I would like to write a very basic function taking a c++ char const *
>> &, and returning the first token type.
>> The reference would imply that the cstring pointer's target is, after
>> the function call, the very next character of the returned token.
...
>> I've tried to use something like that (example, probably does not
>> compile),  but the value of 'p' is not modified when returning
>> (infinite loop) :

"p" works exactly like you expect it should.  i.e. it is always
pointing to the next character that will be consumed by the state
machine.  If "p" didn't get modified, it means the state machine
didn't consume any characters.

> It seems to work if I manually set p = te; just before returning, but I
> don't really know if it's a good practice.

The only reason to modify "p" is if you intend to skip characters.

>>   %%{
>>     foo = "foo";
>>     main := |* foo => { return Foo; }; *|;
>>   }%%;

I've never tried "return" from inside the action code... that is
likely your problem.  Try "tok= Foo; fbreak;" (and define a local
var named "tok")

Also, since "p" is used quite often in the generated code, you
might consider the following, so that the compiler can optimize
it into a register:

     int getNextToken( const char **pos ) {
       int tok= -1;
       const char* p= *pos;
       ...
       ...
       ...
       *pos= p;
       return tok;
     }

Whether to use references or pointers is a style preference, but
with a pointer you make it clear to the caller that they need to
pass an lvalue.

Also, since you're doing this in C++, you might consider wrapping
it all in a class and using fields instead of a parameter.

-Mike

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From lxu4net at gmail.com  Mon Jan  9 11:02:11 2012
From: lxu4net at gmail.com (=?UTF-8?B?5b6Q5Lqu?=)
Date: Mon, 9 Jan 2012 19:02:11 +0800
Subject: [ragel-users] Failed to convert URL parser regular expression to
	Ragel
Message-ID: <CADA6EctF0y8MnV22g-ma8Dou7cYkGydy55iCWhL+qySZxv6HMg@mail.gmail.com>

I have posted a question in
StackOverflow<http://stackoverflow.com/questions/8784903/failed-to-convert-url-parser-regular-expression-to-ragel>about
it.

I found an URL parser regular expression at RFC 2396 and RFC 3986.

    ^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?

I converted it to Ragel:

    %%{
      # RFC 3986 URI Generic Syntax (January 2005)
      machine url_parser;

      action pchar     {
        printf("%c", fc);
      }
      action scheme            { printf("scheme\n"); }
      action scheme_end     { printf("\nscheme_end\n"); }
      action authority           { printf("authority\n"); }
      action authority_end    { printf("\nauthority_end\n"); }
      action path                  { printf("path\n"); }
      action path_end           { printf("\npath_end\n"); }
      action query                { printf("query\n"); }
      action query_end         { printf("\nquery_end\n"); }
      action fragment           { printf("fragment\n"); }
      action fragment_end    { printf("\nfragment_end\n"); }

      scheme    = (any - [:/?#])+ >scheme    $pchar %scheme_end ;
      authority = (any - [/?#])*  >authority $pchar %authority_end ;
      path      = (any - [?#])*   >path      $pchar %path_end ;
      query     = (any - [#])*    >query     $pchar %query_end ;
      fragment  = (any)*          >fragment  $pchar %fragment_end ;
      main     := (( scheme ":" )?) <: (( "//" authority )?) <: path ( "?"
query )? ( "#" fragment )?;
    }%%

    #include <cstdio>
    #include <cstdlib>
    #include <string>

    /** Data **/
    %% write data;

    int main(int argc, char **argv) {
      std::string str(argv[1]);
      char const* p = str.c_str();
      char const* pe = p + str.size();
      char const* eof = pe;
      int cs = 0;

      %% write init;
      %% write exec;

      return p - str.c_str();
    }

It's work when I input absolute URI.

    liangxu at dev64:~$ ./uri_test "
http://www.ics.uci.edu/pub/ietf/uri/?c=www&rot=1&e=%20%20"
    scheme
    http
    scheme_end
    authority
    www.ics.uci.edu
    authority_end
    path
    /pub/ietf/uri/
    path_end
    query
    c=www&rot=1&e=%20%20
    query_end

And success when I input authority and path:

    liangxu at dev64:~$ ./uri_test "//
www.ics.uci.edu/pub/ietf/uri/?c=www&rot=1&e=%20%20"
    authority
    www.ics.uci.edu
    authority_end
    path
    /pub/ietf/uri/
    path_end
    query
    c=www&rot=1&e=%20%20
    query_end

But failed when I input only path:

    liangxu at dev64:~$ ./uri_test "/pub/ietf/uri"

What's wrong?

-- 
Liang Xu
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20120109/e8efb89f/attachment-0001.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From ragel-user at jgoettgens.de  Mon Jan  9 14:50:06 2012
From: ragel-user at jgoettgens.de (ragel-user at jgoettgens.de)
Date: Mon, 9 Jan 2012 15:50:06 +0100
Subject: [ragel-users] Failed to convert URL parser regular expression
	toRagel
In-Reply-To: <CADA6EctF0y8MnV22g-ma8Dou7cYkGydy55iCWhL+qySZxv6HMg@mail.gmail.com>
References: <CADA6EctF0y8MnV22g-ma8Dou7cYkGydy55iCWhL+qySZxv6HMg@mail.gmail.com>
Message-ID: <AC5861DBA9574090900CC28F5042240E@localdomain>

Liang,

your problem is likely to be caused by the relative priorities on whether to stay or leave any of the partial FS machines due to common character sequences.

There is an interesting side effect in the way you have written your specification. The path “/pub/ietf/uri” may not get accepted, but “:/pub/ietf/uri” does!

Rebalancing your machine slightly, so it reads

    main     := (( scheme ":" )?) <: (( "//" authority** )?)  path ( "?" query )? ( "#" fragment )?;

lets it now accept the initial path spec. Of course, I have not checked whether there are now new unwanted effects. In case of ambiguities like this my preferred method to study it is by looking at the graphviz output.

jg
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20120109/a95b02bb/attachment-0001.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From umdkenshalo at yahoo.com  Sat Jan 21 14:11:50 2012
From: umdkenshalo at yahoo.com (Daniel Kenshalo)
Date: Sat, 21 Jan 2012 06:11:50 -0800 (PST)
Subject: [ragel-users] Ragel question
Message-ID: <1327155110.58119.YahooMailNeo@web114719.mail.gq1.yahoo.com>

Really like ragel.  I have a question about the best way to implement a parser for the following format which can be repeated in a given file


ZCZC

<well formatted fixed width text> = meta-data machine


ZEM

ID:
   <any punct. etc>

IDXXX:

    <any, characters, punct. etc>

ID WITH SPACE:

   <any-text>


NNNN


A very simplified version of my machine is:
report = ('ZCZC' meta-data 'ZEM' body :>> 'NNNN')
main := report*

For the body machine I am struggling to define a machine that captures the 
identifier (always at start of line and has ':' character) and reads 
until the next occurrence of any identifier.  The identifiers may or may not be present for example one file may have ID, IDXXX and the next can have ID, ID WITH SPACE.  Really I'm just looking for text at the 
beginning of a line with a ':' character.  It's challenging b/c there is no way to tell when I'm done reading "any" and start a new ID 
<any> block.

Thanks for any help or insight you may provide.  I was thinking that scanner 
may be the only way for this type of input where I scan for the tokens 
and read in my host language until the next token, but this seems sorta 
"hack-tackulous" 


My scanner would be (which I have tested and seems to for) and then I 
would use smaller machines to further process down the input

action token {
// read line by line until line that starts w/ '\n' [A-Z ] ':' is reached
// insert each line in buffer/some key value pair map etc.
}

body := |*
'\n' [A-Z ]{3, 10} ':' @token  // the {3,10} is b/c tokens at beginning of line are no longer than 10 characters
*|;
Dan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20120121/08f610f0/attachment-0001.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From gerald.gutierrez at gmail.com  Mon Jan 23 07:11:28 2012
From: gerald.gutierrez at gmail.com (Gerald Gutierrez)
Date: Sun, 22 Jan 2012 23:11:28 -0800
Subject: [ragel-users] Parsing of names with spaces in them
Message-ID: <CAPZrZPOBD9wQVznqhiEcKq_m1frP48S86BKrUMVh+-AFWenpjQ@mail.gmail.com>

Hello folks,

I recently found Ragel and have discovered that it is a very pleasant
piece of software. That said, I've run into a problem that I was
hoping is common and a solution available.

Please see the example code at https://gist.github.com/1661150.

Basically, I'd like to parse the following:

name:name

where the names start and end with an alnum, and can contain any
combination of alnum and spaces inside. They could also be blank. My
rules for this are:

identifier = alnum (space* alnum)*;
name       = (identifier | zlen) >sName $pName %fName;

The names can be separated by a colon and optionally spaces inbetween
the names and the colon. My rules for this are:

sep = space* ":" space*;
main := name sep name;

This doesn't work because apparently the space* in identifier and the
space* in sep confuse the parser. I end up getting the action fName
executed in every space of the name.

If I change sep to:

sep = ":";

then everything is fine. How do I modify these rules so that the
parser does what I intend?

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From gerald.gutierrez at gmail.com  Mon Jan 23 07:36:57 2012
From: gerald.gutierrez at gmail.com (Gerald Gutierrez)
Date: Sun, 22 Jan 2012 23:36:57 -0800
Subject: [ragel-users] Parsing of names with spaces in them
In-Reply-To: <CAPZrZPOBD9wQVznqhiEcKq_m1frP48S86BKrUMVh+-AFWenpjQ@mail.gmail.com>
References: <CAPZrZPOBD9wQVznqhiEcKq_m1frP48S86BKrUMVh+-AFWenpjQ@mail.gmail.com>
Message-ID: <CAPZrZPPSsrmijOSPU_4nh7fWx0AAtTzHthtVJeO9Y-jYLfg_QA@mail.gmail.com>

To elaborate a bit on this problem:

I've defined the name as containing only alnum's and spaces, and must
start and end with an alnum.

I've also defined the separator as having a colon (:), possibly
surrounded by spaces.

If I parse "aa bb cc : dd ee ff", the only correct way to parse this
must be for the first name to be "aa bb cc" and the second to be "dd
ee ff". There is no other way to interpret this as the two names must
start and end with a letter.

In other words, the leaving action should be called only once for each
name. But it's not.

Instead, I get this output instead:

Name = aa
Name = aa bb
Name = aa bb cc
Name = dd ee ff

Very confused. Is this a bug or intended behavior?


Gerald.


On Sun, Jan 22, 2012 at 23:11, Gerald Gutierrez
<gerald.gutierrez at gmail.com> wrote:
> Hello folks,
>
> I recently found Ragel and have discovered that it is a very pleasant
> piece of software. That said, I've run into a problem that I was
> hoping is common and a solution available.
>
> Please see the example code at https://gist.github.com/1661150.
>
> Basically, I'd like to parse the following:
>
> name:name
>
> where the names start and end with an alnum, and can contain any
> combination of alnum and spaces inside. They could also be blank. My
> rules for this are:
>
> identifier = alnum (space* alnum)*;
> name       = (identifier | zlen) >sName $pName %fName;
>
> The names can be separated by a colon and optionally spaces inbetween
> the names and the colon. My rules for this are:
>
> sep = space* ":" space*;
> main := name sep name;
>
> This doesn't work because apparently the space* in identifier and the
> space* in sep confuse the parser. I end up getting the action fName
> executed in every space of the name.
>
> If I change sep to:
>
> sep = ":";
>
> then everything is fine. How do I modify these rules so that the
> parser does what I intend?

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From khim at chromium.org  Mon Jan 23 08:26:54 2012
From: khim at chromium.org (Victor Khimenko)
Date: Mon, 23 Jan 2012 11:26:54 +0300
Subject: [ragel-users] Parsing of names with spaces in them
In-Reply-To: <CAPZrZPOBD9wQVznqhiEcKq_m1frP48S86BKrUMVh+-AFWenpjQ@mail.gmail.com>
References: <CAPZrZPOBD9wQVznqhiEcKq_m1frP48S86BKrUMVh+-AFWenpjQ@mail.gmail.com>
Message-ID: <CABLBYvSk0xm-cLWTbaGe2HL9uUHaQnpG1nJowiHoJ4LpebaL2w@mail.gmail.com>

On Mon, Jan 23, 2012 at 11:11 AM, Gerald Gutierrez <
gerald.gutierrez at gmail.com> wrote:

> Hello folks,
>
> I recently found Ragel and have discovered that it is a very pleasant
> piece of software. That said, I've run into a problem that I was
> hoping is common and a solution available.
>
> Sadly the problem is common but solution is quite explicitly is NOT
available.


> Please see the example code at https://gist.github.com/1661150.
>
> Basically, I'd like to parse the following:
>
> name:name
>
> where the names start and end with an alnum, and can contain any
> combination of alnum and spaces inside. They could also be blank. My
> rules for this are:
>
> identifier = alnum (space* alnum)*;
> name       = (identifier | zlen) >sName $pName %fName;
>
> The names can be separated by a colon and optionally spaces inbetween
> the names and the colon. My rules for this are:
>
> sep = space* ":" space*;
> main := name sep name;
>
> This doesn't work because apparently the space* in identifier and the
> space* in sep confuse the parser. I end up getting the action fName
> executed in every space of the name.
>
> If I change sep to:
>
> sep = ":";
>
> then everything is fine. How do I modify these rules so that the
> parser does what I intend?
>

The answer is simple: you can't. Ragel generates DFA with actions attached.
This means: symbol in => action out.

Your definition is ambigous: when you see a space you have no idea if it
belongs to the identifier or not. You must scan ahead and look for the next
non-space char: if it's colon then the previous space was not part of the
identifier, if it's alnum then it is. This is not something DFA can/should
do...

To solve your problem you need something more powerful: scanner (see the
last chapter of ragel documentation), or full-blown parser: kelbt -
http://www.complang.org/kelbt/ (ragel itself uses it), bison -
http://www.gnu.org/software/bison/ (most commonly used parser), etc.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20120123/73984075/attachment-0001.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From silverdirk-rgl at silverdirk.com  Mon Jan 23 16:07:55 2012
From: silverdirk-rgl at silverdirk.com (M Conrad)
Date: Mon, 23 Jan 2012 11:07:55 -0500
Subject: [ragel-users] Parsing of names with spaces in them
Message-ID: <op.v8jofhk0ah38gt@osangar>

On Mon, 23 Jan 2012 03:26:54 -0500, Victor Khimenko <khim at chromium.org>
wrote:

> On Mon, Jan 23, 2012 at 11:11 AM, Gerald Gutierrez <
> gerald.gutierrez at gmail.com> wrote:
>
>> Hello folks,
>>
>> I recently found Ragel and have discovered that it is a very pleasant
>> piece of software. That said, I've run into a problem that I was
>> hoping is common and a solution available.
>>
> Sadly the problem is common but solution is quite explicitly is NOT
> available.

I think it is misleading to say that.  All he needs to do is alter the
rules to remove the ambiguity.  A scanner is certainly not required,
though may be desirable.

Gerald- Ragel operates on a principle where all state machines (meaning
all smaller machines within the larger machine) are continuously matching
the input.  Unless you make the machine decide which state to go into, it
will go into *both*, in kind of an uncertainty-principle theme.  It will
run any applicable actions for any transition that occurs, even if it
hasn't decided which state it is really in.

Writing actions for Ragel is different than for a typical backtracking
scanner.  You need to first make sure that it is possible to write your
machine without backtracking.  (If you need backtracking, Ragel also
provides a syntax for defining scanners, which is in the manual.)

Next, if your problem is that you want certain characters to indicate the
end of a previous loop (like ':' in your case), check out the priority
system.  If staying in a machine has equal priority with leaving it to go
to the next, Ragel will do both.  But, if one is prioritized, Ragel will
pick the transition with higher priority.

Finally, if you just need a tiny little bit of backtracking, but don't
want a full-blown scanner, you can try using actions that record character
positions, then other actions that use them.  For instance, every time you
see a non-space during 'name', you record the position "{lastAlpha=p;}",
then add priority to your rule to not leave 'name' (until it sees
something that can't be a name, like a ":"), then in the action for
leaving 'name' you can trim off "p-lastAlpha" number of characters,
knowing they are trailing spaces.


Hopefully that helps.  I would write an example but I'm a bit rusty on it
and short on time.  Let us know if you need one.

-Mike

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From gerald.gutierrez at gmail.com  Mon Jan 23 16:12:30 2012
From: gerald.gutierrez at gmail.com (Gerald Gutierrez)
Date: Mon, 23 Jan 2012 08:12:30 -0800
Subject: [ragel-users] Parsing of names with spaces in them
In-Reply-To: <CABLBYvSk0xm-cLWTbaGe2HL9uUHaQnpG1nJowiHoJ4LpebaL2w@mail.gmail.com>
References: <CAPZrZPOBD9wQVznqhiEcKq_m1frP48S86BKrUMVh+-AFWenpjQ@mail.gmail.com>
	<CABLBYvSk0xm-cLWTbaGe2HL9uUHaQnpG1nJowiHoJ4LpebaL2w@mail.gmail.com>
Message-ID: <E876032C-1533-4C99-A3CB-B918DFFA6C03@gmail.com>



On 2012-01-23, at 0:26, Victor Khimenko <khim at chromium.org> wrote:

> The answer is simple: you can't. Ragel generates DFA with actions attached. This means: symbol in => action out.
> 
> Your definition is ambigous: when you see a space you have no idea if it belongs to the identifier or not. You must scan ahead and look for the next non-space char: if it's colon then the previous space was not part of the identifier, if it's alnum then it is. This is not something DFA can/should do...

Hi Victor,

There is a chapter in the documentation about nondeterminism. Anything something there that can help in this situation? 

Gerald
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From khim at chromium.org  Mon Jan 23 16:31:19 2012
From: khim at chromium.org (Victor Khimenko)
Date: Mon, 23 Jan 2012 20:31:19 +0400
Subject: [ragel-users] Parsing of names with spaces in them
In-Reply-To: <E876032C-1533-4C99-A3CB-B918DFFA6C03@gmail.com>
References: <CAPZrZPOBD9wQVznqhiEcKq_m1frP48S86BKrUMVh+-AFWenpjQ@mail.gmail.com>
	<CABLBYvSk0xm-cLWTbaGe2HL9uUHaQnpG1nJowiHoJ4LpebaL2w@mail.gmail.com>
	<E876032C-1533-4C99-A3CB-B918DFFA6C03@gmail.com>
Message-ID: <CABLBYvQFSk_hW7pYJR-1YgaBZCn4OwTX-CppfrvpMbL5Zk-Ajg@mail.gmail.com>

On Mon, Jan 23, 2012 at 8:07 PM, M Conrad <silverdirk-rgl at silverdirk.com>
 wrote:

>
> Next, if your problem is that you want certain characters to indicate the
> end of a previous loop (like ':' in your case), check out the priority
> system.  If staying in a machine has equal priority with leaving it to go
> to the next, Ragel will do both.  But, if one is prioritized, Ragel will
> pick the transition with higher priority.
>
> Here it'll not work. Priorities prune some branches - this is Ok in some
limited circumstances, but is case like this one you'll get parser which
will start rejecting correct input.

On Mon, Jan 23, 2012 at 8:12 PM, Gerald Gutierrez <
gerald.gutierrez at gmail.com> wrote:

>
>
> On 2012-01-23, at 0:26, Victor Khimenko <khim at chromium.org> wrote:
>
> > The answer is simple: you can't. Ragel generates DFA with actions
> attached. This means: symbol in => action out.
> >
> > Your definition is ambigous: when you see a space you have no idea if it
> belongs to the identifier or not. You must scan ahead and look for the next
> non-space char: if it's colon then the previous space was not part of the
> identifier, if it's alnum then it is. This is not something DFA can/should
> do...
>
> Hi Victor,
>
> There is a chapter in the documentation about nondeterminism. Anything
> something there that can help in this situation?
>
> No. The task (as you've formulated it) principally can not be solved using
your definition: to know if identifier is finished or not you need
unlimited lookahead or backtracking.

How would I solve this dilemma? I'll accept the fact that leaving action
can be called many times - this not a problem for me: I'll store beginning
of the identifier in the enter action and the end in the leaving action.
EVERYTHING ELSE I'll move to the action triggered by other elements (colon,
etc). At this point I'll know both beginning and the end of the identifier
and can do whatever I want with it.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20120123/ec6f5cbe/attachment-0001.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From gerald.gutierrez at gmail.com  Mon Jan 23 17:16:46 2012
From: gerald.gutierrez at gmail.com (Gerald Gutierrez)
Date: Mon, 23 Jan 2012 09:16:46 -0800
Subject: [ragel-users] Parsing of names with spaces in them
In-Reply-To: <CABLBYvQFSk_hW7pYJR-1YgaBZCn4OwTX-CppfrvpMbL5Zk-Ajg@mail.gmail.com>
References: <CAPZrZPOBD9wQVznqhiEcKq_m1frP48S86BKrUMVh+-AFWenpjQ@mail.gmail.com>
	<CABLBYvSk0xm-cLWTbaGe2HL9uUHaQnpG1nJowiHoJ4LpebaL2w@mail.gmail.com>
	<E876032C-1533-4C99-A3CB-B918DFFA6C03@gmail.com>
	<CABLBYvQFSk_hW7pYJR-1YgaBZCn4OwTX-CppfrvpMbL5Zk-Ajg@mail.gmail.com>
Message-ID: <CAPZrZPN7ndeaGEkSvSsK3Ue1CiF_ykCiS7KAMfCp4bF=14ck=Q@mail.gmail.com>

On Mon, Jan 23, 2012 at 08:31, Victor Khimenko <khim at chromium.org> wrote:

>> Hi Victor,
>>
>> There is a chapter in the documentation about nondeterminism. Anything
>> something there that can help in this situation?
>>
> No. The task (as you've formulated it) principally can not be solved using
> your definition: to know if identifier is finished or not you need unlimited
> lookahead or backtracking.

I understand. What I've done instead is to match on [^:]* and qualify
the content of the name in code. This doesn't seem like the best way,
but is clean enough to work with for the time being.

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From ming.fu at netsweeper.com  Mon Jan 23 18:19:46 2012
From: ming.fu at netsweeper.com (Ming Fu)
Date: Mon, 23 Jan 2012 13:19:46 -0500
Subject: [ragel-users] eof action
Message-ID: <4F1DA4C2.9030200@netsweeper.com>

Hi,

I am new to the ragel, I was trying to see the effect of eof action.

I made up some patterns and defines an eof action for the pattern3.

something like:

pattern1 = ....
pattern2 = ....
pattern3 = ( pattern1 | pattern2) $eof myaction ;

I send in a block of data that would match pattern1, the machine report 
matching pattern3 and the myaction is not run.

If I send in the same block of data, but in two chunks, the machine 
report matching after the second chunk is processed, but myaction is not 
run. I would expect the myaction would be run when the machine consumes 
the first chunk and waiting for the rest of the data to complete the 
matching.

Regards,
Ming

All the information contained in this e-mail and its attachments is confidential.
Please consider the environment before printing this e-mail


_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From kerzum at yandex.ru  Fri Jan 27 15:49:07 2012
From: kerzum at yandex.ru (=?koi8-r?B?8KPU0g==?=)
Date: Fri, 27 Jan 2012 19:49:07 +0400
Subject: [ragel-users] eof action
In-Reply-To: <4F1DA4C2.9030200@netsweeper.com>
References: <4F1DA4C2.9030200@netsweeper.com>
Message-ID: <31191327679348@web34.yandex.ru>

An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20120127/507163ac/attachment-0001.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From thurston at complang.org  Fri Jan 27 21:25:42 2012
From: thurston at complang.org (Adrian Thurston)
Date: Fri, 27 Jan 2012 13:25:42 -0800
Subject: [ragel-users] ten years!
Message-ID: <4F231656.6060209@complang.org>

It's been ten years since I released Ragel 1.0 ... thank you to everyone!

-Adrian

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From landon at 360vl.com  Fri Jan 27 22:44:55 2012
From: landon at 360vl.com (Landon Cox)
Date: Fri, 27 Jan 2012 15:44:55 -0700
Subject: [ragel-users] ten years!
In-Reply-To: <4F231656.6060209@complang.org>
References: <4F231656.6060209@complang.org>
Message-ID: <54574F4D-E05B-45D2-84F5-57EDD6989244@360vl.com>

Wow, nice going Adrian.  Congratulations and thank you.

Landon

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From b at bvanderveen.com  Sat Jan 28 03:21:15 2012
From: b at bvanderveen.com (Benjamin van der Veen)
Date: Fri, 27 Jan 2012 19:21:15 -0800
Subject: [ragel-users] ten years!
In-Reply-To: <4F231656.6060209@complang.org>
References: <4F231656.6060209@complang.org>
Message-ID: <29EA75EB-C53B-4220-AB8B-FA5B1F3E91B8@bvanderveen.com>



On Jan 27, 2012, at 13:25, Adrian Thurston <thurston at complang.org> wrote:

> It's been ten years since I released Ragel 1.0 ... thank you to everyone!
> 
> -Adrian

Congratulations and many thanks for your continued support of this valuable tool!
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From kevin.t.ryan at gmail.com  Sat Jan 28 03:51:52 2012
From: kevin.t.ryan at gmail.com (Kevin T. Ryan)
Date: Fri, 27 Jan 2012 22:51:52 -0500
Subject: [ragel-users] ten years!
In-Reply-To: <4F231656.6060209@complang.org>
References: <4F231656.6060209@complang.org>
Message-ID: <CALBzPRnfUvSpLnrDSAUXB3VruZVKzGq7O8kk4xe8+fFZW+bwoA@mail.gmail.com>

Thanks for such a great tool!  Here's to 10 more successful years :)

On Fri, Jan 27, 2012 at 4:25 PM, Adrian Thurston <thurston at complang.org> wrote:
> It's been ten years since I released Ragel 1.0 ... thank you to everyone!
>
> -Adrian
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From joseph.stewart at gmail.com  Sat Jan 28 17:55:28 2012
From: joseph.stewart at gmail.com (Joseph Stewart)
Date: Sat, 28 Jan 2012 09:55:28 -0800
Subject: [ragel-users] ten years!
In-Reply-To: <CALBzPRnfUvSpLnrDSAUXB3VruZVKzGq7O8kk4xe8+fFZW+bwoA@mail.gmail.com>
References: <4F231656.6060209@complang.org>
	<CALBzPRnfUvSpLnrDSAUXB3VruZVKzGq7O8kk4xe8+fFZW+bwoA@mail.gmail.com>
Message-ID: <CANGQBe5U6utuL=tMQ+xqD-M_zSRFQ6e2MV4hC8yXMP7cXr7JDw@mail.gmail.com>

+1 on the congrats!

On Fri, Jan 27, 2012 at 7:51 PM, Kevin T. Ryan <kevin.t.ryan at gmail.com>wrote:

> Thanks for such a great tool!  Here's to 10 more successful years :)
>
> On Fri, Jan 27, 2012 at 4:25 PM, Adrian Thurston <thurston at complang.org>
> wrote:
> > It's been ten years since I released Ragel 1.0 ... thank you to everyone!
> >
> > -Adrian
> >
> > _______________________________________________
> > ragel-users mailing list
> > ragel-users at complang.org
> > http://www.complang.org/mailman/listinfo/ragel-users
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20120128/daa73fff/attachment-0001.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From pazzodalegare at gmail.com  Sun Jan 29 08:57:46 2012
From: pazzodalegare at gmail.com (Pazzo Da Legare)
Date: Sun, 29 Jan 2012 09:57:46 +0100
Subject: [ragel-users] ten years!
In-Reply-To: <4F231656.6060209@complang.org>
References: <4F231656.6060209@complang.org>
Message-ID: <CAAbqRXX+Gtgi9kkxzocsJXSdh9QDvGuOBskVLu_UnMcUsTtvoQ@mail.gmail.com>

Thank you Adrian for your tool and your time!
Il giorno 27/gen/2012 22:27, "Adrian Thurston" <thurston at complang.org> ha
scritto:

> It's been ten years since I released Ragel 1.0 ... thank you to everyone!
>
> -Adrian
>
> ______________________________**_________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/**mailman/listinfo/ragel-users<http://www.complang.org/mailman/listinfo/ragel-users>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20120129/1a5ff9e7/attachment-0001.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From sow at semworks.com  Sun Jan 29 11:46:44 2012
From: sow at semworks.com (Sow Thierno M.)
Date: Sun, 29 Jan 2012 11:46:44 +0000
Subject: [ragel-users] 10 years
Message-ID: <W37429322342841327837604@webmail102>


Un grand Bravo pour cet outil hors du commun!

Thierno Sow
-----Original Message-----

From: ragel-users-request at complang.org [mailto:ragel-users-request at complang.org]
Sent: Saturday, January 28, 2012 09:00 PM
To: ragel-users at complang.org
Subject: ragel-users Digest, Vol 40, Issue 7

Send ragel-users mailing list submissions to	ragel-users at complang.orgTo subscribe or unsubscribe via the World Wide Web, visit	http://www.complang.org/mailman/listinfo/ragel-usersor, via email, send a message with subject or body 'help' to	ragel-users-request at complang.orgYou can reach the person managing the list at	ragel-users-owner at complang.orgWhen replying, please edit your Subject line so it is more specificthan "Re: Contents of ragel-users digest..."Today's Topics: 1. ten years! (Adrian Thurston) 2. Re: ten years! (Landon Cox) 3. Re: ten years! (Benjamin van der Veen) 4. Re: ten years! (Kevin T. Ryan) 5. Re: ten years! (Joseph Stewart)----------------------------------------------------------------------Message: 1Date: Fri, 27 Jan 2012 13:25:42 -0800From: Adrian Thurston To: ragel-users at complang.orgSubject: [ragel-users] ten years!Message-ID: <4F231656.6060209 at complang.org>Content-Type: text/plain; charset=ISO-8859-1; format=flowedIt's been ten years since I released Ragel 1.0 ... thank you to everyone!-Adrian------------------------------Message: 2Date: Fri, 27 Jan 2012 15:44:55 -0700From: Landon Cox To: ragel-users at complang.orgSubject: Re: [ragel-users] ten years!Message-ID: <54574F4D-E05B-45D2-84F5-57EDD6989244 at 360vl.com>Content-Type: text/plain; charset=us-asciiWow, nice going Adrian. Congratulations and thank you.Landon------------------------------Message: 3Date: Fri, 27 Jan 2012 19:21:15 -0800From: Benjamin van der Veen To: "ragel-users at complang.org" Subject: Re: [ragel-users] ten years!Message-ID: <29EA75EB-C53B-4220-AB8B-FA5B1F3E91B8 at bvanderveen.com>Content-Type: text/plain;	charset=us-asciiOn Jan 27, 2012, at 13:25, Adrian Thurston  wrote:> It's been ten years since I released Ragel 1.0 ... thank you to everyone!> > -AdrianCongratulations and many thanks for your continued support of this valuable tool!------------------------------Message: 4Date: Fri, 27 Jan 2012 22:51:52 -0500From: "Kevin T. Ryan" To: ragel-users at complang.orgSubject: Re: [ragel-users] ten years!Message-ID:	Content-Type: text/plain; charset=ISO-8859-1Thanks for such a great tool! Here's to 10 more successful years :)On Fri, Jan 27, 2012 at 4:25 PM, Adrian Thurston  wrote:> It's been ten years since I released Ragel 1.0 ... thank you to everyone!>> -Adrian>> _______________________________________________> ragel-users mailing list> ragel-users at complang.org> http://www.complang.org/mailman/listinfo/ragel-users------------------------------Message: 5Date: Sat, 28 Jan 2012 09:55:28 -0800From: Joseph Stewart To: ragel-users at complang.orgSubject: Re: [ragel-users] ten years!Message-ID:	Content-Type: text/plain; charset="iso-8859-1"+1 on the congrats!On Fri, Jan 27, 2012 at 7:51 PM, Kevin T. Ryan wrote:> Thanks for such a great tool! Here's to 10 more successful years :)>> On Fri, Jan 27, 2012 at 4:25 PM, Adrian Thurston > wrote:> > It's been ten years since I released Ragel 1.0 ... thank you to everyone!> >> > -Adrian> >> > _______________________________________________> > ragel-users mailing list> > ragel-users at complang.org> > http://www.complang.org/mailman/listinfo/ragel-users>> _______________________________________________> ragel-users mailing list> ragel-users at complang.org> http://www.complang.org/mailman/listinfo/ragel-users>-------------- next part --------------An HTML attachment was scrubbed...URL: ------------------------------_______________________________________________ragel-users mailing listragel-users at complang.orghttp://www.complang.org/mailman/listinfo/ragel-usersEnd of ragel-users Digest, Vol 40, Issue 7******************************************
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20120129/5f932dfe/attachment-0001.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From jq at quinteiro.org  Sun Jan 29 16:25:49 2012
From: jq at quinteiro.org (Jose Quinteiro)
Date: Sun, 29 Jan 2012 08:25:49 -0800
Subject: [ragel-users] ten years!
In-Reply-To: <54574F4D-E05B-45D2-84F5-57EDD6989244@360vl.com>
References: <4F231656.6060209@complang.org>
	<54574F4D-E05B-45D2-84F5-57EDD6989244@360vl.com>
Message-ID: <4F25730D.5020108@quinteiro.org>

Thank you very much for writing Ragel and sharing it with us.

On 1/27/12 2:44 PM, Landon Cox wrote:
> Wow, nice going Adrian.  Congratulations and thank you.
>
> Landon
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users


_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


