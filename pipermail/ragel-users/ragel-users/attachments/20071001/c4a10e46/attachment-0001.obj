/*
 * Parses a file of doubles with ruby like comments.
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define NUM_CUR 3

%%{
	machine double_parse;

	newline = '\n' @{
        printf("EOL(%d)\n",curline);
        curline += 1;
        fhold; // push the newline back in, to allow the main machine to see it
        fret;
    };
    
    # allow # as a comment, or allow a new line that begins with '---' as if
    # you dumped the yaml file from ruby
    comment = ('#'|'---') [^\n]* newline;

    # Append to the buffer.
    action append {
        if ( index < BUFSIZE ) {
            buffer[index++] = fc;
        }
    }

    # Terminate a buffer.
    action term {
        if ( index < BUFSIZE ) {
            buffer[index++] = 0;
        }
    }

    # Clear out the buffer
    action clear { index = 0; }

    # Sets the whitespace counter to 0
    action reset { ws_count = 0; }

    # increments counter by 1
    action count {ws_count++; }

    # acts on the total
    action total {
                    if (0==ws_count) {
                        current = 0;
                        fhold;
                        fcall info;
                    }
                    if(1==current&&2==ws_count) {
                        fhold;
                        ws_count = 0; // needed to reset the ws count, should the next line have no ws.
                        fcall currents;
                    }
    }
    stuff = [^ \n]*;
    count_ws = ' '** >reset $count %total;
    ws = ' ' | '\t';
    term =  ws* ( comment| newline | '\0'); 
    double = ( [+\-]? digit+ ( '.' digit+ )? ( 'e'i [+\-]? digit{1,3} )? ) >clear $append %term;
    integer = ([+\-]? digit+ ) >clear $append %term; 
    double_on_line = ws* double;
    integer_on_line = ws* integer;


    currents := |*
        # allow ruby style comments
        comment;

        # Match a token followed by a double.
        # On finishing reading the double, the action saves the double to the
        # appropriate index via the atof function.
        'ina'   ':' double_on_line => {array[0] = atof(buffer);};
        'ito'   ':' double_on_line => {array[1] = atof(buffer);};
        'ikr'   ':' double_on_line => {array[2] = atof(buffer);};
        # catch random stuff.
        alnum+ ':' double_on_line => {printf("unknown token found (%d)\n",curline-1); };
        term;
    *|;


    info := |*
        # ruby/yaml style comments
	    comment;

        'x' ':' integer_on_line =>  {printf("x: %d\n",atoi(buffer));};
        'y' ':' integer_on_line =>  {printf("y: %d\n",atoi(buffer));};
        'currents' ':' => {printf("currents!\n");current = 1;};
        term;
    *|;

    line = count_ws  stuff ('\n' | '\0' )+;
    main := line*; 
}%%

%% write data nofinal;

#define BUFSIZE 128

void scanner(FILE * infile,double * array) {
    static char buf[BUFSIZE];
    char buffer[BUFSIZE];
    int index = 0;
    int cs, act, have = 0, curline = 1;
    char *tokstart, *tokend = 0;
    int done = 0;
    int top, stack[BUFSIZE];
    int ws_count = 0;
    int current = 0;

    %% write init;

    while ( !done ) {
        char *p = buf + have, *pe;
        int len, space = BUFSIZE - have;

        if ( space == 0 ) {
            /* We've used up the entire buffer storing an already-parsed token
             * prefix that must be preserved. */
            fprintf(stderr, "OUT OF BUFFER SPACE\n" );
            exit(1);
        }

        len = fread( p, 1, space,infile);

        /* If this is the last buffer, tack on an EOF. */
        if ( len < space ) {
            p[len++]  = 0;
            done = 1;
        }

        pe = p + len;
        %% write exec;

        if ( cs == double_parse_error ) {
            fprintf(stderr, "PARSE ERROR, line %d %c\n",curline,p[0]);
        }

        if ( tokstart == 0 )
            have = 0;
        else {
            /* There is a prefix to preserve, shift it over. */
            have = pe - tokstart;
            memmove( buf, tokstart, have );
            tokend = buf + (tokend-tokstart);
            tokstart = buf;
        }
    }
}

void print_array(double array[]) {
    printf("ina: %g\n",array[0]); 
    printf("ito: %g\n",array[1]); 
    printf("ikr: %g\n",array[2]); 
    return;
}


int main() {
    double mod_array[NUM_CUR];
    int i;
    FILE * infile;


    for (i=0;i<NUM_CUR;++i) {
        mod_array[i] = 1.0;
    }

    infile = fopen("currents.yml","r");
    if (NULL == infile) {
        fprintf(stderr,"currents.yml couldn't be opened\n");
        exit(1);
    }

    scanner(infile,mod_array);
    print_array(mod_array);
    return 0;
}

