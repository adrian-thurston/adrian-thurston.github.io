
struct ExpensiveCall
{
	ExpensiveCall()
	:
		open(false),
		output(0)
	{}

	bool open;
	const char *from;

	void start( const char *data );
	void finish( const char *data );

	void preExec( const char *data );
	void postExec( const char *data );
};

void ExpensiveCall::start( const char *data )
{
	assert( !open );
	open = true;
	from = data;
}

void ExpensiveCall::finish( const char *data )
{
	assert( open );
	open = false;
	expensive_call( from, data-from );
}

void ExpensiveCall::preExec( const char *data )
{
	if ( open )
		from = data;
}

void ExpensiveCall::postExec( const char *data )
{
	if ( open )
		expensive_call( from, data-from );
}



