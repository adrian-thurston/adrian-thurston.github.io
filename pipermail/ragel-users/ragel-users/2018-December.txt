From thurston at colm.net  Wed Dec  5 09:31:09 2018
From: thurston at colm.net (Adrian Thurston)
Date: Wed, 05 Dec 2018 09:31:09 -0500
Subject: [ragel-users] "declared but not used" errors with v7 Go backend
In-Reply-To: <CANjWZxO-003scd2aH_A28GF5br6Gv+C-HsZFdsuhHS75Zh1x9A@mail.gmail.com>
References: <CANjWZxO-003scd2aH_A28GF5br6Gv+C-HsZFdsuhHS75Zh1x9A@mail.gmail.com>
Message-ID: <282b30bd7fd9d8ee724996e38fec8354@mail.colm.net>

 

Hi Damian, 

I just altered the codegen so that unused arrays are not generated. This
eliminates the need to assign to _ for the static arrays. The need is
still there for static variables, for example: 

 _ = scanner_first_final
 _ = scanner_error
 _ = scanner_en_main

I've noticed though that the _ assignment trick isn't valid for arrays
that are not in a function scope, which means we can't use it right
after declaration. It could go into the write exec block or the write
init block though. To do that I'll have to create a dedicated reference
statement for the intermediate language since the go code generator does
not understand the state machine. It's just a language translation. The
reference statement can have no effect in other languages. 

For the time being I'll need to revert the _ assignment since it breaks
ragel programs where the data is not function scoped. 

Adrian 

On 2018-11-01 09:12, Damian Gryski wrote: 

> This is with ragel 7.0.0.11 and colm 0.13.0.6. I was unable to get ragel to build from git. 
> 
> With the example grammar at github.com/dgryski/ragel-examples/regexp1 [2], I get the following error: 
> 
> $ ragel-go sshd.rl 
> $ go build 
> # github.com/dgryski/ragel-examples/regexp1 [2] 
> ./sshd.go:11:6: _scanner_trans_cond_spaces declared and not used 
> ./sshd.go:12:6: _scanner_trans_offsets declared and not used 
> ./sshd.go:13:6: _scanner_trans_lengths declared and not used 
> ./sshd.go:14:6: _scanner_cond_keys declared and not used 
> ./sshd.go:17:6: _scanner_eof_cond_spaces declared and not used 
> ./sshd.go:18:6: _scanner_eof_cond_key_offs declared and not used 
> ./sshd.go:19:6: _scanner_eof_cond_key_lens declared and not used 
> ./sshd.go:20:6: _scanner_eof_cond_keys declared and not used 
> ./sshd.go:21:6: _scanner_nfa_targs declared and not used 
> ./sshd.go:22:6: _scanner_nfa_offsets declared and not used 
> ./sshd.go:22:6: too many errors 
> 
> The usual solution to this in autogenerated code is to assign them to `_`, the underscore "blank variable". This satisfies the compiler and the entire array will be eliminated as a dead-store if it ends up not being used. 
> 
> Thus, each declaration for variables which may or may not be used will look like: 
> var _scanner_trans_cond_spaces [] int8 = [] int8 { ... } 
> _ = _scanner_trans_cond_space 
> 
> Note also the first `[] int8` is redundant -- the compiler will infer the type from the type of the array on the right hand side of the `=`. 
> 
> Fixing these issues in the Go template in the src/host-go directory and rebuilding fixed these errors (although I had to copy files from the git checkout for the template changes to recompile successfully). 
> 
> Damian 
> 
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users [1]
 

Links:
------
[1] http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
[2] http://github.com/dgryski/ragel-examples/regexp1
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20181205/16489580/attachment.html>

From dgryski at gmail.com  Wed Dec  5 12:11:10 2018
From: dgryski at gmail.com (Damian Gryski)
Date: Wed, 5 Dec 2018 09:11:10 -0800
Subject: [ragel-users] "declared but not used" errors with v7 Go backend
In-Reply-To: <282b30bd7fd9d8ee724996e38fec8354@mail.colm.net>
References: <CANjWZxO-003scd2aH_A28GF5br6Gv+C-HsZFdsuhHS75Zh1x9A@mail.gmail.com>
 <282b30bd7fd9d8ee724996e38fec8354@mail.colm.net>
Message-ID: <CANjWZxMDsPsJ+bQxXfyR1mYn=3YpXeme9w2-0MwzHA8CCUhM6w@mail.gmail.com>

You can prefix the underscore assignments with var also.  That will work
both at the function and global scopes.

var _scanner_trans_cond_spaces [] int8  = [] int8  { ... }
var _ =  _scanner_trans_cond_space

On Wed, Dec 5, 2018 at 6:31 AM Adrian Thurston <thurston at colm.net> wrote:

> Hi Damian,
>
> I just altered the codegen so that unused arrays are not generated. This
> eliminates the need to assign to _ for the static arrays. The need is still
> there for static variables, for example:
>
>     _ = scanner_first_final
>     _ = scanner_error
>     _ = scanner_en_main
>
> I've noticed though that the _ assignment trick isn't valid for arrays
> that are not in a function scope, which means we can't use it right after
> declaration. It could go into the write exec block or the write init block
> though. To do that I'll have to create a dedicated reference statement for
> the intermediate language since the go code generator does not understand
> the state machine. It's just a language translation. The reference
> statement can have no effect in other languages.
>
> For the time being I'll need to revert the _ assignment since it breaks
> ragel programs where the data is not function scoped.
>
> Adrian
>
> On 2018-11-01 09:12, Damian Gryski wrote:
>
> This is with ragel 7.0.0.11 and colm 0.13.0.6.  I was unable to get ragel
> to build from git.
>
> With the example grammar at github.com/dgryski/ragel-examples/regexp1, I
> get the following error:
>
> $ ragel-go sshd.rl
> $ go build
> # github.com/dgryski/ragel-examples/regexp1
> ./sshd.go:11:6: _scanner_trans_cond_spaces declared and not used
> ./sshd.go:12:6: _scanner_trans_offsets declared and not used
> ./sshd.go:13:6: _scanner_trans_lengths declared and not used
> ./sshd.go:14:6: _scanner_cond_keys declared and not used
> ./sshd.go:17:6: _scanner_eof_cond_spaces declared and not used
> ./sshd.go:18:6: _scanner_eof_cond_key_offs declared and not used
> ./sshd.go:19:6: _scanner_eof_cond_key_lens declared and not used
> ./sshd.go:20:6: _scanner_eof_cond_keys declared and not used
> ./sshd.go:21:6: _scanner_nfa_targs declared and not used
> ./sshd.go:22:6: _scanner_nfa_offsets declared and not used
> ./sshd.go:22:6: too many errors
>
> The usual solution to this in autogenerated code is to assign them to `_`,
> the underscore "blank variable".  This satisfies the compiler and the
> entire array will be eliminated as a dead-store if it ends up not being
> used.
>
> Thus, each declaration for variables which may or may not be used will
> look like:
> var _scanner_trans_cond_spaces [] int8  = [] int8  { ... }
> _ = _scanner_trans_cond_space
>
> Note also the first `[] int8` is redundant -- the compiler will infer the
> type from the type of the array on the right hand side of the `=`.
>
> Fixing these issues in the Go template in the src/host-go directory and
> rebuilding fixed these errors (although I had to copy files from the git
> checkout for the template changes to recompile successfully).
>
> Damian
>
> _______________________________________________
> ragel-users mailing listragel-users at colm.nethttp://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20181205/630e1a05/attachment.html>

From dgryski at gmail.com  Wed Dec  5 12:45:30 2018
From: dgryski at gmail.com (Damian Gryski)
Date: Wed, 5 Dec 2018 09:45:30 -0800
Subject: [ragel-users] "declared but not used" errors with v7 Go backend
In-Reply-To: <CANjWZxMDsPsJ+bQxXfyR1mYn=3YpXeme9w2-0MwzHA8CCUhM6w@mail.gmail.com>
References: <CANjWZxO-003scd2aH_A28GF5br6Gv+C-HsZFdsuhHS75Zh1x9A@mail.gmail.com>
 <282b30bd7fd9d8ee724996e38fec8354@mail.colm.net>
 <CANjWZxMDsPsJ+bQxXfyR1mYn=3YpXeme9w2-0MwzHA8CCUhM6w@mail.gmail.com>
Message-ID: <CANjWZxNxc_QRj=yeoWOJfwHGUcQCa6-k77UutpqiRf0rWid6HQ@mail.gmail.com>

While you're poking at the Go code generation, some small tweaks:

1) The type of the static arrays will be inferred from the type on the
right-hand side of the equals sign; it doesn't need to be explicit in the
variable declaration.

2) Go doesn't fall-through case statements by default; the `break` lines
are not necessary.

diff --git a/src/host-go/rlhc-go.lm b/src/host-go/rlhc-go.lm
index 7ca37b88..41fc2560 100644
--- a/src/host-go/rlhc-go.lm
+++ b/src/host-go/rlhc-go.lm
@@ -288,7 +288,7 @@ namespace go_gen
                        [embedded_host(EH)]
                }
                case [A: static_array] {
-                       "var [A.ident] \[\] [type(A.type)] = \[\] "
+                       "var [A.ident] = \[\] "
                                "[type(A.type)] { [num_list(A.num_list)] }
                        "var _ = [A.ident]
                }
@@ -379,13 +379,11 @@ namespace go_gen
                {
                        "case [expr( CB.expr )]:
                        "[stmt_list( CB._repeat_stmt )]
-                       "break;
                }
                case [DB: default_block]
                {
                        "default:
                        "[stmt_list( DB._repeat_stmt )]
-                       "break;
                }
                case [CL: case_label]
                {



On Wed, Dec 5, 2018 at 9:11 AM Damian Gryski <dgryski at gmail.com> wrote:

> You can prefix the underscore assignments with var also.  That will work
> both at the function and global scopes.
>
> var _scanner_trans_cond_spaces [] int8  = [] int8  { ... }
> var _ =  _scanner_trans_cond_space
>
> On Wed, Dec 5, 2018 at 6:31 AM Adrian Thurston <thurston at colm.net> wrote:
>
>> Hi Damian,
>>
>> I just altered the codegen so that unused arrays are not generated. This
>> eliminates the need to assign to _ for the static arrays. The need is still
>> there for static variables, for example:
>>
>>     _ = scanner_first_final
>>     _ = scanner_error
>>     _ = scanner_en_main
>>
>> I've noticed though that the _ assignment trick isn't valid for arrays
>> that are not in a function scope, which means we can't use it right after
>> declaration. It could go into the write exec block or the write init block
>> though. To do that I'll have to create a dedicated reference statement for
>> the intermediate language since the go code generator does not understand
>> the state machine. It's just a language translation. The reference
>> statement can have no effect in other languages.
>>
>> For the time being I'll need to revert the _ assignment since it breaks
>> ragel programs where the data is not function scoped.
>>
>> Adrian
>>
>> On 2018-11-01 09:12, Damian Gryski wrote:
>>
>> This is with ragel 7.0.0.11 and colm 0.13.0.6.  I was unable to get ragel
>> to build from git.
>>
>> With the example grammar at github.com/dgryski/ragel-examples/regexp1, I
>> get the following error:
>>
>> $ ragel-go sshd.rl
>> $ go build
>> # github.com/dgryski/ragel-examples/regexp1
>> ./sshd.go:11:6: _scanner_trans_cond_spaces declared and not used
>> ./sshd.go:12:6: _scanner_trans_offsets declared and not used
>> ./sshd.go:13:6: _scanner_trans_lengths declared and not used
>> ./sshd.go:14:6: _scanner_cond_keys declared and not used
>> ./sshd.go:17:6: _scanner_eof_cond_spaces declared and not used
>> ./sshd.go:18:6: _scanner_eof_cond_key_offs declared and not used
>> ./sshd.go:19:6: _scanner_eof_cond_key_lens declared and not used
>> ./sshd.go:20:6: _scanner_eof_cond_keys declared and not used
>> ./sshd.go:21:6: _scanner_nfa_targs declared and not used
>> ./sshd.go:22:6: _scanner_nfa_offsets declared and not used
>> ./sshd.go:22:6: too many errors
>>
>> The usual solution to this in autogenerated code is to assign them to
>> `_`, the underscore "blank variable".  This satisfies the compiler and the
>> entire array will be eliminated as a dead-store if it ends up not being
>> used.
>>
>> Thus, each declaration for variables which may or may not be used will
>> look like:
>> var _scanner_trans_cond_spaces [] int8  = [] int8  { ... }
>> _ = _scanner_trans_cond_space
>>
>> Note also the first `[] int8` is redundant -- the compiler will infer the
>> type from the type of the array on the right hand side of the `=`.
>>
>> Fixing these issues in the Go template in the src/host-go directory and
>> rebuilding fixed these errors (although I had to copy files from the git
>> checkout for the template changes to recompile successfully).
>>
>> Damian
>>
>> _______________________________________________
>> ragel-users mailing listragel-users at colm.nethttp://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>>
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at colm.net
>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20181205/ddc55816/attachment.html>

From dgryski at gmail.com  Wed Dec  5 12:54:56 2018
From: dgryski at gmail.com (Damian Gryski)
Date: Wed, 5 Dec 2018 09:54:56 -0800
Subject: [ragel-users] [PATCH 0/3] Fix Cygwin build
In-Reply-To: <6a997c36-2750-d6b1-e33e-b6ac56b92179@cornell.edu>
References: <20181116195839.21284-1-kbrown@cornell.edu>
 <73c45e9029f92be0cc6bdc6b229470d8@mail.colm.net>
 <352e481f-4c91-41bf-43c6-6e9708f6c8b6@cornell.edu>
 <320011175ced45b5722fa7f3a891cb16@mail.colm.net>
 <a5e49590-af6c-6751-dae7-b01f845eab8d@cornell.edu>
 <409d45f1d0b410c3241ec316412df457@mail.colm.net>
 <b54376cd-0892-e41c-890d-003d8ab5c5b7@cornell.edu>
 <83a43d93-6281-bcb5-fa6f-ee662be1282d@cornell.edu>
 <5bf66a1af7a49bc98fe3718c4b00196c@mail.colm.net>
 <114e37e4-fda8-d7cb-40be-92961bf73370@cornell.edu>
 <6a997c36-2750-d6b1-e33e-b6ac56b92179@cornell.edu>
Message-ID: <CANjWZxNUKvFXxpxobd8gUc7QHUmzQeDMszNVFKXQesOu_TXfGg@mail.gmail.com>

In order to get this to build on my Mac, I need the following patch :(

diff --git a/src/Makefile.am b/src/Makefile.am
index 8a929f50..c6653dad 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -56,7 +56,7 @@ dist_libfsm_la_SOURCES = \
 nodist_libfsm_la_SOURCES = \
        version.h

-libfsm_la_LDFLAGS = -Wl,--no-undefined -no-undefined
+libfsm_la_LDFLAGS = -no-undefined

 #
 # libragel: ragel program minus host-specific code
@@ -67,7 +67,7 @@ dist_libragel_la_SOURCES = \
        parsedata.h parsetree.h inputdata.h pcheck.h reducer.h rlscan.h
load.h \
        parsetree.cc longest.cc parsedata.cc inputdata.cc load.cc reducer.cc

-libragel_la_LDFLAGS = -Wl,--no-undefined -no-undefined
+libragel_la_LDFLAGS = -no-undefined
 libragel_la_LIBADD = libfsm.la $(COLM_LD)

On Wed, Nov 28, 2018 at 7:45 AM Ken Brown <kbrown at cornell.edu> wrote:

> A patch along these lines is attached.
>
> On 11/28/2018 10:12 AM, Ken Brown wrote:
> > Rather than check for Cygwin, I think you can just use
> >
> >     -Wl,--no-undefined -no-undefined
> >
> > on all platforms.  That works fine on Cygwin, and I think it should work
> on
> > Linux too.  libtool is happy to see '-no-undefined' on Cygwin and
> probably
> > doesn't care about it on Linux, while '-Wl,--no-undefined' shows up in
> the link
> > command on all platforms (and is redundant on Cygwin).
> >
> > Ken
> >
> > On 11/28/2018 9:15 AM, Adrian Thurston wrote:
> >> Ok, I guess we check for cygwin and use the appropriate option. I don't
> normally
> >> build on cygwin so I would like to enforce it on linux as well.
> >>
> >> On 2018-11-28 00:03, Ken Brown wrote:
> >>> This seems to confirm my interpretation of "-no-undefined":
> >>>
> >>> $ libtool --help --mode=link | grep -- -no-undefined
> >>>     -no-undefined     declare that a library does not refer to
> external symbols
> >>>
> >>> Ken
> >>>
> >>> On 11/27/2018 11:09 AM, Ken Brown wrote:
> >>>> OK, that's good that I can forget about --with-ragel.  As to how
> -no-undefined
> >>>> works, I've done some googling and still don't fully understand it.
> I see the
> >>>> -no-undefined flag passed to libtool but then it doesn't appear in
> the final
> >>>> link command:
> >>>>
> >>>> /bin/sh ../libtool  --tag=CXX   --mode=link g++  -Wall -g
> -no-undefined...
> >>>>
> >>>> libtool: link: g++ -shared -nostdlib
> >>>> /usr/lib/gcc/x86_64-pc-cygwin/7.3.0/crtbeginS.o
> .libs/libfsm_la-idbase.o
> >>>> .libs/libfsm_la-fsmstate.o .libs/libfsm_la-fsmbase.o
> .libs/libfsm_la-fsmattach.o
> >>>> .libs/libfsm_la-fsmmin.o .libs/libfsm_la-fsmgraph.o
> .libs/libfsm_la-fsmap.o
> >>>> .libs/libfsm_la-fsmcond.o .libs/libfsm_la-fsmnfa.o
> .libs/libfsm_la-common.o
> >>>> .libs/libfsm_la-redfsm.o .libs/libfsm_la-gendata.o
> .libs/libfsm_la-allocgen.o
> >>>> .libs/libfsm_la-codegen.o .libs/libfsm_la-actexp.o
> .libs/libfsm_la-binvar.o
> >>>> .libs/libfsm_la-tables.o .libs/libfsm_la-tabgoto.o
> .libs/libfsm_la-tabvar.o
> >>>> .libs/libfsm_la-binary.o .libs/libfsm_la-bingoto.o
> .libs/libfsm_la-actloop.o
> >>>> .libs/libfsm_la-flat.o .libs/libfsm_la-flatgoto.o
> .libs/libfsm_la-flatvar.o
> >>>> .libs/libfsm_la-goto.o .libs/libfsm_la-gotoloop.o
> .libs/libfsm_la-gotoexp.o
> >>>> .libs/libfsm_la-ipgoto.o .libs/libfsm_la-dot.o .libs/libfsm_la-asm.o
> >>>> -L/home/kbrown/src/colm/src -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0
> >>>>
> -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0/../../../../x86_64-pc-cygwin/lib/../lib
> >>>> -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0/../../../../lib -L/lib/../lib
> >>>> -L/usr/lib/../lib
> >>>> -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0/../../../../x86_64-pc-cygwin/lib
> >>>> -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0/../../.. -lstdc++ -lgcc_s -lgcc
> -lcygwin
> >>>> -ladvapi32 -lshell32 -luser32 -lkernel32 -lgcc_s -lgcc
> >>>> /usr/lib/gcc/x86_64-pc-cygwin/7.3.0/crtend.o  -g   -o
> .libs/cygfsm-0.dll
> >>>> -Wl,--enable-auto-image-base -Xlinker --out-implib -Xlinker
> .libs/libfsm.dll.a
> >>>>
> >>>> I think the point might be that gcc/g++ will give errors on Cygwin if
> there are
> >>>> undefined symbols in shared libraries, and libtool enforces that by
> insisting on
> >>>> the -no-undefined flag, which is simply an assertion that there are
> no undefined
> >>>> symbols.  That's mostly a guess.
> >>>>
> >>>> I have the same automake, autoconf, and libtool versions as you, but
> a newer gcc
> >>>> (7.3.0).
> >>>>
> >>>> Ken
> >>>>
> >>>> On 11/27/2018 5:49 AM, Adrian Thurston wrote:
> >>>>> First, the easy part ... you can take out --with-ragel and
> --with-kelbt
> >>>>> options.
> >>>>> They were only there to fall back to during the transition to the
> colm
> >>>>> frontend.
> >>>>> I've committed to the colm parser though and will be removing the
> old one soon.
> >>>>>
> >>>>> With regards to linking, it has no effect for me when I used
> -no-undefined.
> >>>>> Seems to get stripped out by autotools because it doesn't make it
> into the link
> >>>>> command.
> >>>>>
> >>>>> libragel_la_LDFLAGS = -no-undefined
> >>>>>
> >>>>> ... results in ...
> >>>>>
> >>>>> libtool: link: g++  -fPIC -DPIC -shared -nostdlib
> >>>>> /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crti.o
> >>>>> /usr/lib/gcc/x86_64-linux-gnu/5/crtbeginS.o
> .libs/libragel_la-parsetree.o
> >>>>> .libs/libragel_la-longest.o .libs/libragel_la-parsedata.o
> >>>>> .libs/libragel_la-inputdata.o .libs/libragel_la-load.o
> >>>>> .libs/libragel_la-reducer.o   -Wl,-rpath
> >>>>> -Wl,/home/thurston/devel/ragel/src/.libs -Wl,-rpath
> >>>>> -Wl,/home/thurston/pkgs/colm/lib -Wl,-rpath
> -Wl,/home/thurston/pkgs/ragel/lib
> >>>>> -Wl,-rpath -Wl,/home/thurston/pkgs/colm/lib
> -L/home/thurston/pkgs/colm/lib
> >>>>> ./.libs/libfsm.so /home/thurston/pkgs/colm/lib/libcolm.so
> >>>>> -L/usr/lib/gcc/x86_64-linux-gnu/5
> >>>>> -L/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu
> >>>>> -L/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib
> -L/lib/x86_64-linux-gnu
> >>>>> -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib
> >>>>> -L/usr/lib/gcc/x86_64-linux-gnu/5/../../.. -lstdc++ -lm -lc -lgcc_s
> >>>>> /usr/lib/gcc/x86_64-linux-gnu/5/crtendS.o
> >>>>> /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crtn.o  -g
> >>>>> -Wl,-soname
> >>>>> -Wl,libragel.so.0 -o .libs/libragel.so.0.0.0
> >>>>>
> >>>>> My setup is ubuntu with the following versions.
> >>>>>
> >>>>> [thurston at railay] src: g++ -v; automake --version; autoconf
> --version; libtool
> >>>>> --version
> >>>>> gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.10)
> >>>>> automake (GNU automake) 1.15
> >>>>> autoconf (GNU Autoconf) 2.69
> >>>>> libtool (GNU libtool) 2.4.6
> >>>>>
> >>>>> Will have to dig a bit. Maybe the option is controlled by some other
> flag.
> >>>>>
> >>>>> On 2018-11-26 16:30, Ken Brown wrote:
> >>>>>> Thanks.  There are still two problems:
> >>>>>>
> >>>>>> First, the syntax for the libtool '-no-undefined' flag is wrong.
> It should
> >>>>>> simply be '-no-undefined' (one leading hyphen, no -Wl), as in the
> patch I
> >>>>>> submitted.  Otherwise, I get the following error if I try to build
> >>>>>> shared libraries:
> >>>>>>
> >>>>>> libtool:   error: can't build x86_64-unknown-cygwin shared library
> unless
> >>>>>> -no-undefined is specified
> >>>>>>
> >>>>>> Second, although your change takes care of the reference to
> rl_parse, which is
> >>>>>> the only undefined reference in a build --without-ragel, there are
> two further
> >>>>>> "undefined reference" errors if I build with ragel installed:
> >>>>>>
> >>>>>> .libs/libragel_la-inputdata.o: In function
> >>>>>> `InputData::checkLastRef(InputItem*)':
> >>>>>> /home/kbrown/src/ragel/src/inputdata.cc:313: undefined reference to
> >>>>>> `Parser6::terminateParser()'
> >>>>>> [...]
> >>>>>> .libs/libragel_la-inputdata.o: In function
> `InputData::parseKelbt()':
> >>>>>> /home/kbrown/src/ragel/src/inputdata.cc:427: undefined reference to
> >>>>>> `Scanner::do_scan()'
> >>>>>>
> >>>>>> These are defined in rlparse.cc and rlscan.cc, which aren't in the
> sources for
> >>>>>> libragel.
> >>>>>>
> >>>>>> Ken
> >>>>>>
> >>>>>> On 11/26/2018 11:40 AM, Adrian Thurston wrote:
> >>>>>>> Ah, sorry, I forgot to push from my private repo to the public
> one. There
> >>>>>>> now.
> >>>>>>>
> >>>>>>> On 2018-11-25 12:11, Ken Brown wrote:
> >>>>>>>> Hi Adrian,
> >>>>>>>>
> >>>>>>>> Thanks.  Have you pushed these changes to the upstream git repo?
> I'm getting
> >>>>>>>> "Already up to date" when I do "git pull".
> >>>>>>>>
> >>>>>>>> Ken
> >>>>>>>>
> >>>>>>>> On 11/25/2018 8:22 AM, Adrian Thurston wrote:
> >>>>>>>>> Hi Ken, thank you for the patches. I just enabled --no-undefined
> and
> >>>>>>>>> removed the
> >>>>>>>>> reference to the undefined symbol. The parse.c file cannot be
> included in
> >>>>>>>>> libragel because it defines the frontnend language, which is
> different for
> >>>>>>>>> each
> >>>>>>>>> binary in the host-* directories. All that was needed was to
> pass the
> >>>>>>>>> reference
> >>>>>>>>> to rl_parse into libragel from main.cc. Was already doing that
> for the
> >>>>>>>>> backend
> >>>>>>>>> code generator (also a colm program).
> >>>>>>>>>
> >>>>>>>>> Adrian
> >>>>>>>>>
> >>>>>>>>> On 2018-11-16 16:58, Ken Brown wrote:
> >>>>>>>>>> I've just built ragel-7.0.0.11 on Cygwin and added it to the
> Cygwin
> >>>>>>>>>> distribution.  I had to patch the sources in order to build
> shared
> >>>>>>>>>> libraries.
> >>>>>>>>>>
> >>>>>>>>>> libtool won't build shared libraries on Cygwin unless the
> >>>>>>>>>> -no-undefined flag is given.  The first patch of this series
> does that
> >>>>>>>>>> for libfsm and libragel.  But it turns out that there are in
> fact
> >>>>>>>>>> undefined symbols in libragel.  The next two patches fix that.
> >>>>>>>>>>
> >>>>>>>>>> I don't think these patches do any harm on other platforms.
> >>>>>>>>>>
> >>>>>>>>>> Ken Brown (3):
> >>>>>>>>>>     add -no-undefined to LDFLAGS for libfsm and libragel
> >>>>>>>>>>     add dependency of libragel on libfsm and libcolm
> >>>>>>>>>>     avoid undefined symbols in libragel
> >>>>>>>>>>
> >>>>>>>>>>    src/Makefile.am | 20 ++++++++++++++------
> >>>>>>>>>>    1 file changed, 14 insertions(+), 6 deletions(-)
> >>>>>>>>>
> >>>>>>>>> _______________________________________________
> >>>>>>>>> ragel-users mailing list
> >>>>>>>>> ragel-users at colm.net
> >>>>>>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
> >>>>>>>> _______________________________________________
> >>>>>>>> ragel-users mailing list
> >>>>>>>> ragel-users at colm.net
> >>>>>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
> >>>>>>>
> >>>>>>> _______________________________________________
> >>>>>>> ragel-users mailing list
> >>>>>>> ragel-users at colm.net
> >>>>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
> >>>>>> _______________________________________________
> >>>>>> ragel-users mailing list
> >>>>>> ragel-users at colm.net
> >>>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
> >>>>>
> >>>>>
> >>>>> _______________________________________________
> >>>>> ragel-users mailing list
> >>>>> ragel-users at colm.net
> >>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
> >>>> _______________________________________________
> >>>> ragel-users mailing list
> >>>> ragel-users at colm.net
> >>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
> >>>>
> >>> _______________________________________________
> >>> ragel-users mailing list
> >>> ragel-users at colm.net
> >>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
> >>
> >> _______________________________________________
> >> ragel-users mailing list
> >> ragel-users at colm.net
> >> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
> > _______________________________________________
> > ragel-users mailing list
> > ragel-users at colm.net
> > http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
> >
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20181205/31d2e01f/attachment-0001.html>

From namiheike at gmail.com  Wed Dec  5 21:45:47 2018
From: namiheike at gmail.com (Nami WANG)
Date: Thu, 6 Dec 2018 10:45:47 +0800
Subject: [ragel-users]  rust's static lifetime annotation breaks ragel
Message-ID: <CANnpEN-M9ZL_wPYztTX6PjLrfym7d1BCn_oBHp30e65p3yX4MQ@mail.gmail.com>

Hi,

I've got an embedded-with-rust ragel file which runs forever.

After some digging, I narrowed down the issue and seems that the static
lifetime annotations in rust are the problem.

Apparently, codes like

> fn some_fn() -> &'static str { "foo" }

would cause an infinite-loop in ragel.

I'd like to provide a case if you guys couldn't repro the issue.

ref for static lifetimes in rust:
https://doc.rust-lang.org/book/second-edition/ch10-03-lifetime-syntax.html#the-static-lifetime

Thanks!

-- 
Best regards,

Nami WANG
namiheike at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20181206/33e9344e/attachment.html>

From thurston at colm.net  Thu Dec  6 09:11:37 2018
From: thurston at colm.net (Adrian Thurston)
Date: Thu, 06 Dec 2018 09:11:37 -0500
Subject: [ragel-users] [PATCH 0/3] Fix Cygwin build
In-Reply-To: <CANjWZxNUKvFXxpxobd8gUc7QHUmzQeDMszNVFKXQesOu_TXfGg@mail.gmail.com>
References: <20181116195839.21284-1-kbrown@cornell.edu>
 <73c45e9029f92be0cc6bdc6b229470d8@mail.colm.net>
 <352e481f-4c91-41bf-43c6-6e9708f6c8b6@cornell.edu>
 <320011175ced45b5722fa7f3a891cb16@mail.colm.net>
 <a5e49590-af6c-6751-dae7-b01f845eab8d@cornell.edu>
 <409d45f1d0b410c3241ec316412df457@mail.colm.net>
 <b54376cd-0892-e41c-890d-003d8ab5c5b7@cornell.edu>
 <83a43d93-6281-bcb5-fa6f-ee662be1282d@cornell.edu>
 <5bf66a1af7a49bc98fe3718c4b00196c@mail.colm.net>
 <114e37e4-fda8-d7cb-40be-92961bf73370@cornell.edu>
 <6a997c36-2750-d6b1-e33e-b6ac56b92179@cornell.edu>
 <CANjWZxNUKvFXxpxobd8gUc7QHUmzQeDMszNVFKXQesOu_TXfGg@mail.gmail.com>
Message-ID: <687d889d48f5a3556db444a5a60f3f36@mail.colm.net>

 

Ah, okay. Guess we have to do something like this ... 

https://stackoverflow.com/questions/21840315/ldflags-usage-in-autotools-with-libtool


On 2018-12-05 12:54, Damian Gryski wrote: 

> In order to get this to build on my Mac, I need the following patch :( 
> 
> diff --git a/src/Makefile.am b/src/Makefile.am 
> index 8a929f50..c6653dad 100644 
> --- a/src/Makefile.am 
> +++ b/src/Makefile.am 
> @@ -56,7 +56,7 @@ dist_libfsm_la_SOURCES = 
> nodist_libfsm_la_SOURCES = 
> version.h 
> 
> -libfsm_la_LDFLAGS = -Wl,--no-undefined -no-undefined 
> +libfsm_la_LDFLAGS = -no-undefined 
> 
> # 
> # libragel: ragel program minus host-specific code 
> @@ -67,7 +67,7 @@ dist_libragel_la_SOURCES = 
> parsedata.h parsetree.h inputdata.h pcheck.h reducer.h rlscan.h load.h 
> parsetree.cc longest.cc parsedata.cc inputdata.cc load.cc reducer.cc 
> 
> -libragel_la_LDFLAGS = -Wl,--no-undefined -no-undefined 
> +libragel_la_LDFLAGS = -no-undefined 
> libragel_la_LIBADD = libfsm.la [2] $(COLM_LD) 
> 
> On Wed, Nov 28, 2018 at 7:45 AM Ken Brown <kbrown at cornell.edu> wrote: 
> 
>> A patch along these lines is attached.
>> 
>> On 11/28/2018 10:12 AM, Ken Brown wrote:
>>> Rather than check for Cygwin, I think you can just use
>>> 
>>> -Wl,--no-undefined -no-undefined
>>> 
>>> on all platforms. That works fine on Cygwin, and I think it should work on
>>> Linux too. libtool is happy to see '-no-undefined' on Cygwin and probably
>>> doesn't care about it on Linux, while '-Wl,--no-undefined' shows up in the link
>>> command on all platforms (and is redundant on Cygwin).
>>> 
>>> Ken
>>> 
>>> On 11/28/2018 9:15 AM, Adrian Thurston wrote:
>>>> Ok, I guess we check for cygwin and use the appropriate option. I don't normally
>>>> build on cygwin so I would like to enforce it on linux as well.
>>>> 
>>>> On 2018-11-28 00:03, Ken Brown wrote:
>>>>> This seems to confirm my interpretation of "-no-undefined":
>>>>> 
>>>>> $ libtool --help --mode=link | grep -- -no-undefined
>>>>> -no-undefined declare that a library does not refer to external symbols
>>>>> 
>>>>> Ken
>>>>> 
>>>>> On 11/27/2018 11:09 AM, Ken Brown wrote:
>>>>>> OK, that's good that I can forget about --with-ragel. As to how -no-undefined
>>>>>> works, I've done some googling and still don't fully understand it. I see the
>>>>>> -no-undefined flag passed to libtool but then it doesn't appear in the final
>>>>>> link command:
>>>>>> 
>>>>>> /bin/sh ../libtool --tag=CXX --mode=link g++ -Wall -g -no-undefined...
>>>>>> 
>>>>>> libtool: link: g++ -shared -nostdlib
>>>>>> /usr/lib/gcc/x86_64-pc-cygwin/7.3.0/crtbeginS.o .libs/libfsm_la-idbase.o
>>>>>> .libs/libfsm_la-fsmstate.o .libs/libfsm_la-fsmbase.o .libs/libfsm_la-fsmattach.o
>>>>>> .libs/libfsm_la-fsmmin.o .libs/libfsm_la-fsmgraph.o .libs/libfsm_la-fsmap.o
>>>>>> .libs/libfsm_la-fsmcond.o .libs/libfsm_la-fsmnfa.o .libs/libfsm_la-common.o
>>>>>> .libs/libfsm_la-redfsm.o .libs/libfsm_la-gendata.o .libs/libfsm_la-allocgen.o
>>>>>> .libs/libfsm_la-codegen.o .libs/libfsm_la-actexp.o .libs/libfsm_la-binvar.o
>>>>>> .libs/libfsm_la-tables.o .libs/libfsm_la-tabgoto.o .libs/libfsm_la-tabvar.o
>>>>>> .libs/libfsm_la-binary.o .libs/libfsm_la-bingoto.o .libs/libfsm_la-actloop.o
>>>>>> .libs/libfsm_la-flat.o .libs/libfsm_la-flatgoto.o .libs/libfsm_la-flatvar.o
>>>>>> .libs/libfsm_la-goto.o .libs/libfsm_la-gotoloop.o .libs/libfsm_la-gotoexp.o
>>>>>> .libs/libfsm_la-ipgoto.o .libs/libfsm_la-dot.o .libs/libfsm_la-asm.o
>>>>>> -L/home/kbrown/src/colm/src -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0
>>>>>> -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0/../../../../x86_64-pc-cygwin/lib/../lib
>>>>>> -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0/../../../../lib -L/lib/../lib
>>>>>> -L/usr/lib/../lib
>>>>>> -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0/../../../../x86_64-pc-cygwin/lib
>>>>>> -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0/../../.. -lstdc++ -lgcc_s -lgcc -lcygwin
>>>>>> -ladvapi32 -lshell32 -luser32 -lkernel32 -lgcc_s -lgcc
>>>>>> /usr/lib/gcc/x86_64-pc-cygwin/7.3.0/crtend.o -g -o .libs/cygfsm-0.dll
>>>>>> -Wl,--enable-auto-image-base -Xlinker --out-implib -Xlinker .libs/libfsm.dll.a
>>>>>> 
>>>>>> I think the point might be that gcc/g++ will give errors on Cygwin if there are
>>>>>> undefined symbols in shared libraries, and libtool enforces that by insisting on
>>>>>> the -no-undefined flag, which is simply an assertion that there are no undefined
>>>>>> symbols. That's mostly a guess.
>>>>>> 
>>>>>> I have the same automake, autoconf, and libtool versions as you, but a newer gcc
>>>>>> (7.3.0).
>>>>>> 
>>>>>> Ken
>>>>>> 
>>>>>> On 11/27/2018 5:49 AM, Adrian Thurston wrote:
>>>>>>> First, the easy part ... you can take out --with-ragel and --with-kelbt
>>>>>>> options.
>>>>>>> They were only there to fall back to during the transition to the colm
>>>>>>> frontend.
>>>>>>> I've committed to the colm parser though and will be removing the old one soon.
>>>>>>> 
>>>>>>> With regards to linking, it has no effect for me when I used -no-undefined.
>>>>>>> Seems to get stripped out by autotools because it doesn't make it into the link
>>>>>>> command.
>>>>>>> 
>>>>>>> libragel_la_LDFLAGS = -no-undefined
>>>>>>> 
>>>>>>> ... results in ...
>>>>>>> 
>>>>>>> libtool: link: g++ -fPIC -DPIC -shared -nostdlib
>>>>>>> /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crti.o
>>>>>>> /usr/lib/gcc/x86_64-linux-gnu/5/crtbeginS.o .libs/libragel_la-parsetree.o
>>>>>>> .libs/libragel_la-longest.o .libs/libragel_la-parsedata.o
>>>>>>> .libs/libragel_la-inputdata.o .libs/libragel_la-load.o
>>>>>>> .libs/libragel_la-reducer.o -Wl,-rpath
>>>>>>> -Wl,/home/thurston/devel/ragel/src/.libs -Wl,-rpath
>>>>>>> -Wl,/home/thurston/pkgs/colm/lib -Wl,-rpath -Wl,/home/thurston/pkgs/ragel/lib
>>>>>>> -Wl,-rpath -Wl,/home/thurston/pkgs/colm/lib -L/home/thurston/pkgs/colm/lib
>>>>>>> ./.libs/libfsm.so /home/thurston/pkgs/colm/lib/libcolm.so
>>>>>>> -L/usr/lib/gcc/x86_64-linux-gnu/5
>>>>>>> -L/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu
>>>>>>> -L/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib -L/lib/x86_64-linux-gnu
>>>>>>> -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib
>>>>>>> -L/usr/lib/gcc/x86_64-linux-gnu/5/../../.. -lstdc++ -lm -lc -lgcc_s
>>>>>>> /usr/lib/gcc/x86_64-linux-gnu/5/crtendS.o
>>>>>>> /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crtn.o -g
>>>>>>> -Wl,-soname
>>>>>>> -Wl,libragel.so.0 -o .libs/libragel.so.0.0.0
>>>>>>> 
>>>>>>> My setup is ubuntu with the following versions.
>>>>>>> 
>>>>>>> [thurston at railay] src: g++ -v; automake --version; autoconf --version; libtool
>>>>>>> --version
>>>>>>> gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.10)
>>>>>>> automake (GNU automake) 1.15
>>>>>>> autoconf (GNU Autoconf) 2.69
>>>>>>> libtool (GNU libtool) 2.4.6
>>>>>>> 
>>>>>>> Will have to dig a bit. Maybe the option is controlled by some other flag.
>>>>>>> 
>>>>>>> On 2018-11-26 16:30, Ken Brown wrote:
>>>>>>>> Thanks. There are still two problems:
>>>>>>>> 
>>>>>>>> First, the syntax for the libtool '-no-undefined' flag is wrong. It should
>>>>>>>> simply be '-no-undefined' (one leading hyphen, no -Wl), as in the patch I
>>>>>>>> submitted. Otherwise, I get the following error if I try to build
>>>>>>>> shared libraries:
>>>>>>>> 
>>>>>>>> libtool: error: can't build x86_64-unknown-cygwin shared library unless
>>>>>>>> -no-undefined is specified
>>>>>>>> 
>>>>>>>> Second, although your change takes care of the reference to rl_parse, which is
>>>>>>>> the only undefined reference in a build --without-ragel, there are two further
>>>>>>>> "undefined reference" errors if I build with ragel installed:
>>>>>>>> 
>>>>>>>> .libs/libragel_la-inputdata.o: In function
>>>>>>>> `InputData::checkLastRef(InputItem*)':
>>>>>>>> /home/kbrown/src/ragel/src/inputdata.cc:313: undefined reference to
>>>>>>>> `Parser6::terminateParser()'
>>>>>>>> [...]
>>>>>>>> .libs/libragel_la-inputdata.o: In function `InputData::parseKelbt()':
>>>>>>>> /home/kbrown/src/ragel/src/inputdata.cc:427: undefined reference to
>>>>>>>> `Scanner::do_scan()'
>>>>>>>> 
>>>>>>>> These are defined in rlparse.cc and rlscan.cc, which aren't in the sources for
>>>>>>>> libragel.
>>>>>>>> 
>>>>>>>> Ken
>>>>>>>> 
>>>>>>>> On 11/26/2018 11:40 AM, Adrian Thurston wrote:
>>>>>>>>> Ah, sorry, I forgot to push from my private repo to the public one. There
>>>>>>>>> now.
>>>>>>>>> 
>>>>>>>>> On 2018-11-25 12:11, Ken Brown wrote:
>>>>>>>>>> Hi Adrian,
>>>>>>>>>> 
>>>>>>>>>> Thanks. Have you pushed these changes to the upstream git repo? I'm getting
>>>>>>>>>> "Already up to date" when I do "git pull".
>>>>>>>>>> 
>>>>>>>>>> Ken
>>>>>>>>>> 
>>>>>>>>>> On 11/25/2018 8:22 AM, Adrian Thurston wrote:
>>>>>>>>>>> Hi Ken, thank you for the patches. I just enabled --no-undefined and
>>>>>>>>>>> removed the
>>>>>>>>>>> reference to the undefined symbol. The parse.c file cannot be included in
>>>>>>>>>>> libragel because it defines the frontnend language, which is different for
>>>>>>>>>>> each
>>>>>>>>>>> binary in the host-* directories. All that was needed was to pass the
>>>>>>>>>>> reference
>>>>>>>>>>> to rl_parse into libragel from main.cc. Was already doing that for the
>>>>>>>>>>> backend
>>>>>>>>>>> code generator (also a colm program).
>>>>>>>>>>> 
>>>>>>>>>>> Adrian
>>>>>>>>>>> 
>>>>>>>>>>> On 2018-11-16 16:58, Ken Brown wrote:
>>>>>>>>>>>> I've just built ragel-7.0.0.11 on Cygwin and added it to the Cygwin
>>>>>>>>>>>> distribution. I had to patch the sources in order to build shared
>>>>>>>>>>>> libraries.
>>>>>>>>>>>> 
>>>>>>>>>>>> libtool won't build shared libraries on Cygwin unless the
>>>>>>>>>>>> -no-undefined flag is given. The first patch of this series does that
>>>>>>>>>>>> for libfsm and libragel. But it turns out that there are in fact
>>>>>>>>>>>> undefined symbols in libragel. The next two patches fix that.
>>>>>>>>>>>> 
>>>>>>>>>>>> I don't think these patches do any harm on other platforms.
>>>>>>>>>>>> 
>>>>>>>>>>>> Ken Brown (3):
>>>>>>>>>>>> add -no-undefined to LDFLAGS for libfsm and libragel
>>>>>>>>>>>> add dependency of libragel on libfsm and libcolm
>>>>>>>>>>>> avoid undefined symbols in libragel
>>>>>>>>>>>> 
>>>>>>>>>>>> src/Makefile.am | 20 ++++++++++++++------
>>>>>>>>>>>> 1 file changed, 14 insertions(+), 6 deletions(-)
>>>>>>>>>>> 
>>>>>>>>>>> _______________________________________________
>>>>>>>>>>> ragel-users mailing list
>>>>>>>>>>> ragel-users at colm.net
>>>>>>>>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users [1]
>>>>>>>>>> _______________________________________________
>>>>>>>>>> ragel-users mailing list
>>>>>>>>>> ragel-users at colm.net
>>>>>>>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users [1]
>>>>>>>>> 
>>>>>>>>> _______________________________________________
>>>>>>>>> ragel-users mailing list
>>>>>>>>> ragel-users at colm.net
>>>>>>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users [1]
>>>>>>>> _______________________________________________
>>>>>>>> ragel-users mailing list
>>>>>>>> ragel-users at colm.net
>>>>>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users [1]
>>>>>>> 
>>>>>>> 
>>>>>>> _______________________________________________
>>>>>>> ragel-users mailing list
>>>>>>> ragel-users at colm.net
>>>>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users [1]
>>>>>> _______________________________________________
>>>>>> ragel-users mailing list
>>>>>> ragel-users at colm.net
>>>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users [1]
>>>>>> 
>>>>> _______________________________________________
>>>>> ragel-users mailing list
>>>>> ragel-users at colm.net
>>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users [1]
>>>> 
>>>> _______________________________________________
>>>> ragel-users mailing list
>>>> ragel-users at colm.net
>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users [1]
>>> _______________________________________________
>>> ragel-users mailing list
>>> ragel-users at colm.net
>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users [1]
>>> 
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at colm.net
>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users [1]
> 
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users [1]
 

Links:
------
[1] http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
[2] http://libfsm.la
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20181206/1914dd69/attachment-0001.html>

From thurston at colm.net  Fri Dec 14 08:23:08 2018
From: thurston at colm.net (Adrian Thurston)
Date: Fri, 14 Dec 2018 15:23:08 +0200
Subject: [ragel-users] rust's static lifetime annotation breaks ragel
In-Reply-To: <CANnpEN-M9ZL_wPYztTX6PjLrfym7d1BCn_oBHp30e65p3yX4MQ@mail.gmail.com>
References: <CANnpEN-M9ZL_wPYztTX6PjLrfym7d1BCn_oBHp30e65p3yX4MQ@mail.gmail.com>
Message-ID: <6f064925c92c48032d5d3ac164888eed@mail.colm.net>

 

Hi Nami, yes not able to figure out this issue. Could you please provide
a stripped-down example? 

Thanks,
 Adrian 

On 2018-12-06 04:45, Nami WANG wrote: 

> Hi, 
> 
> I've got an embedded-with-rust ragel file which runs forever. 
> 
> After some digging, I narrowed down the issue and seems that the static lifetime annotations in rust are the problem. 
> 
> Apparently, codes like 
> 
>> fn some_fn() -> &'static str { "foo" }
> 
> would cause an infinite-loop in ragel. 
> 
> I'd like to provide a case if you guys couldn't repro the issue. 
> 
> ref for static lifetimes in rust: https://doc.rust-lang.org/book/second-edition/ch10-03-lifetime-syntax.html#the-static-lifetime [2] 
> 
> Thanks! 
> -- 
> 
> Best regards, 
> 
> Nami WANG
> 
> namiheike at gmail.com 
> 
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users [1]
 

Links:
------
[1] http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
[2]
https://doc.rust-lang.org/book/second-edition/ch10-03-lifetime-syntax.html#the-static-lifetime
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20181214/8647e037/attachment.html>

From filipp.andronov at gmail.com  Sun Dec 16 08:33:59 2018
From: filipp.andronov at gmail.com (Filipp Andronov)
Date: Sun, 16 Dec 2018 16:33:59 +0300
Subject: [ragel-users]  Parallel machines
Message-ID: <CACm89GE_qcqaVnuky_9N5ivZi=OvFvt24b1mpbRF8K1jTWd0xg@mail.gmail.com>

Good day,

Please help me to understand if the following thing is possible with using
ragel. I have a database of UTF-8 patterns, which I've compiled in ragel
machine with using a bit of python magic.

>From that compiled databse Im able to build a scanner:
main := |*
  Database => {issue_token; fbreak}
  any; # ignore unmatched
*|

Having a stream of recognized tokens, I'd like to calculate some properties
of each token, like how many runes are inside, different Unicode Scripts
bounds and Class bounds. Right now Im doing that by a separate scan of
found tokens text, but could it be done better and embbed inside scanner
itself?

For each property I could easealy generate FSM from UnicodeData files but
have no idea how to compose machines to run in parallel?

Idially a such combined machine would analyse input stream and call actions
like:
- PatternStart
- New rune
- New Class
- New rune
- New Class
- New Script
- PatternFound

But some other approximation is fine too :)

-- 
Thanks and regards,

Philip Andronov
------------------------------------------
Leading software engineer,
mail.ru
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20181216/849738e9/attachment.html>

From thurston at colm.net  Sat Dec 29 03:57:35 2018
From: thurston at colm.net (Adrian Thurston)
Date: Sat, 29 Dec 2018 10:57:35 +0200
Subject: [ragel-users] Parallel machines
In-Reply-To: <CACm89GE_qcqaVnuky_9N5ivZi=OvFvt24b1mpbRF8K1jTWd0xg@mail.gmail.com>
References: <CACm89GE_qcqaVnuky_9N5ivZi=OvFvt24b1mpbRF8K1jTWd0xg@mail.gmail.com>
Message-ID: <15afa0016c15f7e2d25a49f45c23c0e5@mail.colm.net>

 

Hi, yes it is possible, scanners execute in parallel, however you don't
get all the guarantees you normally get when you simply union. There may
be some backtracking and leaving actions don't always execute. This
second issue is something I'm hoping to fix with ragel 8. 

If you want to do things in parallel as is the case with a normal union,
you can scan using the ** operator. This is a kleene star that favours
staying in the machine over starting to match a new token. If that
doesn't work for you, you can implement the scanning functionality
yourself, just using ragel to match a single token from the current
starting location. Simply union all your patterns and wrap that in a
loop. 

On 2018-12-16 15:33, Filipp Andronov wrote: 

> Good day, 
> 
> Please help me to understand if the following thing is possible with using ragel. I have a database of UTF-8 patterns, which I've compiled in ragel machine with using a bit of python magic. 
> 
> From that compiled databse Im able to build a scanner: 
> main := |* 
> Database => {issue_token; fbreak} 
> any; # ignore unmatched 
> *| 
> 
> Having a stream of recognized tokens, I'd like to calculate some properties of each token, like how many runes are inside, different Unicode Scripts bounds and Class bounds. Right now Im doing that by a separate scan of found tokens text, but could it be done better and embbed inside scanner itself? 
> 
> For each property I could easealy generate FSM from UnicodeData files but have no idea how to compose machines to run in parallel? 
> 
> Idially a such combined machine would analyse input stream and call actions like: 
> - PatternStart 
> - New rune 
> - New Class 
> - New rune 
> - New Class 
> - New Script 
> - PatternFound 
> 
> But some other approximation is fine too :) 
> -- 
> 
> Thanks and regards,
> 
> Philip Andronov
> ------------------------------------------
> Leading software engineer, 
> mail.ru [2] 
> 
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users [1]
 

Links:
------
[1] http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
[2] http://mail.ru
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20181229/51cb48cd/attachment.html>

