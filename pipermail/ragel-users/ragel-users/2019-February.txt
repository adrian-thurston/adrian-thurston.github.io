From ibragimovrinat at mail.ru  Mon Feb  4 11:03:15 2019
From: ibragimovrinat at mail.ru (=?UTF-8?B?UmluYXQgSWJyYWdpbW92?=)
Date: Mon, 04 Feb 2019 19:03:15 +0300
Subject: [ragel-users] =?utf-8?q?Ragel_syntax?=
In-Reply-To: <CAJHgk8vw_itFi2HGGNBS5OzWi6E61m0kpHU7J=ehVk4FWOBoNg@mail.gmail.com>
References: <CAJHgk8vw_itFi2HGGNBS5OzWi6E61m0kpHU7J=ehVk4FWOBoNg@mail.gmail.com>
Message-ID: <1549296195.748257092@f428.i.mail.ru>


>Четверг, 31 января 2019, 18:09 +03:00 от Dénes Lados <lados.denes at gmail.com>:
>
>Hi,
>
>I am confused with the basic syntax of Ragel. Let's see this machine from the ragel guide:
>
>>%%{ machine foo;
>>main :=
>>( ’foo’ | ’bar’ )
>>0 @{ res = 1; };
>>}%%
>
>As far as I can understand this machine looks for the 'foo' or 'bar' strings and sets the variable from the host language 'res' to 1 if a match is found. 

This machine also checks for the terminating NUL character, '\0'.

>
>What I don't understand is what the 0 and the @{} stands for. What the exact meaning of these signs and how they are used to run actions in case of a match?

0 is a byte with code 0. See 2.3 in the guide for details.
@ is finishing action. See 3.1.2 in the guide for details.

Also try to generate a graph by calling Ragel with `-pV` options. Visual representations are really helpful.

>
>Thanks
>Denes Lados
>_______________________________________________
>ragel-users mailing list
>ragel-users at colm.net
>http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users


---
Rinat

From pengyu.ut at gmail.com  Tue Feb 19 00:22:53 2019
From: pengyu.ut at gmail.com (Peng Yu)
Date: Mon, 18 Feb 2019 23:22:53 -0600
Subject: [ragel-users] Does ragel support something like %x in flex?
Message-ID: <CABrM6w=zK7VxXoDN3YUMuaFBp-nve23btKescLdJS3-6SobTug@mail.gmail.com>

Hi,

I don't see ragel support something like Chapter 10 of flex manual.

"""
flex provides a mechanism for conditionally activating rules. Any rule
whose pattern is
prefixed with ‘<sc>’ will only be active when the scanner is in the
start condition named
sc. For example,
<STRING>[^"]* { /* eat up the string body ... */
...
}
will be active only when the scanner is in the STRING start condition, and
<INITIAL,STRING,QUOTE>\. { /* handle an escape ... */
...
}
will be active only when the current start condition is either
INITIAL, STRING, or QUOTE.
"""

Maybe I miss something. Does ragel support such a feature? Thanks.

-- 
Regards,
Peng


From thurston at colm.net  Tue Feb 19 02:53:54 2019
From: thurston at colm.net (Adrian Thurston)
Date: Tue, 19 Feb 2019 09:53:54 +0200
Subject: [ragel-users]
 =?utf-8?q?Does_ragel_support_something_like_=25x_in?=
 =?utf-8?q?_flex=3F?=
In-Reply-To: <CABrM6w=zK7VxXoDN3YUMuaFBp-nve23btKescLdJS3-6SobTug@mail.gmail.com>
References: <CABrM6w=zK7VxXoDN3YUMuaFBp-nve23btKescLdJS3-6SobTug@mail.gmail.com>
Message-ID: <4f9f93511e52ff1d67f65526bece2cff@mail.colm.net>

Hi Peng, you can embed a condition into a pattern. I would recommend an 
entry condition.

pattern >when {test()} => {match_code();}

On 2019-02-19 07:22, Peng Yu wrote:
> Hi,
> 
> I don't see ragel support something like Chapter 10 of flex manual.
> 
> """
> flex provides a mechanism for conditionally activating rules. Any rule
> whose pattern is
> prefixed with ‘<sc>’ will only be active when the scanner is in the
> start condition named
> sc. For example,
> <STRING>[^"]* { /* eat up the string body ... */
> ...
> }
> will be active only when the scanner is in the STRING start condition, 
> and
> <INITIAL,STRING,QUOTE>\. { /* handle an escape ... */
> ...
> }
> will be active only when the current start condition is either
> INITIAL, STRING, or QUOTE.
> """
> 
> Maybe I miss something. Does ragel support such a feature? Thanks.


From pengyu.ut at gmail.com  Thu Feb 21 12:07:12 2019
From: pengyu.ut at gmail.com (Peng Yu)
Date: Thu, 21 Feb 2019 11:07:12 -0600
Subject: [ragel-users] ragel implementation for heredoc
Message-ID: <CABrM6w=ZAz_-y3ZzHux1qaa1SkjS7aw7SG+YC9Ozd2=v1MR2_g@mail.gmail.com>

Hi, I'd like to find some example implementation on capturing heredoc
in shell (including nested heredoc). Does anybody have such an
implementation? Thanks.

https://unix.stackexchange.com/questions/353076/how-to-indent-an-heredoc-inside-an-heredoc-the-right-way

bash <<- APACHE
	cat << MOD_REWRITE
	⇨       ...
	⇨       ....
	MOD_REWRITE
APACHE

-- 
Regards,
Peng


From pengyu.ut at gmail.com  Thu Feb 21 12:19:03 2019
From: pengyu.ut at gmail.com (Peng Yu)
Date: Thu, 21 Feb 2019 11:19:03 -0600
Subject: [ragel-users] Where to find colm?
Message-ID: <CABrM6w=BAmNHRcGnbaxhpUuz5WNK+=W+5OuHSgRBA3xyvF=ecQ@mail.gmail.com>

Hi,

I see the following error. Does anybody know where to find colm? Thanks.

doc$ make
colm generate.lm
make: colm: Command not found
make: *** [Makefile:567: generate.bin] Error 127

-- 
Regards,
Peng


From konstantin at podsvirov.pro  Thu Feb 21 13:59:57 2019
From: konstantin at podsvirov.pro (Konstantin Podsvirov)
Date: Thu, 21 Feb 2019 21:59:57 +0300
Subject: [ragel-users] Where to find colm?
In-Reply-To: <CABrM6w=BAmNHRcGnbaxhpUuz5WNK+=W+5OuHSgRBA3xyvF=ecQ@mail.gmail.com>
References: <CABrM6w=BAmNHRcGnbaxhpUuz5WNK+=W+5OuHSgRBA3xyvF=ecQ@mail.gmail.com>
Message-ID: <41080691550775597@myt5-184376c2d7f8.qloud-c.yandex.net>

An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20190221/d96c1a76/attachment.html>

From pengyu.ut at gmail.com  Thu Feb 21 21:47:18 2019
From: pengyu.ut at gmail.com (Peng Yu)
Date: Thu, 21 Feb 2019 20:47:18 -0600
Subject: [ragel-users] How to use uri.rl?
Message-ID: <CABrM6wk4xWpjyJupknDru04c0pXpuKQYt0bFOmQ2R0ew2BwQjg@mail.gmail.com>

When I use the following command to compile examples/uri.rl,

$ ragel -o uri.rl.c uri.rl

I got an empty file. Does anybody know what is wrong? Thanks.

$ cat uri.rl.c

#line 1 "uri.rl"

#line 31 "uri.rl"

-- 
Regards,
Peng


From pengyu.ut at gmail.com  Thu Feb 21 23:54:13 2019
From: pengyu.ut at gmail.com (Peng Yu)
Date: Thu, 21 Feb 2019 22:54:13 -0600
Subject: [ragel-users] What is the purpose of "write data"?
Message-ID: <CABrM6wmGG=yud+VusZiHV_eoNk-mjhv=8mrQNSVbDbgDq=R3vA@mail.gmail.com>

Hi,

I commented out "write data" in awkemu.rl from the examples directory.

$ diff awkemu.rl awkemu1.rl
57c57
< %% write data noerror nofinal;
---
> #%% write data noerror nofinal;

But when I compare the generated c files. I don't see any differences.
What is the purpose of "write data"?

$ diff awkemu*.c
2c2
< #line 1 "awkemu.rl"
---
> #line 1 "awkemu1.rl"
13c13
< #line 55 "awkemu.rl"
---
> #line 55 "awkemu1.rl"
16,17c16,17
<
< #line 18 "awkemu.rl.c"
---
> #
> #line 18 "awkemu1.rl.c"
60c60
< #line 58 "awkemu.rl"
---
> #line 58 "awkemu1.rl"
77c77
< #line 78 "awkemu.rl.c"
---
> #line 78 "awkemu1.rl.c"
82c82
< #line 74 "awkemu.rl"
---
> #line 74 "awkemu1.rl"
110c110
< #line 111 "awkemu.rl.c"
---
> #line 111 "awkemu1.rl.c"
182c182
< #line 13 "awkemu.rl"
---
> #line 13 "awkemu1.rl"
188c188
< #line 17 "awkemu.rl"
---
> #line 17 "awkemu1.rl"
194c194
< #line 21 "awkemu.rl"
---
> #line 21 "awkemu1.rl"
201c201
< #line 26 "awkemu.rl"
---
> #line 26 "awkemu1.rl"
214c214
< #line 215 "awkemu.rl.c"
---
> #line 215 "awkemu1.rl.c"
224c224
< #line 101 "awkemu.rl"
---
> #line 101 "awkemu1.rl"

-- 
Regards,
Peng


From pengyu.ut at gmail.com  Fri Feb 22 01:35:55 2019
From: pengyu.ut at gmail.com (Peng Yu)
Date: Fri, 22 Feb 2019 00:35:55 -0600
Subject: [ragel-users] The meaning of Figure 2.1 in the manual
Message-ID: <CABrM6wnGf3rgs157d85P_add266_7n+etbDAqczp43cUDG=cXA@mail.gmail.com>

Hi,

I have a hard time to understand the exact meaning of Figure 2.1. I
understand the regex part.

But what `0 @{ res = 1; };` means.

How p and pe are used in `write init` and `write exec`?

char *p = argv[1];
char *pe = p + strlen(p) + 1;
%% write init;
%% write exec;

How to make the example on the right-hand-side of Figure 2.1 compiled? Thanks.

#include <string.h>
#include <stdio.h>
%%{
machine foo;
main :=
( 'foo' | 'bar' )
0 @{ res = 1; };
}%%
%% write data;
int main( int argc, char **argv )
{
int cs, res = 0;
if ( argc > 1 ) {
char *p = argv[1];
char *pe = p + strlen(p) + 1;
%% write init;
%% write exec;
}
printf("result = %i\n", res );
return 0;
}

-- 
Regards,
Peng


From pengyu.ut at gmail.com  Fri Feb 22 02:44:22 2019
From: pengyu.ut at gmail.com (Peng Yu)
Date: Fri, 22 Feb 2019 01:44:22 -0600
Subject: [ragel-users] Typo in the figure above section 2.5.7
Message-ID: <CABrM6wnnHzqyouNX772ZxsmcmgbMMSiWeLaWaYyhbEBn9Snoag@mail.gmail.com>

In the figure above section 2.5.7 (ragel-guide-6.10.pdf), I see "10"
on the arrow going from the state of "0" to the state of "0".

I think "10" should be "\n" as "10" appear nowhere in the rule `main
:= /[a-z]*\n/*;`.

Is it a typo?

-- 
Regards,
Peng


From dan at kortschak.io  Fri Feb 22 04:39:37 2019
From: dan at kortschak.io (Dan Kortschak)
Date: Fri, 22 Feb 2019 20:09:37 +1030
Subject: [ragel-users] Typo in the figure above section 2.5.7
In-Reply-To: <CABrM6wnnHzqyouNX772ZxsmcmgbMMSiWeLaWaYyhbEBn9Snoag@mail.gmail.com>
References: <CABrM6wnnHzqyouNX772ZxsmcmgbMMSiWeLaWaYyhbEBn9Snoag@mail.gmail.com>
Message-ID: <1550828377.19847.90.camel@kortschak.io>

'\n' (LF) is 10 in ASCII. Ragel doesn't retain the syntactic
representation of the value that match is again (though it can render
the character value as well as the numeric value).

Dan

On Fri, 2019-02-22 at 01:44 -0600, Peng Yu wrote:
> In the figure above section 2.5.7 (ragel-guide-6.10.pdf), I see "10"
> on the arrow going from the state of "0" to the state of "0".
> 
> I think "10" should be "\n" as "10" appear nowhere in the rule `main
> := /[a-z]*\n/*;`.
> 
> Is it a typo?
> 


From pengyu.ut at gmail.com  Fri Feb 22 12:04:27 2019
From: pengyu.ut at gmail.com (Peng Yu)
Date: Fri, 22 Feb 2019 11:04:27 -0600
Subject: [ragel-users] Typo in the figure above section 2.5.7
In-Reply-To: <1550828377.19847.90.camel@kortschak.io>
References: <CABrM6wnnHzqyouNX772ZxsmcmgbMMSiWeLaWaYyhbEBn9Snoag@mail.gmail.com>
 <1550828377.19847.90.camel@kortschak.io>
Message-ID: <CABrM6wna5B=_0Eh-kg8WMDM3eNpiNU2AUE+s=0nV6m00CajNJw@mail.gmail.com>

On 2/22/19, Dan Kortschak <dan at kortschak.io> wrote:
> '\n' (LF) is 10 in ASCII. Ragel doesn't retain the syntactic
> representation of the value that match is again (though it can render
> the character value as well as the numeric value).
>
> Dan
>
> On Fri, 2019-02-22 at 01:44 -0600, Peng Yu wrote:
>> In the figure above section 2.5.7 (ragel-guide-6.10.pdf), I see "10"
>> on the arrow going from the state of "0" to the state of "0".
>>
>> I think "10" should be "\n" as "10" appear nowhere in the rule `main
>> := /[a-z]*\n/*;`.
>>
>> Is it a typo?
>>
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users


-- 
Regards,
Peng


From pengyu.ut at gmail.com  Fri Feb 22 12:06:00 2019
From: pengyu.ut at gmail.com (Peng Yu)
Date: Fri, 22 Feb 2019 11:06:00 -0600
Subject: [ragel-users] Typo in the figure above section 2.5.7
In-Reply-To: <1550828377.19847.90.camel@kortschak.io>
References: <CABrM6wnnHzqyouNX772ZxsmcmgbMMSiWeLaWaYyhbEBn9Snoag@mail.gmail.com>
 <1550828377.19847.90.camel@kortschak.io>
Message-ID: <CABrM6wk3v=Q=N92_1kKF3-VU7TyxykG5uUVw=onzUoUt-p3Ebw@mail.gmail.com>

> '\n' (LF) is 10 in ASCII. Ragel doesn't retain the syntactic
> representation of the value that match is again (though it can render
> the character value as well as the numeric value).

But if I use the -V option to generate the figure, it is shown as
'\n'. Shouldn't the manual be consistent with the program?

-- 
Regards,
Peng


From pengyu.ut at gmail.com  Fri Feb 22 14:23:33 2019
From: pengyu.ut at gmail.com (Peng Yu)
Date: Fri, 22 Feb 2019 13:23:33 -0600
Subject: [ragel-users] Why not prepend a prefix to variables used by ragel?
Message-ID: <CABrM6wk=QoKP9mL15A8W_cZMgYbX1XKuu=MHbVDQ-LzymaT5-g@mail.gmail.com>

The variables mentioned in section 5.1 "Variables Used by Ragel"
manual are very much like common names. It will be confusing to look
at ragel code written in this way. Why not consider adding a prefix,
e.g., rg_, to them to make it less confusing? Thanks.

- cs
- p
- ...

-- 
Regards,
Peng


From namiheike at gmail.com  Sat Feb 23 02:34:54 2019
From: namiheike at gmail.com (Nami WANG)
Date: Sat, 23 Feb 2019 15:34:54 +0800
Subject: [ragel-users] rust's static lifetime annotation breaks ragel
In-Reply-To: <6f064925c92c48032d5d3ac164888eed@mail.colm.net>
References: <CANnpEN-M9ZL_wPYztTX6PjLrfym7d1BCn_oBHp30e65p3yX4MQ@mail.gmail.com>
 <6f064925c92c48032d5d3ac164888eed@mail.colm.net>
Message-ID: <CANnpEN8ZrqNYrRhtD1P+fd8nvWKGcHKe+tPvfkfFs8nR6eehLg@mail.gmail.com>

Hi, can't repro in the current master either, false alarm I guess.

Cheers

On Fri, Dec 14, 2018, 21:23 Adrian Thurston <thurston at colm.net> wrote:

> Hi Nami, yes not able to figure out this issue. Could you please provide a
> stripped-down example?
>
> Thanks,
>   Adrian
>
> On 2018-12-06 04:45, Nami WANG wrote:
>
> Hi,
>
> I've got an embedded-with-rust ragel file which runs forever.
>
> After some digging, I narrowed down the issue and seems that the static
> lifetime annotations in rust are the problem.
>
> Apparently, codes like
>
>> fn some_fn() -> &'static str { "foo" }
>
> would cause an infinite-loop in ragel.
>
> I'd like to provide a case if you guys couldn't repro the issue.
>
> ref for static lifetimes in rust:
> https://doc.rust-lang.org/book/second-edition/ch10-03-lifetime-syntax.html#the-static-lifetime
>
> Thanks!
>
> --
> Best regards,
>
> Nami WANG
> namiheike at gmail.com
>
> _______________________________________________
> ragel-users mailing listragel-users at colm.nethttp://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20190223/ba660514/attachment.html>

From thurston at colm.net  Sat Feb 23 04:34:33 2019
From: thurston at colm.net (Adrian Thurston)
Date: Sat, 23 Feb 2019 11:34:33 +0200
Subject: [ragel-users] =?utf-8?q?How_to_use_uri=2Erl=3F?=
In-Reply-To: <CABrM6wk4xWpjyJupknDru04c0pXpuKQYt0bFOmQ2R0ew2BwQjg@mail.gmail.com>
References: <CABrM6wk4xWpjyJupknDru04c0pXpuKQYt0bFOmQ2R0ew2BwQjg@mail.gmail.com>
Message-ID: <8e1418e75ae3a43cd738177fc9cd1ab9@mail.colm.net>

You have to add some write statements. It's just an example of ragel 
definitions.

On 2019-02-22 04:47, Peng Yu wrote:
> When I use the following command to compile examples/uri.rl,
> 
> $ ragel -o uri.rl.c uri.rl
> 
> I got an empty file. Does anybody know what is wrong? Thanks.
> 
> $ cat uri.rl.c
> 
> #line 1 "uri.rl"
> 
> #line 31 "uri.rl"


From thurston at colm.net  Sat Feb 23 04:37:39 2019
From: thurston at colm.net (Adrian Thurston)
Date: Sat, 23 Feb 2019 11:37:39 +0200
Subject: [ragel-users]
 =?utf-8?q?What_is_the_purpose_of_=22write_data=22?= =?utf-8?q?=3F?=
In-Reply-To: <CABrM6wmGG=yud+VusZiHV_eoNk-mjhv=8mrQNSVbDbgDq=R3vA@mail.gmail.com>
References: <CABrM6wmGG=yud+VusZiHV_eoNk-mjhv=8mrQNSVbDbgDq=R3vA@mail.gmail.com>
Message-ID: <eb6045a93928d7745c01735835272754@mail.colm.net>

Hi Peng, that comment has been placed in the host language, therefore it 
does not stop the write data statement from emmitting parts of the 
machine.

On 2019-02-22 06:54, Peng Yu wrote:
> Hi,
> 
> I commented out "write data" in awkemu.rl from the examples directory.
> 
> $ diff awkemu.rl awkemu1.rl
> 57c57
> < %% write data noerror nofinal;
> ---
>> #%% write data noerror nofinal;
> 
> But when I compare the generated c files. I don't see any differences.
> What is the purpose of "write data"?
> 
> $ diff awkemu*.c
> 2c2
> < #line 1 "awkemu.rl"
> ---
>> #line 1 "awkemu1.rl"
> 13c13
> < #line 55 "awkemu.rl"
> ---
>> #line 55 "awkemu1.rl"
> 16,17c16,17
> <
> < #line 18 "awkemu.rl.c"
> ---
>> #
>> #line 18 "awkemu1.rl.c"
> 60c60
> < #line 58 "awkemu.rl"
> ---
>> #line 58 "awkemu1.rl"
> 77c77
> < #line 78 "awkemu.rl.c"
> ---
>> #line 78 "awkemu1.rl.c"
> 82c82
> < #line 74 "awkemu.rl"
> ---
>> #line 74 "awkemu1.rl"
> 110c110
> < #line 111 "awkemu.rl.c"
> ---
>> #line 111 "awkemu1.rl.c"
> 182c182
> < #line 13 "awkemu.rl"
> ---
>> #line 13 "awkemu1.rl"
> 188c188
> < #line 17 "awkemu.rl"
> ---
>> #line 17 "awkemu1.rl"
> 194c194
> < #line 21 "awkemu.rl"
> ---
>> #line 21 "awkemu1.rl"
> 201c201
> < #line 26 "awkemu.rl"
> ---
>> #line 26 "awkemu1.rl"
> 214c214
> < #line 215 "awkemu.rl.c"
> ---
>> #line 215 "awkemu1.rl.c"
> 224c224
> < #line 101 "awkemu.rl"
> ---
>> #line 101 "awkemu1.rl"


From thurston at colm.net  Sat Feb 23 04:39:44 2019
From: thurston at colm.net (Adrian Thurston)
Date: Sat, 23 Feb 2019 11:39:44 +0200
Subject: [ragel-users] The meaning of Figure 2.1 in the manual
In-Reply-To: <CABrM6wnGf3rgs157d85P_add266_7n+etbDAqczp43cUDG=cXA@mail.gmail.com>
References: <CABrM6wnGf3rgs157d85P_add266_7n+etbDAqczp43cUDG=cXA@mail.gmail.com>
Message-ID: <f88cc294e25d70997be5bca9d8515e4a@mail.colm.net>

Hi Peng, I recommend you read a bit more of the manual. You'll find all 
the answers there. Thanks!

On 2019-02-22 08:35, Peng Yu wrote:
> Hi,
> 
> I have a hard time to understand the exact meaning of Figure 2.1. I
> understand the regex part.
> 
> But what `0 @{ res = 1; };` means.
> 
> How p and pe are used in `write init` and `write exec`?
> 
> char *p = argv[1];
> char *pe = p + strlen(p) + 1;
> %% write init;
> %% write exec;
> 
> How to make the example on the right-hand-side of Figure 2.1 compiled? 
> Thanks.
> 
> #include <string.h>
> #include <stdio.h>
> %%{
> machine foo;
> main :=
> ( 'foo' | 'bar' )
> 0 @{ res = 1; };
> }%%
> %% write data;
> int main( int argc, char **argv )
> {
> int cs, res = 0;
> if ( argc > 1 ) {
> char *p = argv[1];
> char *pe = p + strlen(p) + 1;
> %% write init;
> %% write exec;
> }
> printf("result = %i\n", res );
> return 0;
> }


From thurston at colm.net  Sat Feb 23 04:52:09 2019
From: thurston at colm.net (Adrian Thurston)
Date: Sat, 23 Feb 2019 11:52:09 +0200
Subject: [ragel-users]
 =?utf-8?q?Why_not_prepend_a_prefix_to_variables_use?=
 =?utf-8?q?d_by_ragel=3F?=
In-Reply-To: <CABrM6wk=QoKP9mL15A8W_cZMgYbX1XKuu=MHbVDQ-LzymaT5-g@mail.gmail.com>
References: <CABrM6wk=QoKP9mL15A8W_cZMgYbX1XKuu=MHbVDQ-LzymaT5-g@mail.gmail.com>
Message-ID: <a4e9886b03e8e6720fee8aed2c3e48d7@mail.colm.net>

You can use the variable and access statements (section 5 of the 
manual).

Changing the default behaviour at this point would break every ragel 
program out there and that's not something I'm interested in doing.

On 2019-02-22 21:23, Peng Yu wrote:
> The variables mentioned in section 5.1 "Variables Used by Ragel"
> manual are very much like common names. It will be confusing to look
> at ragel code written in this way. Why not consider adding a prefix,
> e.g., rg_, to them to make it less confusing? Thanks.
> 
> - cs
> - p
> - ...


From pengyu.ut at gmail.com  Sat Feb 23 06:59:18 2019
From: pengyu.ut at gmail.com (Peng Yu)
Date: Sat, 23 Feb 2019 05:59:18 -0600
Subject: [ragel-users] The meaning of Figure 2.1 in the manual
In-Reply-To: <f88cc294e25d70997be5bca9d8515e4a@mail.colm.net>
References: <CABrM6wnGf3rgs157d85P_add266_7n+etbDAqczp43cUDG=cXA@mail.gmail.com>
 <f88cc294e25d70997be5bca9d8515e4a@mail.colm.net>
Message-ID: <CABrM6wmaLEjwnUG37BPj-x1i0sBn+WJzimdvrVoi=yG2pYVTUw@mail.gmail.com>

Can I recommend adding more examples (not just ragel code snippet, but
complete recipes of minimal working examples, including command line
commands, meanings of input and output, how the generated C code structure
and works, etc). It must be both minimal and working. “Minimal” means, to
show a point, don’t show any code more than necessary to demonstrate the
point. Working means the recipe should just work, it should not require use
to first understand it meaning then add some missing pieces to make it work.

I graduately get what it means in the manual by fill in these holes myself.
But It is too slow. It should not be in this way had the manual were
written in a more new-user friendly manner.

In this specific case, my understanding of its purpose is to just show some
simple ragel code that will run. I’d suggest that you don’t show the “0”.
If you must show it, explain what it means right after showing the example.
What it should not be done is to use it but not explain it. Things like
this just make the manual hard to understand, at it causes cyclic
dependency.

Dose it make sense?


On Sat, Feb 23, 2019 at 3:39 AM Adrian Thurston <thurston at colm.net> wrote:

> Hi Peng, I recommend you read a bit more of the manual. You'll find all
> the answers there. Thanks!
>
> On 2019-02-22 08:35, Peng Yu wrote:
> > Hi,
> >
> > I have a hard time to understand the exact meaning of Figure 2.1. I
> > understand the regex part.
> >
> > But what `0 @{ res = 1; };` means.
> >
> > How p and pe are used in `write init` and `write exec`?
> >
> > char *p = argv[1];
> > char *pe = p + strlen(p) + 1;
> > %% write init;
> > %% write exec;
> >
> > How to make the example on the right-hand-side of Figure 2.1 compiled?
> > Thanks.
> >
> > #include <string.h>
> > #include <stdio.h>
> > %%{
> > machine foo;
> > main :=
> > ( 'foo' | 'bar' )
> > 0 @{ res = 1; };
> > }%%
> > %% write data;
> > int main( int argc, char **argv )
> > {
> > int cs, res = 0;
> > if ( argc > 1 ) {
> > char *p = argv[1];
> > char *pe = p + strlen(p) + 1;
> > %% write init;
> > %% write exec;
> > }
> > printf("result = %i\n", res );
> > return 0;
> > }
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users

-- 
Regards,
Peng
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20190223/157c539a/attachment-0001.html>

From pengyu.ut at gmail.com  Sat Feb 23 07:12:33 2019
From: pengyu.ut at gmail.com (Peng Yu)
Date: Sat, 23 Feb 2019 06:12:33 -0600
Subject: [ragel-users] Why not prepend a prefix to variables used by
	ragel?
In-Reply-To: <a4e9886b03e8e6720fee8aed2c3e48d7@mail.colm.net>
References: <CABrM6wk=QoKP9mL15A8W_cZMgYbX1XKuu=MHbVDQ-LzymaT5-g@mail.gmail.com>
 <a4e9886b03e8e6720fee8aed2c3e48d7@mail.colm.net>
Message-ID: <CABrM6wmB-ALekd-kAZ9Fu29hG4OcLDdp+yeF5b06pRQqibM89w@mail.gmail.com>

This can be easily solved but adding a command line option to enable such
prefixes and the date the prefixes will be enforced (say in 3 years). So
people can have time to migrate their ragel code. This kind of things has
been done all the time. I don’t think it should be an excuse not make the
variable name more readable. “access” can solve the readability problem,
but it also uses an extra structure which changes the meaning of the code.
I will check “variable” later.

BTW, how many uses of ragel anyway? It seems to have a far less user base
than flex. My impression is that people uses it because it can offer
something flex does not offer. However, flex can already solve a lot of
lexing problems. So there will be much less users use ragel than flex. This
can be shown by the numbers of questions on stack overflow and the numbers
of projects on github.

On Sat, Feb 23, 2019 at 3:52 AM Adrian Thurston <thurston at colm.net> wrote:

> You can use the variable and access statements (section 5 of the
> manual).
>
> Changing the default behaviour at this point would break every ragel
> program out there and that's not something I'm interested in doing.
>
> On 2019-02-22 21:23, Peng Yu wrote:
> > The variables mentioned in section 5.1 "Variables Used by Ragel"
> > manual are very much like common names. It will be confusing to look
> > at ragel code written in this way. Why not consider adding a prefix,
> > e.g., rg_, to them to make it less confusing? Thanks.
> >
> > - cs
> > - p
> > - ...
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users

-- 
Regards,
Peng
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20190223/610a8a5b/attachment.html>

From nate at n4te.com  Sat Feb 23 07:23:56 2019
From: nate at n4te.com (Nate)
Date: Sat, 23 Feb 2019 13:23:56 +0100
Subject: [ragel-users] Why not prepend a prefix to variables used by
	ragel?
In-Reply-To: <CABrM6wmB-ALekd-kAZ9Fu29hG4OcLDdp+yeF5b06pRQqibM89w@mail.gmail.com>
References: <CABrM6wk=QoKP9mL15A8W_cZMgYbX1XKuu=MHbVDQ-LzymaT5-g@mail.gmail.com>
 <a4e9886b03e8e6720fee8aed2c3e48d7@mail.colm.net>
 <CABrM6wmB-ALekd-kAZ9Fu29hG4OcLDdp+yeF5b06pRQqibM89w@mail.gmail.com>
Message-ID: <CAMbQhQk5ZAsF2uyOsY+5BxThgQ=jVjeJ+DE=EeBCY=sN0dghnQ@mail.gmail.com>

FWIW, an "rg_" prefix isn't making anything less confusing. I'd prefer
actual variable names that indicate what each is for, as one might use if
writing the code by hand (math people excluded!). I agree it could be a
setting, disabled by default so existing users are not disrupted.


On Sat, Feb 23, 2019 at 1:12 PM Peng Yu <pengyu.ut at gmail.com> wrote:

> This can be easily solved but adding a command line option to enable such
> prefixes and the date the prefixes will be enforced (say in 3 years). So
> people can have time to migrate their ragel code. This kind of things has
> been done all the time. I don’t think it should be an excuse not make the
> variable name more readable. “access” can solve the readability problem,
> but it also uses an extra structure which changes the meaning of the code.
> I will check “variable” later.
>
> BTW, how many uses of ragel anyway? It seems to have a far less user base
> than flex. My impression is that people uses it because it can offer
> something flex does not offer. However, flex can already solve a lot of
> lexing problems. So there will be much less users use ragel than flex. This
> can be shown by the numbers of questions on stack overflow and the numbers
> of projects on github.
>
> On Sat, Feb 23, 2019 at 3:52 AM Adrian Thurston <thurston at colm.net> wrote:
>
>> You can use the variable and access statements (section 5 of the
>> manual).
>>
>> Changing the default behaviour at this point would break every ragel
>> program out there and that's not something I'm interested in doing.
>>
>> On 2019-02-22 21:23, Peng Yu wrote:
>> > The variables mentioned in section 5.1 "Variables Used by Ragel"
>> > manual are very much like common names. It will be confusing to look
>> > at ragel code written in this way. Why not consider adding a prefix,
>> > e.g., rg_, to them to make it less confusing? Thanks.
>> >
>> > - cs
>> > - p
>> > - ...
>>
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at colm.net
>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>
> --
> Regards,
> Peng
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20190223/3214f868/attachment.html>

From nate at n4te.com  Sat Feb 23 07:30:42 2019
From: nate at n4te.com (Nate)
Date: Sat, 23 Feb 2019 13:30:42 +0100
Subject: [ragel-users] The meaning of Figure 2.1 in the manual
In-Reply-To: <CABrM6wmaLEjwnUG37BPj-x1i0sBn+WJzimdvrVoi=yG2pYVTUw@mail.gmail.com>
References: <CABrM6wnGf3rgs157d85P_add266_7n+etbDAqczp43cUDG=cXA@mail.gmail.com>
 <f88cc294e25d70997be5bca9d8515e4a@mail.colm.net>
 <CABrM6wmaLEjwnUG37BPj-x1i0sBn+WJzimdvrVoi=yG2pYVTUw@mail.gmail.com>
Message-ID: <CAMbQhQmKkEtDx+1vjp2ARLV6bJeNhNuck2-Ejq080+v6aoLOgA@mail.gmail.com>

Something like this doesn't necessarily need to go in the manual. Ragel
would benefit from tutorial-style articles that show how to use Ragel to
parse something simple and then progressively introduce more Ragel
features. Eg, how to use Ragel to parse C-style single line comments, then
how to add multi-line comments to that, etc. It's a lot easier to toy with
executable example code that is similar to the problem you need to solve
yourself than it is to create your own learning examples solely by reading
the manual.

Note that this is a great candidate for community contribution. Ragel is
great so if you have the time and inkling, writing such articles is a good
way to give back -- the beauty of open source!


On Sat, Feb 23, 2019 at 12:59 PM Peng Yu <pengyu.ut at gmail.com> wrote:

> Can I recommend adding more examples (not just ragel code snippet, but
> complete recipes of minimal working examples, including command line
> commands, meanings of input and output, how the generated C code structure
> and works, etc). It must be both minimal and working. “Minimal” means, to
> show a point, don’t show any code more than necessary to demonstrate the
> point. Working means the recipe should just work, it should not require use
> to first understand it meaning then add some missing pieces to make it work.
>
> I graduately get what it means in the manual by fill in these holes
> myself. But It is too slow. It should not be in this way had the manual
> were written in a more new-user friendly manner.
>
> In this specific case, my understanding of its purpose is to just show
> some simple ragel code that will run. I’d suggest that you don’t show the
> “0”. If you must show it, explain what it means right after showing the
> example. What it should not be done is to use it but not explain it. Things
> like this just make the manual hard to understand, at it causes cyclic
> dependency.
>
> Dose it make sense?
>
>
> On Sat, Feb 23, 2019 at 3:39 AM Adrian Thurston <thurston at colm.net> wrote:
>
>> Hi Peng, I recommend you read a bit more of the manual. You'll find all
>> the answers there. Thanks!
>>
>> On 2019-02-22 08:35, Peng Yu wrote:
>> > Hi,
>> >
>> > I have a hard time to understand the exact meaning of Figure 2.1. I
>> > understand the regex part.
>> >
>> > But what `0 @{ res = 1; };` means.
>> >
>> > How p and pe are used in `write init` and `write exec`?
>> >
>> > char *p = argv[1];
>> > char *pe = p + strlen(p) + 1;
>> > %% write init;
>> > %% write exec;
>> >
>> > How to make the example on the right-hand-side of Figure 2.1 compiled?
>> > Thanks.
>> >
>> > #include <string.h>
>> > #include <stdio.h>
>> > %%{
>> > machine foo;
>> > main :=
>> > ( 'foo' | 'bar' )
>> > 0 @{ res = 1; };
>> > }%%
>> > %% write data;
>> > int main( int argc, char **argv )
>> > {
>> > int cs, res = 0;
>> > if ( argc > 1 ) {
>> > char *p = argv[1];
>> > char *pe = p + strlen(p) + 1;
>> > %% write init;
>> > %% write exec;
>> > }
>> > printf("result = %i\n", res );
>> > return 0;
>> > }
>>
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at colm.net
>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>
> --
> Regards,
> Peng
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20190223/4d93548b/attachment.html>

From daniel at lunix.se  Sat Feb 23 07:29:31 2019
From: daniel at lunix.se (Daniel Beecham)
Date: Sat, 23 Feb 2019 13:29:31 +0100
Subject: [ragel-users] Why not prepend a prefix to variables used by
	ragel?
In-Reply-To: <CABrM6wmB-ALekd-kAZ9Fu29hG4OcLDdp+yeF5b06pRQqibM89w@mail.gmail.com>
References: <CABrM6wk=QoKP9mL15A8W_cZMgYbX1XKuu=MHbVDQ-LzymaT5-g@mail.gmail.com>
 <a4e9886b03e8e6720fee8aed2c3e48d7@mail.colm.net>
 <CABrM6wmB-ALekd-kAZ9Fu29hG4OcLDdp+yeF5b06pRQqibM89w@mail.gmail.com>
Message-ID: <CAAVTe0ZJxUK43KrqXes-LHh-4dvfeQ86mQy1TcXm80Ygu6FNLQ@mail.gmail.com>

I don’t find the variable names to particularly confusing - we usually have
a function

int something_parse(struct something_parser_s * parser, char * buf, int
buf_len) {
  char * p = buf;
  char * pe = buf + buf_len;
  %%write exec;
}

Which is pretty easy to read. The cs variable is stored in the structure,
which gives us partial reads for free; so a rg_ prefix isn’t very necessary
there either. (parser->cs reads like “parsers current state”, which is good
enough I think).

If you feel strongly about it, variable can solve your readability problems.

lör 23 feb. 2019 kl. 13:12 skrev Peng Yu <pengyu.ut at gmail.com>:

> This can be easily solved but adding a command line option to enable such
> prefixes and the date the prefixes will be enforced (say in 3 years). So
> people can have time to migrate their ragel code. This kind of things has
> been done all the time. I don’t think it should be an excuse not make the
> variable name more readable. “access” can solve the readability problem,
> but it also uses an extra structure which changes the meaning of the code.
> I will check “variable” later.
>
> BTW, how many uses of ragel anyway? It seems to have a far less user base
> than flex. My impression is that people uses it because it can offer
> something flex does not offer. However, flex can already solve a lot of
> lexing problems. So there will be much less users use ragel than flex. This
> can be shown by the numbers of questions on stack overflow and the numbers
> of projects on github.
>
> On Sat, Feb 23, 2019 at 3:52 AM Adrian Thurston <thurston at colm.net> wrote:
>
>> You can use the variable and access statements (section 5 of the
>> manual).
>>
>> Changing the default behaviour at this point would break every ragel
>> program out there and that's not something I'm interested in doing.
>>
>> On 2019-02-22 21:23, Peng Yu wrote:
>> > The variables mentioned in section 5.1 "Variables Used by Ragel"
>> > manual are very much like common names. It will be confusing to look
>> > at ragel code written in this way. Why not consider adding a prefix,
>> > e.g., rg_, to them to make it less confusing? Thanks.
>> >
>> > - cs
>> > - p
>> > - ...
>>
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at colm.net
>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>
> --
> Regards,
> Peng
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20190223/33ece25c/attachment-0001.html>

From nate at n4te.com  Sat Feb 23 07:39:06 2019
From: nate at n4te.com (Nate)
Date: Sat, 23 Feb 2019 13:39:06 +0100
Subject: [ragel-users] Why not prepend a prefix to variables used by
	ragel?
In-Reply-To: <CAAVTe0ZJxUK43KrqXes-LHh-4dvfeQ86mQy1TcXm80Ygu6FNLQ@mail.gmail.com>
References: <CABrM6wk=QoKP9mL15A8W_cZMgYbX1XKuu=MHbVDQ-LzymaT5-g@mail.gmail.com>
 <a4e9886b03e8e6720fee8aed2c3e48d7@mail.colm.net>
 <CABrM6wmB-ALekd-kAZ9Fu29hG4OcLDdp+yeF5b06pRQqibM89w@mail.gmail.com>
 <CAAVTe0ZJxUK43KrqXes-LHh-4dvfeQ86mQy1TcXm80Ygu6FNLQ@mail.gmail.com>
Message-ID: <CAMbQhQ=YrNfG0SkG_1JMfeMbAqB2G2DannkyZGuGa5po-L308Q@mail.gmail.com>

Using function parameters as you've done helps a little, but embedded
actions need to deal directly with the Ragel variable names. IMHO, there is
almost no case where single or two letter abbreviations can be considered
readable. I can get by with it of course, it's just not super pleasant.


On Sat, Feb 23, 2019 at 1:29 PM Daniel Beecham <daniel at lunix.se> wrote:

> I don’t find the variable names to particularly confusing - we usually
> have a function
>
> int something_parse(struct something_parser_s * parser, char * buf, int
> buf_len) {
>   char * p = buf;
>   char * pe = buf + buf_len;
>   %%write exec;
> }
>
> Which is pretty easy to read. The cs variable is stored in the structure,
> which gives us partial reads for free; so a rg_ prefix isn’t very necessary
> there either. (parser->cs reads like “parsers current state”, which is good
> enough I think).
>
> If you feel strongly about it, variable can solve your readability
> problems.
>
> lör 23 feb. 2019 kl. 13:12 skrev Peng Yu <pengyu.ut at gmail.com>:
>
>> This can be easily solved but adding a command line option to enable such
>> prefixes and the date the prefixes will be enforced (say in 3 years). So
>> people can have time to migrate their ragel code. This kind of things has
>> been done all the time. I don’t think it should be an excuse not make the
>> variable name more readable. “access” can solve the readability problem,
>> but it also uses an extra structure which changes the meaning of the code.
>> I will check “variable” later.
>>
>> BTW, how many uses of ragel anyway? It seems to have a far less user base
>> than flex. My impression is that people uses it because it can offer
>> something flex does not offer. However, flex can already solve a lot of
>> lexing problems. So there will be much less users use ragel than flex. This
>> can be shown by the numbers of questions on stack overflow and the numbers
>> of projects on github.
>>
>> On Sat, Feb 23, 2019 at 3:52 AM Adrian Thurston <thurston at colm.net>
>> wrote:
>>
>>> You can use the variable and access statements (section 5 of the
>>> manual).
>>>
>>> Changing the default behaviour at this point would break every ragel
>>> program out there and that's not something I'm interested in doing.
>>>
>>> On 2019-02-22 21:23, Peng Yu wrote:
>>> > The variables mentioned in section 5.1 "Variables Used by Ragel"
>>> > manual are very much like common names. It will be confusing to look
>>> > at ragel code written in this way. Why not consider adding a prefix,
>>> > e.g., rg_, to them to make it less confusing? Thanks.
>>> >
>>> > - cs
>>> > - p
>>> > - ...
>>>
>>> _______________________________________________
>>> ragel-users mailing list
>>> ragel-users at colm.net
>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>>
>> --
>> Regards,
>> Peng
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at colm.net
>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20190223/72223e53/attachment.html>

From pengyu.ut at gmail.com  Sat Feb 23 07:42:29 2019
From: pengyu.ut at gmail.com (Peng Yu)
Date: Sat, 23 Feb 2019 06:42:29 -0600
Subject: [ragel-users] The meaning of Figure 2.1 in the manual
In-Reply-To: <CAMbQhQmKkEtDx+1vjp2ARLV6bJeNhNuck2-Ejq080+v6aoLOgA@mail.gmail.com>
References: <CABrM6wnGf3rgs157d85P_add266_7n+etbDAqczp43cUDG=cXA@mail.gmail.com>
 <f88cc294e25d70997be5bca9d8515e4a@mail.colm.net>
 <CABrM6wmaLEjwnUG37BPj-x1i0sBn+WJzimdvrVoi=yG2pYVTUw@mail.gmail.com>
 <CAMbQhQmKkEtDx+1vjp2ARLV6bJeNhNuck2-Ejq080+v6aoLOgA@mail.gmail.com>
Message-ID: <CABrM6w=0iLutUi+-8sGYQG5iAfjTznoZc37id92Bj+Ob_+uhYw@mail.gmail.com>

> Note that this is a great candidate for community contribution. Ragel is
> great so if you have the time and inkling, writing such articles is a good
> way to give back -- the beauty of open source!

These should go into test cases in the first place at the time of
creating ragel instead of waiting for someone to add them later.

-- 
Regards,
Peng


From thurston at colm.net  Sat Feb 23 07:59:01 2019
From: thurston at colm.net (Adrian Thurston)
Date: Sat, 23 Feb 2019 14:59:01 +0200
Subject: [ragel-users]
 =?utf-8?q?Why_not_prepend_a_prefix_to_variables_use?=
 =?utf-8?q?d_by_ragel=3F?=
In-Reply-To: <CABrM6wmB-ALekd-kAZ9Fu29hG4OcLDdp+yeF5b06pRQqibM89w@mail.gmail.com>
References: <CABrM6wk=QoKP9mL15A8W_cZMgYbX1XKuu=MHbVDQ-LzymaT5-g@mail.gmail.com>
 <a4e9886b03e8e6720fee8aed2c3e48d7@mail.colm.net>
 <CABrM6wmB-ALekd-kAZ9Fu29hG4OcLDdp+yeF5b06pRQqibM89w@mail.gmail.com>
Message-ID: <4c382006fd1b79cd7eb333aa1f1f953d@mail.colm.net>

 

Sorry but creating an unnecessary three-year countdown to breaking all
ragel programs ever written spectacularly fails cost-benefit analysis
over my finite time and energy on this planet. 

I do not know how many users there are. 

Lexical analysis is not the primary function of ragel. It's something it
does. It's intended for expressing a parser as a single regular (ish)
grammar. 

On 2019-02-23 14:12, Peng Yu wrote: 

> This can be easily solved but adding a command line option to enable such prefixes and the date the prefixes will be enforced (say in 3 years). So people can have time to migrate their ragel code. This kind of things has been done all the time. I don't think it should be an excuse not make the variable name more readable. "access" can solve the readability problem, but it also uses an extra structure which changes the meaning of the code. I will check "variable" later. 
> 
> BTW, how many uses of ragel anyway? It seems to have a far less user base than flex. My impression is that people uses it because it can offer something flex does not offer. However, flex can already solve a lot of lexing problems. So there will be much less users use ragel than flex. This can be shown by the numbers of questions on stack overflow and the numbers of projects on github. 
> 
> On Sat, Feb 23, 2019 at 3:52 AM Adrian Thurston <thurston at colm.net> wrote: 
> 
>> You can use the variable and access statements (section 5 of the 
>> manual).
>> 
>> Changing the default behaviour at this point would break every ragel 
>> program out there and that's not something I'm interested in doing.
>> 
>> On 2019-02-22 21:23, Peng Yu wrote:
>>> The variables mentioned in section 5.1 "Variables Used by Ragel"
>>> manual are very much like common names. It will be confusing to look
>>> at ragel code written in this way. Why not consider adding a prefix,
>>> e.g., rg_, to them to make it less confusing? Thanks.
>>> 
>>> - cs
>>> - p
>>> - ...
>> 
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at colm.net
>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users [1]
> -- 
> 
> Regards,
> Peng 
> 
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users [1]
 

Links:
------
[1] http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20190223/224272e7/attachment.html>

From nate at n4te.com  Sat Feb 23 08:29:00 2019
From: nate at n4te.com (Nate)
Date: Sat, 23 Feb 2019 14:29:00 +0100
Subject: [ragel-users] The meaning of Figure 2.1 in the manual
In-Reply-To: <CABrM6w=0iLutUi+-8sGYQG5iAfjTznoZc37id92Bj+Ob_+uhYw@mail.gmail.com>
References: <CABrM6wnGf3rgs157d85P_add266_7n+etbDAqczp43cUDG=cXA@mail.gmail.com>
 <f88cc294e25d70997be5bca9d8515e4a@mail.colm.net>
 <CABrM6wmaLEjwnUG37BPj-x1i0sBn+WJzimdvrVoi=yG2pYVTUw@mail.gmail.com>
 <CAMbQhQmKkEtDx+1vjp2ARLV6bJeNhNuck2-Ejq080+v6aoLOgA@mail.gmail.com>
 <CABrM6w=0iLutUi+-8sGYQG5iAfjTznoZc37id92Bj+Ob_+uhYw@mail.gmail.com>
Message-ID: <CAMbQhQk8hOvQvkKyJ6Wxn3XM3p=O8+p7AAET=YGekR_z1n34Pw@mail.gmail.com>

> These should go into test cases in the first place at the time of
> creating ragel instead of waiting for someone to add them later.
>

No, what I described is not a test case at all. We were discussing learning
materials, not testing.

You seem to have a strange attitude. FOSS is provided to you for free and
you are not owed anything at all. If you don't like it or find it lacking,
then contribute instead of complaining.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20190223/a834176f/attachment.html>

From Mark.Olesen at esi-group.com  Sat Feb 23 12:33:15 2019
From: Mark.Olesen at esi-group.com (Mark Olesen)
Date: Sat, 23 Feb 2019 17:33:15 +0000
Subject: [ragel-users] Why not prepend a prefix to variables used by
 ragel?
In-Reply-To: <4c382006fd1b79cd7eb333aa1f1f953d@mail.colm.net>
References: <CABrM6wk=QoKP9mL15A8W_cZMgYbX1XKuu=MHbVDQ-LzymaT5-g@mail.gmail.com>
 <a4e9886b03e8e6720fee8aed2c3e48d7@mail.colm.net>
 <CABrM6wmB-ALekd-kAZ9Fu29hG4OcLDdp+yeF5b06pRQqibM89w@mail.gmail.com>
 <4c382006fd1b79cd7eb333aa1f1f953d@mail.colm.net>
Message-ID: <9c204e64-06a5-bbb4-1e01-da338dc8f05a@esi-group.com>

I'm one of the first ones to complain about bad variable names etc., but 
never had a problem with the ragel names at all. The names are short 
enough to manage, never conflict with my own variable names which tend 
to be much longer anyhow. The places where I need the ragel parsing 
tends to be of limited code scope, so there is no real danger of 
stomping on other variables either.

For what it's worth, you may find some ideas from the following grammars
1. a C/C++ #include dependency scanner with hashing that is usually 
about 30-40% faster than using cpp.

Machine definition at line 310. The processing itself at line 370, 
encapsulated in a special-purpose method.

https://develop.openfoam.com/Development/OpenFOAM-plus/blob/master/wmake/src/wmkdepend.rl


2. a lexer for parsing STL ascii files.
Which I guess should probably be rejigged to be a state machine instead.
Here again the details of the parser are isolated in an execute() method.

https://develop.openfoam.com/Development/OpenFOAM-plus/blob/master/src/fileFormats/stl/STLAsciiParseRagel.rl


/mark


On 2/23/19 1:59 PM, Adrian Thurston wrote:
> Sorry but creating an unnecessary three-year countdown to breaking all 
> ragel programs ever written spectacularly fails cost-benefit analysis 
> over my finite time and energy on this planet.
> 
> I do not know how many users there are.
> 
> Lexical analysis is not the primary function of ragel. It's something it 
> does. It's intended for expressing a parser as a single regular (ish) 
> grammar.
> 
> On 2019-02-23 14:12, Peng Yu wrote:
> 
>> This can be easily solved but adding a command line option to enable 
>> such prefixes and the date the prefixes will be enforced (say in 3 
>> years). So people can have time to migrate their ragel code. This kind 
>> of things has been done all the time. I don't think it should be an 
>> excuse not make the variable name more readable. "access" can solve 
>> the readability problem, but it also uses an extra structure which 
>> changes the meaning of the code. I will check "variable" later.
>> BTW, how many uses of ragel anyway? It seems to have a far less user 
>> base than flex. My impression is that people uses it because it can 
>> offer something flex does not offer. However, flex can already solve a 
>> lot of lexing problems. So there will be much less users use ragel 
>> than flex. This can be shown by the numbers of questions on stack 
>> overflow and the numbers of projects on github.
>>
>> On Sat, Feb 23, 2019 at 3:52 AM Adrian Thurston <thurston at colm.net 
>> <mailto:thurston at colm.net>> wrote:
>>
>>     You can use the variable and access statements (section 5 of the
>>     manual).
>>
>>     Changing the default behaviour at this point would break every ragel
>>     program out there and that's not something I'm interested in doing.
>>
>>     On 2019-02-22 21:23, Peng Yu wrote:
>>     > The variables mentioned in section 5.1 "Variables Used by Ragel"
>>     > manual are very much like common names. It will be confusing to look
>>     > at ragel code written in this way. Why not consider adding a prefix,
>>     > e.g., rg_, to them to make it less confusing? Thanks.
>>     >
>>     > - cs
>>     > - p
>>     > - ...
>>
>>     _______________________________________________
>>     ragel-users mailing list
>>     ragel-users at colm.net <mailto:ragel-users at colm.net>
>>     http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>>
>> -- 
>> Regards,
>> Peng
>>
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at colm.net  <mailto:ragel-users at colm.net>
>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
> 
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
> 

-- 
Dr Mark OLESEN
Principal Engineer, ESI-OpenCFD
Engineering System International GmbH | Einsteinring 24 | 85609 Munich
Mob. +49 171 9710 149
www.openfoam.com | www.esi-group.com | mark.olesen at esi-group.com

