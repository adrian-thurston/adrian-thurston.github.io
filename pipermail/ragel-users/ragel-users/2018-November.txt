From thurston at colm.net  Thu Nov  1 07:53:17 2018
From: thurston at colm.net (Adrian Thurston)
Date: Thu, 01 Nov 2018 08:53:17 -0300
Subject: [ragel-users] How to process a block of random sized data
In-Reply-To: <664d10b287c4443d8d963473969f9878@esentire.com>
References: <664d10b287c4443d8d963473969f9878@esentire.com>
Message-ID: <e960f80060b741d4d10b2bfa7243d178@mail.colm.net>

 

Hi Ming, 

Ragel has no support for this built in. I use a class for this that
tracks the start of the interesting input and flushes it out when
necessary. The start and finish functions are called from ragel actions.
The preExec and postExec functions are called before and after the ragel
write exec. See attached example. 

In my uses I expand it to include start and finish functions on the
expensive thing (also a stream processor), and I can also pause it to
skip over some data that shouldn't go to expensive thing. 

I've often thought about building this support into ragel, but once
you've got the class made it's super easy to reuse it in many different
cases. 

Regards, 

 Adrian 

On 2018-10-31 16:48, Ming Fu wrote: 

> Hi, 
> 
> I have the following ragel rule: 
> 
> any* $( 
> 
> Some_expensive_call(*p) 
> 
> } 
> 
> However, I do not necessary have to make the some_expensive_call per input char, I can call some_less_expensive_call(*p, len) to be more efficient. 
> 
> How do I figure out the len and adjust pe. Consider the input may not be in contiguous memory block. 
> 
> Thanks, 
> 
> Ming 
> 
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users [1]
 

Links:
------
[1] http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20181101/13a7260d/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: blockexec.cc
Type: text/x-c
Size: 655 bytes
Desc: not available
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20181101/13a7260d/attachment.bin>

From dgryski at gmail.com  Thu Nov  1 09:12:32 2018
From: dgryski at gmail.com (Damian Gryski)
Date: Thu, 1 Nov 2018 06:12:32 -0700
Subject: [ragel-users] "declared but not used" errors with v7 Go backend
Message-ID: <CANjWZxO-003scd2aH_A28GF5br6Gv+C-HsZFdsuhHS75Zh1x9A@mail.gmail.com>

This is with ragel 7.0.0.11 and colm 0.13.0.6.  I was unable to get ragel
to build from git.

With the example grammar at github.com/dgryski/ragel-examples/regexp1, I
get the following error:

$ ragel-go sshd.rl
$ go build
# github.com/dgryski/ragel-examples/regexp1
./sshd.go:11:6: _scanner_trans_cond_spaces declared and not used
./sshd.go:12:6: _scanner_trans_offsets declared and not used
./sshd.go:13:6: _scanner_trans_lengths declared and not used
./sshd.go:14:6: _scanner_cond_keys declared and not used
./sshd.go:17:6: _scanner_eof_cond_spaces declared and not used
./sshd.go:18:6: _scanner_eof_cond_key_offs declared and not used
./sshd.go:19:6: _scanner_eof_cond_key_lens declared and not used
./sshd.go:20:6: _scanner_eof_cond_keys declared and not used
./sshd.go:21:6: _scanner_nfa_targs declared and not used
./sshd.go:22:6: _scanner_nfa_offsets declared and not used
./sshd.go:22:6: too many errors

The usual solution to this in autogenerated code is to assign them to `_`,
the underscore "blank variable".  This satisfies the compiler and the
entire array will be eliminated as a dead-store if it ends up not being
used.

Thus, each declaration for variables which may or may not be used will look
like:
var _scanner_trans_cond_spaces [] int8  = [] int8  { ... }
_ = _scanner_trans_cond_space

Note also the first `[] int8` is redundant -- the compiler will infer the
type from the type of the array on the right hand side of the `=`.

Fixing these issues in the Go template in the src/host-go directory and
rebuilding fixed these errors (although I had to copy files from the git
checkout for the template changes to recompile successfully).

Damian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20181101/89fbb803/attachment.html>

From Ming.Fu at esentire.com  Thu Nov  1 09:27:28 2018
From: Ming.Fu at esentire.com (Ming Fu)
Date: Thu, 1 Nov 2018 13:27:28 +0000
Subject: [ragel-users] How to process a block of random sized data
In-Reply-To: <e960f80060b741d4d10b2bfa7243d178@mail.colm.net>
References: <664d10b287c4443d8d963473969f9878@esentire.com>
 <e960f80060b741d4d10b2bfa7243d178@mail.colm.net>
Message-ID: <76bb1cdb6da949cebd29d53a573b1016@esentire.com>

Hi Adrian,

I was worried about the case when the input is not in contiguous memory. I will need to call the finish when the input is at the end of a block and restart class at the beginning of next block. Is there a way to know the current *p is the last byte of a block?

Thanks
Ming

From: Adrian Thurston <thurston at colm.net>
Sent: November 1, 2018 7:53 AM
To: ragel-users at colm.net
Cc: Ming Fu <Ming.Fu at esentire.com>
Subject: Re: [ragel-users] How to process a block of random sized data


Hi Ming,

Ragel has no support for this built in. I use a class for this that tracks the start of the interesting input and flushes it out when necessary. The start and finish functions are called from ragel actions. The preExec and postExec functions are called before and after the ragel write exec. See attached example.

In my uses I expand it to include start and finish functions on the expensive thing (also a stream processor), and I can also pause it to skip over some data that shouldn't go to expensive thing.

I've often thought about building this support into ragel, but once you've got the class made it's super easy to reuse it in many different cases.

Regards,

 Adrian

On 2018-10-31 16:48, Ming Fu wrote:
Hi,

I have the following ragel rule:

any* $(
                Some_expensive_call(*p)
}

However, I do not necessary have to make the some_expensive_call per input char, I can call some_less_expensive_call(*p, len) to be more efficient.
How do I figure out the len and adjust pe. Consider the input may not be in contiguous memory block.

Thanks,
Ming


_______________________________________________

ragel-users mailing list

ragel-users at colm.net<mailto:ragel-users at colm.net>

http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20181101/a061a47e/attachment-0001.html>

From thurston at colm.net  Thu Nov  1 10:08:55 2018
From: thurston at colm.net (thurston at colm.net)
Date: Thu, 1 Nov 2018 14:08:55 +0000 (UTC)
Subject: [ragel-users] How to process a block of random sized data
In-Reply-To: <76bb1cdb6da949cebd29d53a573b1016@esentire.com>
References: <664d10b287c4443d8d963473969f9878@esentire.com>
 <e960f80060b741d4d10b2bfa7243d178@mail.colm.net>
 <76bb1cdb6da949cebd29d53a573b1016@esentire.com>
Message-ID: <859096DF301B65C1.f4b79bd0-e76c-4e5c-9b9d-31709aa1454a@mail.outlook.com>

That's what the pre exec and post exec functions are for. Call them on either side of the write-exec of your ragel program. 




Get Outlook for Android







On Thu, Nov 1, 2018 at 10:27 AM -0300, "Ming Fu" <Ming.Fu at esentire.com> wrote:




















Hi Adrian,


 


I was worried about the case when the input is not in contiguous memory. I will need to call the finish when the input is at the end
 of a block and restart class at the beginning of next block. Is there a way to know the current *p is the last byte of a block?


 


Thanks


Ming


 




From: Adrian Thurston <thurston at colm.net>


Sent: November 1, 2018 7:53 AM

To: ragel-users at colm.net

Cc: Ming Fu <Ming.Fu at esentire.com>

Subject: Re: [ragel-users] How to process a block of random sized data




 


Hi Ming,


Ragel has no support for this built in. I use a class for this that tracks the start of the interesting input and flushes it out when necessary. The start and finish functions are called from
 ragel actions. The preExec and postExec functions are called before and after the ragel write exec. See attached example.


In my uses I expand it to include start and finish functions on the expensive thing (also a stream processor), and I can also pause it to skip over some data that shouldn't go to expensive thing.


I've often thought about building this support into ragel, but once you've got the class made it's super easy to reuse it in many different cases.


Regards,


 Adrian


On 2018-10-31 16:48, Ming Fu wrote:




Hi,


 


I have the following ragel rule:


 


any* $(


                Some_expensive_call(*p)


}


 


However, I do not necessary have to make the some_expensive_call per input char, I can call some_less_expensive_call(*p,
 len) to be more efficient.


How do I figure out the len and adjust pe. Consider the input may not be in contiguous memory block.


 


Thanks,


Ming



 
_______________________________________________
ragel-users mailing list
ragel-users at colm.net
http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users









-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20181101/8ebc0a95/attachment.html>

From thurston at colm.net  Fri Nov  2 08:28:43 2018
From: thurston at colm.net (Adrian Thurston)
Date: Fri, 02 Nov 2018 09:28:43 -0300
Subject: [ragel-users] "declared but not used" errors with v7 Go backend
In-Reply-To: <CANjWZxO-003scd2aH_A28GF5br6Gv+C-HsZFdsuhHS75Zh1x9A@mail.gmail.com>
References: <CANjWZxO-003scd2aH_A28GF5br6Gv+C-HsZFdsuhHS75Zh1x9A@mail.gmail.com>
Message-ID: <0f8839511d7755b1819e8eb6e2cd4de1@mail.colm.net>

 

Still a problem in master. The unused arrays should be eliminated from
the code generation because they cause warnings in other languages as
well. But using _ is a nice workaround at present. 

Thanks! 

Adrian 

On 2018-11-01 10:12, Damian Gryski wrote: 

> This is with ragel 7.0.0.11 and colm 0.13.0.6. I was unable to get ragel to build from git. 
> 
> With the example grammar at github.com/dgryski/ragel-examples/regexp1 [2], I get the following error: 
> 
> $ ragel-go sshd.rl 
> $ go build 
> # github.com/dgryski/ragel-examples/regexp1 [2] 
> ./sshd.go:11:6: _scanner_trans_cond_spaces declared and not used 
> ./sshd.go:12:6: _scanner_trans_offsets declared and not used 
> ./sshd.go:13:6: _scanner_trans_lengths declared and not used 
> ./sshd.go:14:6: _scanner_cond_keys declared and not used 
> ./sshd.go:17:6: _scanner_eof_cond_spaces declared and not used 
> ./sshd.go:18:6: _scanner_eof_cond_key_offs declared and not used 
> ./sshd.go:19:6: _scanner_eof_cond_key_lens declared and not used 
> ./sshd.go:20:6: _scanner_eof_cond_keys declared and not used 
> ./sshd.go:21:6: _scanner_nfa_targs declared and not used 
> ./sshd.go:22:6: _scanner_nfa_offsets declared and not used 
> ./sshd.go:22:6: too many errors 
> 
> The usual solution to this in autogenerated code is to assign them to `_`, the underscore "blank variable". This satisfies the compiler and the entire array will be eliminated as a dead-store if it ends up not being used. 
> 
> Thus, each declaration for variables which may or may not be used will look like: 
> var _scanner_trans_cond_spaces [] int8 = [] int8 { ... } 
> _ = _scanner_trans_cond_space 
> 
> Note also the first `[] int8` is redundant -- the compiler will infer the type from the type of the array on the right hand side of the `=`. 
> 
> Fixing these issues in the Go template in the src/host-go directory and rebuilding fixed these errors (although I had to copy files from the git checkout for the template changes to recompile successfully). 
> 
> Damian 
> 
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users [1]
 

Links:
------
[1] http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
[2] http://github.com/dgryski/ragel-examples/regexp1
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20181102/3d01ee14/attachment.html>

From dan at kortschak.io  Thu Nov 15 03:01:43 2018
From: dan at kortschak.io (Dan Kortschak)
Date: Thu, 15 Nov 2018 18:31:43 +1030
Subject: [ragel-users] Go target with 7.0.0.11?
Message-ID: <1542268903.21585.8.camel@kortschak.io>

I'm delighted to see the decision to reinclude the additional target
languages as noted in [1].

The help screed from ragel v7.0.0.11 says that it will target a variety
of languages, including Go. However, it looks to me like the -Z is
being ignored; when I tried running ragel on an old rl file that I
wrote for 6.8 I had a failure with '"byte" is not a valid alphabet
type'. I looked at the examples in the ragel repo in examples/go and
these generate C code when built with the instructions there.

Is the help screed jumping the gun or is there a problem in the
invocation, or something deeper?

thanks

[1]https://www.colm.net/news/2018/05/18/new-target-langs.html


From dgryski at gmail.com  Thu Nov 15 12:21:41 2018
From: dgryski at gmail.com (Damian Gryski)
Date: Thu, 15 Nov 2018 09:21:41 -0800
Subject: [ragel-users] Go target with 7.0.0.11?
In-Reply-To: <CANjWZxMoRVCmup7wug35yrjpefqY=63WM55=Lr6Juh6RfaYtgg@mail.gmail.com>
References: <1542268903.21585.8.camel@kortschak.io>
 <CANjWZxMoRVCmup7wug35yrjpefqY=63WM55=Lr6Juh6RfaYtgg@mail.gmail.com>
Message-ID: <CANjWZxMQG2G+HayhRyd8qFv-p6xoSTrBASocNhV+kBKee+zhnQ@mail.gmail.com>

Ragel 7 includes language-specific binaries instead of baking the all into
a single program.  You want to run the ragel-go program from src/host-go .
Although note that Go support is currently slightly broken with regards to
declared-but-not-used variables:
https://www.colm.net/pipermail/ragel-users/2018-November/003554.html

Damian

On Thu, Nov 15, 2018 at 1:09 AM Damian Gryski <dmg at pobox.com> wrote:

> Ragel 7 includes language-specific binaries instead of baking the all into
> a single program.  You want to run the ragel-go program from src/host-go .
> Although note that Go support is currently slightly broken with regards to
> declared-but-not-used variables:
> https://www.colm.net/pipermail/ragel-users/2018-November/003554.html
>
> Damian
>
>
> On Thu, Nov 15, 2018 at 12:01 AM Dan Kortschak <dan at kortschak.io> wrote:
>
>> I'm delighted to see the decision to reinclude the additional target
>> languages as noted in [1].
>>
>> The help screed from ragel v7.0.0.11 says that it will target a variety
>> of languages, including Go. However, it looks to me like the -Z is
>> being ignored; when I tried running ragel on an old rl file that I
>> wrote for 6.8 I had a failure with '"byte" is not a valid alphabet
>> type'. I looked at the examples in the ragel repo in examples/go and
>> these generate C code when built with the instructions there.
>>
>> Is the help screed jumping the gun or is there a problem in the
>> invocation, or something deeper?
>>
>> thanks
>>
>> [1]https://www.colm.net/news/2018/05/18/new-target-langs.html
>>
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at colm.net
>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20181115/ed6bc3de/attachment.html>

From kbrown at cornell.edu  Fri Nov 16 14:58:54 2018
From: kbrown at cornell.edu (Ken Brown)
Date: Fri, 16 Nov 2018 19:58:54 +0000
Subject: [ragel-users] [PATCH 0/3] Fix Cygwin build
Message-ID: <20181116195839.21284-1-kbrown@cornell.edu>

I've just built ragel-7.0.0.11 on Cygwin and added it to the Cygwin
distribution.  I had to patch the sources in order to build shared
libraries.

libtool won't build shared libraries on Cygwin unless the
-no-undefined flag is given.  The first patch of this series does that
for libfsm and libragel.  But it turns out that there are in fact
undefined symbols in libragel.  The next two patches fix that.

I don't think these patches do any harm on other platforms.

Ken Brown (3):
  add -no-undefined to LDFLAGS for libfsm and libragel
  add dependency of libragel on libfsm and libcolm
  avoid undefined symbols in libragel

 src/Makefile.am | 20 ++++++++++++++------
 1 file changed, 14 insertions(+), 6 deletions(-)

-- 
2.17.0



From kbrown at cornell.edu  Fri Nov 16 14:58:54 2018
From: kbrown at cornell.edu (Ken Brown)
Date: Fri, 16 Nov 2018 19:58:54 +0000
Subject: [ragel-users] [PATCH 1/3] add -no-undefined to LDFLAGS for libfsm
	and libragel
In-Reply-To: <20181116195839.21284-1-kbrown@cornell.edu>
References: <20181116195839.21284-1-kbrown@cornell.edu>
Message-ID: <20181116195839.21284-2-kbrown@cornell.edu>

Otherwise libtool will refuse to build shared libraries on Cygwin.
---
 src/Makefile.am | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/src/Makefile.am b/src/Makefile.am
index 693837c1..a9ad169a 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -56,6 +56,8 @@ dist_libfsm_la_SOURCES = \
 nodist_libfsm_la_SOURCES = \
 	version.h
 
+libfsm_la_LDFLAGS = -no-undefined
+
 #
 # libragel: ragel program minus host-specific code
 #
@@ -65,6 +67,8 @@ dist_libragel_la_SOURCES = \
 	parsedata.h parsetree.h inputdata.h pcheck.h reducer.h rlscan.h load.h \
 	parsetree.cc parsedata.cc inputdata.cc load.cc reducer.cc
 
+libragel_la_LDFLAGS = -no-undefined
+
 #
 # ragel program.
 #
-- 
2.17.0



From kbrown at cornell.edu  Fri Nov 16 14:58:55 2018
From: kbrown at cornell.edu (Ken Brown)
Date: Fri, 16 Nov 2018 19:58:55 +0000
Subject: [ragel-users] [PATCH 2/3] add dependency of libragel on libfsm and
	libcolm
In-Reply-To: <20181116195839.21284-1-kbrown@cornell.edu>
References: <20181116195839.21284-1-kbrown@cornell.edu>
Message-ID: <20181116195839.21284-3-kbrown@cornell.edu>

---
 src/Makefile.am | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/src/Makefile.am b/src/Makefile.am
index a9ad169a..0aeee6e2 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -69,6 +69,8 @@ dist_libragel_la_SOURCES = \
 
 libragel_la_LDFLAGS = -no-undefined
 
+libragel_la_LIBADD = libfsm.la $(COLM_LD)
+
 #
 # ragel program.
 #
-- 
2.17.0



From kbrown at cornell.edu  Fri Nov 16 14:58:55 2018
From: kbrown at cornell.edu (Ken Brown)
Date: Fri, 16 Nov 2018 19:58:55 +0000
Subject: [ragel-users] [PATCH 3/3] avoid undefined symbols in libragel
In-Reply-To: <20181116195839.21284-1-kbrown@cornell.edu>
References: <20181116195839.21284-1-kbrown@cornell.edu>
Message-ID: <20181116195839.21284-4-kbrown@cornell.edu>

Move some sources from ragel to libragel.
---
 src/Makefile.am | 14 ++++++++------
 1 file changed, 8 insertions(+), 6 deletions(-)

diff --git a/src/Makefile.am b/src/Makefile.am
index 0aeee6e2..92df2471 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -67,6 +67,14 @@ dist_libragel_la_SOURCES = \
 	parsedata.h parsetree.h inputdata.h pcheck.h reducer.h rlscan.h load.h \
 	parsetree.cc parsedata.cc inputdata.cc load.cc reducer.cc
 
+nodist_libragel_la_SOURCES = \
+	parse.c rlreduce.cc
+
+if WITH_RAGEL_KELBT
+nodist_libragel_la_SOURCES += \
+	rlscan.cc rlparse.cc rlparse.h
+endif
+
 libragel_la_LDFLAGS = -no-undefined
 
 libragel_la_LIBADD = libfsm.la $(COLM_LD)
@@ -79,9 +87,6 @@ ragel_CPPFLAGS = -I$(top_srcdir)/aapl
 dist_ragel_SOURCES = \
 	main.cc
 
-nodist_ragel_SOURCES = \
-	parse.c rlreduce.cc
-
 ragel_LDADD = libragel.la libfsm.la $(COLM_LD)
 ragel_DEPENDENCIES = libragel.la libfsm.la $(COLM_LIBDEP)
 
@@ -90,9 +95,6 @@ BUILT_SOURCES = \
 	parse.c rlreduce.cc
 
 if WITH_RAGEL_KELBT
-nodist_ragel_SOURCES += \
-	rlscan.cc rlparse.cc rlparse.h 
-
 BUILT_SOURCES += \
 	rlscan.cc rlparse.cc rlparse.h 
 endif
-- 
2.17.0



From thurston at colm.net  Sun Nov 25 08:18:11 2018
From: thurston at colm.net (Adrian Thurston)
Date: Sun, 25 Nov 2018 10:18:11 -0300
Subject: [ragel-users] "declared but not used" errors with v7 Go backend
In-Reply-To: <CANjWZxO-003scd2aH_A28GF5br6Gv+C-HsZFdsuhHS75Zh1x9A@mail.gmail.com>
References: <CANjWZxO-003scd2aH_A28GF5br6Gv+C-HsZFdsuhHS75Zh1x9A@mail.gmail.com>
Message-ID: <545671f8f719a44c51afa90e518e28fa@mail.colm.net>

 

Just added the assignment to _ to master. 

Thank you for the fix. 

Still having problems building master? 

On 2018-11-01 10:12, Damian Gryski wrote: 

> This is with ragel 7.0.0.11 and colm 0.13.0.6. I was unable to get ragel to build from git. 
> 
> With the example grammar at github.com/dgryski/ragel-examples/regexp1 [2], I get the following error: 
> 
> $ ragel-go sshd.rl 
> $ go build 
> # github.com/dgryski/ragel-examples/regexp1 [2] 
> ./sshd.go:11:6: _scanner_trans_cond_spaces declared and not used 
> ./sshd.go:12:6: _scanner_trans_offsets declared and not used 
> ./sshd.go:13:6: _scanner_trans_lengths declared and not used 
> ./sshd.go:14:6: _scanner_cond_keys declared and not used 
> ./sshd.go:17:6: _scanner_eof_cond_spaces declared and not used 
> ./sshd.go:18:6: _scanner_eof_cond_key_offs declared and not used 
> ./sshd.go:19:6: _scanner_eof_cond_key_lens declared and not used 
> ./sshd.go:20:6: _scanner_eof_cond_keys declared and not used 
> ./sshd.go:21:6: _scanner_nfa_targs declared and not used 
> ./sshd.go:22:6: _scanner_nfa_offsets declared and not used 
> ./sshd.go:22:6: too many errors 
> 
> The usual solution to this in autogenerated code is to assign them to `_`, the underscore "blank variable". This satisfies the compiler and the entire array will be eliminated as a dead-store if it ends up not being used. 
> 
> Thus, each declaration for variables which may or may not be used will look like: 
> var _scanner_trans_cond_spaces [] int8 = [] int8 { ... } 
> _ = _scanner_trans_cond_space 
> 
> Note also the first `[] int8` is redundant -- the compiler will infer the type from the type of the array on the right hand side of the `=`. 
> 
> Fixing these issues in the Go template in the src/host-go directory and rebuilding fixed these errors (although I had to copy files from the git checkout for the template changes to recompile successfully). 
> 
> Damian 
> 
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users [1]
 

Links:
------
[1] http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
[2] http://github.com/dgryski/ragel-examples/regexp1
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20181125/115623a6/attachment.html>

From thurston at colm.net  Sun Nov 25 08:22:55 2018
From: thurston at colm.net (Adrian Thurston)
Date: Sun, 25 Nov 2018 10:22:55 -0300
Subject: [ragel-users] [PATCH 0/3] Fix Cygwin build
In-Reply-To: <20181116195839.21284-1-kbrown@cornell.edu>
References: <20181116195839.21284-1-kbrown@cornell.edu>
Message-ID: <73c45e9029f92be0cc6bdc6b229470d8@mail.colm.net>

Hi Ken, thank you for the patches. I just enabled --no-undefined and 
removed the reference to the undefined symbol. The parse.c file cannot 
be included in libragel because it defines the frontnend language, which 
is different for each binary in the host-* directories. All that was 
needed was to pass the reference to rl_parse into libragel from main.cc. 
Was already doing that for the backend code generator (also a colm 
program).

Adrian

On 2018-11-16 16:58, Ken Brown wrote:
> I've just built ragel-7.0.0.11 on Cygwin and added it to the Cygwin
> distribution.  I had to patch the sources in order to build shared
> libraries.
> 
> libtool won't build shared libraries on Cygwin unless the
> -no-undefined flag is given.  The first patch of this series does that
> for libfsm and libragel.  But it turns out that there are in fact
> undefined symbols in libragel.  The next two patches fix that.
> 
> I don't think these patches do any harm on other platforms.
> 
> Ken Brown (3):
>   add -no-undefined to LDFLAGS for libfsm and libragel
>   add dependency of libragel on libfsm and libcolm
>   avoid undefined symbols in libragel
> 
>  src/Makefile.am | 20 ++++++++++++++------
>  1 file changed, 14 insertions(+), 6 deletions(-)


From dgryski at gmail.com  Sun Nov 25 09:36:33 2018
From: dgryski at gmail.com (Damian Gryski)
Date: Sun, 25 Nov 2018 06:36:33 -0800
Subject: [ragel-users] "declared but not used" errors with v7 Go backend
In-Reply-To: <545671f8f719a44c51afa90e518e28fa@mail.colm.net>
References: <CANjWZxO-003scd2aH_A28GF5br6Gv+C-HsZFdsuhHS75Zh1x9A@mail.gmail.com>
 <545671f8f719a44c51afa90e518e28fa@mail.colm.net>
Message-ID: <CANjWZxMc9jL3x3nQn4xTSkQnK0zysdL+YihGFf0ka+kBA_9W7Q@mail.gmail.com>

Yes, I had to change the call to libtoolize to glibtoolize so it picked up
the version installed by brew and not Apple's version.

Next, I needed to pass CXX=g++-8 so it used the gcc installed by brew and
not Apple's version of llvm.

Finally, I needed to also build colm from git and not use the latest
release tarball 0.13.0.6.

Damian

On Sun, Nov 25, 2018 at 5:18 AM Adrian Thurston <thurston at colm.net> wrote:

> Just added the assignment to _ to master.
>
> Thank you for the fix.
>
> Still having problems building master?
>
> On 2018-11-01 10:12, Damian Gryski wrote:
>
> This is with ragel 7.0.0.11 and colm 0.13.0.6.  I was unable to get ragel
> to build from git.
>
> With the example grammar at github.com/dgryski/ragel-examples/regexp1, I
> get the following error:
>
> $ ragel-go sshd.rl
> $ go build
> # github.com/dgryski/ragel-examples/regexp1
> ./sshd.go:11:6: _scanner_trans_cond_spaces declared and not used
> ./sshd.go:12:6: _scanner_trans_offsets declared and not used
> ./sshd.go:13:6: _scanner_trans_lengths declared and not used
> ./sshd.go:14:6: _scanner_cond_keys declared and not used
> ./sshd.go:17:6: _scanner_eof_cond_spaces declared and not used
> ./sshd.go:18:6: _scanner_eof_cond_key_offs declared and not used
> ./sshd.go:19:6: _scanner_eof_cond_key_lens declared and not used
> ./sshd.go:20:6: _scanner_eof_cond_keys declared and not used
> ./sshd.go:21:6: _scanner_nfa_targs declared and not used
> ./sshd.go:22:6: _scanner_nfa_offsets declared and not used
> ./sshd.go:22:6: too many errors
>
> The usual solution to this in autogenerated code is to assign them to `_`,
> the underscore "blank variable".  This satisfies the compiler and the
> entire array will be eliminated as a dead-store if it ends up not being
> used.
>
> Thus, each declaration for variables which may or may not be used will
> look like:
> var _scanner_trans_cond_spaces [] int8  = [] int8  { ... }
> _ = _scanner_trans_cond_space
>
> Note also the first `[] int8` is redundant -- the compiler will infer the
> type from the type of the array on the right hand side of the `=`.
>
> Fixing these issues in the Go template in the src/host-go directory and
> rebuilding fixed these errors (although I had to copy files from the git
> checkout for the template changes to recompile successfully).
>
> Damian
>
> _______________________________________________
> ragel-users mailing listragel-users at colm.nethttp://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20181125/425fc382/attachment.html>

From kbrown at cornell.edu  Sun Nov 25 10:11:34 2018
From: kbrown at cornell.edu (Ken Brown)
Date: Sun, 25 Nov 2018 15:11:34 +0000
Subject: [ragel-users] [PATCH 0/3] Fix Cygwin build
In-Reply-To: <73c45e9029f92be0cc6bdc6b229470d8@mail.colm.net>
References: <20181116195839.21284-1-kbrown@cornell.edu>
 <73c45e9029f92be0cc6bdc6b229470d8@mail.colm.net>
Message-ID: <352e481f-4c91-41bf-43c6-6e9708f6c8b6@cornell.edu>

Hi Adrian,

Thanks.  Have you pushed these changes to the upstream git repo?  I'm getting 
"Already up to date" when I do "git pull".

Ken

On 11/25/2018 8:22 AM, Adrian Thurston wrote:
> Hi Ken, thank you for the patches. I just enabled --no-undefined and removed the 
> reference to the undefined symbol. The parse.c file cannot be included in 
> libragel because it defines the frontnend language, which is different for each 
> binary in the host-* directories. All that was needed was to pass the reference 
> to rl_parse into libragel from main.cc. Was already doing that for the backend 
> code generator (also a colm program).
> 
> Adrian
> 
> On 2018-11-16 16:58, Ken Brown wrote:
>> I've just built ragel-7.0.0.11 on Cygwin and added it to the Cygwin
>> distribution.  I had to patch the sources in order to build shared
>> libraries.
>>
>> libtool won't build shared libraries on Cygwin unless the
>> -no-undefined flag is given.  The first patch of this series does that
>> for libfsm and libragel.  But it turns out that there are in fact
>> undefined symbols in libragel.  The next two patches fix that.
>>
>> I don't think these patches do any harm on other platforms.
>>
>> Ken Brown (3):
>>   add -no-undefined to LDFLAGS for libfsm and libragel
>>   add dependency of libragel on libfsm and libcolm
>>   avoid undefined symbols in libragel
>>
>>  src/Makefile.am | 20 ++++++++++++++------
>>  1 file changed, 14 insertions(+), 6 deletions(-)
> 
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users

From thurston at colm.net  Mon Nov 26 11:40:47 2018
From: thurston at colm.net (Adrian Thurston)
Date: Mon, 26 Nov 2018 13:40:47 -0300
Subject: [ragel-users] [PATCH 0/3] Fix Cygwin build
In-Reply-To: <352e481f-4c91-41bf-43c6-6e9708f6c8b6@cornell.edu>
References: <20181116195839.21284-1-kbrown@cornell.edu>
 <73c45e9029f92be0cc6bdc6b229470d8@mail.colm.net>
 <352e481f-4c91-41bf-43c6-6e9708f6c8b6@cornell.edu>
Message-ID: <320011175ced45b5722fa7f3a891cb16@mail.colm.net>

Ah, sorry, I forgot to push from my private repo to the public one. 
There now.

On 2018-11-25 12:11, Ken Brown wrote:
> Hi Adrian,
> 
> Thanks.  Have you pushed these changes to the upstream git repo?  I'm 
> getting
> "Already up to date" when I do "git pull".
> 
> Ken
> 
> On 11/25/2018 8:22 AM, Adrian Thurston wrote:
>> Hi Ken, thank you for the patches. I just enabled --no-undefined and 
>> removed the
>> reference to the undefined symbol. The parse.c file cannot be included 
>> in
>> libragel because it defines the frontnend language, which is different 
>> for each
>> binary in the host-* directories. All that was needed was to pass the 
>> reference
>> to rl_parse into libragel from main.cc. Was already doing that for the 
>> backend
>> code generator (also a colm program).
>> 
>> Adrian
>> 
>> On 2018-11-16 16:58, Ken Brown wrote:
>>> I've just built ragel-7.0.0.11 on Cygwin and added it to the Cygwin
>>> distribution.  I had to patch the sources in order to build shared
>>> libraries.
>>> 
>>> libtool won't build shared libraries on Cygwin unless the
>>> -no-undefined flag is given.  The first patch of this series does 
>>> that
>>> for libfsm and libragel.  But it turns out that there are in fact
>>> undefined symbols in libragel.  The next two patches fix that.
>>> 
>>> I don't think these patches do any harm on other platforms.
>>> 
>>> Ken Brown (3):
>>>   add -no-undefined to LDFLAGS for libfsm and libragel
>>>   add dependency of libragel on libfsm and libcolm
>>>   avoid undefined symbols in libragel
>>> 
>>>  src/Makefile.am | 20 ++++++++++++++------
>>>  1 file changed, 14 insertions(+), 6 deletions(-)
>> 
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at colm.net
>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users


From kbrown at cornell.edu  Mon Nov 26 14:30:59 2018
From: kbrown at cornell.edu (Ken Brown)
Date: Mon, 26 Nov 2018 19:30:59 +0000
Subject: [ragel-users] [PATCH 0/3] Fix Cygwin build
In-Reply-To: <320011175ced45b5722fa7f3a891cb16@mail.colm.net>
References: <20181116195839.21284-1-kbrown@cornell.edu>
 <73c45e9029f92be0cc6bdc6b229470d8@mail.colm.net>
 <352e481f-4c91-41bf-43c6-6e9708f6c8b6@cornell.edu>
 <320011175ced45b5722fa7f3a891cb16@mail.colm.net>
Message-ID: <a5e49590-af6c-6751-dae7-b01f845eab8d@cornell.edu>

Thanks.  There are still two problems:

First, the syntax for the libtool '-no-undefined' flag is wrong.  It should 
simply be '-no-undefined' (one leading hyphen, no -Wl), as in the patch I 
submitted.  Otherwise, I get the following error if I try to build shared libraries:

libtool:   error: can't build x86_64-unknown-cygwin shared library unless 
-no-undefined is specified

Second, although your change takes care of the reference to rl_parse, which is 
the only undefined reference in a build --without-ragel, there are two further 
"undefined reference" errors if I build with ragel installed:

.libs/libragel_la-inputdata.o: In function `InputData::checkLastRef(InputItem*)':
/home/kbrown/src/ragel/src/inputdata.cc:313: undefined reference to 
`Parser6::terminateParser()'
[...]
.libs/libragel_la-inputdata.o: In function `InputData::parseKelbt()':
/home/kbrown/src/ragel/src/inputdata.cc:427: undefined reference to 
`Scanner::do_scan()'

These are defined in rlparse.cc and rlscan.cc, which aren't in the sources for 
libragel.

Ken

On 11/26/2018 11:40 AM, Adrian Thurston wrote:
> Ah, sorry, I forgot to push from my private repo to the public one. There now.
> 
> On 2018-11-25 12:11, Ken Brown wrote:
>> Hi Adrian,
>>
>> Thanks.  Have you pushed these changes to the upstream git repo?  I'm getting
>> "Already up to date" when I do "git pull".
>>
>> Ken
>>
>> On 11/25/2018 8:22 AM, Adrian Thurston wrote:
>>> Hi Ken, thank you for the patches. I just enabled --no-undefined and removed the
>>> reference to the undefined symbol. The parse.c file cannot be included in
>>> libragel because it defines the frontnend language, which is different for each
>>> binary in the host-* directories. All that was needed was to pass the reference
>>> to rl_parse into libragel from main.cc. Was already doing that for the backend
>>> code generator (also a colm program).
>>>
>>> Adrian
>>>
>>> On 2018-11-16 16:58, Ken Brown wrote:
>>>> I've just built ragel-7.0.0.11 on Cygwin and added it to the Cygwin
>>>> distribution.  I had to patch the sources in order to build shared
>>>> libraries.
>>>>
>>>> libtool won't build shared libraries on Cygwin unless the
>>>> -no-undefined flag is given.  The first patch of this series does that
>>>> for libfsm and libragel.  But it turns out that there are in fact
>>>> undefined symbols in libragel.  The next two patches fix that.
>>>>
>>>> I don't think these patches do any harm on other platforms.
>>>>
>>>> Ken Brown (3):
>>>>   add -no-undefined to LDFLAGS for libfsm and libragel
>>>>   add dependency of libragel on libfsm and libcolm
>>>>   avoid undefined symbols in libragel
>>>>
>>>>  src/Makefile.am | 20 ++++++++++++++------
>>>>  1 file changed, 14 insertions(+), 6 deletions(-)
>>>
>>> _______________________________________________
>>> ragel-users mailing list
>>> ragel-users at colm.net
>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at colm.net
>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
> 
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users

From thurston at colm.net  Tue Nov 27 05:49:23 2018
From: thurston at colm.net (Adrian Thurston)
Date: Tue, 27 Nov 2018 07:49:23 -0300
Subject: [ragel-users] [PATCH 0/3] Fix Cygwin build
In-Reply-To: <a5e49590-af6c-6751-dae7-b01f845eab8d@cornell.edu>
References: <20181116195839.21284-1-kbrown@cornell.edu>
 <73c45e9029f92be0cc6bdc6b229470d8@mail.colm.net>
 <352e481f-4c91-41bf-43c6-6e9708f6c8b6@cornell.edu>
 <320011175ced45b5722fa7f3a891cb16@mail.colm.net>
 <a5e49590-af6c-6751-dae7-b01f845eab8d@cornell.edu>
Message-ID: <409d45f1d0b410c3241ec316412df457@mail.colm.net>

First, the easy part ... you can take out --with-ragel and --with-kelbt 
options. They were only there to fall back to during the transition to 
the colm frontend. I've committed to the colm parser though and will be 
removing the old one soon.

With regards to linking, it has no effect for me when I used 
-no-undefined. Seems to get stripped out by autotools because it doesn't 
make it into the link command.

libragel_la_LDFLAGS = -no-undefined

... results in ...

libtool: link: g++  -fPIC -DPIC -shared -nostdlib 
/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crti.o 
/usr/lib/gcc/x86_64-linux-gnu/5/crtbeginS.o  
.libs/libragel_la-parsetree.o .libs/libragel_la-longest.o 
.libs/libragel_la-parsedata.o .libs/libragel_la-inputdata.o 
.libs/libragel_la-load.o .libs/libragel_la-reducer.o   -Wl,-rpath 
-Wl,/home/thurston/devel/ragel/src/.libs -Wl,-rpath 
-Wl,/home/thurston/pkgs/colm/lib -Wl,-rpath 
-Wl,/home/thurston/pkgs/ragel/lib -Wl,-rpath 
-Wl,/home/thurston/pkgs/colm/lib -L/home/thurston/pkgs/colm/lib 
./.libs/libfsm.so /home/thurston/pkgs/colm/lib/libcolm.so 
-L/usr/lib/gcc/x86_64-linux-gnu/5 
-L/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu 
-L/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib 
-L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu 
-L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/5/../../.. -lstdc++ 
-lm -lc -lgcc_s /usr/lib/gcc/x86_64-linux-gnu/5/crtendS.o 
/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crtn.o  -g   
-Wl,-soname -Wl,libragel.so.0 -o .libs/libragel.so.0.0.0

My setup is ubuntu with the following versions.

[thurston at railay] src: g++ -v; automake --version; autoconf --version; 
libtool --version
gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.10)
automake (GNU automake) 1.15
autoconf (GNU Autoconf) 2.69
libtool (GNU libtool) 2.4.6

Will have to dig a bit. Maybe the option is controlled by some other 
flag.

On 2018-11-26 16:30, Ken Brown wrote:
> Thanks.  There are still two problems:
> 
> First, the syntax for the libtool '-no-undefined' flag is wrong.  It 
> should
> simply be '-no-undefined' (one leading hyphen, no -Wl), as in the patch 
> I
> submitted.  Otherwise, I get the following error if I try to build
> shared libraries:
> 
> libtool:   error: can't build x86_64-unknown-cygwin shared library 
> unless
> -no-undefined is specified
> 
> Second, although your change takes care of the reference to rl_parse, 
> which is
> the only undefined reference in a build --without-ragel, there are two 
> further
> "undefined reference" errors if I build with ragel installed:
> 
> .libs/libragel_la-inputdata.o: In function
> `InputData::checkLastRef(InputItem*)':
> /home/kbrown/src/ragel/src/inputdata.cc:313: undefined reference to
> `Parser6::terminateParser()'
> [...]
> .libs/libragel_la-inputdata.o: In function `InputData::parseKelbt()':
> /home/kbrown/src/ragel/src/inputdata.cc:427: undefined reference to
> `Scanner::do_scan()'
> 
> These are defined in rlparse.cc and rlscan.cc, which aren't in the 
> sources for
> libragel.
> 
> Ken
> 
> On 11/26/2018 11:40 AM, Adrian Thurston wrote:
>> Ah, sorry, I forgot to push from my private repo to the public one. 
>> There now.
>> 
>> On 2018-11-25 12:11, Ken Brown wrote:
>>> Hi Adrian,
>>> 
>>> Thanks.  Have you pushed these changes to the upstream git repo?  I'm 
>>> getting
>>> "Already up to date" when I do "git pull".
>>> 
>>> Ken
>>> 
>>> On 11/25/2018 8:22 AM, Adrian Thurston wrote:
>>>> Hi Ken, thank you for the patches. I just enabled --no-undefined and 
>>>> removed the
>>>> reference to the undefined symbol. The parse.c file cannot be 
>>>> included in
>>>> libragel because it defines the frontnend language, which is 
>>>> different for each
>>>> binary in the host-* directories. All that was needed was to pass 
>>>> the reference
>>>> to rl_parse into libragel from main.cc. Was already doing that for 
>>>> the backend
>>>> code generator (also a colm program).
>>>> 
>>>> Adrian
>>>> 
>>>> On 2018-11-16 16:58, Ken Brown wrote:
>>>>> I've just built ragel-7.0.0.11 on Cygwin and added it to the Cygwin
>>>>> distribution.  I had to patch the sources in order to build shared
>>>>> libraries.
>>>>> 
>>>>> libtool won't build shared libraries on Cygwin unless the
>>>>> -no-undefined flag is given.  The first patch of this series does 
>>>>> that
>>>>> for libfsm and libragel.  But it turns out that there are in fact
>>>>> undefined symbols in libragel.  The next two patches fix that.
>>>>> 
>>>>> I don't think these patches do any harm on other platforms.
>>>>> 
>>>>> Ken Brown (3):
>>>>>   add -no-undefined to LDFLAGS for libfsm and libragel
>>>>>   add dependency of libragel on libfsm and libcolm
>>>>>   avoid undefined symbols in libragel
>>>>> 
>>>>>  src/Makefile.am | 20 ++++++++++++++------
>>>>>  1 file changed, 14 insertions(+), 6 deletions(-)
>>>> 
>>>> _______________________________________________
>>>> ragel-users mailing list
>>>> ragel-users at colm.net
>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>>> _______________________________________________
>>> ragel-users mailing list
>>> ragel-users at colm.net
>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>> 
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at colm.net
>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users



From thurston at colm.net  Tue Nov 27 06:01:17 2018
From: thurston at colm.net (Adrian Thurston)
Date: Tue, 27 Nov 2018 08:01:17 -0300
Subject: [ragel-users] "declared but not used" errors with v7 Go backend
In-Reply-To: <CANjWZxMc9jL3x3nQn4xTSkQnK0zysdL+YihGFf0ka+kBA_9W7Q@mail.gmail.com>
References: <CANjWZxO-003scd2aH_A28GF5br6Gv+C-HsZFdsuhHS75Zh1x9A@mail.gmail.com>
 <545671f8f719a44c51afa90e518e28fa@mail.colm.net>
 <CANjWZxMc9jL3x3nQn4xTSkQnK0zysdL+YihGFf0ka+kBA_9W7Q@mail.gmail.com>
Message-ID: <4a64bb9d95a4952156f19fcc69e51118@mail.colm.net>

 

What ... gcc is at version 8? Where have I been? 

Hmm, okay not seeing anything I can fix in the distribution. Seems just
some configuration needs to change for building on mac. 

On 2018-11-25 11:36, Damian Gryski wrote: 

> Yes, I had to change the call to libtoolize to glibtoolize so it picked up the version installed by brew and not Apple's version. 
> 
> Next, I needed to pass CXX=g++-8 so it used the gcc installed by brew and not Apple's version of llvm. 
> 
> Finally, I needed to also build colm from git and not use the latest release tarball 0.13.0.6. 
> 
> Damian 
> 
> On Sun, Nov 25, 2018 at 5:18 AM Adrian Thurston <thurston at colm.net> wrote: 
> 
> Just added the assignment to _ to master. 
> 
> Thank you for the fix. 
> 
> Still having problems building master? 
> 
> On 2018-11-01 10:12, Damian Gryski wrote: 
> 
> This is with ragel 7.0.0.11 and colm 0.13.0.6. I was unable to get ragel to build from git. 
> 
> With the example grammar at github.com/dgryski/ragel-examples/regexp1 [2], I get the following error: 
> 
> $ ragel-go sshd.rl 
> $ go build 
> # github.com/dgryski/ragel-examples/regexp1 [2] 
> ./sshd.go:11:6: _scanner_trans_cond_spaces declared and not used 
> ./sshd.go:12:6: _scanner_trans_offsets declared and not used 
> ./sshd.go:13:6: _scanner_trans_lengths declared and not used 
> ./sshd.go:14:6: _scanner_cond_keys declared and not used 
> ./sshd.go:17:6: _scanner_eof_cond_spaces declared and not used 
> ./sshd.go:18:6: _scanner_eof_cond_key_offs declared and not used 
> ./sshd.go:19:6: _scanner_eof_cond_key_lens declared and not used 
> ./sshd.go:20:6: _scanner_eof_cond_keys declared and not used 
> ./sshd.go:21:6: _scanner_nfa_targs declared and not used 
> ./sshd.go:22:6: _scanner_nfa_offsets declared and not used 
> ./sshd.go:22:6: too many errors 
> 
> The usual solution to this in autogenerated code is to assign them to `_`, the underscore "blank variable". This satisfies the compiler and the entire array will be eliminated as a dead-store if it ends up not being used. 
> 
> Thus, each declaration for variables which may or may not be used will look like: 
> var _scanner_trans_cond_spaces [] int8 = [] int8 { ... } 
> _ = _scanner_trans_cond_space 
> 
> Note also the first `[] int8` is redundant -- the compiler will infer the type from the type of the array on the right hand side of the `=`. 
> 
> Fixing these issues in the Go template in the src/host-go directory and rebuilding fixed these errors (although I had to copy files from the git checkout for the template changes to recompile successfully). 
> 
> Damian 
> 
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users [1]
> 
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users [1]

_______________________________________________
ragel-users mailing list
ragel-users at colm.net
http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users [1]

 

Links:
------
[1] http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
[2] http://github.com/dgryski/ragel-examples/regexp1
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20181127/82936494/attachment.html>

From kbrown at cornell.edu  Tue Nov 27 11:09:01 2018
From: kbrown at cornell.edu (Ken Brown)
Date: Tue, 27 Nov 2018 16:09:01 +0000
Subject: [ragel-users] [PATCH 0/3] Fix Cygwin build
In-Reply-To: <409d45f1d0b410c3241ec316412df457@mail.colm.net>
References: <20181116195839.21284-1-kbrown@cornell.edu>
 <73c45e9029f92be0cc6bdc6b229470d8@mail.colm.net>
 <352e481f-4c91-41bf-43c6-6e9708f6c8b6@cornell.edu>
 <320011175ced45b5722fa7f3a891cb16@mail.colm.net>
 <a5e49590-af6c-6751-dae7-b01f845eab8d@cornell.edu>
 <409d45f1d0b410c3241ec316412df457@mail.colm.net>
Message-ID: <b54376cd-0892-e41c-890d-003d8ab5c5b7@cornell.edu>

OK, that's good that I can forget about --with-ragel.  As to how -no-undefined 
works, I've done some googling and still don't fully understand it.  I see the 
-no-undefined flag passed to libtool but then it doesn't appear in the final 
link command:

/bin/sh ../libtool  --tag=CXX   --mode=link g++  -Wall -g -no-undefined...

libtool: link: g++ -shared -nostdlib 
/usr/lib/gcc/x86_64-pc-cygwin/7.3.0/crtbeginS.o  .libs/libfsm_la-idbase.o 
.libs/libfsm_la-fsmstate.o .libs/libfsm_la-fsmbase.o .libs/libfsm_la-fsmattach.o 
.libs/libfsm_la-fsmmin.o .libs/libfsm_la-fsmgraph.o .libs/libfsm_la-fsmap.o 
.libs/libfsm_la-fsmcond.o .libs/libfsm_la-fsmnfa.o .libs/libfsm_la-common.o 
.libs/libfsm_la-redfsm.o .libs/libfsm_la-gendata.o .libs/libfsm_la-allocgen.o 
.libs/libfsm_la-codegen.o .libs/libfsm_la-actexp.o .libs/libfsm_la-binvar.o 
.libs/libfsm_la-tables.o .libs/libfsm_la-tabgoto.o .libs/libfsm_la-tabvar.o 
.libs/libfsm_la-binary.o .libs/libfsm_la-bingoto.o .libs/libfsm_la-actloop.o 
.libs/libfsm_la-flat.o .libs/libfsm_la-flatgoto.o .libs/libfsm_la-flatvar.o 
.libs/libfsm_la-goto.o .libs/libfsm_la-gotoloop.o .libs/libfsm_la-gotoexp.o 
.libs/libfsm_la-ipgoto.o .libs/libfsm_la-dot.o .libs/libfsm_la-asm.o 
-L/home/kbrown/src/colm/src -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0 
-L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0/../../../../x86_64-pc-cygwin/lib/../lib 
-L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0/../../../../lib -L/lib/../lib 
-L/usr/lib/../lib 
-L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0/../../../../x86_64-pc-cygwin/lib 
-L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0/../../.. -lstdc++ -lgcc_s -lgcc -lcygwin 
-ladvapi32 -lshell32 -luser32 -lkernel32 -lgcc_s -lgcc 
/usr/lib/gcc/x86_64-pc-cygwin/7.3.0/crtend.o  -g   -o .libs/cygfsm-0.dll 
-Wl,--enable-auto-image-base -Xlinker --out-implib -Xlinker .libs/libfsm.dll.a

I think the point might be that gcc/g++ will give errors on Cygwin if there are 
undefined symbols in shared libraries, and libtool enforces that by insisting on 
the -no-undefined flag, which is simply an assertion that there are no undefined 
symbols.  That's mostly a guess.

I have the same automake, autoconf, and libtool versions as you, but a newer gcc 
(7.3.0).

Ken

On 11/27/2018 5:49 AM, Adrian Thurston wrote:
> First, the easy part ... you can take out --with-ragel and --with-kelbt options. 
> They were only there to fall back to during the transition to the colm frontend. 
> I've committed to the colm parser though and will be removing the old one soon.
> 
> With regards to linking, it has no effect for me when I used -no-undefined. 
> Seems to get stripped out by autotools because it doesn't make it into the link 
> command.
> 
> libragel_la_LDFLAGS = -no-undefined
> 
> ... results in ...
> 
> libtool: link: g++  -fPIC -DPIC -shared -nostdlib 
> /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crti.o 
> /usr/lib/gcc/x86_64-linux-gnu/5/crtbeginS.o .libs/libragel_la-parsetree.o 
> .libs/libragel_la-longest.o .libs/libragel_la-parsedata.o 
> .libs/libragel_la-inputdata.o .libs/libragel_la-load.o 
> .libs/libragel_la-reducer.o   -Wl,-rpath 
> -Wl,/home/thurston/devel/ragel/src/.libs -Wl,-rpath 
> -Wl,/home/thurston/pkgs/colm/lib -Wl,-rpath -Wl,/home/thurston/pkgs/ragel/lib 
> -Wl,-rpath -Wl,/home/thurston/pkgs/colm/lib -L/home/thurston/pkgs/colm/lib 
> ./.libs/libfsm.so /home/thurston/pkgs/colm/lib/libcolm.so 
> -L/usr/lib/gcc/x86_64-linux-gnu/5 
> -L/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu 
> -L/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib -L/lib/x86_64-linux-gnu 
> -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib 
> -L/usr/lib/gcc/x86_64-linux-gnu/5/../../.. -lstdc++ -lm -lc -lgcc_s 
> /usr/lib/gcc/x86_64-linux-gnu/5/crtendS.o 
> /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crtn.o  -g -Wl,-soname 
> -Wl,libragel.so.0 -o .libs/libragel.so.0.0.0
> 
> My setup is ubuntu with the following versions.
> 
> [thurston at railay] src: g++ -v; automake --version; autoconf --version; libtool 
> --version
> gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.10)
> automake (GNU automake) 1.15
> autoconf (GNU Autoconf) 2.69
> libtool (GNU libtool) 2.4.6
> 
> Will have to dig a bit. Maybe the option is controlled by some other flag.
> 
> On 2018-11-26 16:30, Ken Brown wrote:
>> Thanks.  There are still two problems:
>>
>> First, the syntax for the libtool '-no-undefined' flag is wrong.  It should
>> simply be '-no-undefined' (one leading hyphen, no -Wl), as in the patch I
>> submitted.  Otherwise, I get the following error if I try to build
>> shared libraries:
>>
>> libtool:   error: can't build x86_64-unknown-cygwin shared library unless
>> -no-undefined is specified
>>
>> Second, although your change takes care of the reference to rl_parse, which is
>> the only undefined reference in a build --without-ragel, there are two further
>> "undefined reference" errors if I build with ragel installed:
>>
>> .libs/libragel_la-inputdata.o: In function
>> `InputData::checkLastRef(InputItem*)':
>> /home/kbrown/src/ragel/src/inputdata.cc:313: undefined reference to
>> `Parser6::terminateParser()'
>> [...]
>> .libs/libragel_la-inputdata.o: In function `InputData::parseKelbt()':
>> /home/kbrown/src/ragel/src/inputdata.cc:427: undefined reference to
>> `Scanner::do_scan()'
>>
>> These are defined in rlparse.cc and rlscan.cc, which aren't in the sources for
>> libragel.
>>
>> Ken
>>
>> On 11/26/2018 11:40 AM, Adrian Thurston wrote:
>>> Ah, sorry, I forgot to push from my private repo to the public one. There now.
>>>
>>> On 2018-11-25 12:11, Ken Brown wrote:
>>>> Hi Adrian,
>>>>
>>>> Thanks.  Have you pushed these changes to the upstream git repo?  I'm getting
>>>> "Already up to date" when I do "git pull".
>>>>
>>>> Ken
>>>>
>>>> On 11/25/2018 8:22 AM, Adrian Thurston wrote:
>>>>> Hi Ken, thank you for the patches. I just enabled --no-undefined and 
>>>>> removed the
>>>>> reference to the undefined symbol. The parse.c file cannot be included in
>>>>> libragel because it defines the frontnend language, which is different for 
>>>>> each
>>>>> binary in the host-* directories. All that was needed was to pass the 
>>>>> reference
>>>>> to rl_parse into libragel from main.cc. Was already doing that for the backend
>>>>> code generator (also a colm program).
>>>>>
>>>>> Adrian
>>>>>
>>>>> On 2018-11-16 16:58, Ken Brown wrote:
>>>>>> I've just built ragel-7.0.0.11 on Cygwin and added it to the Cygwin
>>>>>> distribution.  I had to patch the sources in order to build shared
>>>>>> libraries.
>>>>>>
>>>>>> libtool won't build shared libraries on Cygwin unless the
>>>>>> -no-undefined flag is given.  The first patch of this series does that
>>>>>> for libfsm and libragel.  But it turns out that there are in fact
>>>>>> undefined symbols in libragel.  The next two patches fix that.
>>>>>>
>>>>>> I don't think these patches do any harm on other platforms.
>>>>>>
>>>>>> Ken Brown (3):
>>>>>>   add -no-undefined to LDFLAGS for libfsm and libragel
>>>>>>   add dependency of libragel on libfsm and libcolm
>>>>>>   avoid undefined symbols in libragel
>>>>>>
>>>>>>  src/Makefile.am | 20 ++++++++++++++------
>>>>>>  1 file changed, 14 insertions(+), 6 deletions(-)
>>>>>
>>>>> _______________________________________________
>>>>> ragel-users mailing list
>>>>> ragel-users at colm.net
>>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>>>> _______________________________________________
>>>> ragel-users mailing list
>>>> ragel-users at colm.net
>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>>>
>>> _______________________________________________
>>> ragel-users mailing list
>>> ragel-users at colm.net
>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at colm.net
>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
> 
> 
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users

From kbrown at cornell.edu  Tue Nov 27 19:43:21 2018
From: kbrown at cornell.edu (Ken Brown)
Date: Wed, 28 Nov 2018 00:43:21 +0000
Subject: [ragel-users] [PATCH] fix InputData constructor
Message-ID: <20181128004309.144472-1-kbrown@cornell.edu>

Initialize InputData::frontendSections.
---
 src/inputdata.h | 1 +
 1 file changed, 1 insertion(+)

diff --git a/src/inputdata.h b/src/inputdata.h
index ba263a59..44b06b52 100644
--- a/src/inputdata.h
+++ b/src/inputdata.h
@@ -172,6 +172,7 @@ struct InputData
 	InputData( const HostLang *hostLang, struct colm_sections *frontendSections, struct colm_sections *rlhcSections )
 	: 
 		FsmGbl(hostLang),
+		frontendSections(frontendSections),
 		rlhcSections(rlhcSections),
 		inputFileName(0),
 		outputFileName(0),
-- 
2.17.0



From kbrown at cornell.edu  Tue Nov 27 22:03:33 2018
From: kbrown at cornell.edu (Ken Brown)
Date: Wed, 28 Nov 2018 03:03:33 +0000
Subject: [ragel-users] [PATCH 0/3] Fix Cygwin build
In-Reply-To: <b54376cd-0892-e41c-890d-003d8ab5c5b7@cornell.edu>
References: <20181116195839.21284-1-kbrown@cornell.edu>
 <73c45e9029f92be0cc6bdc6b229470d8@mail.colm.net>
 <352e481f-4c91-41bf-43c6-6e9708f6c8b6@cornell.edu>
 <320011175ced45b5722fa7f3a891cb16@mail.colm.net>
 <a5e49590-af6c-6751-dae7-b01f845eab8d@cornell.edu>
 <409d45f1d0b410c3241ec316412df457@mail.colm.net>
 <b54376cd-0892-e41c-890d-003d8ab5c5b7@cornell.edu>
Message-ID: <83a43d93-6281-bcb5-fa6f-ee662be1282d@cornell.edu>

This seems to confirm my interpretation of "-no-undefined":

$ libtool --help --mode=link | grep -- -no-undefined
   -no-undefined     declare that a library does not refer to external symbols

Ken

On 11/27/2018 11:09 AM, Ken Brown wrote:
> OK, that's good that I can forget about --with-ragel.  As to how -no-undefined
> works, I've done some googling and still don't fully understand it.  I see the
> -no-undefined flag passed to libtool but then it doesn't appear in the final
> link command:
> 
> /bin/sh ../libtool  --tag=CXX   --mode=link g++  -Wall -g -no-undefined...
> 
> libtool: link: g++ -shared -nostdlib
> /usr/lib/gcc/x86_64-pc-cygwin/7.3.0/crtbeginS.o  .libs/libfsm_la-idbase.o
> .libs/libfsm_la-fsmstate.o .libs/libfsm_la-fsmbase.o .libs/libfsm_la-fsmattach.o
> .libs/libfsm_la-fsmmin.o .libs/libfsm_la-fsmgraph.o .libs/libfsm_la-fsmap.o
> .libs/libfsm_la-fsmcond.o .libs/libfsm_la-fsmnfa.o .libs/libfsm_la-common.o
> .libs/libfsm_la-redfsm.o .libs/libfsm_la-gendata.o .libs/libfsm_la-allocgen.o
> .libs/libfsm_la-codegen.o .libs/libfsm_la-actexp.o .libs/libfsm_la-binvar.o
> .libs/libfsm_la-tables.o .libs/libfsm_la-tabgoto.o .libs/libfsm_la-tabvar.o
> .libs/libfsm_la-binary.o .libs/libfsm_la-bingoto.o .libs/libfsm_la-actloop.o
> .libs/libfsm_la-flat.o .libs/libfsm_la-flatgoto.o .libs/libfsm_la-flatvar.o
> .libs/libfsm_la-goto.o .libs/libfsm_la-gotoloop.o .libs/libfsm_la-gotoexp.o
> .libs/libfsm_la-ipgoto.o .libs/libfsm_la-dot.o .libs/libfsm_la-asm.o
> -L/home/kbrown/src/colm/src -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0
> -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0/../../../../x86_64-pc-cygwin/lib/../lib
> -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0/../../../../lib -L/lib/../lib
> -L/usr/lib/../lib
> -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0/../../../../x86_64-pc-cygwin/lib
> -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0/../../.. -lstdc++ -lgcc_s -lgcc -lcygwin
> -ladvapi32 -lshell32 -luser32 -lkernel32 -lgcc_s -lgcc
> /usr/lib/gcc/x86_64-pc-cygwin/7.3.0/crtend.o  -g   -o .libs/cygfsm-0.dll
> -Wl,--enable-auto-image-base -Xlinker --out-implib -Xlinker .libs/libfsm.dll.a
> 
> I think the point might be that gcc/g++ will give errors on Cygwin if there are
> undefined symbols in shared libraries, and libtool enforces that by insisting on
> the -no-undefined flag, which is simply an assertion that there are no undefined
> symbols.  That's mostly a guess.
> 
> I have the same automake, autoconf, and libtool versions as you, but a newer gcc
> (7.3.0).
> 
> Ken
> 
> On 11/27/2018 5:49 AM, Adrian Thurston wrote:
>> First, the easy part ... you can take out --with-ragel and --with-kelbt options.
>> They were only there to fall back to during the transition to the colm frontend.
>> I've committed to the colm parser though and will be removing the old one soon.
>>
>> With regards to linking, it has no effect for me when I used -no-undefined.
>> Seems to get stripped out by autotools because it doesn't make it into the link
>> command.
>>
>> libragel_la_LDFLAGS = -no-undefined
>>
>> ... results in ...
>>
>> libtool: link: g++  -fPIC -DPIC -shared -nostdlib
>> /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crti.o
>> /usr/lib/gcc/x86_64-linux-gnu/5/crtbeginS.o .libs/libragel_la-parsetree.o
>> .libs/libragel_la-longest.o .libs/libragel_la-parsedata.o
>> .libs/libragel_la-inputdata.o .libs/libragel_la-load.o
>> .libs/libragel_la-reducer.o   -Wl,-rpath
>> -Wl,/home/thurston/devel/ragel/src/.libs -Wl,-rpath
>> -Wl,/home/thurston/pkgs/colm/lib -Wl,-rpath -Wl,/home/thurston/pkgs/ragel/lib
>> -Wl,-rpath -Wl,/home/thurston/pkgs/colm/lib -L/home/thurston/pkgs/colm/lib
>> ./.libs/libfsm.so /home/thurston/pkgs/colm/lib/libcolm.so
>> -L/usr/lib/gcc/x86_64-linux-gnu/5
>> -L/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu
>> -L/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib -L/lib/x86_64-linux-gnu
>> -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib
>> -L/usr/lib/gcc/x86_64-linux-gnu/5/../../.. -lstdc++ -lm -lc -lgcc_s
>> /usr/lib/gcc/x86_64-linux-gnu/5/crtendS.o
>> /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crtn.o  -g -Wl,-soname
>> -Wl,libragel.so.0 -o .libs/libragel.so.0.0.0
>>
>> My setup is ubuntu with the following versions.
>>
>> [thurston at railay] src: g++ -v; automake --version; autoconf --version; libtool
>> --version
>> gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.10)
>> automake (GNU automake) 1.15
>> autoconf (GNU Autoconf) 2.69
>> libtool (GNU libtool) 2.4.6
>>
>> Will have to dig a bit. Maybe the option is controlled by some other flag.
>>
>> On 2018-11-26 16:30, Ken Brown wrote:
>>> Thanks.  There are still two problems:
>>>
>>> First, the syntax for the libtool '-no-undefined' flag is wrong.  It should
>>> simply be '-no-undefined' (one leading hyphen, no -Wl), as in the patch I
>>> submitted.  Otherwise, I get the following error if I try to build
>>> shared libraries:
>>>
>>> libtool:   error: can't build x86_64-unknown-cygwin shared library unless
>>> -no-undefined is specified
>>>
>>> Second, although your change takes care of the reference to rl_parse, which is
>>> the only undefined reference in a build --without-ragel, there are two further
>>> "undefined reference" errors if I build with ragel installed:
>>>
>>> .libs/libragel_la-inputdata.o: In function
>>> `InputData::checkLastRef(InputItem*)':
>>> /home/kbrown/src/ragel/src/inputdata.cc:313: undefined reference to
>>> `Parser6::terminateParser()'
>>> [...]
>>> .libs/libragel_la-inputdata.o: In function `InputData::parseKelbt()':
>>> /home/kbrown/src/ragel/src/inputdata.cc:427: undefined reference to
>>> `Scanner::do_scan()'
>>>
>>> These are defined in rlparse.cc and rlscan.cc, which aren't in the sources for
>>> libragel.
>>>
>>> Ken
>>>
>>> On 11/26/2018 11:40 AM, Adrian Thurston wrote:
>>>> Ah, sorry, I forgot to push from my private repo to the public one. There now.
>>>>
>>>> On 2018-11-25 12:11, Ken Brown wrote:
>>>>> Hi Adrian,
>>>>>
>>>>> Thanks.  Have you pushed these changes to the upstream git repo?  I'm getting
>>>>> "Already up to date" when I do "git pull".
>>>>>
>>>>> Ken
>>>>>
>>>>> On 11/25/2018 8:22 AM, Adrian Thurston wrote:
>>>>>> Hi Ken, thank you for the patches. I just enabled --no-undefined and
>>>>>> removed the
>>>>>> reference to the undefined symbol. The parse.c file cannot be included in
>>>>>> libragel because it defines the frontnend language, which is different for
>>>>>> each
>>>>>> binary in the host-* directories. All that was needed was to pass the
>>>>>> reference
>>>>>> to rl_parse into libragel from main.cc. Was already doing that for the backend
>>>>>> code generator (also a colm program).
>>>>>>
>>>>>> Adrian
>>>>>>
>>>>>> On 2018-11-16 16:58, Ken Brown wrote:
>>>>>>> I've just built ragel-7.0.0.11 on Cygwin and added it to the Cygwin
>>>>>>> distribution.  I had to patch the sources in order to build shared
>>>>>>> libraries.
>>>>>>>
>>>>>>> libtool won't build shared libraries on Cygwin unless the
>>>>>>> -no-undefined flag is given.  The first patch of this series does that
>>>>>>> for libfsm and libragel.  But it turns out that there are in fact
>>>>>>> undefined symbols in libragel.  The next two patches fix that.
>>>>>>>
>>>>>>> I don't think these patches do any harm on other platforms.
>>>>>>>
>>>>>>> Ken Brown (3):
>>>>>>>    add -no-undefined to LDFLAGS for libfsm and libragel
>>>>>>>    add dependency of libragel on libfsm and libcolm
>>>>>>>    avoid undefined symbols in libragel
>>>>>>>
>>>>>>>   src/Makefile.am | 20 ++++++++++++++------
>>>>>>>   1 file changed, 14 insertions(+), 6 deletions(-)
>>>>>>
>>>>>> _______________________________________________
>>>>>> ragel-users mailing list
>>>>>> ragel-users at colm.net
>>>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>>>>> _______________________________________________
>>>>> ragel-users mailing list
>>>>> ragel-users at colm.net
>>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>>>>
>>>> _______________________________________________
>>>> ragel-users mailing list
>>>> ragel-users at colm.net
>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>>> _______________________________________________
>>> ragel-users mailing list
>>> ragel-users at colm.net
>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>>
>>
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at colm.net
>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
> 

From thurston at colm.net  Wed Nov 28 09:14:54 2018
From: thurston at colm.net (Adrian Thurston)
Date: Wed, 28 Nov 2018 11:14:54 -0300
Subject: [ragel-users] [PATCH] fix InputData constructor
In-Reply-To: <20181128004309.144472-1-kbrown@cornell.edu>
References: <20181128004309.144472-1-kbrown@cornell.edu>
Message-ID: <2b38b2a1cfec42f44fa36af0c76a16e7@mail.colm.net>

Yikes, I pushed a totally busted ragel. Fixed now.

On 2018-11-27 21:43, Ken Brown wrote:
> Initialize InputData::frontendSections.
> ---
>  src/inputdata.h | 1 +
>  1 file changed, 1 insertion(+)
> 
> diff --git a/src/inputdata.h b/src/inputdata.h
> index ba263a59..44b06b52 100644
> --- a/src/inputdata.h
> +++ b/src/inputdata.h
> @@ -172,6 +172,7 @@ struct InputData
>  	InputData( const HostLang *hostLang, struct colm_sections
> *frontendSections, struct colm_sections *rlhcSections )
>  	:
>  		FsmGbl(hostLang),
> +		frontendSections(frontendSections),
>  		rlhcSections(rlhcSections),
>  		inputFileName(0),
>  		outputFileName(0),


From thurston at colm.net  Wed Nov 28 09:15:59 2018
From: thurston at colm.net (Adrian Thurston)
Date: Wed, 28 Nov 2018 11:15:59 -0300
Subject: [ragel-users] [PATCH 0/3] Fix Cygwin build
In-Reply-To: <83a43d93-6281-bcb5-fa6f-ee662be1282d@cornell.edu>
References: <20181116195839.21284-1-kbrown@cornell.edu>
 <73c45e9029f92be0cc6bdc6b229470d8@mail.colm.net>
 <352e481f-4c91-41bf-43c6-6e9708f6c8b6@cornell.edu>
 <320011175ced45b5722fa7f3a891cb16@mail.colm.net>
 <a5e49590-af6c-6751-dae7-b01f845eab8d@cornell.edu>
 <409d45f1d0b410c3241ec316412df457@mail.colm.net>
 <b54376cd-0892-e41c-890d-003d8ab5c5b7@cornell.edu>
 <83a43d93-6281-bcb5-fa6f-ee662be1282d@cornell.edu>
Message-ID: <5bf66a1af7a49bc98fe3718c4b00196c@mail.colm.net>

Ok, I guess we check for cygwin and use the appropriate option. I don't 
normally build on cygwin so I would like to enforce it on linux as well.

On 2018-11-28 00:03, Ken Brown wrote:
> This seems to confirm my interpretation of "-no-undefined":
> 
> $ libtool --help --mode=link | grep -- -no-undefined
>    -no-undefined     declare that a library does not refer to external 
> symbols
> 
> Ken
> 
> On 11/27/2018 11:09 AM, Ken Brown wrote:
>> OK, that's good that I can forget about --with-ragel.  As to how 
>> -no-undefined
>> works, I've done some googling and still don't fully understand it.  I 
>> see the
>> -no-undefined flag passed to libtool but then it doesn't appear in the 
>> final
>> link command:
>> 
>> /bin/sh ../libtool  --tag=CXX   --mode=link g++  -Wall -g 
>> -no-undefined...
>> 
>> libtool: link: g++ -shared -nostdlib
>> /usr/lib/gcc/x86_64-pc-cygwin/7.3.0/crtbeginS.o  
>> .libs/libfsm_la-idbase.o
>> .libs/libfsm_la-fsmstate.o .libs/libfsm_la-fsmbase.o 
>> .libs/libfsm_la-fsmattach.o
>> .libs/libfsm_la-fsmmin.o .libs/libfsm_la-fsmgraph.o 
>> .libs/libfsm_la-fsmap.o
>> .libs/libfsm_la-fsmcond.o .libs/libfsm_la-fsmnfa.o 
>> .libs/libfsm_la-common.o
>> .libs/libfsm_la-redfsm.o .libs/libfsm_la-gendata.o 
>> .libs/libfsm_la-allocgen.o
>> .libs/libfsm_la-codegen.o .libs/libfsm_la-actexp.o 
>> .libs/libfsm_la-binvar.o
>> .libs/libfsm_la-tables.o .libs/libfsm_la-tabgoto.o 
>> .libs/libfsm_la-tabvar.o
>> .libs/libfsm_la-binary.o .libs/libfsm_la-bingoto.o 
>> .libs/libfsm_la-actloop.o
>> .libs/libfsm_la-flat.o .libs/libfsm_la-flatgoto.o 
>> .libs/libfsm_la-flatvar.o
>> .libs/libfsm_la-goto.o .libs/libfsm_la-gotoloop.o 
>> .libs/libfsm_la-gotoexp.o
>> .libs/libfsm_la-ipgoto.o .libs/libfsm_la-dot.o .libs/libfsm_la-asm.o
>> -L/home/kbrown/src/colm/src -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0
>> -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0/../../../../x86_64-pc-cygwin/lib/../lib
>> -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0/../../../../lib -L/lib/../lib
>> -L/usr/lib/../lib
>> -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0/../../../../x86_64-pc-cygwin/lib
>> -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0/../../.. -lstdc++ -lgcc_s -lgcc 
>> -lcygwin
>> -ladvapi32 -lshell32 -luser32 -lkernel32 -lgcc_s -lgcc
>> /usr/lib/gcc/x86_64-pc-cygwin/7.3.0/crtend.o  -g   -o 
>> .libs/cygfsm-0.dll
>> -Wl,--enable-auto-image-base -Xlinker --out-implib -Xlinker 
>> .libs/libfsm.dll.a
>> 
>> I think the point might be that gcc/g++ will give errors on Cygwin if 
>> there are
>> undefined symbols in shared libraries, and libtool enforces that by 
>> insisting on
>> the -no-undefined flag, which is simply an assertion that there are no 
>> undefined
>> symbols.  That's mostly a guess.
>> 
>> I have the same automake, autoconf, and libtool versions as you, but a 
>> newer gcc
>> (7.3.0).
>> 
>> Ken
>> 
>> On 11/27/2018 5:49 AM, Adrian Thurston wrote:
>>> First, the easy part ... you can take out --with-ragel and 
>>> --with-kelbt options.
>>> They were only there to fall back to during the transition to the 
>>> colm frontend.
>>> I've committed to the colm parser though and will be removing the old 
>>> one soon.
>>> 
>>> With regards to linking, it has no effect for me when I used 
>>> -no-undefined.
>>> Seems to get stripped out by autotools because it doesn't make it 
>>> into the link
>>> command.
>>> 
>>> libragel_la_LDFLAGS = -no-undefined
>>> 
>>> ... results in ...
>>> 
>>> libtool: link: g++  -fPIC -DPIC -shared -nostdlib
>>> /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crti.o
>>> /usr/lib/gcc/x86_64-linux-gnu/5/crtbeginS.o 
>>> .libs/libragel_la-parsetree.o
>>> .libs/libragel_la-longest.o .libs/libragel_la-parsedata.o
>>> .libs/libragel_la-inputdata.o .libs/libragel_la-load.o
>>> .libs/libragel_la-reducer.o   -Wl,-rpath
>>> -Wl,/home/thurston/devel/ragel/src/.libs -Wl,-rpath
>>> -Wl,/home/thurston/pkgs/colm/lib -Wl,-rpath 
>>> -Wl,/home/thurston/pkgs/ragel/lib
>>> -Wl,-rpath -Wl,/home/thurston/pkgs/colm/lib 
>>> -L/home/thurston/pkgs/colm/lib
>>> ./.libs/libfsm.so /home/thurston/pkgs/colm/lib/libcolm.so
>>> -L/usr/lib/gcc/x86_64-linux-gnu/5
>>> -L/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu
>>> -L/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib 
>>> -L/lib/x86_64-linux-gnu
>>> -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib
>>> -L/usr/lib/gcc/x86_64-linux-gnu/5/../../.. -lstdc++ -lm -lc -lgcc_s
>>> /usr/lib/gcc/x86_64-linux-gnu/5/crtendS.o
>>> /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crtn.o  -g 
>>> -Wl,-soname
>>> -Wl,libragel.so.0 -o .libs/libragel.so.0.0.0
>>> 
>>> My setup is ubuntu with the following versions.
>>> 
>>> [thurston at railay] src: g++ -v; automake --version; autoconf 
>>> --version; libtool
>>> --version
>>> gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.10)
>>> automake (GNU automake) 1.15
>>> autoconf (GNU Autoconf) 2.69
>>> libtool (GNU libtool) 2.4.6
>>> 
>>> Will have to dig a bit. Maybe the option is controlled by some other 
>>> flag.
>>> 
>>> On 2018-11-26 16:30, Ken Brown wrote:
>>>> Thanks.  There are still two problems:
>>>> 
>>>> First, the syntax for the libtool '-no-undefined' flag is wrong.  It 
>>>> should
>>>> simply be '-no-undefined' (one leading hyphen, no -Wl), as in the 
>>>> patch I
>>>> submitted.  Otherwise, I get the following error if I try to build
>>>> shared libraries:
>>>> 
>>>> libtool:   error: can't build x86_64-unknown-cygwin shared library 
>>>> unless
>>>> -no-undefined is specified
>>>> 
>>>> Second, although your change takes care of the reference to 
>>>> rl_parse, which is
>>>> the only undefined reference in a build --without-ragel, there are 
>>>> two further
>>>> "undefined reference" errors if I build with ragel installed:
>>>> 
>>>> .libs/libragel_la-inputdata.o: In function
>>>> `InputData::checkLastRef(InputItem*)':
>>>> /home/kbrown/src/ragel/src/inputdata.cc:313: undefined reference to
>>>> `Parser6::terminateParser()'
>>>> [...]
>>>> .libs/libragel_la-inputdata.o: In function 
>>>> `InputData::parseKelbt()':
>>>> /home/kbrown/src/ragel/src/inputdata.cc:427: undefined reference to
>>>> `Scanner::do_scan()'
>>>> 
>>>> These are defined in rlparse.cc and rlscan.cc, which aren't in the 
>>>> sources for
>>>> libragel.
>>>> 
>>>> Ken
>>>> 
>>>> On 11/26/2018 11:40 AM, Adrian Thurston wrote:
>>>>> Ah, sorry, I forgot to push from my private repo to the public one. 
>>>>> There now.
>>>>> 
>>>>> On 2018-11-25 12:11, Ken Brown wrote:
>>>>>> Hi Adrian,
>>>>>> 
>>>>>> Thanks.  Have you pushed these changes to the upstream git repo?  
>>>>>> I'm getting
>>>>>> "Already up to date" when I do "git pull".
>>>>>> 
>>>>>> Ken
>>>>>> 
>>>>>> On 11/25/2018 8:22 AM, Adrian Thurston wrote:
>>>>>>> Hi Ken, thank you for the patches. I just enabled --no-undefined 
>>>>>>> and
>>>>>>> removed the
>>>>>>> reference to the undefined symbol. The parse.c file cannot be 
>>>>>>> included in
>>>>>>> libragel because it defines the frontnend language, which is 
>>>>>>> different for
>>>>>>> each
>>>>>>> binary in the host-* directories. All that was needed was to pass 
>>>>>>> the
>>>>>>> reference
>>>>>>> to rl_parse into libragel from main.cc. Was already doing that 
>>>>>>> for the backend
>>>>>>> code generator (also a colm program).
>>>>>>> 
>>>>>>> Adrian
>>>>>>> 
>>>>>>> On 2018-11-16 16:58, Ken Brown wrote:
>>>>>>>> I've just built ragel-7.0.0.11 on Cygwin and added it to the 
>>>>>>>> Cygwin
>>>>>>>> distribution.  I had to patch the sources in order to build 
>>>>>>>> shared
>>>>>>>> libraries.
>>>>>>>> 
>>>>>>>> libtool won't build shared libraries on Cygwin unless the
>>>>>>>> -no-undefined flag is given.  The first patch of this series 
>>>>>>>> does that
>>>>>>>> for libfsm and libragel.  But it turns out that there are in 
>>>>>>>> fact
>>>>>>>> undefined symbols in libragel.  The next two patches fix that.
>>>>>>>> 
>>>>>>>> I don't think these patches do any harm on other platforms.
>>>>>>>> 
>>>>>>>> Ken Brown (3):
>>>>>>>>    add -no-undefined to LDFLAGS for libfsm and libragel
>>>>>>>>    add dependency of libragel on libfsm and libcolm
>>>>>>>>    avoid undefined symbols in libragel
>>>>>>>> 
>>>>>>>>   src/Makefile.am | 20 ++++++++++++++------
>>>>>>>>   1 file changed, 14 insertions(+), 6 deletions(-)
>>>>>>> 
>>>>>>> _______________________________________________
>>>>>>> ragel-users mailing list
>>>>>>> ragel-users at colm.net
>>>>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>>>>>> _______________________________________________
>>>>>> ragel-users mailing list
>>>>>> ragel-users at colm.net
>>>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>>>>> 
>>>>> _______________________________________________
>>>>> ragel-users mailing list
>>>>> ragel-users at colm.net
>>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>>>> _______________________________________________
>>>> ragel-users mailing list
>>>> ragel-users at colm.net
>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>>> 
>>> 
>>> _______________________________________________
>>> ragel-users mailing list
>>> ragel-users at colm.net
>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at colm.net
>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>> 
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users


From kbrown at cornell.edu  Wed Nov 28 10:12:55 2018
From: kbrown at cornell.edu (Ken Brown)
Date: Wed, 28 Nov 2018 15:12:55 +0000
Subject: [ragel-users] [PATCH 0/3] Fix Cygwin build
In-Reply-To: <5bf66a1af7a49bc98fe3718c4b00196c@mail.colm.net>
References: <20181116195839.21284-1-kbrown@cornell.edu>
 <73c45e9029f92be0cc6bdc6b229470d8@mail.colm.net>
 <352e481f-4c91-41bf-43c6-6e9708f6c8b6@cornell.edu>
 <320011175ced45b5722fa7f3a891cb16@mail.colm.net>
 <a5e49590-af6c-6751-dae7-b01f845eab8d@cornell.edu>
 <409d45f1d0b410c3241ec316412df457@mail.colm.net>
 <b54376cd-0892-e41c-890d-003d8ab5c5b7@cornell.edu>
 <83a43d93-6281-bcb5-fa6f-ee662be1282d@cornell.edu>
 <5bf66a1af7a49bc98fe3718c4b00196c@mail.colm.net>
Message-ID: <114e37e4-fda8-d7cb-40be-92961bf73370@cornell.edu>

Rather than check for Cygwin, I think you can just use

   -Wl,--no-undefined -no-undefined

on all platforms.  That works fine on Cygwin, and I think it should work on 
Linux too.  libtool is happy to see '-no-undefined' on Cygwin and probably 
doesn't care about it on Linux, while '-Wl,--no-undefined' shows up in the link 
command on all platforms (and is redundant on Cygwin).

Ken

On 11/28/2018 9:15 AM, Adrian Thurston wrote:
> Ok, I guess we check for cygwin and use the appropriate option. I don't normally 
> build on cygwin so I would like to enforce it on linux as well.
> 
> On 2018-11-28 00:03, Ken Brown wrote:
>> This seems to confirm my interpretation of "-no-undefined":
>>
>> $ libtool --help --mode=link | grep -- -no-undefined
>>    -no-undefined     declare that a library does not refer to external symbols
>>
>> Ken
>>
>> On 11/27/2018 11:09 AM, Ken Brown wrote:
>>> OK, that's good that I can forget about --with-ragel.  As to how -no-undefined
>>> works, I've done some googling and still don't fully understand it.  I see the
>>> -no-undefined flag passed to libtool but then it doesn't appear in the final
>>> link command:
>>>
>>> /bin/sh ../libtool  --tag=CXX   --mode=link g++  -Wall -g -no-undefined...
>>>
>>> libtool: link: g++ -shared -nostdlib
>>> /usr/lib/gcc/x86_64-pc-cygwin/7.3.0/crtbeginS.o .libs/libfsm_la-idbase.o
>>> .libs/libfsm_la-fsmstate.o .libs/libfsm_la-fsmbase.o .libs/libfsm_la-fsmattach.o
>>> .libs/libfsm_la-fsmmin.o .libs/libfsm_la-fsmgraph.o .libs/libfsm_la-fsmap.o
>>> .libs/libfsm_la-fsmcond.o .libs/libfsm_la-fsmnfa.o .libs/libfsm_la-common.o
>>> .libs/libfsm_la-redfsm.o .libs/libfsm_la-gendata.o .libs/libfsm_la-allocgen.o
>>> .libs/libfsm_la-codegen.o .libs/libfsm_la-actexp.o .libs/libfsm_la-binvar.o
>>> .libs/libfsm_la-tables.o .libs/libfsm_la-tabgoto.o .libs/libfsm_la-tabvar.o
>>> .libs/libfsm_la-binary.o .libs/libfsm_la-bingoto.o .libs/libfsm_la-actloop.o
>>> .libs/libfsm_la-flat.o .libs/libfsm_la-flatgoto.o .libs/libfsm_la-flatvar.o
>>> .libs/libfsm_la-goto.o .libs/libfsm_la-gotoloop.o .libs/libfsm_la-gotoexp.o
>>> .libs/libfsm_la-ipgoto.o .libs/libfsm_la-dot.o .libs/libfsm_la-asm.o
>>> -L/home/kbrown/src/colm/src -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0
>>> -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0/../../../../x86_64-pc-cygwin/lib/../lib
>>> -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0/../../../../lib -L/lib/../lib
>>> -L/usr/lib/../lib
>>> -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0/../../../../x86_64-pc-cygwin/lib
>>> -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0/../../.. -lstdc++ -lgcc_s -lgcc -lcygwin
>>> -ladvapi32 -lshell32 -luser32 -lkernel32 -lgcc_s -lgcc
>>> /usr/lib/gcc/x86_64-pc-cygwin/7.3.0/crtend.o  -g   -o .libs/cygfsm-0.dll
>>> -Wl,--enable-auto-image-base -Xlinker --out-implib -Xlinker .libs/libfsm.dll.a
>>>
>>> I think the point might be that gcc/g++ will give errors on Cygwin if there are
>>> undefined symbols in shared libraries, and libtool enforces that by insisting on
>>> the -no-undefined flag, which is simply an assertion that there are no undefined
>>> symbols.  That's mostly a guess.
>>>
>>> I have the same automake, autoconf, and libtool versions as you, but a newer gcc
>>> (7.3.0).
>>>
>>> Ken
>>>
>>> On 11/27/2018 5:49 AM, Adrian Thurston wrote:
>>>> First, the easy part ... you can take out --with-ragel and --with-kelbt 
>>>> options.
>>>> They were only there to fall back to during the transition to the colm 
>>>> frontend.
>>>> I've committed to the colm parser though and will be removing the old one soon.
>>>>
>>>> With regards to linking, it has no effect for me when I used -no-undefined.
>>>> Seems to get stripped out by autotools because it doesn't make it into the link
>>>> command.
>>>>
>>>> libragel_la_LDFLAGS = -no-undefined
>>>>
>>>> ... results in ...
>>>>
>>>> libtool: link: g++  -fPIC -DPIC -shared -nostdlib
>>>> /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crti.o
>>>> /usr/lib/gcc/x86_64-linux-gnu/5/crtbeginS.o .libs/libragel_la-parsetree.o
>>>> .libs/libragel_la-longest.o .libs/libragel_la-parsedata.o
>>>> .libs/libragel_la-inputdata.o .libs/libragel_la-load.o
>>>> .libs/libragel_la-reducer.o   -Wl,-rpath
>>>> -Wl,/home/thurston/devel/ragel/src/.libs -Wl,-rpath
>>>> -Wl,/home/thurston/pkgs/colm/lib -Wl,-rpath -Wl,/home/thurston/pkgs/ragel/lib
>>>> -Wl,-rpath -Wl,/home/thurston/pkgs/colm/lib -L/home/thurston/pkgs/colm/lib
>>>> ./.libs/libfsm.so /home/thurston/pkgs/colm/lib/libcolm.so
>>>> -L/usr/lib/gcc/x86_64-linux-gnu/5
>>>> -L/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu
>>>> -L/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib -L/lib/x86_64-linux-gnu
>>>> -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib
>>>> -L/usr/lib/gcc/x86_64-linux-gnu/5/../../.. -lstdc++ -lm -lc -lgcc_s
>>>> /usr/lib/gcc/x86_64-linux-gnu/5/crtendS.o
>>>> /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crtn.o  -g 
>>>> -Wl,-soname
>>>> -Wl,libragel.so.0 -o .libs/libragel.so.0.0.0
>>>>
>>>> My setup is ubuntu with the following versions.
>>>>
>>>> [thurston at railay] src: g++ -v; automake --version; autoconf --version; libtool
>>>> --version
>>>> gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.10)
>>>> automake (GNU automake) 1.15
>>>> autoconf (GNU Autoconf) 2.69
>>>> libtool (GNU libtool) 2.4.6
>>>>
>>>> Will have to dig a bit. Maybe the option is controlled by some other flag.
>>>>
>>>> On 2018-11-26 16:30, Ken Brown wrote:
>>>>> Thanks.  There are still two problems:
>>>>>
>>>>> First, the syntax for the libtool '-no-undefined' flag is wrong.  It should
>>>>> simply be '-no-undefined' (one leading hyphen, no -Wl), as in the patch I
>>>>> submitted.  Otherwise, I get the following error if I try to build
>>>>> shared libraries:
>>>>>
>>>>> libtool:   error: can't build x86_64-unknown-cygwin shared library unless
>>>>> -no-undefined is specified
>>>>>
>>>>> Second, although your change takes care of the reference to rl_parse, which is
>>>>> the only undefined reference in a build --without-ragel, there are two further
>>>>> "undefined reference" errors if I build with ragel installed:
>>>>>
>>>>> .libs/libragel_la-inputdata.o: In function
>>>>> `InputData::checkLastRef(InputItem*)':
>>>>> /home/kbrown/src/ragel/src/inputdata.cc:313: undefined reference to
>>>>> `Parser6::terminateParser()'
>>>>> [...]
>>>>> .libs/libragel_la-inputdata.o: In function `InputData::parseKelbt()':
>>>>> /home/kbrown/src/ragel/src/inputdata.cc:427: undefined reference to
>>>>> `Scanner::do_scan()'
>>>>>
>>>>> These are defined in rlparse.cc and rlscan.cc, which aren't in the sources for
>>>>> libragel.
>>>>>
>>>>> Ken
>>>>>
>>>>> On 11/26/2018 11:40 AM, Adrian Thurston wrote:
>>>>>> Ah, sorry, I forgot to push from my private repo to the public one. There 
>>>>>> now.
>>>>>>
>>>>>> On 2018-11-25 12:11, Ken Brown wrote:
>>>>>>> Hi Adrian,
>>>>>>>
>>>>>>> Thanks.  Have you pushed these changes to the upstream git repo? I'm getting
>>>>>>> "Already up to date" when I do "git pull".
>>>>>>>
>>>>>>> Ken
>>>>>>>
>>>>>>> On 11/25/2018 8:22 AM, Adrian Thurston wrote:
>>>>>>>> Hi Ken, thank you for the patches. I just enabled --no-undefined and
>>>>>>>> removed the
>>>>>>>> reference to the undefined symbol. The parse.c file cannot be included in
>>>>>>>> libragel because it defines the frontnend language, which is different for
>>>>>>>> each
>>>>>>>> binary in the host-* directories. All that was needed was to pass the
>>>>>>>> reference
>>>>>>>> to rl_parse into libragel from main.cc. Was already doing that for the 
>>>>>>>> backend
>>>>>>>> code generator (also a colm program).
>>>>>>>>
>>>>>>>> Adrian
>>>>>>>>
>>>>>>>> On 2018-11-16 16:58, Ken Brown wrote:
>>>>>>>>> I've just built ragel-7.0.0.11 on Cygwin and added it to the Cygwin
>>>>>>>>> distribution.  I had to patch the sources in order to build shared
>>>>>>>>> libraries.
>>>>>>>>>
>>>>>>>>> libtool won't build shared libraries on Cygwin unless the
>>>>>>>>> -no-undefined flag is given.  The first patch of this series does that
>>>>>>>>> for libfsm and libragel.  But it turns out that there are in fact
>>>>>>>>> undefined symbols in libragel.  The next two patches fix that.
>>>>>>>>>
>>>>>>>>> I don't think these patches do any harm on other platforms.
>>>>>>>>>
>>>>>>>>> Ken Brown (3):
>>>>>>>>>    add -no-undefined to LDFLAGS for libfsm and libragel
>>>>>>>>>    add dependency of libragel on libfsm and libcolm
>>>>>>>>>    avoid undefined symbols in libragel
>>>>>>>>>
>>>>>>>>>   src/Makefile.am | 20 ++++++++++++++------
>>>>>>>>>   1 file changed, 14 insertions(+), 6 deletions(-)
>>>>>>>>
>>>>>>>> _______________________________________________
>>>>>>>> ragel-users mailing list
>>>>>>>> ragel-users at colm.net
>>>>>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>>>>>>> _______________________________________________
>>>>>>> ragel-users mailing list
>>>>>>> ragel-users at colm.net
>>>>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>>>>>>
>>>>>> _______________________________________________
>>>>>> ragel-users mailing list
>>>>>> ragel-users at colm.net
>>>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>>>>> _______________________________________________
>>>>> ragel-users mailing list
>>>>> ragel-users at colm.net
>>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>>>>
>>>>
>>>> _______________________________________________
>>>> ragel-users mailing list
>>>> ragel-users at colm.net
>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>>> _______________________________________________
>>> ragel-users mailing list
>>> ragel-users at colm.net
>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>>>
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at colm.net
>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
> 
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users

From kbrown at cornell.edu  Wed Nov 28 10:45:05 2018
From: kbrown at cornell.edu (Ken Brown)
Date: Wed, 28 Nov 2018 15:45:05 +0000
Subject: [ragel-users] [PATCH 0/3] Fix Cygwin build
In-Reply-To: <114e37e4-fda8-d7cb-40be-92961bf73370@cornell.edu>
References: <20181116195839.21284-1-kbrown@cornell.edu>
 <73c45e9029f92be0cc6bdc6b229470d8@mail.colm.net>
 <352e481f-4c91-41bf-43c6-6e9708f6c8b6@cornell.edu>
 <320011175ced45b5722fa7f3a891cb16@mail.colm.net>
 <a5e49590-af6c-6751-dae7-b01f845eab8d@cornell.edu>
 <409d45f1d0b410c3241ec316412df457@mail.colm.net>
 <b54376cd-0892-e41c-890d-003d8ab5c5b7@cornell.edu>
 <83a43d93-6281-bcb5-fa6f-ee662be1282d@cornell.edu>
 <5bf66a1af7a49bc98fe3718c4b00196c@mail.colm.net>
 <114e37e4-fda8-d7cb-40be-92961bf73370@cornell.edu>
Message-ID: <6a997c36-2750-d6b1-e33e-b6ac56b92179@cornell.edu>

A patch along these lines is attached.

On 11/28/2018 10:12 AM, Ken Brown wrote:
> Rather than check for Cygwin, I think you can just use
> 
>     -Wl,--no-undefined -no-undefined
> 
> on all platforms.  That works fine on Cygwin, and I think it should work on
> Linux too.  libtool is happy to see '-no-undefined' on Cygwin and probably
> doesn't care about it on Linux, while '-Wl,--no-undefined' shows up in the link
> command on all platforms (and is redundant on Cygwin).
> 
> Ken
> 
> On 11/28/2018 9:15 AM, Adrian Thurston wrote:
>> Ok, I guess we check for cygwin and use the appropriate option. I don't normally
>> build on cygwin so I would like to enforce it on linux as well.
>>
>> On 2018-11-28 00:03, Ken Brown wrote:
>>> This seems to confirm my interpretation of "-no-undefined":
>>>
>>> $ libtool --help --mode=link | grep -- -no-undefined
>>>     -no-undefined     declare that a library does not refer to external symbols
>>>
>>> Ken
>>>
>>> On 11/27/2018 11:09 AM, Ken Brown wrote:
>>>> OK, that's good that I can forget about --with-ragel.  As to how -no-undefined
>>>> works, I've done some googling and still don't fully understand it.  I see the
>>>> -no-undefined flag passed to libtool but then it doesn't appear in the final
>>>> link command:
>>>>
>>>> /bin/sh ../libtool  --tag=CXX   --mode=link g++  -Wall -g -no-undefined...
>>>>
>>>> libtool: link: g++ -shared -nostdlib
>>>> /usr/lib/gcc/x86_64-pc-cygwin/7.3.0/crtbeginS.o .libs/libfsm_la-idbase.o
>>>> .libs/libfsm_la-fsmstate.o .libs/libfsm_la-fsmbase.o .libs/libfsm_la-fsmattach.o
>>>> .libs/libfsm_la-fsmmin.o .libs/libfsm_la-fsmgraph.o .libs/libfsm_la-fsmap.o
>>>> .libs/libfsm_la-fsmcond.o .libs/libfsm_la-fsmnfa.o .libs/libfsm_la-common.o
>>>> .libs/libfsm_la-redfsm.o .libs/libfsm_la-gendata.o .libs/libfsm_la-allocgen.o
>>>> .libs/libfsm_la-codegen.o .libs/libfsm_la-actexp.o .libs/libfsm_la-binvar.o
>>>> .libs/libfsm_la-tables.o .libs/libfsm_la-tabgoto.o .libs/libfsm_la-tabvar.o
>>>> .libs/libfsm_la-binary.o .libs/libfsm_la-bingoto.o .libs/libfsm_la-actloop.o
>>>> .libs/libfsm_la-flat.o .libs/libfsm_la-flatgoto.o .libs/libfsm_la-flatvar.o
>>>> .libs/libfsm_la-goto.o .libs/libfsm_la-gotoloop.o .libs/libfsm_la-gotoexp.o
>>>> .libs/libfsm_la-ipgoto.o .libs/libfsm_la-dot.o .libs/libfsm_la-asm.o
>>>> -L/home/kbrown/src/colm/src -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0
>>>> -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0/../../../../x86_64-pc-cygwin/lib/../lib
>>>> -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0/../../../../lib -L/lib/../lib
>>>> -L/usr/lib/../lib
>>>> -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0/../../../../x86_64-pc-cygwin/lib
>>>> -L/usr/lib/gcc/x86_64-pc-cygwin/7.3.0/../../.. -lstdc++ -lgcc_s -lgcc -lcygwin
>>>> -ladvapi32 -lshell32 -luser32 -lkernel32 -lgcc_s -lgcc
>>>> /usr/lib/gcc/x86_64-pc-cygwin/7.3.0/crtend.o  -g   -o .libs/cygfsm-0.dll
>>>> -Wl,--enable-auto-image-base -Xlinker --out-implib -Xlinker .libs/libfsm.dll.a
>>>>
>>>> I think the point might be that gcc/g++ will give errors on Cygwin if there are
>>>> undefined symbols in shared libraries, and libtool enforces that by insisting on
>>>> the -no-undefined flag, which is simply an assertion that there are no undefined
>>>> symbols.  That's mostly a guess.
>>>>
>>>> I have the same automake, autoconf, and libtool versions as you, but a newer gcc
>>>> (7.3.0).
>>>>
>>>> Ken
>>>>
>>>> On 11/27/2018 5:49 AM, Adrian Thurston wrote:
>>>>> First, the easy part ... you can take out --with-ragel and --with-kelbt
>>>>> options.
>>>>> They were only there to fall back to during the transition to the colm
>>>>> frontend.
>>>>> I've committed to the colm parser though and will be removing the old one soon.
>>>>>
>>>>> With regards to linking, it has no effect for me when I used -no-undefined.
>>>>> Seems to get stripped out by autotools because it doesn't make it into the link
>>>>> command.
>>>>>
>>>>> libragel_la_LDFLAGS = -no-undefined
>>>>>
>>>>> ... results in ...
>>>>>
>>>>> libtool: link: g++  -fPIC -DPIC -shared -nostdlib
>>>>> /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crti.o
>>>>> /usr/lib/gcc/x86_64-linux-gnu/5/crtbeginS.o .libs/libragel_la-parsetree.o
>>>>> .libs/libragel_la-longest.o .libs/libragel_la-parsedata.o
>>>>> .libs/libragel_la-inputdata.o .libs/libragel_la-load.o
>>>>> .libs/libragel_la-reducer.o   -Wl,-rpath
>>>>> -Wl,/home/thurston/devel/ragel/src/.libs -Wl,-rpath
>>>>> -Wl,/home/thurston/pkgs/colm/lib -Wl,-rpath -Wl,/home/thurston/pkgs/ragel/lib
>>>>> -Wl,-rpath -Wl,/home/thurston/pkgs/colm/lib -L/home/thurston/pkgs/colm/lib
>>>>> ./.libs/libfsm.so /home/thurston/pkgs/colm/lib/libcolm.so
>>>>> -L/usr/lib/gcc/x86_64-linux-gnu/5
>>>>> -L/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu
>>>>> -L/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib -L/lib/x86_64-linux-gnu
>>>>> -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib
>>>>> -L/usr/lib/gcc/x86_64-linux-gnu/5/../../.. -lstdc++ -lm -lc -lgcc_s
>>>>> /usr/lib/gcc/x86_64-linux-gnu/5/crtendS.o
>>>>> /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crtn.o  -g
>>>>> -Wl,-soname
>>>>> -Wl,libragel.so.0 -o .libs/libragel.so.0.0.0
>>>>>
>>>>> My setup is ubuntu with the following versions.
>>>>>
>>>>> [thurston at railay] src: g++ -v; automake --version; autoconf --version; libtool
>>>>> --version
>>>>> gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.10)
>>>>> automake (GNU automake) 1.15
>>>>> autoconf (GNU Autoconf) 2.69
>>>>> libtool (GNU libtool) 2.4.6
>>>>>
>>>>> Will have to dig a bit. Maybe the option is controlled by some other flag.
>>>>>
>>>>> On 2018-11-26 16:30, Ken Brown wrote:
>>>>>> Thanks.  There are still two problems:
>>>>>>
>>>>>> First, the syntax for the libtool '-no-undefined' flag is wrong.  It should
>>>>>> simply be '-no-undefined' (one leading hyphen, no -Wl), as in the patch I
>>>>>> submitted.  Otherwise, I get the following error if I try to build
>>>>>> shared libraries:
>>>>>>
>>>>>> libtool:   error: can't build x86_64-unknown-cygwin shared library unless
>>>>>> -no-undefined is specified
>>>>>>
>>>>>> Second, although your change takes care of the reference to rl_parse, which is
>>>>>> the only undefined reference in a build --without-ragel, there are two further
>>>>>> "undefined reference" errors if I build with ragel installed:
>>>>>>
>>>>>> .libs/libragel_la-inputdata.o: In function
>>>>>> `InputData::checkLastRef(InputItem*)':
>>>>>> /home/kbrown/src/ragel/src/inputdata.cc:313: undefined reference to
>>>>>> `Parser6::terminateParser()'
>>>>>> [...]
>>>>>> .libs/libragel_la-inputdata.o: In function `InputData::parseKelbt()':
>>>>>> /home/kbrown/src/ragel/src/inputdata.cc:427: undefined reference to
>>>>>> `Scanner::do_scan()'
>>>>>>
>>>>>> These are defined in rlparse.cc and rlscan.cc, which aren't in the sources for
>>>>>> libragel.
>>>>>>
>>>>>> Ken
>>>>>>
>>>>>> On 11/26/2018 11:40 AM, Adrian Thurston wrote:
>>>>>>> Ah, sorry, I forgot to push from my private repo to the public one. There
>>>>>>> now.
>>>>>>>
>>>>>>> On 2018-11-25 12:11, Ken Brown wrote:
>>>>>>>> Hi Adrian,
>>>>>>>>
>>>>>>>> Thanks.  Have you pushed these changes to the upstream git repo? I'm getting
>>>>>>>> "Already up to date" when I do "git pull".
>>>>>>>>
>>>>>>>> Ken
>>>>>>>>
>>>>>>>> On 11/25/2018 8:22 AM, Adrian Thurston wrote:
>>>>>>>>> Hi Ken, thank you for the patches. I just enabled --no-undefined and
>>>>>>>>> removed the
>>>>>>>>> reference to the undefined symbol. The parse.c file cannot be included in
>>>>>>>>> libragel because it defines the frontnend language, which is different for
>>>>>>>>> each
>>>>>>>>> binary in the host-* directories. All that was needed was to pass the
>>>>>>>>> reference
>>>>>>>>> to rl_parse into libragel from main.cc. Was already doing that for the
>>>>>>>>> backend
>>>>>>>>> code generator (also a colm program).
>>>>>>>>>
>>>>>>>>> Adrian
>>>>>>>>>
>>>>>>>>> On 2018-11-16 16:58, Ken Brown wrote:
>>>>>>>>>> I've just built ragel-7.0.0.11 on Cygwin and added it to the Cygwin
>>>>>>>>>> distribution.  I had to patch the sources in order to build shared
>>>>>>>>>> libraries.
>>>>>>>>>>
>>>>>>>>>> libtool won't build shared libraries on Cygwin unless the
>>>>>>>>>> -no-undefined flag is given.  The first patch of this series does that
>>>>>>>>>> for libfsm and libragel.  But it turns out that there are in fact
>>>>>>>>>> undefined symbols in libragel.  The next two patches fix that.
>>>>>>>>>>
>>>>>>>>>> I don't think these patches do any harm on other platforms.
>>>>>>>>>>
>>>>>>>>>> Ken Brown (3):
>>>>>>>>>>     add -no-undefined to LDFLAGS for libfsm and libragel
>>>>>>>>>>     add dependency of libragel on libfsm and libcolm
>>>>>>>>>>     avoid undefined symbols in libragel
>>>>>>>>>>
>>>>>>>>>>    src/Makefile.am | 20 ++++++++++++++------
>>>>>>>>>>    1 file changed, 14 insertions(+), 6 deletions(-)
>>>>>>>>>
>>>>>>>>> _______________________________________________
>>>>>>>>> ragel-users mailing list
>>>>>>>>> ragel-users at colm.net
>>>>>>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>>>>>>>> _______________________________________________
>>>>>>>> ragel-users mailing list
>>>>>>>> ragel-users at colm.net
>>>>>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>>>>>>>
>>>>>>> _______________________________________________
>>>>>>> ragel-users mailing list
>>>>>>> ragel-users at colm.net
>>>>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>>>>>> _______________________________________________
>>>>>> ragel-users mailing list
>>>>>> ragel-users at colm.net
>>>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>>>>>
>>>>>
>>>>> _______________________________________________
>>>>> ragel-users mailing list
>>>>> ragel-users at colm.net
>>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>>>> _______________________________________________
>>>> ragel-users mailing list
>>>> ragel-users at colm.net
>>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>>>>
>>> _______________________________________________
>>> ragel-users mailing list
>>> ragel-users at colm.net
>>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
>>
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at colm.net
>> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
> _______________________________________________
> ragel-users mailing list
> ragel-users at colm.net
> http://www.colm.net/cgi-bin/mailman/listinfo/ragel-users
> 
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: 0001-add-libtool-s-no-undefined-flag.patch
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20181128/51c86775/attachment-0001.ksh>

