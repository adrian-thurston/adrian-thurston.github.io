From drbacher at alum.mit.edu  Fri Dec  2 06:36:40 2011
From: drbacher at alum.mit.edu (David Bacher)
Date: Thu, 1 Dec 2011 22:36:40 -0800
Subject: [ragel-users] configure patch to respect CXXFLAGS
Message-ID: <0397FCCB-442E-406F-800C-28AAC7A9BCC6@alum.mit.edu>

Hello,
Thanks for ragel!

I recently tried to compile ragel via macports, but ran into problems. I tracked the issue down to the configure script not using the CXXFLAGS value passed through the environment. It looks like configure always sets CXXFLAGS to -g.

The patch for the configure script is straightforward (attached), but I don't know enough autoconf to make the appropriate changes to configure.in. 

Can you fix the configure script in an upcoming release?

Let me know if you'd like me to provide my config.log in case it turns out to be more difficult than I thought to reproduce this. 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: configure-cxxflags.patch
Type: application/octet-stream
Size: 343 bytes
Desc: not available
URL: <http://www.colm.net/pipermail/ragel/attachments/20111201/27737bb2/attachment.obj>
-------------- next part --------------

Thanks,
-dave

David Bacher
drbacher at alum.mit.edu
http://squizion.net/



-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://www.colm.net/pipermail/ragel/attachments/20111201/27737bb2/attachment.sig>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From conrad.steenberg at gmail.com  Sat Dec 10 02:43:08 2011
From: conrad.steenberg at gmail.com (Conrad Steenberg)
Date: Fri, 09 Dec 2011 18:43:08 -0800
Subject: [ragel-users] Crack back-end contribution
Message-ID: <1323484988.3375.6.camel@conrad-MacBookPro>

Hi all,

I made a back-end for the Crack language and would like to see if it can
be integrated into the current svn verion.

There's a Mercurial repository at
https://bitbucket.org/hengestone/ragel-crack but of course I can produce
a patch file against the official svn version (currently r2502).

The current version produces working versions of atoi.rl and cppscan.rl
for Crack, and a Ruby version of the former since I based the new code
on rubyflat.[h/cc].

I'll continue to add more tests, but would like to upstream my changes
for all the usual reasons and to help keep the patches small.

Comments?

Thanks!
Conrad
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: This is a digitally signed message part
URL: <http://www.colm.net/pipermail/ragel/attachments/20111209/8fecd1b0/attachment.sig>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From thurston at complang.org  Tue Dec 13 03:11:27 2011
From: thurston at complang.org (Adrian Thurston)
Date: Mon, 12 Dec 2011 19:11:27 -0800
Subject: [ragel-users] Crack back-end contribution
In-Reply-To: <1323484988.3375.6.camel@conrad-MacBookPro>
References: <1323484988.3375.6.camel@conrad-MacBookPro>
Message-ID: <4EE6C25F.5040104@complang.org>

Hi Conrad,

Thanks for the contribution. My apologies I didn't have some direction 
for you when it was needed. A patch against the 6.7 tag will allow me to 
get it out soonest. 7.0 could take some time so I'll probably create a 
version 6 branch.

http://www.complang.org/redmine/issues/338

On 11-12-09 06:43 PM, Conrad Steenberg wrote:
> Hi all,
>
> I made a back-end for the Crack language and would like to see if it can
> be integrated into the current svn verion.
>
> There's a Mercurial repository at
> https://bitbucket.org/hengestone/ragel-crack but of course I can produce
> a patch file against the official svn version (currently r2502).
>
> The current version produces working versions of atoi.rl and cppscan.rl
> for Crack, and a Ruby version of the former since I based the new code
> on rubyflat.[h/cc].
>
> I'll continue to add more tests, but would like to upstream my changes
> for all the usual reasons and to help keep the patches small.
>
> Comments?
>
> Thanks!
> Conrad
>
>
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From conrad.steenberg at gmail.com  Tue Dec 13 03:22:00 2011
From: conrad.steenberg at gmail.com (Conrad Steenberg)
Date: Mon, 12 Dec 2011 19:22:00 -0800
Subject: [ragel-users] Crack back-end contribution
In-Reply-To: <4EE6C25F.5040104@complang.org>
References: <1323484988.3375.6.camel@conrad-MacBookPro>
	<4EE6C25F.5040104@complang.org>
Message-ID: <1323746520.15668.1.camel@conrad-MacBookPro>

Hi Andrew,

No problem, I'll try and port the changes to 6.7 and get back to you.

Cheers,
Conrad

On Mon, 2011-12-12 at 19:11 -0800, Adrian Thurston wrote:
> Hi Conrad,
> 
> Thanks for the contribution. My apologies I didn't have some direction 
> for you when it was needed. A patch against the 6.7 tag will allow me to 
> get it out soonest. 7.0 could take some time so I'll probably create a 
> version 6 branch.
> 
> http://www.complang.org/redmine/issues/338
> 
> On 11-12-09 06:43 PM, Conrad Steenberg wrote:
> > Hi all,
> >
> > I made a back-end for the Crack language and would like to see if it can
> > be integrated into the current svn verion.
> >
> > There's a Mercurial repository at
> > https://bitbucket.org/hengestone/ragel-crack but of course I can produce
> > a patch file against the official svn version (currently r2502).
> >
> > The current version produces working versions of atoi.rl and cppscan.rl
> > for Crack, and a Ruby version of the former since I based the new code
> > on rubyflat.[h/cc].
> >
> > I'll continue to add more tests, but would like to upstream my changes
> > for all the usual reasons and to help keep the patches small.
> >
> > Comments?
> >
> > Thanks!
> > Conrad
> >
> >
> >
> > _______________________________________________
> > ragel-users mailing list
> > ragel-users at complang.org
> > http://www.complang.org/mailman/listinfo/ragel-users

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: This is a digitally signed message part
URL: <http://www.colm.net/pipermail/ragel/attachments/20111212/c686852a/attachment.sig>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From thurston at complang.org  Wed Dec 14 02:43:07 2011
From: thurston at complang.org (Adrian Thurston)
Date: Tue, 13 Dec 2011 18:43:07 -0800
Subject: [ragel-users] configure patch to respect CXXFLAGS
In-Reply-To: <0397FCCB-442E-406F-800C-28AAC7A9BCC6@alum.mit.edu>
References: <0397FCCB-442E-406F-800C-28AAC7A9BCC6@alum.mit.edu>
Message-ID: <4EE80D3B.9050401@complang.org>

Thanks David!

http://www.complang.org/redmine/issues/339

-Adrian

On 11-12-01 10:36 PM, David Bacher wrote:
> Hello,
> Thanks for ragel!
>
> I recently tried to compile ragel via macports, but ran into problems. I tracked the issue down to the configure script not using the CXXFLAGS value passed through the environment. It looks like configure always sets CXXFLAGS to -g.
>
> The patch for the configure script is straightforward (attached), but I don't know enough autoconf to make the appropriate changes to configure.in.
>
> Can you fix the configure script in an upcoming release?
>
> Let me know if you'd like me to provide my config.log in case it turns out to be more difficult than I thought to reproduce this.
>
>
>
>
> Thanks,
> -dave
>
> David Bacher
> drbacher at alum.mit.edu
> http://squizion.net/
>
>
>
>
>
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From conrad.steenberg at gmail.com  Fri Dec 16 05:03:02 2011
From: conrad.steenberg at gmail.com (Conrad Steenberg)
Date: Thu, 15 Dec 2011 21:03:02 -0800
Subject: [ragel-users] Crack back-end contribution
In-Reply-To: <4EE6C25F.5040104@complang.org>
References: <1323484988.3375.6.camel@conrad-MacBookPro>
	<4EE6C25F.5040104@complang.org>
Message-ID: <1324011782.22299.11.camel@conrad-MacBookPro>

Hi Adrian,

I put an svn diff against r2398 at http://pastebin.com/T5pPs7wh

There are 2 examples inluded: atoi_crack.rl and cppscan_crack.rl 

Cheers,
Conrad

On Mon, 2011-12-12 at 19:11 -0800, Adrian Thurston wrote:
> Hi Conrad,
> 
> Thanks for the contribution. My apologies I didn't have some direction 
> for you when it was needed. A patch against the 6.7 tag will allow me to 
> get it out soonest. 7.0 could take some time so I'll probably create a 
> version 6 branch.
> 
> http://www.complang.org/redmine/issues/338
> 
> On 11-12-09 06:43 PM, Conrad Steenberg wrote:
> > Hi all,
> >
> > I made a back-end for the Crack language and would like to see if it can
> > be integrated into the current svn verion.
> >
> > There's a Mercurial repository at
> > https://bitbucket.org/hengestone/ragel-crack but of course I can produce
> > a patch file against the official svn version (currently r2502).
> >
> > The current version produces working versions of atoi.rl and cppscan.rl
> > for Crack, and a Ruby version of the former since I based the new code
> > on rubyflat.[h/cc].
> >
> > I'll continue to add more tests, but would like to upstream my changes
> > for all the usual reasons and to help keep the patches small.
> >
> > Comments?
> >
> > Thanks!
> > Conrad
> >
> >
> >
> > _______________________________________________
> > ragel-users mailing list
> > ragel-users at complang.org
> > http://www.complang.org/mailman/listinfo/ragel-users

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: This is a digitally signed message part
URL: <http://www.colm.net/pipermail/ragel/attachments/20111215/306bf6f2/attachment.sig>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From rahlf at fs.tum.de  Sun Dec 18 15:26:00 2011
From: rahlf at fs.tum.de (Matthias Rahlf)
Date: Sun, 18 Dec 2011 16:26:00 +0100
Subject: [ragel-users] Out-of-Source Builds
Message-ID: <4EEE0608.5060509@fs.tum.de>

Hi,

when I built ragel I noticed that colm is needed for the documentation
but not checked in the configure script. The attached patch adds this
check and also enables out-of-source builds and "make distcheck".

Cheers, Matthias
-------------- next part --------------
A non-text attachment was scrubbed...
Name: out-of-source.patch
Type: text/x-patch
Size: 4919 bytes
Desc: not available
URL: <http://www.colm.net/pipermail/ragel/attachments/20111218/f95fbbd8/attachment.bin>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From thurston at complang.org  Sun Dec 18 23:19:38 2011
From: thurston at complang.org (thurston at complang.org)
Date: Sun, 18 Dec 2011 23:19:38 +0000
Subject: [ragel-users] answering questions about ragel
Message-ID: <652639818-1324250376-cardhu_decombobulator_blackberry.rim.net-762039528-@b1.c9.bise6.blackberry>

I am going to have to stop answering questions on ragel unfortunately. It seems I don't have time for the task anymore. It is now up to all you smart ragel users to help the new users out! I will respond to bug reports, feature requests and patches as best I can. 

Regards, 
 Adrian

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From headius at headius.com  Wed Dec 21 06:30:43 2011
From: headius at headius.com (Charles Oliver Nutter)
Date: Wed, 21 Dec 2011 00:30:43 -0600
Subject: [ragel-users] Improving perf of the Java code
Message-ID: <CAE-f1xQ5Tz3eQCARdv1GUE2jRQj0u3MSRP257oj3otqD+gsAkQ@mail.gmail.com>

Hello!

I work on JRuby, the Ruby implementation for the JVM. As you may know,
Ruby users have latched on to Ragel for a number of parser tasks, such
as json, http, various markup languages, and so on.

I have spent the last day trying to optimize a Ragel-generated json
parser used as an extension to JRuby, and despite my best efforts I
can't get it more than about 2x slower than the version for C Ruby.
This is especially poor considering the Ruby code that surrounds it
should run significantly faster on JRuby, and it still doesn't make up
the gap.

I'm wondering what, if anything, can be done to improve the
performance of the generated Java code. I notice that Java is only
supported in the simplest output form, presumably because of the lack
of "goto". I'm interested in exploring options to bring the Java code
up to par with the generated code for other languages, perhaps by
implementing it using raw JVM bytecode (using some assembly-like
format like BiteScript or Jasmin) or by post-processing the compiled
result to insert true gotos.

Any pointers on this? Any prior work or tips?

- Charlie

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From headius at headius.com  Wed Dec 21 06:33:13 2011
From: headius at headius.com (Charles Oliver Nutter)
Date: Wed, 21 Dec 2011 00:33:13 -0600
Subject: [ragel-users] Improving perf of the Java code
In-Reply-To: <CAE-f1xQ5Tz3eQCARdv1GUE2jRQj0u3MSRP257oj3otqD+gsAkQ@mail.gmail.com>
References: <CAE-f1xQ5Tz3eQCARdv1GUE2jRQj0u3MSRP257oj3otqD+gsAkQ@mail.gmail.com>
Message-ID: <CAE-f1xTxO1oS2s7RXkGqtnOy3p+is6sWZakPsQ5Xn+Tr2KpM=w@mail.gmail.com>

Oh, FWIW, the json parser for C Ruby is being generated with the -G2 FSM.

- Charlie

On Wed, Dec 21, 2011 at 12:30 AM, Charles Oliver Nutter
<headius at headius.com> wrote:
> Hello!
>
> I work on JRuby, the Ruby implementation for the JVM. As you may know,
> Ruby users have latched on to Ragel for a number of parser tasks, such
> as json, http, various markup languages, and so on.
>
> I have spent the last day trying to optimize a Ragel-generated json
> parser used as an extension to JRuby, and despite my best efforts I
> can't get it more than about 2x slower than the version for C Ruby.
> This is especially poor considering the Ruby code that surrounds it
> should run significantly faster on JRuby, and it still doesn't make up
> the gap.
>
> I'm wondering what, if anything, can be done to improve the
> performance of the generated Java code. I notice that Java is only
> supported in the simplest output form, presumably because of the lack
> of "goto". I'm interested in exploring options to bring the Java code
> up to par with the generated code for other languages, perhaps by
> implementing it using raw JVM bytecode (using some assembly-like
> format like BiteScript or Jasmin) or by post-processing the compiled
> result to insert true gotos.
>
> Any pointers on this? Any prior work or tips?
>
> - Charlie

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From conrad.steenberg at gmail.com  Wed Dec 21 17:02:05 2011
From: conrad.steenberg at gmail.com (Conrad Steenberg)
Date: Wed, 21 Dec 2011 09:02:05 -0800
Subject: [ragel-users] Improving perf of the Java code
In-Reply-To: <CAE-f1xQ5Tz3eQCARdv1GUE2jRQj0u3MSRP257oj3otqD+gsAkQ@mail.gmail.com>
References: <CAE-f1xQ5Tz3eQCARdv1GUE2jRQj0u3MSRP257oj3otqD+gsAkQ@mail.gmail.com>
Message-ID: <1324486925.7458.5.camel@conrad-MacBookPro>

Hi Charlie,

I addition to looking at a bytecode generator, you might also look at
generating code for another JVM language that does have support for
goto. That language might even be C, if you can get the resulting code
to generate the JRuby objects you need.

See http://en.wikipedia.org/wiki/List_of_JVM_languages

On Wed, 2011-12-21 at 00:30 -0600, Charles Oliver Nutter wrote:
> Hello!
> 
> I work on JRuby, the Ruby implementation for the JVM. As you may know,
> Ruby users have latched on to Ragel for a number of parser tasks, such
> as json, http, various markup languages, and so on.
> 
> I have spent the last day trying to optimize a Ragel-generated json
> parser used as an extension to JRuby, and despite my best efforts I
> can't get it more than about 2x slower than the version for C Ruby.
> This is especially poor considering the Ruby code that surrounds it
> should run significantly faster on JRuby, and it still doesn't make up
> the gap.
> 
> I'm wondering what, if anything, can be done to improve the
> performance of the generated Java code. I notice that Java is only
> supported in the simplest output form, presumably because of the lack
> of "goto". I'm interested in exploring options to bring the Java code
> up to par with the generated code for other languages, perhaps by
> implementing it using raw JVM bytecode (using some assembly-like
> format like BiteScript or Jasmin) or by post-processing the compiled
> result to insert true gotos.
> 
> Any pointers on this? Any prior work or tips?
> 
> - Charlie
> 
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: This is a digitally signed message part
URL: <http://www.colm.net/pipermail/ragel/attachments/20111221/c80ff5c7/attachment.sig>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From headius at headius.com  Wed Dec 21 18:52:46 2011
From: headius at headius.com (Charles Oliver Nutter)
Date: Wed, 21 Dec 2011 12:52:46 -0600
Subject: [ragel-users] Improving perf of the Java code
In-Reply-To: <1324486925.7458.5.camel@conrad-MacBookPro>
References: <CAE-f1xQ5Tz3eQCARdv1GUE2jRQj0u3MSRP257oj3otqD+gsAkQ@mail.gmail.com>
	<1324486925.7458.5.camel@conrad-MacBookPro>
Message-ID: <CAE-f1xTwDjvuAm3xyNY6cjHO4oocgqiJ5U-585_iiGKCoYXAnA@mail.gmail.com>

Yeah, that's kinda what I was thinking. Specifically, my own JVM
language that's a thin layer over JVM bytecode:

https://github.com/headius/bitescript/blob/master/examples/fib.bs

The other though I had was emitting normal Java code that could be
post-processed into a goto...i.e. emit calls like

_label("named label")

_goto("named label")

And post-process the bytecode to use JVM bytecode goto instead.

If we were able to emit something like that, how hard would it be to
get the faster FSM forms ported to Java?

- Charlie

On Wed, Dec 21, 2011 at 11:02 AM, Conrad Steenberg
<conrad.steenberg at gmail.com> wrote:
> Hi Charlie,
>
> I addition to looking at a bytecode generator, you might also look at
> generating code for another JVM language that does have support for
> goto. That language might even be C, if you can get the resulting code
> to generate the JRuby objects you need.
>
> See http://en.wikipedia.org/wiki/List_of_JVM_languages
>
> On Wed, 2011-12-21 at 00:30 -0600, Charles Oliver Nutter wrote:
>> Hello!
>>
>> I work on JRuby, the Ruby implementation for the JVM. As you may know,
>> Ruby users have latched on to Ragel for a number of parser tasks, such
>> as json, http, various markup languages, and so on.
>>
>> I have spent the last day trying to optimize a Ragel-generated json
>> parser used as an extension to JRuby, and despite my best efforts I
>> can't get it more than about 2x slower than the version for C Ruby.
>> This is especially poor considering the Ruby code that surrounds it
>> should run significantly faster on JRuby, and it still doesn't make up
>> the gap.
>>
>> I'm wondering what, if anything, can be done to improve the
>> performance of the generated Java code. I notice that Java is only
>> supported in the simplest output form, presumably because of the lack
>> of "goto". I'm interested in exploring options to bring the Java code
>> up to par with the generated code for other languages, perhaps by
>> implementing it using raw JVM bytecode (using some assembly-like
>> format like BiteScript or Jasmin) or by post-processing the compiled
>> result to insert true gotos.
>>
>> Any pointers on this? Any prior work or tips?
>>
>> - Charlie
>>
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at complang.org
>> http://www.complang.org/mailman/listinfo/ragel-users
>
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From conrad.steenberg at gmail.com  Wed Dec 21 19:04:55 2011
From: conrad.steenberg at gmail.com (Conrad Steenberg)
Date: Wed, 21 Dec 2011 11:04:55 -0800
Subject: [ragel-users] Improving perf of the Java code
In-Reply-To: <CAE-f1xTwDjvuAm3xyNY6cjHO4oocgqiJ5U-585_iiGKCoYXAnA@mail.gmail.com>
References: <CAE-f1xQ5Tz3eQCARdv1GUE2jRQj0u3MSRP257oj3otqD+gsAkQ@mail.gmail.com>
	<1324486925.7458.5.camel@conrad-MacBookPro>
	<CAE-f1xTwDjvuAm3xyNY6cjHO4oocgqiJ5U-585_iiGKCoYXAnA@mail.gmail.com>
Message-ID: <1324494295.7458.9.camel@conrad-MacBookPro>

My only experience is in porting the non-goto (-F0) ruby emitter, but in
general I think if you know the target language it's actually quite easy
to write a new emitter.

In your case I think it will probably be easier to go that route than
Ragel-> C-> bytecode.

Conrad

On Wed, 2011-12-21 at 12:52 -0600, Charles Oliver Nutter wrote:
> Yeah, that's kinda what I was thinking. Specifically, my own JVM
> language that's a thin layer over JVM bytecode:
> 
> https://github.com/headius/bitescript/blob/master/examples/fib.bs
> 
> The other though I had was emitting normal Java code that could be
> post-processed into a goto...i.e. emit calls like
> 
> _label("named label")
> 
> _goto("named label")
> 
> And post-process the bytecode to use JVM bytecode goto instead.
> 
> If we were able to emit something like that, how hard would it be to
> get the faster FSM forms ported to Java?
> 
> - Charlie
> 
> On Wed, Dec 21, 2011 at 11:02 AM, Conrad Steenberg
> <conrad.steenberg at gmail.com> wrote:
> > Hi Charlie,
> >
> > I addition to looking at a bytecode generator, you might also look at
> > generating code for another JVM language that does have support for
> > goto. That language might even be C, if you can get the resulting code
> > to generate the JRuby objects you need.
> >
> > See http://en.wikipedia.org/wiki/List_of_JVM_languages
> >
> > On Wed, 2011-12-21 at 00:30 -0600, Charles Oliver Nutter wrote:
> >> Hello!
> >>
> >> I work on JRuby, the Ruby implementation for the JVM. As you may know,
> >> Ruby users have latched on to Ragel for a number of parser tasks, such
> >> as json, http, various markup languages, and so on.
> >>
> >> I have spent the last day trying to optimize a Ragel-generated json
> >> parser used as an extension to JRuby, and despite my best efforts I
> >> can't get it more than about 2x slower than the version for C Ruby.
> >> This is especially poor considering the Ruby code that surrounds it
> >> should run significantly faster on JRuby, and it still doesn't make up
> >> the gap.
> >>
> >> I'm wondering what, if anything, can be done to improve the
> >> performance of the generated Java code. I notice that Java is only
> >> supported in the simplest output form, presumably because of the lack
> >> of "goto". I'm interested in exploring options to bring the Java code
> >> up to par with the generated code for other languages, perhaps by
> >> implementing it using raw JVM bytecode (using some assembly-like
> >> format like BiteScript or Jasmin) or by post-processing the compiled
> >> result to insert true gotos.
> >>
> >> Any pointers on this? Any prior work or tips?
> >>
> >> - Charlie
> >>
> >> _______________________________________________
> >> ragel-users mailing list
> >> ragel-users at complang.org
> >> http://www.complang.org/mailman/listinfo/ragel-users
> >
> >
> > _______________________________________________
> > ragel-users mailing list
> > ragel-users at complang.org
> > http://www.complang.org/mailman/listinfo/ragel-users

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: This is a digitally signed message part
URL: <http://www.colm.net/pipermail/ragel/attachments/20111221/644e38af/attachment.sig>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From drbacher at alum.mit.edu  Fri Dec  2 06:36:40 2011
From: drbacher at alum.mit.edu (David Bacher)
Date: Thu, 1 Dec 2011 22:36:40 -0800
Subject: [ragel-users] configure patch to respect CXXFLAGS
Message-ID: <0397FCCB-442E-406F-800C-28AAC7A9BCC6@alum.mit.edu>

Hello,
Thanks for ragel!

I recently tried to compile ragel via macports, but ran into problems. I tracked the issue down to the configure script not using the CXXFLAGS value passed through the environment. It looks like configure always sets CXXFLAGS to -g.

The patch for the configure script is straightforward (attached), but I don't know enough autoconf to make the appropriate changes to configure.in. 

Can you fix the configure script in an upcoming release?

Let me know if you'd like me to provide my config.log in case it turns out to be more difficult than I thought to reproduce this. 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: configure-cxxflags.patch
Type: application/octet-stream
Size: 343 bytes
Desc: not available
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20111201/27737bb2/attachment-0001.obj>
-------------- next part --------------

Thanks,
-dave

David Bacher
drbacher at alum.mit.edu
http://squizion.net/



-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20111201/27737bb2/attachment-0001.sig>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From conrad.steenberg at gmail.com  Sat Dec 10 02:43:08 2011
From: conrad.steenberg at gmail.com (Conrad Steenberg)
Date: Fri, 09 Dec 2011 18:43:08 -0800
Subject: [ragel-users] Crack back-end contribution
Message-ID: <1323484988.3375.6.camel@conrad-MacBookPro>

Hi all,

I made a back-end for the Crack language and would like to see if it can
be integrated into the current svn verion.

There's a Mercurial repository at
https://bitbucket.org/hengestone/ragel-crack but of course I can produce
a patch file against the official svn version (currently r2502).

The current version produces working versions of atoi.rl and cppscan.rl
for Crack, and a Ruby version of the former since I based the new code
on rubyflat.[h/cc].

I'll continue to add more tests, but would like to upstream my changes
for all the usual reasons and to help keep the patches small.

Comments?

Thanks!
Conrad
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: This is a digitally signed message part
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20111209/8fecd1b0/attachment-0001.sig>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From thurston at complang.org  Tue Dec 13 03:11:27 2011
From: thurston at complang.org (Adrian Thurston)
Date: Mon, 12 Dec 2011 19:11:27 -0800
Subject: [ragel-users] Crack back-end contribution
In-Reply-To: <1323484988.3375.6.camel@conrad-MacBookPro>
References: <1323484988.3375.6.camel@conrad-MacBookPro>
Message-ID: <4EE6C25F.5040104@complang.org>

Hi Conrad,

Thanks for the contribution. My apologies I didn't have some direction 
for you when it was needed. A patch against the 6.7 tag will allow me to 
get it out soonest. 7.0 could take some time so I'll probably create a 
version 6 branch.

http://www.complang.org/redmine/issues/338

On 11-12-09 06:43 PM, Conrad Steenberg wrote:
> Hi all,
>
> I made a back-end for the Crack language and would like to see if it can
> be integrated into the current svn verion.
>
> There's a Mercurial repository at
> https://bitbucket.org/hengestone/ragel-crack but of course I can produce
> a patch file against the official svn version (currently r2502).
>
> The current version produces working versions of atoi.rl and cppscan.rl
> for Crack, and a Ruby version of the former since I based the new code
> on rubyflat.[h/cc].
>
> I'll continue to add more tests, but would like to upstream my changes
> for all the usual reasons and to help keep the patches small.
>
> Comments?
>
> Thanks!
> Conrad
>
>
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From conrad.steenberg at gmail.com  Tue Dec 13 03:22:00 2011
From: conrad.steenberg at gmail.com (Conrad Steenberg)
Date: Mon, 12 Dec 2011 19:22:00 -0800
Subject: [ragel-users] Crack back-end contribution
In-Reply-To: <4EE6C25F.5040104@complang.org>
References: <1323484988.3375.6.camel@conrad-MacBookPro>
	<4EE6C25F.5040104@complang.org>
Message-ID: <1323746520.15668.1.camel@conrad-MacBookPro>

Hi Andrew,

No problem, I'll try and port the changes to 6.7 and get back to you.

Cheers,
Conrad

On Mon, 2011-12-12 at 19:11 -0800, Adrian Thurston wrote:
> Hi Conrad,
> 
> Thanks for the contribution. My apologies I didn't have some direction 
> for you when it was needed. A patch against the 6.7 tag will allow me to 
> get it out soonest. 7.0 could take some time so I'll probably create a 
> version 6 branch.
> 
> http://www.complang.org/redmine/issues/338
> 
> On 11-12-09 06:43 PM, Conrad Steenberg wrote:
> > Hi all,
> >
> > I made a back-end for the Crack language and would like to see if it can
> > be integrated into the current svn verion.
> >
> > There's a Mercurial repository at
> > https://bitbucket.org/hengestone/ragel-crack but of course I can produce
> > a patch file against the official svn version (currently r2502).
> >
> > The current version produces working versions of atoi.rl and cppscan.rl
> > for Crack, and a Ruby version of the former since I based the new code
> > on rubyflat.[h/cc].
> >
> > I'll continue to add more tests, but would like to upstream my changes
> > for all the usual reasons and to help keep the patches small.
> >
> > Comments?
> >
> > Thanks!
> > Conrad
> >
> >
> >
> > _______________________________________________
> > ragel-users mailing list
> > ragel-users at complang.org
> > http://www.complang.org/mailman/listinfo/ragel-users

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: This is a digitally signed message part
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20111212/c686852a/attachment-0001.sig>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From thurston at complang.org  Wed Dec 14 02:43:07 2011
From: thurston at complang.org (Adrian Thurston)
Date: Tue, 13 Dec 2011 18:43:07 -0800
Subject: [ragel-users] configure patch to respect CXXFLAGS
In-Reply-To: <0397FCCB-442E-406F-800C-28AAC7A9BCC6@alum.mit.edu>
References: <0397FCCB-442E-406F-800C-28AAC7A9BCC6@alum.mit.edu>
Message-ID: <4EE80D3B.9050401@complang.org>

Thanks David!

http://www.complang.org/redmine/issues/339

-Adrian

On 11-12-01 10:36 PM, David Bacher wrote:
> Hello,
> Thanks for ragel!
>
> I recently tried to compile ragel via macports, but ran into problems. I tracked the issue down to the configure script not using the CXXFLAGS value passed through the environment. It looks like configure always sets CXXFLAGS to -g.
>
> The patch for the configure script is straightforward (attached), but I don't know enough autoconf to make the appropriate changes to configure.in.
>
> Can you fix the configure script in an upcoming release?
>
> Let me know if you'd like me to provide my config.log in case it turns out to be more difficult than I thought to reproduce this.
>
>
>
>
> Thanks,
> -dave
>
> David Bacher
> drbacher at alum.mit.edu
> http://squizion.net/
>
>
>
>
>
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From conrad.steenberg at gmail.com  Fri Dec 16 05:03:02 2011
From: conrad.steenberg at gmail.com (Conrad Steenberg)
Date: Thu, 15 Dec 2011 21:03:02 -0800
Subject: [ragel-users] Crack back-end contribution
In-Reply-To: <4EE6C25F.5040104@complang.org>
References: <1323484988.3375.6.camel@conrad-MacBookPro>
	<4EE6C25F.5040104@complang.org>
Message-ID: <1324011782.22299.11.camel@conrad-MacBookPro>

Hi Adrian,

I put an svn diff against r2398 at http://pastebin.com/T5pPs7wh

There are 2 examples inluded: atoi_crack.rl and cppscan_crack.rl 

Cheers,
Conrad

On Mon, 2011-12-12 at 19:11 -0800, Adrian Thurston wrote:
> Hi Conrad,
> 
> Thanks for the contribution. My apologies I didn't have some direction 
> for you when it was needed. A patch against the 6.7 tag will allow me to 
> get it out soonest. 7.0 could take some time so I'll probably create a 
> version 6 branch.
> 
> http://www.complang.org/redmine/issues/338
> 
> On 11-12-09 06:43 PM, Conrad Steenberg wrote:
> > Hi all,
> >
> > I made a back-end for the Crack language and would like to see if it can
> > be integrated into the current svn verion.
> >
> > There's a Mercurial repository at
> > https://bitbucket.org/hengestone/ragel-crack but of course I can produce
> > a patch file against the official svn version (currently r2502).
> >
> > The current version produces working versions of atoi.rl and cppscan.rl
> > for Crack, and a Ruby version of the former since I based the new code
> > on rubyflat.[h/cc].
> >
> > I'll continue to add more tests, but would like to upstream my changes
> > for all the usual reasons and to help keep the patches small.
> >
> > Comments?
> >
> > Thanks!
> > Conrad
> >
> >
> >
> > _______________________________________________
> > ragel-users mailing list
> > ragel-users at complang.org
> > http://www.complang.org/mailman/listinfo/ragel-users

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: This is a digitally signed message part
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20111215/306bf6f2/attachment-0001.sig>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From rahlf at fs.tum.de  Sun Dec 18 15:26:00 2011
From: rahlf at fs.tum.de (Matthias Rahlf)
Date: Sun, 18 Dec 2011 16:26:00 +0100
Subject: [ragel-users] Out-of-Source Builds
Message-ID: <4EEE0608.5060509@fs.tum.de>

Hi,

when I built ragel I noticed that colm is needed for the documentation
but not checked in the configure script. The attached patch adds this
check and also enables out-of-source builds and "make distcheck".

Cheers, Matthias
-------------- next part --------------
A non-text attachment was scrubbed...
Name: out-of-source.patch
Type: text/x-patch
Size: 4919 bytes
Desc: not available
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20111218/f95fbbd8/attachment-0001.bin>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From thurston at complang.org  Sun Dec 18 23:19:38 2011
From: thurston at complang.org (thurston at complang.org)
Date: Sun, 18 Dec 2011 23:19:38 +0000
Subject: [ragel-users] answering questions about ragel
Message-ID: <652639818-1324250376-cardhu_decombobulator_blackberry.rim.net-762039528-@b1.c9.bise6.blackberry>

I am going to have to stop answering questions on ragel unfortunately. It seems I don't have time for the task anymore. It is now up to all you smart ragel users to help the new users out! I will respond to bug reports, feature requests and patches as best I can. 

Regards, 
 Adrian

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From headius at headius.com  Wed Dec 21 06:30:43 2011
From: headius at headius.com (Charles Oliver Nutter)
Date: Wed, 21 Dec 2011 00:30:43 -0600
Subject: [ragel-users] Improving perf of the Java code
Message-ID: <CAE-f1xQ5Tz3eQCARdv1GUE2jRQj0u3MSRP257oj3otqD+gsAkQ@mail.gmail.com>

Hello!

I work on JRuby, the Ruby implementation for the JVM. As you may know,
Ruby users have latched on to Ragel for a number of parser tasks, such
as json, http, various markup languages, and so on.

I have spent the last day trying to optimize a Ragel-generated json
parser used as an extension to JRuby, and despite my best efforts I
can't get it more than about 2x slower than the version for C Ruby.
This is especially poor considering the Ruby code that surrounds it
should run significantly faster on JRuby, and it still doesn't make up
the gap.

I'm wondering what, if anything, can be done to improve the
performance of the generated Java code. I notice that Java is only
supported in the simplest output form, presumably because of the lack
of "goto". I'm interested in exploring options to bring the Java code
up to par with the generated code for other languages, perhaps by
implementing it using raw JVM bytecode (using some assembly-like
format like BiteScript or Jasmin) or by post-processing the compiled
result to insert true gotos.

Any pointers on this? Any prior work or tips?

- Charlie

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From headius at headius.com  Wed Dec 21 06:33:13 2011
From: headius at headius.com (Charles Oliver Nutter)
Date: Wed, 21 Dec 2011 00:33:13 -0600
Subject: [ragel-users] Improving perf of the Java code
In-Reply-To: <CAE-f1xQ5Tz3eQCARdv1GUE2jRQj0u3MSRP257oj3otqD+gsAkQ@mail.gmail.com>
References: <CAE-f1xQ5Tz3eQCARdv1GUE2jRQj0u3MSRP257oj3otqD+gsAkQ@mail.gmail.com>
Message-ID: <CAE-f1xTxO1oS2s7RXkGqtnOy3p+is6sWZakPsQ5Xn+Tr2KpM=w@mail.gmail.com>

Oh, FWIW, the json parser for C Ruby is being generated with the -G2 FSM.

- Charlie

On Wed, Dec 21, 2011 at 12:30 AM, Charles Oliver Nutter
<headius at headius.com> wrote:
> Hello!
>
> I work on JRuby, the Ruby implementation for the JVM. As you may know,
> Ruby users have latched on to Ragel for a number of parser tasks, such
> as json, http, various markup languages, and so on.
>
> I have spent the last day trying to optimize a Ragel-generated json
> parser used as an extension to JRuby, and despite my best efforts I
> can't get it more than about 2x slower than the version for C Ruby.
> This is especially poor considering the Ruby code that surrounds it
> should run significantly faster on JRuby, and it still doesn't make up
> the gap.
>
> I'm wondering what, if anything, can be done to improve the
> performance of the generated Java code. I notice that Java is only
> supported in the simplest output form, presumably because of the lack
> of "goto". I'm interested in exploring options to bring the Java code
> up to par with the generated code for other languages, perhaps by
> implementing it using raw JVM bytecode (using some assembly-like
> format like BiteScript or Jasmin) or by post-processing the compiled
> result to insert true gotos.
>
> Any pointers on this? Any prior work or tips?
>
> - Charlie

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From conrad.steenberg at gmail.com  Wed Dec 21 17:02:05 2011
From: conrad.steenberg at gmail.com (Conrad Steenberg)
Date: Wed, 21 Dec 2011 09:02:05 -0800
Subject: [ragel-users] Improving perf of the Java code
In-Reply-To: <CAE-f1xQ5Tz3eQCARdv1GUE2jRQj0u3MSRP257oj3otqD+gsAkQ@mail.gmail.com>
References: <CAE-f1xQ5Tz3eQCARdv1GUE2jRQj0u3MSRP257oj3otqD+gsAkQ@mail.gmail.com>
Message-ID: <1324486925.7458.5.camel@conrad-MacBookPro>

Hi Charlie,

I addition to looking at a bytecode generator, you might also look at
generating code for another JVM language that does have support for
goto. That language might even be C, if you can get the resulting code
to generate the JRuby objects you need.

See http://en.wikipedia.org/wiki/List_of_JVM_languages

On Wed, 2011-12-21 at 00:30 -0600, Charles Oliver Nutter wrote:
> Hello!
> 
> I work on JRuby, the Ruby implementation for the JVM. As you may know,
> Ruby users have latched on to Ragel for a number of parser tasks, such
> as json, http, various markup languages, and so on.
> 
> I have spent the last day trying to optimize a Ragel-generated json
> parser used as an extension to JRuby, and despite my best efforts I
> can't get it more than about 2x slower than the version for C Ruby.
> This is especially poor considering the Ruby code that surrounds it
> should run significantly faster on JRuby, and it still doesn't make up
> the gap.
> 
> I'm wondering what, if anything, can be done to improve the
> performance of the generated Java code. I notice that Java is only
> supported in the simplest output form, presumably because of the lack
> of "goto". I'm interested in exploring options to bring the Java code
> up to par with the generated code for other languages, perhaps by
> implementing it using raw JVM bytecode (using some assembly-like
> format like BiteScript or Jasmin) or by post-processing the compiled
> result to insert true gotos.
> 
> Any pointers on this? Any prior work or tips?
> 
> - Charlie
> 
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: This is a digitally signed message part
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20111221/c80ff5c7/attachment-0001.sig>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From headius at headius.com  Wed Dec 21 18:52:46 2011
From: headius at headius.com (Charles Oliver Nutter)
Date: Wed, 21 Dec 2011 12:52:46 -0600
Subject: [ragel-users] Improving perf of the Java code
In-Reply-To: <1324486925.7458.5.camel@conrad-MacBookPro>
References: <CAE-f1xQ5Tz3eQCARdv1GUE2jRQj0u3MSRP257oj3otqD+gsAkQ@mail.gmail.com>
	<1324486925.7458.5.camel@conrad-MacBookPro>
Message-ID: <CAE-f1xTwDjvuAm3xyNY6cjHO4oocgqiJ5U-585_iiGKCoYXAnA@mail.gmail.com>

Yeah, that's kinda what I was thinking. Specifically, my own JVM
language that's a thin layer over JVM bytecode:

https://github.com/headius/bitescript/blob/master/examples/fib.bs

The other though I had was emitting normal Java code that could be
post-processed into a goto...i.e. emit calls like

_label("named label")

_goto("named label")

And post-process the bytecode to use JVM bytecode goto instead.

If we were able to emit something like that, how hard would it be to
get the faster FSM forms ported to Java?

- Charlie

On Wed, Dec 21, 2011 at 11:02 AM, Conrad Steenberg
<conrad.steenberg at gmail.com> wrote:
> Hi Charlie,
>
> I addition to looking at a bytecode generator, you might also look at
> generating code for another JVM language that does have support for
> goto. That language might even be C, if you can get the resulting code
> to generate the JRuby objects you need.
>
> See http://en.wikipedia.org/wiki/List_of_JVM_languages
>
> On Wed, 2011-12-21 at 00:30 -0600, Charles Oliver Nutter wrote:
>> Hello!
>>
>> I work on JRuby, the Ruby implementation for the JVM. As you may know,
>> Ruby users have latched on to Ragel for a number of parser tasks, such
>> as json, http, various markup languages, and so on.
>>
>> I have spent the last day trying to optimize a Ragel-generated json
>> parser used as an extension to JRuby, and despite my best efforts I
>> can't get it more than about 2x slower than the version for C Ruby.
>> This is especially poor considering the Ruby code that surrounds it
>> should run significantly faster on JRuby, and it still doesn't make up
>> the gap.
>>
>> I'm wondering what, if anything, can be done to improve the
>> performance of the generated Java code. I notice that Java is only
>> supported in the simplest output form, presumably because of the lack
>> of "goto". I'm interested in exploring options to bring the Java code
>> up to par with the generated code for other languages, perhaps by
>> implementing it using raw JVM bytecode (using some assembly-like
>> format like BiteScript or Jasmin) or by post-processing the compiled
>> result to insert true gotos.
>>
>> Any pointers on this? Any prior work or tips?
>>
>> - Charlie
>>
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at complang.org
>> http://www.complang.org/mailman/listinfo/ragel-users
>
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From conrad.steenberg at gmail.com  Wed Dec 21 19:04:55 2011
From: conrad.steenberg at gmail.com (Conrad Steenberg)
Date: Wed, 21 Dec 2011 11:04:55 -0800
Subject: [ragel-users] Improving perf of the Java code
In-Reply-To: <CAE-f1xTwDjvuAm3xyNY6cjHO4oocgqiJ5U-585_iiGKCoYXAnA@mail.gmail.com>
References: <CAE-f1xQ5Tz3eQCARdv1GUE2jRQj0u3MSRP257oj3otqD+gsAkQ@mail.gmail.com>
	<1324486925.7458.5.camel@conrad-MacBookPro>
	<CAE-f1xTwDjvuAm3xyNY6cjHO4oocgqiJ5U-585_iiGKCoYXAnA@mail.gmail.com>
Message-ID: <1324494295.7458.9.camel@conrad-MacBookPro>

My only experience is in porting the non-goto (-F0) ruby emitter, but in
general I think if you know the target language it's actually quite easy
to write a new emitter.

In your case I think it will probably be easier to go that route than
Ragel-> C-> bytecode.

Conrad

On Wed, 2011-12-21 at 12:52 -0600, Charles Oliver Nutter wrote:
> Yeah, that's kinda what I was thinking. Specifically, my own JVM
> language that's a thin layer over JVM bytecode:
> 
> https://github.com/headius/bitescript/blob/master/examples/fib.bs
> 
> The other though I had was emitting normal Java code that could be
> post-processed into a goto...i.e. emit calls like
> 
> _label("named label")
> 
> _goto("named label")
> 
> And post-process the bytecode to use JVM bytecode goto instead.
> 
> If we were able to emit something like that, how hard would it be to
> get the faster FSM forms ported to Java?
> 
> - Charlie
> 
> On Wed, Dec 21, 2011 at 11:02 AM, Conrad Steenberg
> <conrad.steenberg at gmail.com> wrote:
> > Hi Charlie,
> >
> > I addition to looking at a bytecode generator, you might also look at
> > generating code for another JVM language that does have support for
> > goto. That language might even be C, if you can get the resulting code
> > to generate the JRuby objects you need.
> >
> > See http://en.wikipedia.org/wiki/List_of_JVM_languages
> >
> > On Wed, 2011-12-21 at 00:30 -0600, Charles Oliver Nutter wrote:
> >> Hello!
> >>
> >> I work on JRuby, the Ruby implementation for the JVM. As you may know,
> >> Ruby users have latched on to Ragel for a number of parser tasks, such
> >> as json, http, various markup languages, and so on.
> >>
> >> I have spent the last day trying to optimize a Ragel-generated json
> >> parser used as an extension to JRuby, and despite my best efforts I
> >> can't get it more than about 2x slower than the version for C Ruby.
> >> This is especially poor considering the Ruby code that surrounds it
> >> should run significantly faster on JRuby, and it still doesn't make up
> >> the gap.
> >>
> >> I'm wondering what, if anything, can be done to improve the
> >> performance of the generated Java code. I notice that Java is only
> >> supported in the simplest output form, presumably because of the lack
> >> of "goto". I'm interested in exploring options to bring the Java code
> >> up to par with the generated code for other languages, perhaps by
> >> implementing it using raw JVM bytecode (using some assembly-like
> >> format like BiteScript or Jasmin) or by post-processing the compiled
> >> result to insert true gotos.
> >>
> >> Any pointers on this? Any prior work or tips?
> >>
> >> - Charlie
> >>
> >> _______________________________________________
> >> ragel-users mailing list
> >> ragel-users at complang.org
> >> http://www.complang.org/mailman/listinfo/ragel-users
> >
> >
> > _______________________________________________
> > ragel-users mailing list
> > ragel-users at complang.org
> > http://www.complang.org/mailman/listinfo/ragel-users

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: This is a digitally signed message part
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20111221/644e38af/attachment-0001.sig>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

