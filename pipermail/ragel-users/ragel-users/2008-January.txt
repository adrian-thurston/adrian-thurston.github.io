From thurs... at cs.queensu.ca  Thu Jan  3 02:28:42 2008
From: thurs... at cs.queensu.ca (=?utf-8?B?QWRyaWFuIFRodXJzdG9u?=)
Date: Thu, 3 Jan 2008 02:28:42 +0000
Subject: [ragel-users] [PATCH] repost: improvements to rlgen-java
In-Reply-To: <3eb0429d0712310656u7e709cbdp613b1e07f2f27fc5@mail.gmail.com>
References: <3eb0429d0712310656u7e709cbdp613b1e07f2f27fc5@mail.gmail.com>
Message-ID: <1584360179-1199327323-cardhu_decombobulator_blackberry.rim.net-286405747-@bxe115.bisx.prod.on.blackberry>

Thanks David,

I was able to try out the patch. It slows the initialization of static data a little, but I think it is worth it. In addition to eliminating debug data it is easier on the compiler. During my testing of the existing initialization code I was a able to cause javac to barf on an out-of-memory error probably because the parser was busy making deep parse trees for all the a[x] = y statements. Your patch eliminates that problem.

Adrian
-----Original Message-----
From: "David Waite" <dwaite at gmail.com>

Date: Mon, 31 Dec 2007 09:56:18 
To:ragel-users at googlegroups.com
Subject: [ragel-users] [PATCH] repost: improvements to rlgen-java


The following patch changes the Java generation a bit: 

- Array row/max are changed slightly to 12/8184 based on 80 column 
display. This was just my own preference (some might prefer 10  
columns, some would prefer the power-of-2-edness of 8 columns).  Toss 
it if desired. 

- Arrays are generated with an array constructor rather than a large 
block of statement constructors. This reduced my packaged JAR size by  
14k for a relatively simple JSON vocabulary with 68 states. 
- Arrays are generated with whitespace padding in code for 
readability. 
- Array overflow (over the SAIIC limit) is done by creating multiple 
 functions with numbered prefixes, then generating a combine_<name> 
function which builds a new array using new and arraycopy over all the 
previous init_<name>_<number> functions. 

-David Waite  
  
 

From dan-goo... at unpossible.com  Wed Jan  2 19:56:55 2008
From: dan-goo... at unpossible.com (dcgrigsby)
Date: Wed, 2 Jan 2008 11:56:55 -0800 (PST)
Subject: rlgen-ruby / ruby 1.9 incompatibilities, possible fixes, and offer to 
	patch
Message-ID: <a60ea573-3616-4e05-a6b0-4b7240459139@e23g2000prf.googlegroups.com>

Hello,

The code generated by rlgen-ruby is incompatible with Ruby 1.9.

Using the simple DevChix Hello World example (http://www.devchix.com/
2007/12/13/a-hello-world-for-ruby-on-ragel/)., the generated "write
exec" ruby contains a handful of errors.

1) the "when" clause in the generated case statements uses a
deprecated form.  It is in the form "when <value>:" and should be
"when <value> then" instead.

2) under 1.9, a string element reference (i.e., [] operator) returns a
string, not a fixnum as under 1.8.  So the comparisons like this...

  if data[p] < _hello_trans_keys[_mid]

...result in "`<': comparison of String with 104 failed
(ArgumentError)" under 1.9.



I'd be happy to work up a patch, hopefully one that works under both
1.8 and 1.9, but I need some guidance.

The former should be easy.  I found all the instances that use the
colon in when and changed them successfully.

The later is where I'm uncertain.  Appending ".to_s" to both sides of
the comparison (needs to be both sides to retain 1.8 compatibility)
everywhere seems wrong.  At this point I'm doing little more than
grepping the source; I don't really comprehend what's going on, so a
point in the right direction would be welcome.

Thanks,


From thurs... at cs.queensu.ca  Thu Jan  3 02:43:57 2008
From: thurs... at cs.queensu.ca (=?utf-8?B?QWRyaWFuIFRodXJzdG9u?=)
Date: Thu, 3 Jan 2008 02:43:57 +0000
Subject: [ragel-users] rlgen-ruby / ruby 1.9 incompatibilities, possiblefixes, and offer to  patch
In-Reply-To: <a60ea573-3616-4e05-a6b0-4b7240459139@e23g2000prf.googlegroups.com>
References: <a60ea573-3616-4e05-a6b0-4b7240459139@e23g2000prf.googlegroups.com>
Message-ID: <1762893049-1199328239-cardhu_decombobulator_blackberry.rim.net-993814275-@bxe115.bisx.prod.on.blackberry>

I'll look this up tomorrow. Right now I'm in a train station. In the meantime are there any ruby experts out there that know the proper way to index arrays and strings and pull out numbers?

Adrian
-----Original Message-----
From: dcgrigsby <dan-google at unpossible.com>

Date: Wed, 2 Jan 2008 11:56:55 
To:ragel-users <ragel-users at googlegroups.com>
Subject: [ragel-users] rlgen-ruby / ruby 1.9 incompatibilities, possible
 fixes, and offer to  patch



Hello,

The code generated by rlgen-ruby is incompatible with Ruby 1.9.

Using the simple DevChix Hello World example (http://www.devchix.com/
2007/12/13/a-hello-world-for-ruby-on-ragel/)., the generated "write
exec" ruby contains a handful of errors.

1) the "when" clause in the generated case statements uses a
deprecated form.  It is in the form "when <value>:" and should be
"when <value> then" instead.

2) under 1.9, a string element reference (i.e., [] operator) returns a
string, not a fixnum as under 1.8.  So the comparisons like this...

  if data[p] < _hello_trans_keys[_mid]

...result in "`<': comparison of String with 104 failed
(ArgumentError)" under 1.9.



I'd be happy to work up a patch, hopefully one that works under both
1.8 and 1.9, but I need some guidance.

The former should be easy.  I found all the instances that use the
colon in when and changed them successfully.

The later is where I'm uncertain.  Appending ".to_s" to both sides of
the comparison (needs to be both sides to retain 1.8 compatibility)
everywhere seems wrong.  At this point I'm doing little more than
grepping the source; I don't really comprehend what's going on, so a
point in the right direction would be welcome.

Thanks,

Dan



From br... at codefluency.com  Thu Jan  3 04:50:19 2008
From: br... at codefluency.com (Bruce Williams)
Date: Wed, 2 Jan 2008 22:50:19 -0600
Subject: [ragel-users] Re: rlgen-ruby / ruby 1.9 incompatibilities, possiblefixes, and offer to patch
In-Reply-To: <1762893049-1199328239-cardhu_decombobulator_blackberry.rim.net-993814275-@bxe115.bisx.prod.on.blackberry>
References: <a60ea573-3616-4e05-a6b0-4b7240459139@e23g2000prf.googlegroups.com>
	 <1762893049-1199328239-cardhu_decombobulator_blackberry.rim.net-993814275-@bxe115.bisx.prod.on.blackberry>
Message-ID: <a2830e5b0801022050v3ee0a3cbia3fd70118d36604d@mail.gmail.com>

Adrian,

In 1.9, use String#ord:

------------------------------------------------------------- String#ord
     str.ord   => integer
------------------------------------------------------------------------
     Return the +Integer+ ordinal of a one-character string.

        "a".ord         #=> 97

So, "foo"[1].ord in 1.9 should be equivalent to "foo"[1] in 1.8.

Cheers,
Bruce

---
Bruce Williams
http://codefluency.com

On 1/2/08, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> I'll look this up tomorrow. Right now I'm in a train station. In the meantime are there any ruby experts out there that know the proper way to index arrays and strings and pull out numbers?
>
> Adrian
> -----Original Message-----
> From: dcgrigsby <dan-goo... at unpossible.com>
>
> Date: Wed, 2 Jan 2008 11:56:55
> To:ragel-users <ragel-users at googlegroups.com>
> Subject: [ragel-users] rlgen-ruby / ruby 1.9 incompatibilities, possible
>  fixes, and offer to  patch
>
>
>
> Hello,
>
> The code generated by rlgen-ruby is incompatible with Ruby 1.9.
>
> Using the simple DevChix Hello World example (http://www.devchix.com/
> 2007/12/13/a-hello-world-for-ruby-on-ragel/)., the generated "write
> exec" ruby contains a handful of errors.
>
> 1) the "when" clause in the generated case statements uses a
> deprecated form.  It is in the form "when <value>:" and should be
> "when <value> then" instead.
>
> 2) under 1.9, a string element reference (i.e., [] operator) returns a
> string, not a fixnum as under 1.8.  So the comparisons like this...
>
>   if data[p] < _hello_trans_keys[_mid]
>
> ...result in "`<': comparison of String with 104 failed
> (ArgumentError)" under 1.9.
>
>
>
> I'd be happy to work up a patch, hopefully one that works under both
> 1.8 and 1.9, but I need some guidance.
>
> The former should be easy.  I found all the instances that use the
> colon in when and changed them successfully.
>
> The later is where I'm uncertain.  Appending ".to_s" to both sides of
> the comparison (needs to be both sides to retain 1.8 compatibility)
> everywhere seems wrong.  At this point I'm doing little more than
> grepping the source; I don't really comprehend what's going on, so a
> point in the right direction would be welcome.
>
> Thanks,
>
> Dan
>
>
>
> >
>


From nelson.... at gmail.com  Thu Jan  3 21:01:40 2008
From: nelson.... at gmail.com (Ana Nelson)
Date: Thu, 3 Jan 2008 13:01:40 -0800 (PST)
Subject: rlgen-ruby / ruby 1.9 incompatibilities, possiblefixes, and offer 
	to patch
In-Reply-To: <a2830e5b0801022050v3ee0a3cbia3fd70118d36604d@mail.gmail.com>
References: <a60ea573-3616-4e05-a6b0-4b7240459139@e23g2000prf.googlegroups.com> 
	<1762893049-1199328239-cardhu_decombobulator_blackberry.rim.net-993814275-@bxe115.bisx.prod.on.blackberry> 
	<a2830e5b0801022050v3ee0a3cbia3fd70118d36604d@mail.gmail.com>
Message-ID: <6c8581dd-b7c7-4b97-b416-9d6486c1deb3@p69g2000hsa.googlegroups.com>

I have the Hello World example running in Ruby 1.9. I replaced ":"
with "then" in the generated code as per Dan's suggestion, and I added
the following line in the example's run_machine method which converts
"data" to an array of integers using String#unpack.

data = data.unpack("c*") if data.is_a?(String)

Nothing else needs to change and this is also Ruby 1.8 compatible.
(I'll update my example with this - thanks, Dan)

Code like this could be generated by write init. But that's only if
Ragel wants to accommodate lazy Ruby programmers who want to pass in
strings when the documentation calls for arrays, now that in Ruby 1.9
strings don't happen to behave like arrays of integers by default. ;-)

Another approach would be to .unpack("c") (.ord is Ruby 1.9 only) each
individual character when it is processed but that means testing each
individual item to see whether it's a string or an int, or defining
an .unpack method on Fixnum if we want to be clever. This seems more
invasive in terms of changing rlgen-ruby, but perhaps it would be
better from a memory management point of view. I'm guessing from what
little I know about it, though, that people who are concerned about
memory management won't be passing around giant strings, so probably
the simpler 1-line option is fine. (I'd be happy to be corrected/
educated on that.)

I'm biased towards thinking that Ragel shouldn't try to do too much to
accommodate this change in Ruby's treatment of strings, unless it's
because of a conscious decision to support string inputs.

Regards,
Ana


On Jan 3, 4:50 am, "Bruce Williams" <br... at codefluency.com> wrote:
> Adrian,
>
> In 1.9, use String#ord:
>
> ------------------------------------------------------------- String#ord
>      str.ord   => integer
> ------------------------------------------------------------------------
>      Return the +Integer+ ordinal of a one-character string.
>
>         "a".ord         #=> 97
>
> So, "foo"[1].ord in 1.9 should be equivalent to "foo"[1] in 1.8.
>
> Cheers,
> Bruce
>
> ---
> Bruce Williamshttp://codefluency.com
>
> On 1/2/08, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>
> > I'll look this up tomorrow. Right now I'm in a train station. In the meantime are there any ruby experts out there that know the proper way to index arrays and strings and pull out numbers?
>
> > Adrian
> > -----Original Message-----
> > From: dcgrigsby <dan-goo... at unpossible.com>
>
> > Date: Wed, 2 Jan 2008 11:56:55
> > To:ragel-users <ragel-users at googlegroups.com>
> > Subject: [ragel-users] rlgen-ruby / ruby 1.9 incompatibilities, possible
> >  fixes, and offer to  patch
>
> > Hello,
>
> > The code generated by rlgen-ruby is incompatible with Ruby 1.9.
>
> > Using the simple DevChix Hello World example (http://www.devchix.com/
> > 2007/12/13/a-hello-world-for-ruby-on-ragel/)., the generated "write
> > exec" ruby contains a handful of errors.
>
> > 1) the "when" clause in the generated case statements uses a
> > deprecated form.  It is in the form "when <value>:" and should be
> > "when <value> then" instead.
>
> > 2) under 1.9, a string element reference (i.e., [] operator) returns a
> > string, not a fixnum as under 1.8.  So the comparisons like this...
>
> >   if data[p] < _hello_trans_keys[_mid]
>
> > ...result in "`<': comparison of String with 104 failed
> > (ArgumentError)" under 1.9.
>
> > I'd be happy to work up a patch, hopefully one that works under both
> > 1.8 and 1.9, but I need some guidance.
>
> > The former should be easy.  I found all the instances that use the
> > colon in when and changed them successfully.
>
> > The later is where I'm uncertain.  Appending ".to_s" to both sides of
> > the comparison (needs to be both sides to retain 1.8 compatibility)
> > everywhere seems wrong.  At this point I'm doing little more than
> > grepping the source; I don't really comprehend what's going on, so a
> > point in the right direction would be welcome.
>
> > Thanks,
>


From thurs... at cs.queensu.ca  Sat Jan  5 18:49:48 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Sat, 05 Jan 2008 13:49:48 -0500
Subject: [ragel-users] Re: rlgen-ruby / ruby 1.9 incompatibilities, possiblefixes,
 and offer  to patch
In-Reply-To: <6c8581dd-b7c7-4b97-b416-9d6486c1deb3@p69g2000hsa.googlegroups.com>
References: <a60ea573-3616-4e05-a6b0-4b7240459139@e23g2000prf.googlegroups.com>  <1762893049-1199328239-cardhu_decombobulator_blackberry.rim.net-993814275-@bxe115.bisx.prod.on.blackberry>  <a2830e5b0801022050v3ee0a3cbia3fd70118d36604d@mail.gmail.com> <6c8581dd-b7c7-4b97-b416-9d6486c1deb3@p69g2000hsa.googlegroups.com>
Message-ID: <477FD14C.5020700@cs.queensu.ca>

In the absence of one efficient method of extracting ordinals from both
strings and arrays I think we should use arrays. They cover the most
usage scenarios.

I think converting to array form should be done by the programmer if
necessary rather than converted automatically by "write init". Such a
conversion is only useful for people that are unaware of the issue and
is too much code for people that are.

I'll fix the "when" problem and update the tests to convert input to
array form.

-Adrian

Ana Nelson wrote:
> I have the Hello World example running in Ruby 1.9. I replaced ":"
> with "then" in the generated code as per Dan's suggestion, and I added
> the following line in the example's run_machine method which converts
> "data" to an array of integers using String#unpack.
> 
> data = data.unpack("c*") if data.is_a?(String)
> 
> Nothing else needs to change and this is also Ruby 1.8 compatible.
> (I'll update my example with this - thanks, Dan)
> 
> Code like this could be generated by write init. But that's only if
> Ragel wants to accommodate lazy Ruby programmers who want to pass in
> strings when the documentation calls for arrays, now that in Ruby 1.9
> strings don't happen to behave like arrays of integers by default. ;-)
> 
> Another approach would be to .unpack("c") (.ord is Ruby 1.9 only) each
> individual character when it is processed but that means testing each
> individual item to see whether it's a string or an int, or defining
> an .unpack method on Fixnum if we want to be clever. This seems more
> invasive in terms of changing rlgen-ruby, but perhaps it would be
> better from a memory management point of view. I'm guessing from what
> little I know about it, though, that people who are concerned about
> memory management won't be passing around giant strings, so probably
> the simpler 1-line option is fine. (I'd be happy to be corrected/
> educated on that.)
> 
> I'm biased towards thinking that Ragel shouldn't try to do too much to
> accommodate this change in Ruby's treatment of strings, unless it's
> because of a conscious decision to support string inputs.
> 
> Regards,
> Ana
> 
> 
> On Jan 3, 4:50 am, "Bruce Williams" <br... at codefluency.com> wrote:
>> Adrian,
>>
>> In 1.9, use String#ord:
>>
>> ------------------------------------------------------------- String#ord
>>      str.ord   => integer
>> ------------------------------------------------------------------------
>>      Return the +Integer+ ordinal of a one-character string.
>>
>>         "a".ord         #=> 97
>>
>> So, "foo"[1].ord in 1.9 should be equivalent to "foo"[1] in 1.8.
>>
>> Cheers,
>> Bruce
>>
>> ---
>> Bruce Williamshttp://codefluency.com
>>
>> On 1/2/08, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>>
>>> I'll look this up tomorrow. Right now I'm in a train station. In the meantime are there any ruby experts out there that know the proper way to index arrays and strings and pull out numbers?
>>> Adrian
>>> -----Original Message-----
>>> From: dcgrigsby <dan-goo... at unpossible.com>
>>> Date: Wed, 2 Jan 2008 11:56:55
>>> To:ragel-users <ragel-users at googlegroups.com>
>>> Subject: [ragel-users] rlgen-ruby / ruby 1.9 incompatibilities, possible
>>>  fixes, and offer to  patch
>>> Hello,
>>> The code generated by rlgen-ruby is incompatible with Ruby 1.9.
>>> Using the simple DevChix Hello World example (http://www.devchix.com/
>>> 2007/12/13/a-hello-world-for-ruby-on-ragel/)., the generated "write
>>> exec" ruby contains a handful of errors.
>>> 1) the "when" clause in the generated case statements uses a
>>> deprecated form.  It is in the form "when <value>:" and should be
>>> "when <value> then" instead.
>>> 2) under 1.9, a string element reference (i.e., [] operator) returns a
>>> string, not a fixnum as under 1.8.  So the comparisons like this...
>>>   if data[p] < _hello_trans_keys[_mid]
>>> ...result in "`<': comparison of String with 104 failed
>>> (ArgumentError)" under 1.9.
>>> I'd be happy to work up a patch, hopefully one that works under both
>>> 1.8 and 1.9, but I need some guidance.
>>> The former should be easy.  I found all the instances that use the
>>> colon in when and changed them successfully.
>>> The later is where I'm uncertain.  Appending ".to_s" to both sides of
>>> the comparison (needs to be both sides to retain 1.8 compatibility)
>>> everywhere seems wrong.  At this point I'm doing little more than
>>> grepping the source; I don't really comprehend what's going on, so a
>>> point in the right direction would be welcome.
>>> Thanks,
>>> Dan
> --~--~---------~--~----~------------~-------~--~----~
> You received this message because you are subscribed to the Google Groups "ragel-users" group.
> To post to this group, send email to ragel-users at googlegroups.com
> To unsubscribe from this group, send email to ragel-users-unsubscribe at googlegroups.com
> For more options, visit this group at http://groups.google.com/group/ragel-users?hl=en
> -~----------~----~----~----~------~----~------~--~---
> 
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20080105/8a52c8af/attachment.sig>

From thurs... at cs.queensu.ca  Sat Jan  5 21:19:23 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Sat, 05 Jan 2008 16:19:23 -0500
Subject: [ragel-users] Re: rlgen-ruby / ruby 1.9 incompatibilities, possiblefixes,
 and offer  to patch
In-Reply-To: <477FD14C.5020700@cs.queensu.ca>
References: <a60ea573-3616-4e05-a6b0-4b7240459139@e23g2000prf.googlegroups.com>  <1762893049-1199328239-cardhu_decombobulator_blackberry.rim.net-993814275-@bxe115.bisx.prod.on.blackberry>  <a2830e5b0801022050v3ee0a3cbia3fd70118d36604d@mail.gmail.com> <6c8581dd-b7c7-4b97-b416-9d6486c1deb3@p69g2000hsa.googlegroups.com> <477FD14C.5020700@cs.queensu.ca>
Message-ID: <477FF45B.8070902@cs.queensu.ca>

When I run the attached ruby program with 1.9 I get the following.
Anyone know if this is an issue that will get ironed out, or something
I'm doing wrong?

-Adrian

[thurston at reaves] test: ruby atoi1_ruby.rb
1
ACCEPT
atoi1_ruby.rb:265: -- control frame ----------
c:0007 p:0648 s:0040 b:0039 l:000038 d:000038 METHOD atoi1_ruby.rb:265
c:0006 p:0018 s:0014 b:0014 l:000006 d:000013 BLOCK  atoi1_ruby.rb:287
c:0005 p:---- s:0013 b:0012 l:000011 d:000011 FINISH :attr_accessor
c:0004 p:---- s:0010 b:0010 l:000009 d:000009 CFUNC  :each
c:0003 p:0243 s:0007 b:0007 l:000006 d:000006 TOP    atoi1_ruby.rb:286
c:0002 p:---- s:0003 b:0003 l:000002 d:000002 FINISH :inherited
c:0001 p:---- s:0001 b:-001 l:000000 d:000000 ------
---------------------------
DBG> : "atoi1_ruby.rb:287:in `block in <main>'"
DBG> : "atoi1_ruby.rb:286:in `each'"
DBG> : "atoi1_ruby.rb:286:in `<main>'"
-- backtrace of native function call (Use addr2line) --
0xb7f44544
0xb7e7369a
0xb7e73776
0xb7f3df09
0xb7f41d7a
0xb7f3a73d
0xb7f3a819
0xb7e7adf5
0xb7e7ae3b
0xb7e5e977
0xb7e7b672
0xb7e5ea2d
0xb7f39995
0xb7f41b83
0xb7f416f1
0xb7f3db9a
0xb7f41d7a
0xb7f423f3
0xb7e79d9d
0xb7e79e39
0x80486ad
0xb7c9f050
0x8048601
-------------------------------------------------------
[BUG] Stack consistency error (sp: 40, bp: 39)
ruby 1.9.0 (2007-08-30) [i486-linux]

Aborted (core dumped)
[thurston at reaves] test:
-------------- next part --------------
A non-text attachment was scrubbed...
Name: atoi1_ruby.rb
Type: application/x-ruby
Size: 5174 bytes
Desc: not available
URL: <http://www.colm.net/pipermail/ragel/attachments/20080105/0252599e/attachment.rb>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20080105/0252599e/attachment.sig>

From todd.fis... at gmail.com  Sun Jan  6 22:16:43 2008
From: todd.fis... at gmail.com (taf2)
Date: Sun, 6 Jan 2008 14:16:43 -0800 (PST)
Subject: ragel edge side include parser
Message-ID: <1a271861-87a4-4f95-b543-7c87c3f723e6@q39g2000hsf.googlegroups.com>

Hi,

  I've been doing some work on implementing a parser to handle ESI
(Edge Side Include) Tags.   I am fairly sure, I have the parser
working, but am curious about methods for optimizing.  I noticed that
if  I generate my parser using -G1  I get a file about 25K lines.
With -T1 I get about 5K lines.   Also, when using -G2  i'm not seeing
the cs variable changing.   I noticed some pretty significant changes
in size based on some simple changes in how I matched attributes.
Looking for any advice on methods for optimizing my parser.     Here's
my main parser file:  http://mongrel-esi.googlecode.com/svn/trunk/ext/esi/common.rl

Thanks,


From todd.fis... at gmail.com  Mon Jan  7 04:54:53 2008
From: todd.fis... at gmail.com (Todd Fisher)
Date: Sun, 6 Jan 2008 23:54:53 -0500
Subject: [ragel-users] ragel edge side include parser
In-Reply-To: <1a271861-87a4-4f95-b543-7c87c3f72...@q39g2000hsf.googlegroups.com>
References: <1a271861-87a4-4f95-b543-7c87c3f72...@q39g2000hsf.googlegroups.com>
Message-ID: <e9a952090801062054i60bf9a03p672ddba3710f24ad@mail.gmail.com>

Okay, I did some more reading and now understand why with -G2 cs variable is
always the same value.  From chapter 5, page 43:"Generally this produces
faster running code because it allows the machine to encode the current

state using the processor's instruction pointer."

I've also been able to reduce the machine size by merging a few redundant
states... Still am hoping to get some feedback, regarding whether my
approach to the parser is reasonable and if there are any obvious features
of ragel that I'm missing.

Thanks,
Todd

On Jan 6, 2008 5:16 PM, taf2 <todd.fis... at gmail.com> wrote:

>
> Hi,
>
>  I've been doing some work on implementing a parser to handle ESI
> (Edge Side Include) Tags.   I am fairly sure, I have the parser
> working, but am curious about methods for optimizing.  I noticed that
> if  I generate my parser using -G1  I get a file about 25K lines.
> With -T1 I get about 5K lines.   Also, when using -G2  i'm not seeing
> the cs variable changing.   I noticed some pretty significant changes
> in size based on some simple changes in how I matched attributes.
> Looking for any advice on methods for optimizing my parser.     Here's
> my main parser file:
> http://mongrel-esi.googlecode.com/svn/trunk/ext/esi/common.rl
>
> Thanks,
> Todd
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel/attachments/20080106/546ad7e1/attachment.html>

From thurs... at cs.queensu.ca  Tue Jan  8 00:07:31 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Mon, 07 Jan 2008 19:07:31 -0500
Subject: [ragel-users] Re: ragel edge side include parser
In-Reply-To: <e9a952090801062054i60bf9a03p672ddba3710f24ad@mail.gmail.com>
References: <1a271861-87a4-4f95-b543-7c87c3f723e6@q39g2000hsf.googlegroups.com> <e9a952090801062054i60bf9a03p672ddba3710f24ad@mail.gmail.com>
Message-ID: <4782BEC3.6010800@cs.queensu.ca>

Hi Todd,

Putting the .* ahead of esi_tags is very costly. It grows the number of
states from 80 to over 300. You can improve this by choosing some point
at which to commit to esi_tags. But first we need to know more about the
language. Is "<" on it's own legal? What is the nature of the "water" in
which your esi_tag "island" is found?

-Adrian

Todd Fisher wrote:
> Okay, I did some more reading and now understand why with -G2 cs
> variable is always the same value.  From chapter 5, page 43:
> "Generally this produces faster running code because it allows the
> machine to encode the current 
> 
> state using the processor's instruction pointer."
> 
> 
> I've also been able to reduce the machine size by merging a few
> redundant states... Still am hoping to get some feedback, regarding
> whether my approach to the parser is reasonable and if there are any
> obvious features of ragel that I'm missing.
> 
> Thanks,
> Todd
> 
> On Jan 6, 2008 5:16 PM, taf2 <todd.fis... at gmail.com
> <mailto:todd.fis... at gmail.com>> wrote:
> 
> 
>     Hi,
> 
>      I've been doing some work on implementing a parser to handle ESI
>     (Edge Side Include) Tags.   I am fairly sure, I have the parser
>     working, but am curious about methods for optimizing.  I noticed that
>     if  I generate my parser using -G1  I get a file about 25K lines.
>     With -T1 I get about 5K lines.   Also, when using -G2  i'm not seeing
>     the cs variable changing.   I noticed some pretty significant changes
>     in size based on some simple changes in how I matched attributes.
>     Looking for any advice on methods for optimizing my parser.     Here's
>     my main parser file:  
>     http://mongrel-esi.googlecode.com/svn/trunk/ext/esi/common.rl
> 
>     Thanks,
>     Todd
> 
>     > 


From r.lp... at gmail.com  Tue Jan  8 00:23:19 2008
From: r.lp... at gmail.com (Paul Findlay)
Date: Tue, 8 Jan 2008 13:23:19 +1300
Subject: [ragel-users] Re: ragel edge side include parser
In-Reply-To: <4782BEC3.6010...@cs.queensu.ca>
References: <1a271861-87a4-4f95-b543-7c87c3f72...@q39g2000hsf.googlegroups.com>
	 <e9a952090801062054i60bf9a03p672ddba3710f2...@mail.gmail.com>
	 <4782BEC3.6010...@cs.queensu.ca>
Message-ID: <4e8dd6b40801071623g611dda87jbb888870f92e31cb@mail.gmail.com>

> Putting the .* ahead of esi_tags is very costly. It grows the number of
> states from 80 to over 300. You can improve this by choosing some point
> at which to commit to esi_tags. But first we need to know more about the
> language. Is "<" on it's own legal? What is the nature of the "water" in
> which your esi_tag "island" is found?
The esi tags get embedded in HTML and other text formats right? Would
it be possible to keep track of the start of pure html (or whatever)
content, and if '<esi:' is hit, output all the content (if any) up to
'<esi:, unless the content occurs in some nested esi construct'?

 - Paul


From thurs... at cs.queensu.ca  Wed Jan  9 23:48:31 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Wed, 09 Jan 2008 18:48:31 -0500
Subject: [ragel-users] Re: ragel edge side include parser
In-Reply-To: <e9a952090801062054i60bf9a03p672ddba3710f24ad@mail.gmail.com>
References: <1a271861-87a4-4f95-b543-7c87c3f723e6@q39g2000hsf.googlegroups.com> <e9a952090801062054i60bf9a03p672ddba3710f24ad@mail.gmail.com>
Message-ID: <47855D4F.2070809@cs.queensu.ca>


Todd Fisher wrote:
> Okay, I did some more reading and now understand why with -G2 cs
> variable is always the same value.  From chapter 5, page 43:
> "Generally this produces faster running code because it allows the
> machine to encode the current 
> 
> state using the processor's instruction pointer."

That's right, for optimization purposes cs is not valid inside the
execution loop. From page 7 of the manual (version 5.25):

>From outside the execution loop, control may be passed to any machine by
assigning the entry point to the cs variable.  From inside the execution
loop, control may be passed to any machine instantiation using fcall
fgoto or fnext statements.

Adrian


From dwa... at gmail.com  Sat Jan  5 07:55:42 2008
From: dwa... at gmail.com (David Waite)
Date: Sat, 5 Jan 2008 00:55:42 -0700
Subject: Am I misinterpreting the purpose of fbreak?
Message-ID: <3eb0429d0801042355r636e0acakef0cd200439e6517@mail.gmail.com>

(Simple sample attached for C and Java)

My hope is to make a pull parser for a document format (JSON), which will
update the parser object to represent a new 'state' after processing some
atom of information from the input source. It thus is almost like an
enumeration of events that you iterate over by calling a 'next()' style
method. Examples would include Java stream xml (STAX) interfaces (see
http://tinyurl.com/2urbsy ) or the .Net Framework's XmlReader (see
http://tinyurl.com/34mg5h ). To do this, I am trying to break out everytime
I process a feature in my document, but I quickly realized this was not
working for me every-time.

It appears the main problem is in having multiple breaking actions off of a
single character transition. The system doesn't appear to be able to recover
from such behavior, instead immediately exiting the execution loop when you
attempt to resume processing. The end result for the C and Java examples
supplied is that the pointer never moves forward, eof is never reached and
the sample infinitely outputs its message.

Is it possible to do what I want to do?

-David Waite
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel/attachments/20080105/42daecc9/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: breaking-actions-test.zip
Type: application/zip
Size: 1599 bytes
Desc: not available
URL: <http://www.colm.net/pipermail/ragel/attachments/20080105/42daecc9/attachment.zip>

From thurs... at cs.queensu.ca  Sat Jan  5 22:56:03 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Sat, 05 Jan 2008 17:56:03 -0500
Subject: [ragel-users] Am I misinterpreting the purpose of fbreak?
In-Reply-To: <3eb0429d0801042355r636e0acakef0cd200439e6517@mail.gmail.com>
References: <3eb0429d0801042355r636e0acakef0cd200439e6517@mail.gmail.com>
Message-ID: <47800B03.8060007@cs.queensu.ca>


The problem is that fbreak does not advance p when it breaks out of the
loop. This is a choice I made a long time ago and I think I was taking
the "do as little as possible on behalf of the user" approach. But not
advancing p while advancing cs is clearly wrong and confusing. This is
something that will change in 6.0 (it's in the TODO already).

In the meantime you can do p++ just before the break.

Adrian

David Waite wrote:
> (Simple sample attached for C and Java)
>=20
> My hope is to make a pull parser for a document format (JSON), which
> will update the parser object to represent a new 'state' after
> processing some atom of information from the input source. It thus is
> almost like an enumeration of events that you iterate over by calling a=

> 'next()' style method. Examples would include Java stream xml (STAX)
> interfaces (see  http://tinyurl.com/2urbsy ) or the .Net Framework's
> XmlReader (see http://tinyurl.com/34mg5h ). To do this, I am trying to
> break out everytime I process a feature in my document, but I quickly
> realized this was not working for me every-time.
>=20
> It appears the main problem is in having multiple breaking actions off
> of a single character transition. The system doesn't appear to be able
> to recover from such behavior, instead immediately exiting the executio=
n
> loop when you attempt to resume processing. The end result for the C an=
d
> Java examples supplied is that the pointer never moves forward, eof is
> never reached and the sample infinitely outputs its message.
>=20
> Is it possible to do what I want to do?
>=20
> -David Waite
>=20
> --~--~---------~--~----~------------~-------~--~----~
> You received this message because you are subscribed to the Google
> Groups "ragel-users" group.
> To post to this group, send email to ragel-users at googlegroups.com
> To unsubscribe from this group, send email to
> ragel-users-unsubscribe at googlegroups.com
> For more options, visit this group at
> http://groups.google.com/group/ragel-users?hl=3Den
> -~----------~----~----~----~------~----~------~--~---
>=20

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20080105/f6a8e434/attachment.sig>

From dwa... at gmail.com  Sat Jan  5 23:52:58 2008
From: dwa... at gmail.com (David Waite)
Date: Sat, 5 Jan 2008 15:52:58 -0800 (PST)
Subject: Am I misinterpreting the purpose of fbreak?
In-Reply-To: <47800B03.8060007@cs.queensu.ca>
References: <3eb0429d0801042355r636e0acakef0cd200439e6517@mail.gmail.com> 
	<47800B03.8060007@cs.queensu.ca>
Message-ID: <7e25c773-a801-4f75-8d5c-cd56e0379ee4@u10g2000prn.googlegroups.com>

I don't know if advancing p is the correct option all the time though,
because (in the example, and unfortunately in the actual machine I'm
trying to create) I trigger multiple breaking actions on a single
transition. For example, the two character JSON document "[]"
currently should have the following actions triggered by my machine:

main:
  StartDocument - fbreak; (returns Event.Document)
  ParseArray - fcall array;
  StartArray - fbreak; (returns Event.Array)
  EndArray - fbreak; (returns Event.EndArray)
  Return - fret;
  EndDocument (eof) - fbreak; (returns Event.EndDocument)

If I remove the StartDocument fbreak, would incrementing p on break
work?

-DW

On Jan 5, 3:56 pm, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> The problem is that fbreak does not advance p when it breaks out of the
> loop. This is a choice I made a long time ago and I think I was taking
> the "do as little as possible on behalf of the user" approach. But not
> advancing p while advancing cs is clearly wrong and confusing. This is
> something that will change in 6.0 (it's in the TODO already).
>


From thurs... at cs.queensu.ca  Sun Jan  6 00:52:01 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Sat, 05 Jan 2008 19:52:01 -0500
Subject: [ragel-users] Re: Am I misinterpreting the purpose of fbreak?
In-Reply-To: <7e25c773-a801-4f75-8d5c-cd56e0379ee4@u10g2000prn.googlegroups.com>
References: <3eb0429d0801042355r636e0acakef0cd200439e6517@mail.gmail.com>  <47800B03.8060007@cs.queensu.ca> <7e25c773-a801-4f75-8d5c-cd56e0379ee4@u10g2000prn.googlegroups.com>
Message-ID: <47802631.4020501@cs.queensu.ca>

Sorry that won't work. When you break from the processing loop you
abandon any remaining actions on that character. Ragel does not jump
back into the action list to the point of departure.

What you could do is queue up actions and then embed the break action using:

${ p++; break; }

Just be sure the break action is embedded after the actions that queue
up tokens. See the section on action ordering in the manual.

-Adrian

David Waite wrote:
> I don't know if advancing p is the correct option all the time though,
> because (in the example, and unfortunately in the actual machine I'm
> trying to create) I trigger multiple breaking actions on a single
> transition. For example, the two character JSON document "[]"
> currently should have the following actions triggered by my machine:
> 
> main:
>   StartDocument - fbreak; (returns Event.Document)
>   ParseArray - fcall array;
>   StartArray - fbreak; (returns Event.Array)
>   EndArray - fbreak; (returns Event.EndArray)
>   Return - fret;
>   EndDocument (eof) - fbreak; (returns Event.EndDocument)
> 
> If I remove the StartDocument fbreak, would incrementing p on break
> work?
> 
> -DW
> 
> On Jan 5, 3:56 pm, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>> The problem is that fbreak does not advance p when it breaks out of the
>> loop. This is a choice I made a long time ago and I think I was taking
>> the "do as little as possible on behalf of the user" approach. But not
>> advancing p while advancing cs is clearly wrong and confusing. This is
>> something that will change in 6.0 (it's in the TODO already).
>>
>> In the meantime you can do p++ just before the break.
> > 
> 


From dwa... at gmail.com  Sun Jan  6 07:35:11 2008
From: dwa... at gmail.com (David Waite)
Date: Sat, 5 Jan 2008 23:35:11 -0800 (PST)
Subject: Am I misinterpreting the purpose of fbreak?
In-Reply-To: <47802631.4020501@cs.queensu.ca>
References: <3eb0429d0801042355r636e0acakef0cd200439e6517@mail.gmail.com> 
	<47800B03.8060007@cs.queensu.ca> <7e25c773-a801-4f75-8d5c-cd56e0379ee4@u10g2000prn.googlegroups.com> 
	<47802631.4020501@cs.queensu.ca>
Message-ID: <7883c971-4197-4d68-b41c-787ff4569c1c@i29g2000prf.googlegroups.com>

This is what I attempted basically, and it seems to work fine so far
(hooray!)

The only difference is that I had my action check for queued events
before breaking.

-DW

On Jan 5, 5:52 pm, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> Sorry that won't work. When you break from the processing loop you
> abandon any remaining actions on that character. Ragel does not jump
> back into the action list to the point of departure.
>
> What you could do is queue up actions and then embed the break action using:
>
> ${ p++; break; }
>
> Just be sure the break action is embedded after the actions that queue
> up tokens. See the section on action ordering in the manual.
>
> -Adrian
>
> David Waite wrote:
> > I don't know if advancing p is the correct option all the time though,
> > because (in the example, and unfortunately in the actual machine I'm
> > trying to create) I trigger multiple breaking actions on a single
> > transition. For example, the two character JSON document "[]"
> > currently should have the following actions triggered by my machine:
>
> > main:
> >   StartDocument - fbreak; (returns Event.Document)
> >   ParseArray - fcall array;
> >   StartArray - fbreak; (returns Event.Array)
> >   EndArray - fbreak; (returns Event.EndArray)
> >   Return - fret;
> >   EndDocument (eof) - fbreak; (returns Event.EndDocument)
>
> > If I remove the StartDocument fbreak, would incrementing p on break
> > work?
>
> > -DW
>
> > On Jan 5, 3:56 pm, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> >> The problem is that fbreak does not advance p when it breaks out of the
> >> loop. This is a choice I made a long time ago and I think I was taking
> >> the "do as little as possible on behalf of the user" approach. But not
> >> advancing p while advancing cs is clearly wrong and confusing. This is
> >> something that will change in 6.0 (it's in the TODO already).
>


From polus... at gmail.com  Fri Jan 11 13:00:01 2008
From: polus... at gmail.com (Andrei Polushin)
Date: Fri, 11 Jan 2008 05:00:01 -0800 (PST)
Subject: [ragel-users] Re: Am I misinterpreting the purpose of fbreak?
In-Reply-To: <47802631.4020501@cs.queensu.ca>
References: <3eb0429d0801042355r636e0acakef0cd200439e6517@mail.gmail.com> 
	<47800B03.8060007@cs.queensu.ca> <7e25c773-a801-4f75-8d5c-cd56e0379ee4@u10g2000prn.googlegroups.com> 
	<47802631.4020501@cs.queensu.ca>
Message-ID: <dbeea39f-518f-4807-9b00-88522f216345@j20g2000hsi.googlegroups.com>

Adrian Thurston wrote:
> What you could do is queue up actions and then embed the break action [...]

I guess the same goal can be achieved *without the queue*. One can use
additional states: the machine goes to the next "fake" state,
generates output event, but does not advance to the next character:

action StartDocument { result = "StartDocument"; fbreak; }

main := any at StartDocument ............ ;

--
Andrei Polushin


From dwa... at gmail.com  Fri Jan 11 19:51:26 2008
From: dwa... at gmail.com (David Waite)
Date: Fri, 11 Jan 2008 12:51:26 -0700
Subject: [ragel-users] Re: Am I misinterpreting the purpose of fbreak?
In-Reply-To: <dbeea39f-518f-4807-9b00-88522f216...@j20g2000hsi.googlegroups.com>
References: <3eb0429d0801042355r636e0acakef0cd200439e6...@mail.gmail.com>
	 <47800B03.8060...@cs.queensu.ca>
	 <7e25c773-a801-4f75-8d5c-cd56e0379...@u10g2000prn.googlegroups.com>
	 <47802631.4020...@cs.queensu.ca>
	 <dbeea39f-518f-4807-9b00-88522f216...@j20g2000hsi.googlegroups.com>
Message-ID: <3eb0429d0801111151w44ce93dfk5f3ce75910c6f536@mail.gmail.com>

Hopefully when I eliminate the StartDocument and EndDocument events, it will
no longer be possible for me to have more than a single event per character.
-DW

On 1/11/08, Andrei Polushin <polus... at gmail.com> wrote:
>
>
> Adrian Thurston wrote:
> > What you could do is queue up actions and then embed the break action
> [...]
>
> I guess the same goal can be achieved *without the queue*. One can use
> additional states: the machine goes to the next "fake" state,
> generates output event, but does not advance to the next character:
>
> action StartDocument { result = "StartDocument"; fbreak; }
>
> main := any at StartDocument ............ ;
>
> --
> Andrei Polushin
>
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel/attachments/20080111/badfa40c/attachment.html>

From jup... at hotmail.de  Thu Jan 10 22:05:40 2008
From: jup... at hotmail.de (jupp_g)
Date: Thu, 10 Jan 2008 14:05:40 -0800 (PST)
Subject: (unexpected) problem with accented chars
Message-ID: <4cb24783-97e7-49c2-8fa2-689f0e5732a9@q77g2000hsh.googlegroups.com>

If you feed the following console app with chars like [ÄÖÜäöüß] they
are not accepted, which is somewhat unexpected (for me). The dot
output looks fine with proper states and transitions. The problem is
definetely not related to the code page switching, but I didn't delete
the code to enable showing the chars on the console (cmd.exe defaults
to code page 850, which doesn't have some of the chars I want). If I
use the "all" machine things work as expected.

Any hints?

#ifdef _WIN32
#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#endif
#include <stdio.h>

#define BUF_LEN		128

%%{
	machine cp1252;
	alphtype unsigned char;

	action finish_line {
		++count;
		res = (cs >= cp1252_first_final);
		printf( "==> \"%s\"\n",  line );
	}

	action start_line {
		line_idx = 0;
	}

	action add_char {
		line[line_idx++] = fc;
	}

	action end_line {
		line[line_idx] = '\0';
	}

	more = (0xC0..0xFF);
	what_i_want = ('0'..'9')|('A'..'Z')|('a'..'z')|(0xC0..0xFF);
	all = (0x30..0xFF);

	# fails:
            main := ( ( (alnum|more)+ > start_line $ add_char %
end_line ) ) 0 @ finish_line;
	# fails: main := ( ( (what_i_want)+ > start_line $ add_char %
end_line ) ) 0 @ finish_line;
	# only almost what I want, but works:
	#main := ( ( (all)+ > start_line $ add_char % end_line ) ) 0 @
finish_line;
}%%

%% write data;

int main( int argc, char* argv[] )
{
#ifdef _WIN32
	SetConsoleCP( 1252 );
	SetConsoleOutputCP( 1252 );
#endif

	for ( int i = 1; i < argc; ++i ) {

		int  cs;
		char *p = argv[i];
		char *pe = p + strlen(p) + 1;

		int res = 0;
		int count = 0;
		char line[BUF_LEN];
		int line_idx = -1;
		line[0] = '\0';

		printf( "argv[%d] = \"%s\"\n", i, p );

		%% write init;
		%% write exec;

		printf( "\tresult = %d (count=%d)\n", res, count );
	}

	return 0;
}


From jup... at hotmail.de  Fri Jan 11 11:09:20 2008
From: jup... at hotmail.de (jupp_g)
Date: Fri, 11 Jan 2008 03:09:20 -0800 (PST)
Subject: (unexpected) problem with accented chars
In-Reply-To: <4cb24783-97e7-49c2-8fa2-689f0e5732a9@q77g2000hsh.googlegroups.com>
References: <4cb24783-97e7-49c2-8fa2-689f0e5732a9@q77g2000hsh.googlegroups.com>
Message-ID: <b42ed8ed-b710-4c76-beee-9e8840d5e888@f10g2000hsf.googlegroups.com>

mea culpa. I changed alphtype to unsigned char but did not update p
and pe. I have not looked at the generated code in detail, but I guess
the problem was related to a spurious sign extension. Of course that
leaves the question why the "all" machine worked.

...
	# now working:
	main := ( ( (what_i_want)+ > start_line $ add_char % end_line ) ) 0 @
finish_line;
	# only almost what I want, but works:
	#main := ( ( (all)+ > start_line $ add_char % end_line ) ) 0 @
finish_line;
}%%

%% write data;

int main( int argc, unsigned char* argv[] )
{
#ifdef _WIN32
	SetConsoleCP( 1252 );
	SetConsoleOutputCP( 1252 );
#endif

	for ( int i = 1; i < argc; ++i ) {

		int  cs;
		unsigned char *p = argv[i];
		unsigned char *pe = p + strlen( reinterpret_cast<char *>( p ) ) + 1;


From thurs... at cs.queensu.ca  Fri Jan 11 19:52:32 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Fri, 11 Jan 2008 14:52:32 -0500
Subject: [ragel-users] Re: (unexpected) problem with accented chars
In-Reply-To: <b42ed8ed-b710-4c76-beee-9e8840d5e888@f10g2000hsf.googlegroups.com>
References: <4cb24783-97e7-49c2-8fa2-689f0e5732a9@q77g2000hsh.googlegroups.com> <b42ed8ed-b710-4c76-beee-9e8840d5e888@f10g2000hsf.googlegroups.com>
Message-ID: <4787C900.6070908@cs.queensu.ca>


jupp_g wrote:
> mea culpa. I changed alphtype to unsigned char but did not update p
> and pe. I have not looked at the generated code in detail, but I guess
> the problem was related to a spurious sign extension. Of course that
> leaves the question why the "all" machine worked.

You'd probably have to look closely at the generated code. Since the all
machine is only a single range there is a lot less testing of the
character that needs to be done. Also, if the range goes right up to a
limit of the alphabet type then ragel doesn't bother to check that end
(assuming your working with -G2). My guess is that the error was just
avoided by luck.

Adrian


From thurs... at cs.queensu.ca  Sat Jan 12 20:58:15 2008
From: thurs... at cs.queensu.ca (=?utf-8?B?QWRyaWFuIFRodXJzdG9u?=)
Date: Sat, 12 Jan 2008 20:58:15 +0000
Subject: 6.0 released
Message-ID: <2119637514-1200171737-cardhu_decombobulator_blackberry.rim.net-351812955-@bxe115.bisx.prod.on.blackberry>

Hey Everyone,

I just released 6.0. The focus of this release was on collecting the backwards incompatible changes into one release. 

This is the back-to-roots Ragel release.

Please report any problems here.

Cheers,
 Adrian


From thurs... at cs.queensu.ca  Sat Jan 12 21:01:35 2008
From: thurs... at cs.queensu.ca (=?utf-8?B?QWRyaWFuIFRodXJzdG9u?=)
Date: Sat, 12 Jan 2008 21:01:35 +0000
Subject: 6.0 released
Message-ID: <2119637514-1200171739-cardhu_decombobulator_blackberry.rim.net-1200226229-@bxe115.bisx.prod.on.blackberry>

Hey Everyone,

I just released 6.0. The focus of this release was on collecting the backwards incompatible changes into one release. 

This is the back-to-roots Ragel release.

Please report any problems here.

Cheers,
 Adrian


From jup... at hotmail.de  Sun Jan 13 20:19:48 2008
From: jup... at hotmail.de (jupp_g)
Date: Sun, 13 Jan 2008 12:19:48 -0800 (PST)
Subject: 6.0 released
In-Reply-To: <2119637514-1200171739-cardhu_decombobulator_blackberry.rim.net-1200226229-@bxe115.bisx.prod.on.blackberry>
References: <2119637514-1200171739-cardhu_decombobulator_blackberry.rim.net-1200226229-@bxe115.bisx.prod.on.blackberry>
Message-ID: <7d0a2b5c-dfc8-445e-b8df-d4c419b17d59@j78g2000hsd.googlegroups.com>

Hi,

I found a few minor issues and generated a patch file. If I can't
upload it, I'll mail to Adrian.

(1) It seems that some of language independent tests miss the
statement "@NEEDS_EOF: yes", otherwise all tests run fine.

(2) The code generators include "unistd.h", which is not necessary.
This is not a problem if ragel is compiled on a platform that has this
file, if not, unnecessary preprocessor statements are necessary.

(3) On Windows, Ragel can be compiled using the Microsoft C/C++
compiler (without a lot of changes). My patch includes a couple of
"Makefile.msc" files. Inside cygwin the build ist started by calling
"make --file=Makefile.msc" from the top directory (make not nmake!). I
guess the old Visual Studio files are still more or less valid, but
the this version does not reference unistd.h, whereas the VS project
includes a dummy unistd.h.

(4) For the Windows platform the combination GetCurrentProcess()/
GetModuleFileNameEx() is ok, but a simple GetModuleFileName( NULL,
imageFileName, len ) would do the trick as well, since the "NULL
module" "belongs" to the current process.

Jupp


From jason.gar... at gmail.com  Mon Jan 28 22:09:16 2008
From: jason.gar... at gmail.com (Jason Garber)
Date: Mon, 28 Jan 2008 14:09:16 -0800 (PST)
Subject: How to look ahead
Message-ID: <762e2686-56f8-40cf-823b-8b50fdbbbdb3@j78g2000hsd.googlegroups.com>

Hello Ragel users,
I'm working on SuperRedCloth (a Ragel implementation of RedCloth that
why the lucky stiff started awhile back).  I've run into some trouble
and could use some help.

In the inline scanner, we want the dimension rule to parse "1 x 2."
and then the formatter outputs it as "1 &#215; 2."  As it was:

dim = ( digit+ >A %{ STORE(x) } " x " digit+ >A %{ STORE(y) } ) >X ;

(where A registers the start of the string to capture and STORE
captures it.  See
http://code.whytheluckystiff.net/redcloth/browser/branches/superredcloth/ext/superredcloth_scan/superredcloth_inline.rl
if you need more context.)

But, since it was in a scanner and it had to entertain the possibility
that the pattern was starting over (I assume), the STORE(y) action
would never happen, so you'd get "1 &#215; ."

Assuming you can't have leaving actions at the end of a pattern in a
scanner, I considered (with the help of Johan Sørensen) looking ahead
for a digit but not consuming it, so with "1 x 2." the "1 x" is handed
to the formatter and the rest is handled by the default pattern (not
stored).  This gives the additional advantage of being able to parse
something like "1 x 2 x 3 x 4."

The question is, how to look ahead?  I've tried all kinds of things
with fhold, p--, etc., but it seems I'm at the limit of my Ragel
comprehension.  Or is there a better way than look-ahead?

Thanks in advance!


From thurs... at cs.queensu.ca  Wed Jan 30 04:06:06 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Tue, 29 Jan 2008 23:06:06 -0500
Subject: [ragel-users] How to look ahead
In-Reply-To: <762e2686-56f8-40cf-823b-8b50fdbbbdb3@j78g2000hsd.googlegroups.com>
References: <762e2686-56f8-40cf-823b-8b50fdbbbdb3@j78g2000hsd.googlegroups.com>
Message-ID: <479FF7AE.50904@cs.queensu.ca>

Hey Jason,

Generally I do lookahead by moving p backwards. This should work even in
scanner actions (requires a recent version of Ragel). Can you give some
code that doesn't do what you expect? I don't understand exactly what
you're trying to do.

Adrian

Jason Garber wrote:
> Hello Ragel users,
> I'm working on SuperRedCloth (a Ragel implementation of RedCloth that
> why the lucky stiff started awhile back).  I've run into some trouble
> and could use some help.
> 
> In the inline scanner, we want the dimension rule to parse "1 x 2."
> and then the formatter outputs it as "1 &#215; 2."  As it was:
> 
> dim = ( digit+ >A %{ STORE(x) } " x " digit+ >A %{ STORE(y) } ) >X ;
> 
> (where A registers the start of the string to capture and STORE
> captures it.  See
> http://code.whytheluckystiff.net/redcloth/browser/branches/superredcloth/ext/superredcloth_scan/superredcloth_inline.rl
> if you need more context.)
> 
> But, since it was in a scanner and it had to entertain the possibility
> that the pattern was starting over (I assume), the STORE(y) action
> would never happen, so you'd get "1 &#215; ."
> 
> Assuming you can't have leaving actions at the end of a pattern in a
> scanner, I considered (with the help of Johan Sørensen) looking ahead
> for a digit but not consuming it, so with "1 x 2." the "1 x" is handed
> to the formatter and the rest is handled by the default pattern (not
> stored).  This gives the additional advantage of being able to parse
> something like "1 x 2 x 3 x 4."
> 
> The question is, how to look ahead?  I've tried all kinds of things
> with fhold, p--, etc., but it seems I'm at the limit of my Ragel
> comprehension.  Or is there a better way than look-ahead?
> 
> Thanks in advance!
> Jason Garber
> > 
> 


From thurs... at cs.queensu.ca  Thu Jan  3 02:28:42 2008
From: thurs... at cs.queensu.ca (=?utf-8?B?QWRyaWFuIFRodXJzdG9u?=)
Date: Thu, 3 Jan 2008 02:28:42 +0000
Subject: [ragel-users] [PATCH] repost: improvements to rlgen-java
In-Reply-To: <3eb0429d0712310656u7e709cbdp613b1e07f2f27fc5@mail.gmail.com>
References: <3eb0429d0712310656u7e709cbdp613b1e07f2f27fc5@mail.gmail.com>
Message-ID: <1584360179-1199327323-cardhu_decombobulator_blackberry.rim.net-286405747-@bxe115.bisx.prod.on.blackberry>

Thanks David,

I was able to try out the patch. It slows the initialization of static data a little, but I think it is worth it. In addition to eliminating debug data it is easier on the compiler. During my testing of the existing initialization code I was a able to cause javac to barf on an out-of-memory error probably because the parser was busy making deep parse trees for all the a[x] = y statements. Your patch eliminates that problem.

Adrian
-----Original Message-----
From: "David Waite" <dwaite at gmail.com>

Date: Mon, 31 Dec 2007 09:56:18 
To:ragel-users at googlegroups.com
Subject: [ragel-users] [PATCH] repost: improvements to rlgen-java


The following patch changes the Java generation a bit: 

- Array row/max are changed slightly to 12/8184 based on 80 column 
display. This was just my own preference (some might prefer 10  
columns, some would prefer the power-of-2-edness of 8 columns).  Toss 
it if desired. 

- Arrays are generated with an array constructor rather than a large 
block of statement constructors. This reduced my packaged JAR size by  
14k for a relatively simple JSON vocabulary with 68 states. 
- Arrays are generated with whitespace padding in code for 
readability. 
- Array overflow (over the SAIIC limit) is done by creating multiple 
 functions with numbered prefixes, then generating a combine_<name> 
function which builds a new array using new and arraycopy over all the 
previous init_<name>_<number> functions. 

-David Waite  
  
 

From dan-goo... at unpossible.com  Wed Jan  2 19:56:55 2008
From: dan-goo... at unpossible.com (dcgrigsby)
Date: Wed, 2 Jan 2008 11:56:55 -0800 (PST)
Subject: rlgen-ruby / ruby 1.9 incompatibilities, possible fixes, and offer to 
	patch
Message-ID: <a60ea573-3616-4e05-a6b0-4b7240459139@e23g2000prf.googlegroups.com>

Hello,

The code generated by rlgen-ruby is incompatible with Ruby 1.9.

Using the simple DevChix Hello World example (http://www.devchix.com/
2007/12/13/a-hello-world-for-ruby-on-ragel/)., the generated "write
exec" ruby contains a handful of errors.

1) the "when" clause in the generated case statements uses a
deprecated form.  It is in the form "when <value>:" and should be
"when <value> then" instead.

2) under 1.9, a string element reference (i.e., [] operator) returns a
string, not a fixnum as under 1.8.  So the comparisons like this...

  if data[p] < _hello_trans_keys[_mid]

...result in "`<': comparison of String with 104 failed
(ArgumentError)" under 1.9.



I'd be happy to work up a patch, hopefully one that works under both
1.8 and 1.9, but I need some guidance.

The former should be easy.  I found all the instances that use the
colon in when and changed them successfully.

The later is where I'm uncertain.  Appending ".to_s" to both sides of
the comparison (needs to be both sides to retain 1.8 compatibility)
everywhere seems wrong.  At this point I'm doing little more than
grepping the source; I don't really comprehend what's going on, so a
point in the right direction would be welcome.

Thanks,


From thurs... at cs.queensu.ca  Thu Jan  3 02:43:57 2008
From: thurs... at cs.queensu.ca (=?utf-8?B?QWRyaWFuIFRodXJzdG9u?=)
Date: Thu, 3 Jan 2008 02:43:57 +0000
Subject: [ragel-users] rlgen-ruby / ruby 1.9 incompatibilities, possiblefixes, and offer to  patch
In-Reply-To: <a60ea573-3616-4e05-a6b0-4b7240459139@e23g2000prf.googlegroups.com>
References: <a60ea573-3616-4e05-a6b0-4b7240459139@e23g2000prf.googlegroups.com>
Message-ID: <1762893049-1199328239-cardhu_decombobulator_blackberry.rim.net-993814275-@bxe115.bisx.prod.on.blackberry>

I'll look this up tomorrow. Right now I'm in a train station. In the meantime are there any ruby experts out there that know the proper way to index arrays and strings and pull out numbers?

Adrian
-----Original Message-----
From: dcgrigsby <dan-google at unpossible.com>

Date: Wed, 2 Jan 2008 11:56:55 
To:ragel-users <ragel-users at googlegroups.com>
Subject: [ragel-users] rlgen-ruby / ruby 1.9 incompatibilities, possible
 fixes, and offer to  patch



Hello,

The code generated by rlgen-ruby is incompatible with Ruby 1.9.

Using the simple DevChix Hello World example (http://www.devchix.com/
2007/12/13/a-hello-world-for-ruby-on-ragel/)., the generated "write
exec" ruby contains a handful of errors.

1) the "when" clause in the generated case statements uses a
deprecated form.  It is in the form "when <value>:" and should be
"when <value> then" instead.

2) under 1.9, a string element reference (i.e., [] operator) returns a
string, not a fixnum as under 1.8.  So the comparisons like this...

  if data[p] < _hello_trans_keys[_mid]

...result in "`<': comparison of String with 104 failed
(ArgumentError)" under 1.9.



I'd be happy to work up a patch, hopefully one that works under both
1.8 and 1.9, but I need some guidance.

The former should be easy.  I found all the instances that use the
colon in when and changed them successfully.

The later is where I'm uncertain.  Appending ".to_s" to both sides of
the comparison (needs to be both sides to retain 1.8 compatibility)
everywhere seems wrong.  At this point I'm doing little more than
grepping the source; I don't really comprehend what's going on, so a
point in the right direction would be welcome.

Thanks,

Dan



From br... at codefluency.com  Thu Jan  3 04:50:19 2008
From: br... at codefluency.com (Bruce Williams)
Date: Wed, 2 Jan 2008 22:50:19 -0600
Subject: [ragel-users] Re: rlgen-ruby / ruby 1.9 incompatibilities, possiblefixes, and offer to patch
In-Reply-To: <1762893049-1199328239-cardhu_decombobulator_blackberry.rim.net-993814275-@bxe115.bisx.prod.on.blackberry>
References: <a60ea573-3616-4e05-a6b0-4b7240459139@e23g2000prf.googlegroups.com>
	 <1762893049-1199328239-cardhu_decombobulator_blackberry.rim.net-993814275-@bxe115.bisx.prod.on.blackberry>
Message-ID: <a2830e5b0801022050v3ee0a3cbia3fd70118d36604d@mail.gmail.com>

Adrian,

In 1.9, use String#ord:

------------------------------------------------------------- String#ord
     str.ord   => integer
------------------------------------------------------------------------
     Return the +Integer+ ordinal of a one-character string.

        "a".ord         #=> 97

So, "foo"[1].ord in 1.9 should be equivalent to "foo"[1] in 1.8.

Cheers,
Bruce

---
Bruce Williams
http://codefluency.com

On 1/2/08, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> I'll look this up tomorrow. Right now I'm in a train station. In the meantime are there any ruby experts out there that know the proper way to index arrays and strings and pull out numbers?
>
> Adrian
> -----Original Message-----
> From: dcgrigsby <dan-goo... at unpossible.com>
>
> Date: Wed, 2 Jan 2008 11:56:55
> To:ragel-users <ragel-users at googlegroups.com>
> Subject: [ragel-users] rlgen-ruby / ruby 1.9 incompatibilities, possible
>  fixes, and offer to  patch
>
>
>
> Hello,
>
> The code generated by rlgen-ruby is incompatible with Ruby 1.9.
>
> Using the simple DevChix Hello World example (http://www.devchix.com/
> 2007/12/13/a-hello-world-for-ruby-on-ragel/)., the generated "write
> exec" ruby contains a handful of errors.
>
> 1) the "when" clause in the generated case statements uses a
> deprecated form.  It is in the form "when <value>:" and should be
> "when <value> then" instead.
>
> 2) under 1.9, a string element reference (i.e., [] operator) returns a
> string, not a fixnum as under 1.8.  So the comparisons like this...
>
>   if data[p] < _hello_trans_keys[_mid]
>
> ...result in "`<': comparison of String with 104 failed
> (ArgumentError)" under 1.9.
>
>
>
> I'd be happy to work up a patch, hopefully one that works under both
> 1.8 and 1.9, but I need some guidance.
>
> The former should be easy.  I found all the instances that use the
> colon in when and changed them successfully.
>
> The later is where I'm uncertain.  Appending ".to_s" to both sides of
> the comparison (needs to be both sides to retain 1.8 compatibility)
> everywhere seems wrong.  At this point I'm doing little more than
> grepping the source; I don't really comprehend what's going on, so a
> point in the right direction would be welcome.
>
> Thanks,
>
> Dan
>
>
>
> >
>


From nelson.... at gmail.com  Thu Jan  3 21:01:40 2008
From: nelson.... at gmail.com (Ana Nelson)
Date: Thu, 3 Jan 2008 13:01:40 -0800 (PST)
Subject: rlgen-ruby / ruby 1.9 incompatibilities, possiblefixes, and offer 
	to patch
In-Reply-To: <a2830e5b0801022050v3ee0a3cbia3fd70118d36604d@mail.gmail.com>
References: <a60ea573-3616-4e05-a6b0-4b7240459139@e23g2000prf.googlegroups.com> 
	<1762893049-1199328239-cardhu_decombobulator_blackberry.rim.net-993814275-@bxe115.bisx.prod.on.blackberry> 
	<a2830e5b0801022050v3ee0a3cbia3fd70118d36604d@mail.gmail.com>
Message-ID: <6c8581dd-b7c7-4b97-b416-9d6486c1deb3@p69g2000hsa.googlegroups.com>

I have the Hello World example running in Ruby 1.9. I replaced ":"
with "then" in the generated code as per Dan's suggestion, and I added
the following line in the example's run_machine method which converts
"data" to an array of integers using String#unpack.

data = data.unpack("c*") if data.is_a?(String)

Nothing else needs to change and this is also Ruby 1.8 compatible.
(I'll update my example with this - thanks, Dan)

Code like this could be generated by write init. But that's only if
Ragel wants to accommodate lazy Ruby programmers who want to pass in
strings when the documentation calls for arrays, now that in Ruby 1.9
strings don't happen to behave like arrays of integers by default. ;-)

Another approach would be to .unpack("c") (.ord is Ruby 1.9 only) each
individual character when it is processed but that means testing each
individual item to see whether it's a string or an int, or defining
an .unpack method on Fixnum if we want to be clever. This seems more
invasive in terms of changing rlgen-ruby, but perhaps it would be
better from a memory management point of view. I'm guessing from what
little I know about it, though, that people who are concerned about
memory management won't be passing around giant strings, so probably
the simpler 1-line option is fine. (I'd be happy to be corrected/
educated on that.)

I'm biased towards thinking that Ragel shouldn't try to do too much to
accommodate this change in Ruby's treatment of strings, unless it's
because of a conscious decision to support string inputs.

Regards,
Ana


On Jan 3, 4:50 am, "Bruce Williams" <br... at codefluency.com> wrote:
> Adrian,
>
> In 1.9, use String#ord:
>
> ------------------------------------------------------------- String#ord
>      str.ord   => integer
> ------------------------------------------------------------------------
>      Return the +Integer+ ordinal of a one-character string.
>
>         "a".ord         #=> 97
>
> So, "foo"[1].ord in 1.9 should be equivalent to "foo"[1] in 1.8.
>
> Cheers,
> Bruce
>
> ---
> Bruce Williamshttp://codefluency.com
>
> On 1/2/08, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>
> > I'll look this up tomorrow. Right now I'm in a train station. In the meantime are there any ruby experts out there that know the proper way to index arrays and strings and pull out numbers?
>
> > Adrian
> > -----Original Message-----
> > From: dcgrigsby <dan-goo... at unpossible.com>
>
> > Date: Wed, 2 Jan 2008 11:56:55
> > To:ragel-users <ragel-users at googlegroups.com>
> > Subject: [ragel-users] rlgen-ruby / ruby 1.9 incompatibilities, possible
> >  fixes, and offer to  patch
>
> > Hello,
>
> > The code generated by rlgen-ruby is incompatible with Ruby 1.9.
>
> > Using the simple DevChix Hello World example (http://www.devchix.com/
> > 2007/12/13/a-hello-world-for-ruby-on-ragel/)., the generated "write
> > exec" ruby contains a handful of errors.
>
> > 1) the "when" clause in the generated case statements uses a
> > deprecated form.  It is in the form "when <value>:" and should be
> > "when <value> then" instead.
>
> > 2) under 1.9, a string element reference (i.e., [] operator) returns a
> > string, not a fixnum as under 1.8.  So the comparisons like this...
>
> >   if data[p] < _hello_trans_keys[_mid]
>
> > ...result in "`<': comparison of String with 104 failed
> > (ArgumentError)" under 1.9.
>
> > I'd be happy to work up a patch, hopefully one that works under both
> > 1.8 and 1.9, but I need some guidance.
>
> > The former should be easy.  I found all the instances that use the
> > colon in when and changed them successfully.
>
> > The later is where I'm uncertain.  Appending ".to_s" to both sides of
> > the comparison (needs to be both sides to retain 1.8 compatibility)
> > everywhere seems wrong.  At this point I'm doing little more than
> > grepping the source; I don't really comprehend what's going on, so a
> > point in the right direction would be welcome.
>
> > Thanks,
>


From thurs... at cs.queensu.ca  Sat Jan  5 18:49:48 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Sat, 05 Jan 2008 13:49:48 -0500
Subject: [ragel-users] Re: rlgen-ruby / ruby 1.9 incompatibilities, possiblefixes,
 and offer  to patch
In-Reply-To: <6c8581dd-b7c7-4b97-b416-9d6486c1deb3@p69g2000hsa.googlegroups.com>
References: <a60ea573-3616-4e05-a6b0-4b7240459139@e23g2000prf.googlegroups.com>  <1762893049-1199328239-cardhu_decombobulator_blackberry.rim.net-993814275-@bxe115.bisx.prod.on.blackberry>  <a2830e5b0801022050v3ee0a3cbia3fd70118d36604d@mail.gmail.com> <6c8581dd-b7c7-4b97-b416-9d6486c1deb3@p69g2000hsa.googlegroups.com>
Message-ID: <477FD14C.5020700@cs.queensu.ca>

In the absence of one efficient method of extracting ordinals from both
strings and arrays I think we should use arrays. They cover the most
usage scenarios.

I think converting to array form should be done by the programmer if
necessary rather than converted automatically by "write init". Such a
conversion is only useful for people that are unaware of the issue and
is too much code for people that are.

I'll fix the "when" problem and update the tests to convert input to
array form.

-Adrian

Ana Nelson wrote:
> I have the Hello World example running in Ruby 1.9. I replaced ":"
> with "then" in the generated code as per Dan's suggestion, and I added
> the following line in the example's run_machine method which converts
> "data" to an array of integers using String#unpack.
> 
> data = data.unpack("c*") if data.is_a?(String)
> 
> Nothing else needs to change and this is also Ruby 1.8 compatible.
> (I'll update my example with this - thanks, Dan)
> 
> Code like this could be generated by write init. But that's only if
> Ragel wants to accommodate lazy Ruby programmers who want to pass in
> strings when the documentation calls for arrays, now that in Ruby 1.9
> strings don't happen to behave like arrays of integers by default. ;-)
> 
> Another approach would be to .unpack("c") (.ord is Ruby 1.9 only) each
> individual character when it is processed but that means testing each
> individual item to see whether it's a string or an int, or defining
> an .unpack method on Fixnum if we want to be clever. This seems more
> invasive in terms of changing rlgen-ruby, but perhaps it would be
> better from a memory management point of view. I'm guessing from what
> little I know about it, though, that people who are concerned about
> memory management won't be passing around giant strings, so probably
> the simpler 1-line option is fine. (I'd be happy to be corrected/
> educated on that.)
> 
> I'm biased towards thinking that Ragel shouldn't try to do too much to
> accommodate this change in Ruby's treatment of strings, unless it's
> because of a conscious decision to support string inputs.
> 
> Regards,
> Ana
> 
> 
> On Jan 3, 4:50 am, "Bruce Williams" <br... at codefluency.com> wrote:
>> Adrian,
>>
>> In 1.9, use String#ord:
>>
>> ------------------------------------------------------------- String#ord
>>      str.ord   => integer
>> ------------------------------------------------------------------------
>>      Return the +Integer+ ordinal of a one-character string.
>>
>>         "a".ord         #=> 97
>>
>> So, "foo"[1].ord in 1.9 should be equivalent to "foo"[1] in 1.8.
>>
>> Cheers,
>> Bruce
>>
>> ---
>> Bruce Williamshttp://codefluency.com
>>
>> On 1/2/08, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>>
>>> I'll look this up tomorrow. Right now I'm in a train station. In the meantime are there any ruby experts out there that know the proper way to index arrays and strings and pull out numbers?
>>> Adrian
>>> -----Original Message-----
>>> From: dcgrigsby <dan-goo... at unpossible.com>
>>> Date: Wed, 2 Jan 2008 11:56:55
>>> To:ragel-users <ragel-users at googlegroups.com>
>>> Subject: [ragel-users] rlgen-ruby / ruby 1.9 incompatibilities, possible
>>>  fixes, and offer to  patch
>>> Hello,
>>> The code generated by rlgen-ruby is incompatible with Ruby 1.9.
>>> Using the simple DevChix Hello World example (http://www.devchix.com/
>>> 2007/12/13/a-hello-world-for-ruby-on-ragel/)., the generated "write
>>> exec" ruby contains a handful of errors.
>>> 1) the "when" clause in the generated case statements uses a
>>> deprecated form.  It is in the form "when <value>:" and should be
>>> "when <value> then" instead.
>>> 2) under 1.9, a string element reference (i.e., [] operator) returns a
>>> string, not a fixnum as under 1.8.  So the comparisons like this...
>>>   if data[p] < _hello_trans_keys[_mid]
>>> ...result in "`<': comparison of String with 104 failed
>>> (ArgumentError)" under 1.9.
>>> I'd be happy to work up a patch, hopefully one that works under both
>>> 1.8 and 1.9, but I need some guidance.
>>> The former should be easy.  I found all the instances that use the
>>> colon in when and changed them successfully.
>>> The later is where I'm uncertain.  Appending ".to_s" to both sides of
>>> the comparison (needs to be both sides to retain 1.8 compatibility)
>>> everywhere seems wrong.  At this point I'm doing little more than
>>> grepping the source; I don't really comprehend what's going on, so a
>>> point in the right direction would be welcome.
>>> Thanks,
>>> Dan
> --~--~---------~--~----~------------~-------~--~----~
> You received this message because you are subscribed to the Google Groups "ragel-users" group.
> To post to this group, send email to ragel-users at googlegroups.com
> To unsubscribe from this group, send email to ragel-users-unsubscribe at googlegroups.com
> For more options, visit this group at http://groups.google.com/group/ragel-users?hl=en
> -~----------~----~----~----~------~----~------~--~---
> 
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20080105/8a52c8af/attachment-0001.sig>

From thurs... at cs.queensu.ca  Sat Jan  5 21:19:23 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Sat, 05 Jan 2008 16:19:23 -0500
Subject: [ragel-users] Re: rlgen-ruby / ruby 1.9 incompatibilities, possiblefixes,
 and offer  to patch
In-Reply-To: <477FD14C.5020700@cs.queensu.ca>
References: <a60ea573-3616-4e05-a6b0-4b7240459139@e23g2000prf.googlegroups.com>  <1762893049-1199328239-cardhu_decombobulator_blackberry.rim.net-993814275-@bxe115.bisx.prod.on.blackberry>  <a2830e5b0801022050v3ee0a3cbia3fd70118d36604d@mail.gmail.com> <6c8581dd-b7c7-4b97-b416-9d6486c1deb3@p69g2000hsa.googlegroups.com> <477FD14C.5020700@cs.queensu.ca>
Message-ID: <477FF45B.8070902@cs.queensu.ca>

When I run the attached ruby program with 1.9 I get the following.
Anyone know if this is an issue that will get ironed out, or something
I'm doing wrong?

-Adrian

[thurston at reaves] test: ruby atoi1_ruby.rb
1
ACCEPT
atoi1_ruby.rb:265: -- control frame ----------
c:0007 p:0648 s:0040 b:0039 l:000038 d:000038 METHOD atoi1_ruby.rb:265
c:0006 p:0018 s:0014 b:0014 l:000006 d:000013 BLOCK  atoi1_ruby.rb:287
c:0005 p:---- s:0013 b:0012 l:000011 d:000011 FINISH :attr_accessor
c:0004 p:---- s:0010 b:0010 l:000009 d:000009 CFUNC  :each
c:0003 p:0243 s:0007 b:0007 l:000006 d:000006 TOP    atoi1_ruby.rb:286
c:0002 p:---- s:0003 b:0003 l:000002 d:000002 FINISH :inherited
c:0001 p:---- s:0001 b:-001 l:000000 d:000000 ------
---------------------------
DBG> : "atoi1_ruby.rb:287:in `block in <main>'"
DBG> : "atoi1_ruby.rb:286:in `each'"
DBG> : "atoi1_ruby.rb:286:in `<main>'"
-- backtrace of native function call (Use addr2line) --
0xb7f44544
0xb7e7369a
0xb7e73776
0xb7f3df09
0xb7f41d7a
0xb7f3a73d
0xb7f3a819
0xb7e7adf5
0xb7e7ae3b
0xb7e5e977
0xb7e7b672
0xb7e5ea2d
0xb7f39995
0xb7f41b83
0xb7f416f1
0xb7f3db9a
0xb7f41d7a
0xb7f423f3
0xb7e79d9d
0xb7e79e39
0x80486ad
0xb7c9f050
0x8048601
-------------------------------------------------------
[BUG] Stack consistency error (sp: 40, bp: 39)
ruby 1.9.0 (2007-08-30) [i486-linux]

Aborted (core dumped)
[thurston at reaves] test:
-------------- next part --------------
A non-text attachment was scrubbed...
Name: atoi1_ruby.rb
Type: application/x-ruby
Size: 5174 bytes
Desc: not available
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20080105/0252599e/attachment-0001.rb>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20080105/0252599e/attachment-0001.sig>

From todd.fis... at gmail.com  Sun Jan  6 22:16:43 2008
From: todd.fis... at gmail.com (taf2)
Date: Sun, 6 Jan 2008 14:16:43 -0800 (PST)
Subject: ragel edge side include parser
Message-ID: <1a271861-87a4-4f95-b543-7c87c3f723e6@q39g2000hsf.googlegroups.com>

Hi,

  I've been doing some work on implementing a parser to handle ESI
(Edge Side Include) Tags.   I am fairly sure, I have the parser
working, but am curious about methods for optimizing.  I noticed that
if  I generate my parser using -G1  I get a file about 25K lines.
With -T1 I get about 5K lines.   Also, when using -G2  i'm not seeing
the cs variable changing.   I noticed some pretty significant changes
in size based on some simple changes in how I matched attributes.
Looking for any advice on methods for optimizing my parser.     Here's
my main parser file:  http://mongrel-esi.googlecode.com/svn/trunk/ext/esi/common.rl

Thanks,


From todd.fis... at gmail.com  Mon Jan  7 04:54:53 2008
From: todd.fis... at gmail.com (Todd Fisher)
Date: Sun, 6 Jan 2008 23:54:53 -0500
Subject: [ragel-users] ragel edge side include parser
In-Reply-To: <1a271861-87a4-4f95-b543-7c87c3f72...@q39g2000hsf.googlegroups.com>
References: <1a271861-87a4-4f95-b543-7c87c3f72...@q39g2000hsf.googlegroups.com>
Message-ID: <e9a952090801062054i60bf9a03p672ddba3710f24ad@mail.gmail.com>

Okay, I did some more reading and now understand why with -G2 cs variable is
always the same value.  From chapter 5, page 43:"Generally this produces
faster running code because it allows the machine to encode the current

state using the processor's instruction pointer."

I've also been able to reduce the machine size by merging a few redundant
states... Still am hoping to get some feedback, regarding whether my
approach to the parser is reasonable and if there are any obvious features
of ragel that I'm missing.

Thanks,
Todd

On Jan 6, 2008 5:16 PM, taf2 <todd.fis... at gmail.com> wrote:

>
> Hi,
>
>  I've been doing some work on implementing a parser to handle ESI
> (Edge Side Include) Tags.   I am fairly sure, I have the parser
> working, but am curious about methods for optimizing.  I noticed that
> if  I generate my parser using -G1  I get a file about 25K lines.
> With -T1 I get about 5K lines.   Also, when using -G2  i'm not seeing
> the cs variable changing.   I noticed some pretty significant changes
> in size based on some simple changes in how I matched attributes.
> Looking for any advice on methods for optimizing my parser.     Here's
> my main parser file:
> http://mongrel-esi.googlecode.com/svn/trunk/ext/esi/common.rl
>
> Thanks,
> Todd
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20080106/546ad7e1/attachment-0001.html>

From thurs... at cs.queensu.ca  Tue Jan  8 00:07:31 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Mon, 07 Jan 2008 19:07:31 -0500
Subject: [ragel-users] Re: ragel edge side include parser
In-Reply-To: <e9a952090801062054i60bf9a03p672ddba3710f24ad@mail.gmail.com>
References: <1a271861-87a4-4f95-b543-7c87c3f723e6@q39g2000hsf.googlegroups.com> <e9a952090801062054i60bf9a03p672ddba3710f24ad@mail.gmail.com>
Message-ID: <4782BEC3.6010800@cs.queensu.ca>

Hi Todd,

Putting the .* ahead of esi_tags is very costly. It grows the number of
states from 80 to over 300. You can improve this by choosing some point
at which to commit to esi_tags. But first we need to know more about the
language. Is "<" on it's own legal? What is the nature of the "water" in
which your esi_tag "island" is found?

-Adrian

Todd Fisher wrote:
> Okay, I did some more reading and now understand why with -G2 cs
> variable is always the same value.  From chapter 5, page 43:
> "Generally this produces faster running code because it allows the
> machine to encode the current 
> 
> state using the processor's instruction pointer."
> 
> 
> I've also been able to reduce the machine size by merging a few
> redundant states... Still am hoping to get some feedback, regarding
> whether my approach to the parser is reasonable and if there are any
> obvious features of ragel that I'm missing.
> 
> Thanks,
> Todd
> 
> On Jan 6, 2008 5:16 PM, taf2 <todd.fis... at gmail.com
> <mailto:todd.fis... at gmail.com>> wrote:
> 
> 
>     Hi,
> 
>      I've been doing some work on implementing a parser to handle ESI
>     (Edge Side Include) Tags.   I am fairly sure, I have the parser
>     working, but am curious about methods for optimizing.  I noticed that
>     if  I generate my parser using -G1  I get a file about 25K lines.
>     With -T1 I get about 5K lines.   Also, when using -G2  i'm not seeing
>     the cs variable changing.   I noticed some pretty significant changes
>     in size based on some simple changes in how I matched attributes.
>     Looking for any advice on methods for optimizing my parser.     Here's
>     my main parser file:  
>     http://mongrel-esi.googlecode.com/svn/trunk/ext/esi/common.rl
> 
>     Thanks,
>     Todd
> 
>     > 


From r.lp... at gmail.com  Tue Jan  8 00:23:19 2008
From: r.lp... at gmail.com (Paul Findlay)
Date: Tue, 8 Jan 2008 13:23:19 +1300
Subject: [ragel-users] Re: ragel edge side include parser
In-Reply-To: <4782BEC3.6010...@cs.queensu.ca>
References: <1a271861-87a4-4f95-b543-7c87c3f72...@q39g2000hsf.googlegroups.com>
	 <e9a952090801062054i60bf9a03p672ddba3710f2...@mail.gmail.com>
	 <4782BEC3.6010...@cs.queensu.ca>
Message-ID: <4e8dd6b40801071623g611dda87jbb888870f92e31cb@mail.gmail.com>

> Putting the .* ahead of esi_tags is very costly. It grows the number of
> states from 80 to over 300. You can improve this by choosing some point
> at which to commit to esi_tags. But first we need to know more about the
> language. Is "<" on it's own legal? What is the nature of the "water" in
> which your esi_tag "island" is found?
The esi tags get embedded in HTML and other text formats right? Would
it be possible to keep track of the start of pure html (or whatever)
content, and if '<esi:' is hit, output all the content (if any) up to
'<esi:, unless the content occurs in some nested esi construct'?

 - Paul


From thurs... at cs.queensu.ca  Wed Jan  9 23:48:31 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Wed, 09 Jan 2008 18:48:31 -0500
Subject: [ragel-users] Re: ragel edge side include parser
In-Reply-To: <e9a952090801062054i60bf9a03p672ddba3710f24ad@mail.gmail.com>
References: <1a271861-87a4-4f95-b543-7c87c3f723e6@q39g2000hsf.googlegroups.com> <e9a952090801062054i60bf9a03p672ddba3710f24ad@mail.gmail.com>
Message-ID: <47855D4F.2070809@cs.queensu.ca>


Todd Fisher wrote:
> Okay, I did some more reading and now understand why with -G2 cs
> variable is always the same value.  From chapter 5, page 43:
> "Generally this produces faster running code because it allows the
> machine to encode the current 
> 
> state using the processor's instruction pointer."

That's right, for optimization purposes cs is not valid inside the
execution loop. From page 7 of the manual (version 5.25):

>From outside the execution loop, control may be passed to any machine by
assigning the entry point to the cs variable.  From inside the execution
loop, control may be passed to any machine instantiation using fcall
fgoto or fnext statements.

Adrian


From dwa... at gmail.com  Sat Jan  5 07:55:42 2008
From: dwa... at gmail.com (David Waite)
Date: Sat, 5 Jan 2008 00:55:42 -0700
Subject: Am I misinterpreting the purpose of fbreak?
Message-ID: <3eb0429d0801042355r636e0acakef0cd200439e6517@mail.gmail.com>

(Simple sample attached for C and Java)

My hope is to make a pull parser for a document format (JSON), which will
update the parser object to represent a new 'state' after processing some
atom of information from the input source. It thus is almost like an
enumeration of events that you iterate over by calling a 'next()' style
method. Examples would include Java stream xml (STAX) interfaces (see
http://tinyurl.com/2urbsy ) or the .Net Framework's XmlReader (see
http://tinyurl.com/34mg5h ). To do this, I am trying to break out everytime
I process a feature in my document, but I quickly realized this was not
working for me every-time.

It appears the main problem is in having multiple breaking actions off of a
single character transition. The system doesn't appear to be able to recover
from such behavior, instead immediately exiting the execution loop when you
attempt to resume processing. The end result for the C and Java examples
supplied is that the pointer never moves forward, eof is never reached and
the sample infinitely outputs its message.

Is it possible to do what I want to do?

-David Waite
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20080105/42daecc9/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: breaking-actions-test.zip
Type: application/zip
Size: 1599 bytes
Desc: not available
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20080105/42daecc9/attachment-0001.zip>

From thurs... at cs.queensu.ca  Sat Jan  5 22:56:03 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Sat, 05 Jan 2008 17:56:03 -0500
Subject: [ragel-users] Am I misinterpreting the purpose of fbreak?
In-Reply-To: <3eb0429d0801042355r636e0acakef0cd200439e6517@mail.gmail.com>
References: <3eb0429d0801042355r636e0acakef0cd200439e6517@mail.gmail.com>
Message-ID: <47800B03.8060007@cs.queensu.ca>


The problem is that fbreak does not advance p when it breaks out of the
loop. This is a choice I made a long time ago and I think I was taking
the "do as little as possible on behalf of the user" approach. But not
advancing p while advancing cs is clearly wrong and confusing. This is
something that will change in 6.0 (it's in the TODO already).

In the meantime you can do p++ just before the break.

Adrian

David Waite wrote:
> (Simple sample attached for C and Java)
>=20
> My hope is to make a pull parser for a document format (JSON), which
> will update the parser object to represent a new 'state' after
> processing some atom of information from the input source. It thus is
> almost like an enumeration of events that you iterate over by calling a=

> 'next()' style method. Examples would include Java stream xml (STAX)
> interfaces (see  http://tinyurl.com/2urbsy ) or the .Net Framework's
> XmlReader (see http://tinyurl.com/34mg5h ). To do this, I am trying to
> break out everytime I process a feature in my document, but I quickly
> realized this was not working for me every-time.
>=20
> It appears the main problem is in having multiple breaking actions off
> of a single character transition. The system doesn't appear to be able
> to recover from such behavior, instead immediately exiting the executio=
n
> loop when you attempt to resume processing. The end result for the C an=
d
> Java examples supplied is that the pointer never moves forward, eof is
> never reached and the sample infinitely outputs its message.
>=20
> Is it possible to do what I want to do?
>=20
> -David Waite
>=20
> --~--~---------~--~----~------------~-------~--~----~
> You received this message because you are subscribed to the Google
> Groups "ragel-users" group.
> To post to this group, send email to ragel-users at googlegroups.com
> To unsubscribe from this group, send email to
> ragel-users-unsubscribe at googlegroups.com
> For more options, visit this group at
> http://groups.google.com/group/ragel-users?hl=3Den
> -~----------~----~----~----~------~----~------~--~---
>=20

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20080105/f6a8e434/attachment-0001.sig>

From dwa... at gmail.com  Sat Jan  5 23:52:58 2008
From: dwa... at gmail.com (David Waite)
Date: Sat, 5 Jan 2008 15:52:58 -0800 (PST)
Subject: Am I misinterpreting the purpose of fbreak?
In-Reply-To: <47800B03.8060007@cs.queensu.ca>
References: <3eb0429d0801042355r636e0acakef0cd200439e6517@mail.gmail.com> 
	<47800B03.8060007@cs.queensu.ca>
Message-ID: <7e25c773-a801-4f75-8d5c-cd56e0379ee4@u10g2000prn.googlegroups.com>

I don't know if advancing p is the correct option all the time though,
because (in the example, and unfortunately in the actual machine I'm
trying to create) I trigger multiple breaking actions on a single
transition. For example, the two character JSON document "[]"
currently should have the following actions triggered by my machine:

main:
  StartDocument - fbreak; (returns Event.Document)
  ParseArray - fcall array;
  StartArray - fbreak; (returns Event.Array)
  EndArray - fbreak; (returns Event.EndArray)
  Return - fret;
  EndDocument (eof) - fbreak; (returns Event.EndDocument)

If I remove the StartDocument fbreak, would incrementing p on break
work?

-DW

On Jan 5, 3:56 pm, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> The problem is that fbreak does not advance p when it breaks out of the
> loop. This is a choice I made a long time ago and I think I was taking
> the "do as little as possible on behalf of the user" approach. But not
> advancing p while advancing cs is clearly wrong and confusing. This is
> something that will change in 6.0 (it's in the TODO already).
>


From thurs... at cs.queensu.ca  Sun Jan  6 00:52:01 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Sat, 05 Jan 2008 19:52:01 -0500
Subject: [ragel-users] Re: Am I misinterpreting the purpose of fbreak?
In-Reply-To: <7e25c773-a801-4f75-8d5c-cd56e0379ee4@u10g2000prn.googlegroups.com>
References: <3eb0429d0801042355r636e0acakef0cd200439e6517@mail.gmail.com>  <47800B03.8060007@cs.queensu.ca> <7e25c773-a801-4f75-8d5c-cd56e0379ee4@u10g2000prn.googlegroups.com>
Message-ID: <47802631.4020501@cs.queensu.ca>

Sorry that won't work. When you break from the processing loop you
abandon any remaining actions on that character. Ragel does not jump
back into the action list to the point of departure.

What you could do is queue up actions and then embed the break action using:

${ p++; break; }

Just be sure the break action is embedded after the actions that queue
up tokens. See the section on action ordering in the manual.

-Adrian

David Waite wrote:
> I don't know if advancing p is the correct option all the time though,
> because (in the example, and unfortunately in the actual machine I'm
> trying to create) I trigger multiple breaking actions on a single
> transition. For example, the two character JSON document "[]"
> currently should have the following actions triggered by my machine:
> 
> main:
>   StartDocument - fbreak; (returns Event.Document)
>   ParseArray - fcall array;
>   StartArray - fbreak; (returns Event.Array)
>   EndArray - fbreak; (returns Event.EndArray)
>   Return - fret;
>   EndDocument (eof) - fbreak; (returns Event.EndDocument)
> 
> If I remove the StartDocument fbreak, would incrementing p on break
> work?
> 
> -DW
> 
> On Jan 5, 3:56 pm, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>> The problem is that fbreak does not advance p when it breaks out of the
>> loop. This is a choice I made a long time ago and I think I was taking
>> the "do as little as possible on behalf of the user" approach. But not
>> advancing p while advancing cs is clearly wrong and confusing. This is
>> something that will change in 6.0 (it's in the TODO already).
>>
>> In the meantime you can do p++ just before the break.
> > 
> 


From dwa... at gmail.com  Sun Jan  6 07:35:11 2008
From: dwa... at gmail.com (David Waite)
Date: Sat, 5 Jan 2008 23:35:11 -0800 (PST)
Subject: Am I misinterpreting the purpose of fbreak?
In-Reply-To: <47802631.4020501@cs.queensu.ca>
References: <3eb0429d0801042355r636e0acakef0cd200439e6517@mail.gmail.com> 
	<47800B03.8060007@cs.queensu.ca> <7e25c773-a801-4f75-8d5c-cd56e0379ee4@u10g2000prn.googlegroups.com> 
	<47802631.4020501@cs.queensu.ca>
Message-ID: <7883c971-4197-4d68-b41c-787ff4569c1c@i29g2000prf.googlegroups.com>

This is what I attempted basically, and it seems to work fine so far
(hooray!)

The only difference is that I had my action check for queued events
before breaking.

-DW

On Jan 5, 5:52 pm, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> Sorry that won't work. When you break from the processing loop you
> abandon any remaining actions on that character. Ragel does not jump
> back into the action list to the point of departure.
>
> What you could do is queue up actions and then embed the break action using:
>
> ${ p++; break; }
>
> Just be sure the break action is embedded after the actions that queue
> up tokens. See the section on action ordering in the manual.
>
> -Adrian
>
> David Waite wrote:
> > I don't know if advancing p is the correct option all the time though,
> > because (in the example, and unfortunately in the actual machine I'm
> > trying to create) I trigger multiple breaking actions on a single
> > transition. For example, the two character JSON document "[]"
> > currently should have the following actions triggered by my machine:
>
> > main:
> >   StartDocument - fbreak; (returns Event.Document)
> >   ParseArray - fcall array;
> >   StartArray - fbreak; (returns Event.Array)
> >   EndArray - fbreak; (returns Event.EndArray)
> >   Return - fret;
> >   EndDocument (eof) - fbreak; (returns Event.EndDocument)
>
> > If I remove the StartDocument fbreak, would incrementing p on break
> > work?
>
> > -DW
>
> > On Jan 5, 3:56 pm, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> >> The problem is that fbreak does not advance p when it breaks out of the
> >> loop. This is a choice I made a long time ago and I think I was taking
> >> the "do as little as possible on behalf of the user" approach. But not
> >> advancing p while advancing cs is clearly wrong and confusing. This is
> >> something that will change in 6.0 (it's in the TODO already).
>


From polus... at gmail.com  Fri Jan 11 13:00:01 2008
From: polus... at gmail.com (Andrei Polushin)
Date: Fri, 11 Jan 2008 05:00:01 -0800 (PST)
Subject: [ragel-users] Re: Am I misinterpreting the purpose of fbreak?
In-Reply-To: <47802631.4020501@cs.queensu.ca>
References: <3eb0429d0801042355r636e0acakef0cd200439e6517@mail.gmail.com> 
	<47800B03.8060007@cs.queensu.ca> <7e25c773-a801-4f75-8d5c-cd56e0379ee4@u10g2000prn.googlegroups.com> 
	<47802631.4020501@cs.queensu.ca>
Message-ID: <dbeea39f-518f-4807-9b00-88522f216345@j20g2000hsi.googlegroups.com>

Adrian Thurston wrote:
> What you could do is queue up actions and then embed the break action [...]

I guess the same goal can be achieved *without the queue*. One can use
additional states: the machine goes to the next "fake" state,
generates output event, but does not advance to the next character:

action StartDocument { result = "StartDocument"; fbreak; }

main := any at StartDocument ............ ;

--
Andrei Polushin


From dwa... at gmail.com  Fri Jan 11 19:51:26 2008
From: dwa... at gmail.com (David Waite)
Date: Fri, 11 Jan 2008 12:51:26 -0700
Subject: [ragel-users] Re: Am I misinterpreting the purpose of fbreak?
In-Reply-To: <dbeea39f-518f-4807-9b00-88522f216...@j20g2000hsi.googlegroups.com>
References: <3eb0429d0801042355r636e0acakef0cd200439e6...@mail.gmail.com>
	 <47800B03.8060...@cs.queensu.ca>
	 <7e25c773-a801-4f75-8d5c-cd56e0379...@u10g2000prn.googlegroups.com>
	 <47802631.4020...@cs.queensu.ca>
	 <dbeea39f-518f-4807-9b00-88522f216...@j20g2000hsi.googlegroups.com>
Message-ID: <3eb0429d0801111151w44ce93dfk5f3ce75910c6f536@mail.gmail.com>

Hopefully when I eliminate the StartDocument and EndDocument events, it will
no longer be possible for me to have more than a single event per character.
-DW

On 1/11/08, Andrei Polushin <polus... at gmail.com> wrote:
>
>
> Adrian Thurston wrote:
> > What you could do is queue up actions and then embed the break action
> [...]
>
> I guess the same goal can be achieved *without the queue*. One can use
> additional states: the machine goes to the next "fake" state,
> generates output event, but does not advance to the next character:
>
> action StartDocument { result = "StartDocument"; fbreak; }
>
> main := any at StartDocument ............ ;
>
> --
> Andrei Polushin
>
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20080111/badfa40c/attachment-0001.html>

From jup... at hotmail.de  Thu Jan 10 22:05:40 2008
From: jup... at hotmail.de (jupp_g)
Date: Thu, 10 Jan 2008 14:05:40 -0800 (PST)
Subject: (unexpected) problem with accented chars
Message-ID: <4cb24783-97e7-49c2-8fa2-689f0e5732a9@q77g2000hsh.googlegroups.com>

If you feed the following console app with chars like [ÄÖÜäöüß] they
are not accepted, which is somewhat unexpected (for me). The dot
output looks fine with proper states and transitions. The problem is
definetely not related to the code page switching, but I didn't delete
the code to enable showing the chars on the console (cmd.exe defaults
to code page 850, which doesn't have some of the chars I want). If I
use the "all" machine things work as expected.

Any hints?

#ifdef _WIN32
#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#endif
#include <stdio.h>

#define BUF_LEN		128

%%{
	machine cp1252;
	alphtype unsigned char;

	action finish_line {
		++count;
		res = (cs >= cp1252_first_final);
		printf( "==> \"%s\"\n",  line );
	}

	action start_line {
		line_idx = 0;
	}

	action add_char {
		line[line_idx++] = fc;
	}

	action end_line {
		line[line_idx] = '\0';
	}

	more = (0xC0..0xFF);
	what_i_want = ('0'..'9')|('A'..'Z')|('a'..'z')|(0xC0..0xFF);
	all = (0x30..0xFF);

	# fails:
            main := ( ( (alnum|more)+ > start_line $ add_char %
end_line ) ) 0 @ finish_line;
	# fails: main := ( ( (what_i_want)+ > start_line $ add_char %
end_line ) ) 0 @ finish_line;
	# only almost what I want, but works:
	#main := ( ( (all)+ > start_line $ add_char % end_line ) ) 0 @
finish_line;
}%%

%% write data;

int main( int argc, char* argv[] )
{
#ifdef _WIN32
	SetConsoleCP( 1252 );
	SetConsoleOutputCP( 1252 );
#endif

	for ( int i = 1; i < argc; ++i ) {

		int  cs;
		char *p = argv[i];
		char *pe = p + strlen(p) + 1;

		int res = 0;
		int count = 0;
		char line[BUF_LEN];
		int line_idx = -1;
		line[0] = '\0';

		printf( "argv[%d] = \"%s\"\n", i, p );

		%% write init;
		%% write exec;

		printf( "\tresult = %d (count=%d)\n", res, count );
	}

	return 0;
}


From jup... at hotmail.de  Fri Jan 11 11:09:20 2008
From: jup... at hotmail.de (jupp_g)
Date: Fri, 11 Jan 2008 03:09:20 -0800 (PST)
Subject: (unexpected) problem with accented chars
In-Reply-To: <4cb24783-97e7-49c2-8fa2-689f0e5732a9@q77g2000hsh.googlegroups.com>
References: <4cb24783-97e7-49c2-8fa2-689f0e5732a9@q77g2000hsh.googlegroups.com>
Message-ID: <b42ed8ed-b710-4c76-beee-9e8840d5e888@f10g2000hsf.googlegroups.com>

mea culpa. I changed alphtype to unsigned char but did not update p
and pe. I have not looked at the generated code in detail, but I guess
the problem was related to a spurious sign extension. Of course that
leaves the question why the "all" machine worked.

...
	# now working:
	main := ( ( (what_i_want)+ > start_line $ add_char % end_line ) ) 0 @
finish_line;
	# only almost what I want, but works:
	#main := ( ( (all)+ > start_line $ add_char % end_line ) ) 0 @
finish_line;
}%%

%% write data;

int main( int argc, unsigned char* argv[] )
{
#ifdef _WIN32
	SetConsoleCP( 1252 );
	SetConsoleOutputCP( 1252 );
#endif

	for ( int i = 1; i < argc; ++i ) {

		int  cs;
		unsigned char *p = argv[i];
		unsigned char *pe = p + strlen( reinterpret_cast<char *>( p ) ) + 1;


From thurs... at cs.queensu.ca  Fri Jan 11 19:52:32 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Fri, 11 Jan 2008 14:52:32 -0500
Subject: [ragel-users] Re: (unexpected) problem with accented chars
In-Reply-To: <b42ed8ed-b710-4c76-beee-9e8840d5e888@f10g2000hsf.googlegroups.com>
References: <4cb24783-97e7-49c2-8fa2-689f0e5732a9@q77g2000hsh.googlegroups.com> <b42ed8ed-b710-4c76-beee-9e8840d5e888@f10g2000hsf.googlegroups.com>
Message-ID: <4787C900.6070908@cs.queensu.ca>


jupp_g wrote:
> mea culpa. I changed alphtype to unsigned char but did not update p
> and pe. I have not looked at the generated code in detail, but I guess
> the problem was related to a spurious sign extension. Of course that
> leaves the question why the "all" machine worked.

You'd probably have to look closely at the generated code. Since the all
machine is only a single range there is a lot less testing of the
character that needs to be done. Also, if the range goes right up to a
limit of the alphabet type then ragel doesn't bother to check that end
(assuming your working with -G2). My guess is that the error was just
avoided by luck.

Adrian


From thurs... at cs.queensu.ca  Sat Jan 12 20:58:15 2008
From: thurs... at cs.queensu.ca (=?utf-8?B?QWRyaWFuIFRodXJzdG9u?=)
Date: Sat, 12 Jan 2008 20:58:15 +0000
Subject: 6.0 released
Message-ID: <2119637514-1200171737-cardhu_decombobulator_blackberry.rim.net-351812955-@bxe115.bisx.prod.on.blackberry>

Hey Everyone,

I just released 6.0. The focus of this release was on collecting the backwards incompatible changes into one release. 

This is the back-to-roots Ragel release.

Please report any problems here.

Cheers,
 Adrian


From thurs... at cs.queensu.ca  Sat Jan 12 21:01:35 2008
From: thurs... at cs.queensu.ca (=?utf-8?B?QWRyaWFuIFRodXJzdG9u?=)
Date: Sat, 12 Jan 2008 21:01:35 +0000
Subject: 6.0 released
Message-ID: <2119637514-1200171739-cardhu_decombobulator_blackberry.rim.net-1200226229-@bxe115.bisx.prod.on.blackberry>

Hey Everyone,

I just released 6.0. The focus of this release was on collecting the backwards incompatible changes into one release. 

This is the back-to-roots Ragel release.

Please report any problems here.

Cheers,
 Adrian


From jup... at hotmail.de  Sun Jan 13 20:19:48 2008
From: jup... at hotmail.de (jupp_g)
Date: Sun, 13 Jan 2008 12:19:48 -0800 (PST)
Subject: 6.0 released
In-Reply-To: <2119637514-1200171739-cardhu_decombobulator_blackberry.rim.net-1200226229-@bxe115.bisx.prod.on.blackberry>
References: <2119637514-1200171739-cardhu_decombobulator_blackberry.rim.net-1200226229-@bxe115.bisx.prod.on.blackberry>
Message-ID: <7d0a2b5c-dfc8-445e-b8df-d4c419b17d59@j78g2000hsd.googlegroups.com>

Hi,

I found a few minor issues and generated a patch file. If I can't
upload it, I'll mail to Adrian.

(1) It seems that some of language independent tests miss the
statement "@NEEDS_EOF: yes", otherwise all tests run fine.

(2) The code generators include "unistd.h", which is not necessary.
This is not a problem if ragel is compiled on a platform that has this
file, if not, unnecessary preprocessor statements are necessary.

(3) On Windows, Ragel can be compiled using the Microsoft C/C++
compiler (without a lot of changes). My patch includes a couple of
"Makefile.msc" files. Inside cygwin the build ist started by calling
"make --file=Makefile.msc" from the top directory (make not nmake!). I
guess the old Visual Studio files are still more or less valid, but
the this version does not reference unistd.h, whereas the VS project
includes a dummy unistd.h.

(4) For the Windows platform the combination GetCurrentProcess()/
GetModuleFileNameEx() is ok, but a simple GetModuleFileName( NULL,
imageFileName, len ) would do the trick as well, since the "NULL
module" "belongs" to the current process.

Jupp


From jason.gar... at gmail.com  Mon Jan 28 22:09:16 2008
From: jason.gar... at gmail.com (Jason Garber)
Date: Mon, 28 Jan 2008 14:09:16 -0800 (PST)
Subject: How to look ahead
Message-ID: <762e2686-56f8-40cf-823b-8b50fdbbbdb3@j78g2000hsd.googlegroups.com>

Hello Ragel users,
I'm working on SuperRedCloth (a Ragel implementation of RedCloth that
why the lucky stiff started awhile back).  I've run into some trouble
and could use some help.

In the inline scanner, we want the dimension rule to parse "1 x 2."
and then the formatter outputs it as "1 &#215; 2."  As it was:

dim = ( digit+ >A %{ STORE(x) } " x " digit+ >A %{ STORE(y) } ) >X ;

(where A registers the start of the string to capture and STORE
captures it.  See
http://code.whytheluckystiff.net/redcloth/browser/branches/superredcloth/ext/superredcloth_scan/superredcloth_inline.rl
if you need more context.)

But, since it was in a scanner and it had to entertain the possibility
that the pattern was starting over (I assume), the STORE(y) action
would never happen, so you'd get "1 &#215; ."

Assuming you can't have leaving actions at the end of a pattern in a
scanner, I considered (with the help of Johan Sørensen) looking ahead
for a digit but not consuming it, so with "1 x 2." the "1 x" is handed
to the formatter and the rest is handled by the default pattern (not
stored).  This gives the additional advantage of being able to parse
something like "1 x 2 x 3 x 4."

The question is, how to look ahead?  I've tried all kinds of things
with fhold, p--, etc., but it seems I'm at the limit of my Ragel
comprehension.  Or is there a better way than look-ahead?

Thanks in advance!


From thurs... at cs.queensu.ca  Wed Jan 30 04:06:06 2008
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Tue, 29 Jan 2008 23:06:06 -0500
Subject: [ragel-users] How to look ahead
In-Reply-To: <762e2686-56f8-40cf-823b-8b50fdbbbdb3@j78g2000hsd.googlegroups.com>
References: <762e2686-56f8-40cf-823b-8b50fdbbbdb3@j78g2000hsd.googlegroups.com>
Message-ID: <479FF7AE.50904@cs.queensu.ca>

Hey Jason,

Generally I do lookahead by moving p backwards. This should work even in
scanner actions (requires a recent version of Ragel). Can you give some
code that doesn't do what you expect? I don't understand exactly what
you're trying to do.

Adrian

Jason Garber wrote:
> Hello Ragel users,
> I'm working on SuperRedCloth (a Ragel implementation of RedCloth that
> why the lucky stiff started awhile back).  I've run into some trouble
> and could use some help.
> 
> In the inline scanner, we want the dimension rule to parse "1 x 2."
> and then the formatter outputs it as "1 &#215; 2."  As it was:
> 
> dim = ( digit+ >A %{ STORE(x) } " x " digit+ >A %{ STORE(y) } ) >X ;
> 
> (where A registers the start of the string to capture and STORE
> captures it.  See
> http://code.whytheluckystiff.net/redcloth/browser/branches/superredcloth/ext/superredcloth_scan/superredcloth_inline.rl
> if you need more context.)
> 
> But, since it was in a scanner and it had to entertain the possibility
> that the pattern was starting over (I assume), the STORE(y) action
> would never happen, so you'd get "1 &#215; ."
> 
> Assuming you can't have leaving actions at the end of a pattern in a
> scanner, I considered (with the help of Johan Sørensen) looking ahead
> for a digit but not consuming it, so with "1 x 2." the "1 x" is handed
> to the formatter and the rest is handled by the default pattern (not
> stored).  This gives the additional advantage of being able to parse
> something like "1 x 2 x 3 x 4."
> 
> The question is, how to look ahead?  I've tried all kinds of things
> with fhold, p--, etc., but it seems I'm at the limit of my Ragel
> comprehension.  Or is there a better way than look-ahead?
> 
> Thanks in advance!
> Jason Garber
> > 
> 


