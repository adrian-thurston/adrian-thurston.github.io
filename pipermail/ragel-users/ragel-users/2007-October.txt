From cremes.devl... at mac.com  Tue Oct  2 03:18:30 2007
From: cremes.devl... at mac.com (Chuck Remes)
Date: Mon, 1 Oct 2007 22:18:30 -0500
Subject: ragel 5.24 ruby examples?
Message-ID: <4886D6FD-FB37-460E-AD54-2C4B9E5E1955@mac.com>

Anyone have any sample code showing how to embed ragel FSMs inside a  
ruby program? 


From thurs... at cs.queensu.ca  Tue Oct  2 15:18:56 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Tue, 02 Oct 2007 11:18:56 -0400
Subject: [ragel-users] ragel 5.24 ruby examples?
In-Reply-To: <4886D6FD-FB37-460E-AD54-2C4B9E5E1955@mac.com>
References: <4886D6FD-FB37-460E-AD54-2C4B9E5E1955@mac.com>
Message-ID: <47026160.7010405@cs.queensu.ca>

Hi,

Grab the source tarball and look in the test directory for files that
contain 'LANG: ruby'.

If you want to make an C-based extension look at the Mongrel or Hpricot
sources.

Adrian

Chuck Remes wrote:
> Anyone have any sample code showing how to embed ragel FSMs inside a  
> ruby program? 
> 
> --~--~---------~--~----~------------~-------~--~----~
> You received this message because you are subscribed to the Google Groups "ragel-users" group.
> To post to this group, send email to ragel-users at googlegroups.com
> To unsubscribe from this group, send email to ragel-users-unsubscribe at googlegroups.com
> For more options, visit this group at http://groups.google.com/group/ragel-users?hl=en
> -~----------~----~----~----~------~----~------~--~---
> 
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20071002/26e6bc71/attachment.sig>

From thurs... at cs.queensu.ca  Wed Oct  3 17:15:33 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Wed, 03 Oct 2007 13:15:33 -0400
Subject: [ragel-users] Re: Ruby and Java code generation
In-Reply-To: <46FEA0A2.1060802@cs.queensu.ca>
References: <46FD4FAD.8040708@cs.queensu.ca> <D3E9C3CA-A822-4D6C-B758-885B27D8747C@gmail.com> <46FD5E36.1090407@cs.queensu.ca> <46FD7ED0.7000101@cs.queensu.ca> <27BCED9F-A9B8-4948-A7BA-77010DB2600E@atlasocean.com> <46FEA0A2.1060802@cs.queensu.ca>
Message-ID: <4703CE35.1030509@cs.queensu.ca>

Update: I just checked in a new driver for Ruby. Ruby code generation is
now also current. Gotos are emulated using a series of if statements.

-Adrian

Adrian Thurston wrote:
> I just checked-in a java driver that uses a switch statement in place of
> gotos. Indeed it works well. Java code generation is now current.
> 
> -Adrian
> 
> Erich Ocean wrote:
>> Adrian,
>>
>> Duff's device can be used with Java, so you might be able to use that  
>> technique to jump back into the middle of the processing loop.
>>
>> See http://www.chiark.greenend.org.uk/~sgtatham/coroutines.html for  
>> an example.
>>
>> Best, Erich
>>
>> On Sep 28, 2007, at 3:23 PM, Adrian Thurston wrote:
>>
>>> Hi,
>>>
>>> What is now needed in Ruby and Java code is a jump back into the
>>> processing loop just like that found at rlgen-cd/tabcodegen.cpp:1041.
>>>
>>> -Adrian
>>>
>>> Adrian Thurston wrote:
>>>> Before loop breaks and variables were used in Ruby code call/cc  
>>>> features
>>>> were used. This was found to be very slow (about 10 times slower than
>>>> the current). Do you think throw/catch would be any better than  
>>>> call/cc?
>>>>
>>>> Later today I'm going to commit my work on the C version. I'll  
>>>> highlight
>>>> the part that is troublesome and maybe someone that knows Java and  
>>>> Ruby
>>>> well can suggest something.
>>>>
>>>> Adrian
>>>>
>>>> Ryan King wrote:
>>>>> On Sep 28, 2007, at 12:02 PM, Adrian Thurston wrote:
>>>>>> Hi,
>>>>>>
>>>>>> I'm having some trouble with Ruby and Java code generation as I
>>>>>> implement 6.0 features. The main problem with targeting both of  
>>>>>> these
>>>>>> languages is the lack of goto statement. This is problematic  
>>>>>> even for
>>>>>> the table-driven machine. There are a number of places in the  
>>>>>> driver
>>>>>> where a jump in or jump out of the processing loop is required.  
>>>>>> So far
>>>>>> I've gotten away with using named loops in Java and control flow
>>>>>> variables in Ruby, however with the latest changes things are  
>>>>>> getting
>>>>>> really ugly. I don't have a solution yet. I'm not sure what to do
>>>>>> right
>>>>>> now, so for the time being I will continue ahead with the 6.0  
>>>>>> features
>>>>>> and stall work on Ruby and Java code generation.
>>>>> You can emulate GOTO-ish behavior in ruby with throw and catch:
>>>>>
>>>>>
>>>>> catch(:foo) do
>>>>>   ...
>>>>>   throw(:foo)
>>>>>   ...
>>>>> end
>>>>>
>>>>> There are limits to how the code can be structured in these cases  
>>>>> (in
>>>>> blocks).
>>>>>
>>>>> -ryan
>>>>>
>>
>> --~--~---------~--~----~------------~-------~--~----~
>> You received this message because you are subscribed to the Google Groups "ragel-users" group.
>> To post to this group, send email to ragel-users at googlegroups.com
>> To unsubscribe from this group, send email to ragel-users-unsubscribe at googlegroups.com
>> For more options, visit this group at http://groups.google.com/group/ragel-users?hl=en
>> -~----------~----~----~----~------~----~------~--~---
>>
>>
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20071003/ce37f4c7/attachment.sig>

From cremes.devl... at mac.com  Thu Oct  4 15:14:34 2007
From: cremes.devl... at mac.com (Chuck Remes)
Date: Thu, 4 Oct 2007 10:14:34 -0500
Subject: ruby code generation question
Message-ID: <5C1E4D66-55D0-4F32-A8CA-15876FD5E9E4@mac.com>

I'm writing a scanner using Ragel and Ruby, but I'm coming up against  
a problem that I can't seem to figure out. If I try to wrap the  
machine in a class, I get a peculiar error that it can't figure out.  
Here's a bit of sample code to illustrate.

#
# @LANG: ruby
#


%%{
     machine orcscanner;

     letters = [a-zA-Z]+;
     numbers = [0-9]+;
     spaces = [ \t\n]+;
     other = [\[:\.\]\-=|]+;

     main := |*

             ( numbers | letters | spaces | '{' | '}' | other );

     *|;

}%%

%% write data;


   def parse_line(data)
     p = 0;
     pe = data.length;
     cs = 0;
     tokstart = 0;
     tokend = 0;
     act = 0;

     %% write init;
     %% write exec;
     %% write eof;

     if cs == orcscanner_error
       puts "SCANNER_ERROR"
     end

   end



inp = [
                 "76 } sadf",
                 "Oct  1 09:50:33.37204 [29193]: {test text}"
]

inp.each { |str|
                 puts "input = #{str}"
                 parse_line(str)
         }

This all works just fine (though it does nothing). If I wrap it in a  
class I get an error:

class SomeClass

<code listed above>

inp = [
                 "76 } sadf",
                 "Oct  1 09:50:33.37204 [29193]: {test text}"
]

t = SomeClass.new

inp.each { |str|
                 puts "input = #{str}"
                 t.parse_line(str)
         }

end

Here's the error I get:

t.rb:146:in `parse_line': undefined local variable or method  
`orcscanner_start' for #<SomeClass:0x1cac0> (NameError)
         from t.rb:322
         from t.rb:320:in `each'
         from t.rb:320

Looking at the ruby code I see that orcscanner_start is defined like so:

class << self
         attr_accessor :orcscanner_start
end
self.orcscanner_start = 1;

This is adding a class method #orcscanner_start to the current class  
(self). I guess it works fine when adding to Object (the default  
class) but not my custom class. Why? What am I doing wrong?

The reason I want to do this is so my ragel actions can call methods  
or access variables that are part of my custom class. I have things  
nicely encapsulated.

Thanks for any help or pointers.

cr


From vhbo... at gmail.com  Thu Oct  4 15:36:07 2007
From: vhbo... at gmail.com (Victor Hugo Borja)
Date: Thu, 04 Oct 2007 15:36:07 -0000
Subject: ruby code generation question
In-Reply-To: <5C1E4D66-55D0-4F32-A8CA-15876FD5E9E4@mac.com>
References: <5C1E4D66-55D0-4F32-A8CA-15876FD5E9E4@mac.com>
Message-ID: <1191512167.391056.209320@k79g2000hse.googlegroups.com>

Chuck,

> Looking at the ruby code I see that orcscanner_start is defined like so:
>
> class << self
>          attr_accessor :orcscanner_start
> end
> self.orcscanner_start = 1;
>
> This is adding a class method #orcscanner_start to the current class
> (self). I guess it works fine when adding to Object (the default
> class) but not my custom class. Why? What am I doing wrong?

According to what I understand from your code, the ragel constants are
being added to
your SomeClass' metaclass. You may need to add something like:

class SomeClass
  def initialize
    %% write data;
  end

  # your parse/utility methods here
  ...
end


From cremes.devl... at mac.com  Thu Oct  4 16:33:11 2007
From: cremes.devl... at mac.com (Chuck Remes)
Date: Thu, 4 Oct 2007 11:33:11 -0500
Subject: [ragel-users] Re: ruby code generation question
In-Reply-To: <1191512167.391056.209320@k79g2000hse.googlegroups.com>
References: <5C1E4D66-55D0-4F32-A8CA-15876FD5E9E4@mac.com> <1191512167.391056.209320@k79g2000hse.googlegroups.com>
Message-ID: <5C4E4238-3C76-42C5-8228-3CEDF0406852@mac.com>


On Oct 4, 2007, at 10:36 AM, Victor Hugo Borja wrote:

>
> Chuck,
>
>> Looking at the ruby code I see that orcscanner_start is defined  
>> like so:
>>
>> class << self
>>          attr_accessor :orcscanner_start
>> end
>> self.orcscanner_start = 1;
>>
>> This is adding a class method #orcscanner_start to the current class
>> (self). I guess it works fine when adding to Object (the default
>> class) but not my custom class. Why? What am I doing wrong?
>
> According to what I understand from your code, the ragel constants are
> being added to
> your SomeClass' metaclass. You may need to add something like:
>
> class SomeClass
>   def initialize
>     %% write data;
>   end
>
>   # your parse/utility methods here
>   ...
> end

Does it really matter where '%% write data' appears in the class? I  
currently have that code on its own line outside of any method but  
still inside the class definition.

BTW, I just tried it and it worked! I realize this is probably a ruby- 
specific question, but why did it work when I moved that line to the  
class initializer but nowhere else?


From thurs... at cs.queensu.ca  Thu Oct  4 18:34:59 2007
From: thurs... at cs.queensu.ca (=?utf-8?B?QWRyaWFuIFRodXJzdG9u?=)
Date: Thu, 4 Oct 2007 18:34:59 +0000
Subject: first of the 6.0 changes
Message-ID: <1268825902-1191522894-cardhu_decombobulator_blackberry.rim.net-709777873-@bxe033.bisx.prod.on.blackberry>

Hi,

I've implemented the first of the 6.0 changes. A new variable named eof and of the same type as p and pe must be declared when there are any EOF actions embedded. When there is no more input following (the last run of write exec) it should be set to pe. Otherwise it should be set to null (-1 in the case of Java and Ruby). If EOF can be known only after the input is exhausted then p=pe=eof=buf can be set and the exec code run.

The advantage of indicating EOF in this way is that EOF actions can be moved into the main processing loop and run in the same context as regular actions. They can now adjust p and jump to some other state to resume processing.

Since EOF actions can now backtrack in the input, scanners can use them to 'flush' out the last token. There is no more need to do this manually by sending trailing whitespace or some EOF character.

Adrian


From cmantu... at gmail.com  Thu Oct  4 19:14:26 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Thu, 4 Oct 2007 15:14:26 -0400
Subject: [ragel-users] first of the 6.0 changes
In-Reply-To: <1268825902-1191522894-cardhu_decombobulator_blackberry.rim.net-7097778...@bxe033.bisx.prod.on.blackberry>
References: <1268825902-1191522894-cardhu_decombobulator_blackberry.rim.net-7097778...@bxe033.bisx.prod.on.blackberry>
Message-ID: <cb2ad8b50710041214x674bca6dpa1cedf017b6737a@mail.gmail.com>

On 10/4/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>
>
> Since EOF actions can now backtrack in the input, scanners can use them to 'flush' out
> the last token.
>

Hmm, do I smell the possibility of an inline scanner here? :)

More seriously, are you planning on implementing the "prefix' operator
in this implementation round?

Thanks!

Carlos


-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From thurs... at cs.queensu.ca  Thu Oct  4 19:30:56 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Thu, 04 Oct 2007 15:30:56 -0400
Subject: [ragel-users] Re: first of the 6.0 changes
In-Reply-To: <cb2ad8b50710041214x674bca6dpa1cedf017b6737a@mail.gmail.com>
References: <1268825902-1191522894-cardhu_decombobulator_blackberry.rim.net-709777873-@bxe033.bisx.prod.on.blackberry> <cb2ad8b50710041214x674bca6dpa1cedf017b6737a@mail.gmail.com>
Message-ID: <47053F70.2070304@cs.queensu.ca>

Yes the prefix operator I want to implement. I was planning on doing
that when other function-like syntax comes in.

Adrian

Carlos Antunes wrote:
> On 10/4/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>>
>> Since EOF actions can now backtrack in the input, scanners can use them to 'flush' out
>> the last token.
>>
> 
> Hmm, do I smell the possibility of an inline scanner here? :)
> 
> More seriously, are you planning on implementing the "prefix' operator
> in this implementation round?
> 
> Thanks!
> 
> Carlos
> 
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20071004/2c64cd8e/attachment.sig>

From polus... at gmail.com  Thu Oct  4 20:03:39 2007
From: polus... at gmail.com (Andrei Polushin)
Date: Fri, 05 Oct 2007 03:03:39 +0700
Subject: [ragel-users] first of the 6.0 changes
In-Reply-To: <1268825902-1191522894-cardhu_decombobulator_blackberry.rim.net-7097778...@bxe033.bisx.prod.on.blackberry>
References: <1268825902-1191522894-cardhu_decombobulator_blackberry.rim.net-7097778...@bxe033.bisx.prod.on.blackberry>
Message-ID: <4705471B.7070...@gmail.com>

Adrian Thurston wrote:
> I've implemented the first of the 6.0 changes. A new variable named
> eof and of the same type as p and pe must be declared when there are
> any EOF actions embedded. When there is no more input following (the
> last run of write exec) it should be set to pe. Otherwise it should be
> set to null (-1 in the case of Java and Ruby). If EOF can be known
> only after the input is exhausted then p=pe=eof=buf can be set and the
> exec code run.

Could you rename it to 'peof', please?

(In my present code, I've used the name 'eof' for the character added at the
end of input, and 'peof' is the pointer to that character. It looks like
reasonable to me).

-- 
Andrei Polushin


From thurs... at cs.queensu.ca  Thu Oct  4 20:23:45 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Thu, 04 Oct 2007 16:23:45 -0400
Subject: [ragel-users] Re: first of the 6.0 changes
In-Reply-To: <4705471B.7070608@gmail.com>
References: <1268825902-1191522894-cardhu_decombobulator_blackberry.rim.net-709777873-@bxe033.bisx.prod.on.blackberry> <4705471B.7070608@gmail.com>
Message-ID: <47054BD1.5060907@cs.queensu.ca>

You will be able to override it using the variable statement, like you
can with the other variables.

variable eof peof;

-Adrian

Andrei Polushin wrote:
> Adrian Thurston wrote:
>> I've implemented the first of the 6.0 changes. A new variable named
>> eof and of the same type as p and pe must be declared when there are
>> any EOF actions embedded. When there is no more input following (the
>> last run of write exec) it should be set to pe. Otherwise it should be
>> set to null (-1 in the case of Java and Ruby). If EOF can be known
>> only after the input is exhausted then p=pe=eof=buf can be set and the
>> exec code run.
> 
> Could you rename it to 'peof', please?
> 
> (In my present code, I've used the name 'eof' for the character added at the
> end of input, and 'peof' is the pointer to that character. It looks like
> reasonable to me).
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20071004/9c1c3de8/attachment.sig>

From jonathan.st... at gmail.com  Mon Oct  1 11:48:04 2007
From: jonathan.st... at gmail.com (Jonathan Stott)
Date: Mon, 1 Oct 2007 12:48:04 +0100
Subject: Parsing indented structures (again)
Message-ID: <14cf210a0710010448s4e85c2fax5aac98841e2e8556@mail.gmail.com>

Hi again

I /almost/ have a working parser for my files now, but it isn't quite
working yet and I'm not entirely sure why it is happening.

The problem is that my terminal actions aren't being called, so the
strings I use atoi and atof on lack trailing zeros (and thus have a
random length), so parameters later down the file turn out wrong.
Very wrong if I start parsing file names, I imagine.

I've attached the code I'm working on to test the parser with, since
it's quite complicated to explain.  I apologise for how messy it is,
but the code has been editted quite a lot as I try to make it work...

The file I'm using to test looks like:

# File for testing
x: 100
currents:
  ina: 2 # comment here
  ito: 3
y: 11

and the output says that
x = 100
ina = 200
ito = 300
y = 110

Regards,
Jonathan.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: double.rl
Type: application/octet-stream
Size: 4610 bytes
Desc: not available
URL: <http://www.colm.net/pipermail/ragel/attachments/20071001/c4a10e46/attachment.obj>

From thurs... at cs.queensu.ca  Tue Oct  2 15:36:37 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Tue, 02 Oct 2007 11:36:37 -0400
Subject: [ragel-users] Parsing indented structures (again)
In-Reply-To: <14cf210a0710010448s4e85c2fax5aac98841e2e8556@mail.gmail.com>
References: <14cf210a0710010448s4e85c2fax5aac98841e2e8556@mail.gmail.com>
Message-ID: <47026585.7040601@cs.queensu.ca>

Hi Jonathan,

The problem is that leaving actions embedded in the final state of a
scanner pattern action are not executed. In this case it is %term from
double that is not executed.

To solve this lift the term action up into the scanner pattern action.

-Adrian

Jonathan Stott wrote:
> Hi again
> 
> I /almost/ have a working parser for my files now, but it isn't quite
> working yet and I'm not entirely sure why it is happening.
> 
> The problem is that my terminal actions aren't being called, so the
> strings I use atoi and atof on lack trailing zeros (and thus have a
> random length), so parameters later down the file turn out wrong.
> Very wrong if I start parsing file names, I imagine.
> 
> I've attached the code I'm working on to test the parser with, since
> it's quite complicated to explain.  I apologise for how messy it is,
> but the code has been editted quite a lot as I try to make it work...
> 
> The file I'm using to test looks like:
> 
> # File for testing
> x: 100
> currents:
>   ina: 2 # comment here
>   ito: 3
> y: 11
> 
> and the output says that
> x = 100
> ina = 200
> ito = 300
> y = 110
> 
> Regards,
> Jonathan.
> 
> --~--~---------~--~----~------------~-------~--~----~
> You received this message because you are subscribed to the Google Groups "ragel-users" group.
> To post to this group, send email to ragel-users at googlegroups.com
> To unsubscribe from this group, send email to ragel-users-unsubscribe at googlegroups.com
> For more options, visit this group at http://groups.google.com/group/ragel-users?hl=en
> -~----------~----~----~----~------~----~------~--~---
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20071002/e7544f45/attachment.sig>

From thurs... at cs.queensu.ca  Tue Oct  2 22:32:42 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Tue, 02 Oct 2007 18:32:42 -0400
Subject: [ragel-users] Re: Parsing indented structures (again)
In-Reply-To: <47026585.7040601@cs.queensu.ca>
References: <14cf210a0710010448s4e85c2fax5aac98841e2e8556@mail.gmail.com> <47026585.7040601@cs.queensu.ca>
Message-ID: <4702C70A.5090409@cs.queensu.ca>

I recognize that this situation, where actions fail to execute without
warning, is not optimal.

-Adrian

Adrian Thurston wrote:
> Hi Jonathan,
> 
> The problem is that leaving actions embedded in the final state of a
> scanner pattern action are not executed. In this case it is %term from
> double that is not executed.
> 
> To solve this lift the term action up into the scanner pattern action.
> 
> -Adrian
> 
> Jonathan Stott wrote:
>> Hi again
>>
>> I /almost/ have a working parser for my files now, but it isn't quite
>> working yet and I'm not entirely sure why it is happening.
>>
>> The problem is that my terminal actions aren't being called, so the
>> strings I use atoi and atof on lack trailing zeros (and thus have a
>> random length), so parameters later down the file turn out wrong.
>> Very wrong if I start parsing file names, I imagine.
>>
>> I've attached the code I'm working on to test the parser with, since
>> it's quite complicated to explain.  I apologise for how messy it is,
>> but the code has been editted quite a lot as I try to make it work...
>>
>> The file I'm using to test looks like:
>>
>> # File for testing
>> x: 100
>> currents:
>>   ina: 2 # comment here
>>   ito: 3
>> y: 11
>>
>> and the output says that
>> x = 100
>> ina = 200
>> ito = 300
>> y = 110
>>
>> Regards,
>> Jonathan.
>>
>> --~--~---------~--~----~------------~-------~--~----~
>> You received this message because you are subscribed to the Google Groups "ragel-users" group.
>> To post to this group, send email to ragel-users at googlegroups.com
>> To unsubscribe from this group, send email to ragel-users-unsubscribe at googlegroups.com
>> For more options, visit this group at http://groups.google.com/group/ragel-users?hl=en
>> -~----------~----~----~----~------~----~------~--~---
>>
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20071002/3cdfd326/attachment.sig>

From jonathan.st... at gmail.com  Wed Oct  3 09:58:01 2007
From: jonathan.st... at gmail.com (namelessjon)
Date: Wed, 03 Oct 2007 09:58:01 -0000
Subject: Parsing indented structures (again)
In-Reply-To: <4702C70A.5090409@cs.queensu.ca>
References: <14cf210a0710010448s4e85c2fax5aac98841e2e8556@mail.gmail.com>
   <47026585.7040601@cs.queensu.ca>
   <4702C70A.5090409@cs.queensu.ca>
Message-ID: <1191405481.203974.56810@d55g2000hsg.googlegroups.com>

Hi Adrian

It works now, so thanks for the solution (and so quickly). :)
I could tell it wasn't being called, since at one point I had printf
statements in amongst the various actions.  I just couldn't think
why.  It hadn't occurred to me that the scanner action was yanking it
away before that point. In hindsight it was a little obvious.

Is it possible to embed an action in another? As in:

'ina:' double_on_line => {term;array[0] = atof(buffer);};

I am assuming not, as I can't find it in the manual. It would just be
a little neater than the if statements I have now in all the actions,
but ...

Thanks,
Jonathan.

On Oct 2, 11:32 pm, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> I recognize that this situation, where actions fail to execute without
> warning, is not optimal.
>
> -Adrian
>
> Adrian Thurston wrote:
> > Hi Jonathan,
>
> > The problem is that leaving actions embedded in the final state of a
> > scanner pattern action are not executed. In this case it is %term from
> > double that is not executed.
>
> > To solve this lift the term action up into the scanner pattern action.
>
> > -Adrian
>


From thurs... at cs.queensu.ca  Thu Oct  4 22:15:29 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Thu, 04 Oct 2007 18:15:29 -0400
Subject: [ragel-users] Re: Parsing indented structures (again)
In-Reply-To: <1191405481.203974.56810@d55g2000hsg.googlegroups.com>
References: <14cf210a0710010448s4e85c2fax5aac98841e2e8556@mail.gmail.com> <47026585.7040601@cs.queensu.ca> <4702C70A.5090409@cs.queensu.ca> <1191405481.203974.56810@d55g2000hsg.googlegroups.com>
Message-ID: <47056601.3030008@cs.queensu.ca>

Hi Jonathan,

Not currently. This is something I'd like to add to 6.0.

-Adrian

namelessjon wrote:
> Hi Adrian
> 
> It works now, so thanks for the solution (and so quickly). :)
> I could tell it wasn't being called, since at one point I had printf
> statements in amongst the various actions.  I just couldn't think
> why.  It hadn't occurred to me that the scanner action was yanking it
> away before that point. In hindsight it was a little obvious.
> 
> Is it possible to embed an action in another? As in:
> 
> 'ina:' double_on_line => {term;array[0] = atof(buffer);};
> 
> I am assuming not, as I can't find it in the manual. It would just be
> a little neater than the if statements I have now in all the actions,
> but ...
> 
> Thanks,
> Jonathan.
> 
> On Oct 2, 11:32 pm, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>> I recognize that this situation, where actions fail to execute without
>> warning, is not optimal.
>>
>> -Adrian
>>
>> Adrian Thurston wrote:
>>> Hi Jonathan,
>>> The problem is that leaving actions embedded in the final state of a
>>> scanner pattern action are not executed. In this case it is %term from
>>> double that is not executed.
>>> To solve this lift the term action up into the scanner pattern action.
>>> -Adrian
> 
> 
> --~--~---------~--~----~------------~-------~--~----~
> You received this message because you are subscribed to the Google Groups "ragel-users" group.
> To post to this group, send email to ragel-users at googlegroups.com
> To unsubscribe from this group, send email to ragel-users-unsubscribe at googlegroups.com
> For more options, visit this group at http://groups.google.com/group/ragel-users?hl=en
> -~----------~----~----~----~------~----~------~--~---
> 
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20071004/1179239e/attachment.sig>

From cremes.devl... at mac.com  Fri Oct  5 15:47:25 2007
From: cremes.devl... at mac.com (Chuck Remes)
Date: Fri, 5 Oct 2007 10:47:25 -0500
Subject: tuning/optimizing scanners
Message-ID: <19BA7B81-4686-4132-AE02-E325CC0DB108@mac.com>

I've written a log parsing tool using ragel and ruby. I'm using the  
scanner construct to perform the parsing, but things appear to be  
running very slowly. I fear I may have chosen the wrong methodology  
to parse the log. (And yes, I know ruby isn't the quickest language  
out there...) :-)

The log in question is a set of key/value pairs that look like this  
(this is one line):

Oct  1 09:50:33.37204 [29193]: {market = ICE | type = order |  
order_id = 4 | buy = 1 | price = 80.83 | volume = 1 | date =  
2007-10-01 | time = 09:50:33.37201 | metadata = {l={f=Quote|g=4|j=1| 
sid=8290182729}|ac=289182|cf=2881|ca= 289182}}

I'm uninterested in the date and other data at the line start, so I  
throw it away. I primarily search for the key (e.g. 'market = ') and  
then fgoto another machine to parse the value. Upon hitting a pipe  
character, I fgoto main again and look for another key. I pasted in a  
section of the machine below to illustrate.

Is this the correct approach? Is there a superior method for rapidly  
parsing long text strings? Be gentle with me... I'm new to this stuff.

Unfortunately, each log record is a slightly different format (for a  
total of about 15 different formats). I also can't plan on the key/ 
value pairs showing up in the same order every time.

Any suggestions?

----------- snip here ---------------
	feedcode_name = [0-9a-zA-Z\-]+;
	numbers = [0-9]+;

#####
	feedcode := |*
		spaces;

		'|' => { fgoto main; };

		feedcode_name => { temp[:feedcode] = data[tokstart..tokend-1]; };
		any => {puts "ERR: feedcode #{data[tokstart..tokend-1]}"};
	*|;
#####
	volume := |*
		spaces;

		'|' => { fgoto main; };

		numbers => { temp[:quantity] = data[tokstart..tokend].to_i; };
		any => {puts "ERR: volume #{data[tokstart..tokend]}"};
	*|;
#####
         main := |*
					'module = ' => { fgoto module; };

					'market = ' => { fgoto market; };

					'feedcode = ' => { fgoto feedcode; };

					'type = ' => { fgoto type; };

					'order_id = ' => { fgoto order_id; };

					'buy = ' => { fgoto activity; };

					'price = ' => { fgoto price; };

					'volume = ' => { fgoto volume; };

					'date = ' => { fgoto date; };

					'time = ' => { fgoto time; };

					( numbers | letters | spaces | '\n' | '{' | '}' | other | any );
		
         *|;


From thurs... at cs.queensu.ca  Fri Oct  5 16:13:07 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Fri, 05 Oct 2007 12:13:07 -0400
Subject: [ragel-users] tuning/optimizing scanners
In-Reply-To: <19BA7B81-4686-4132-AE02-E325CC0DB108@mac.com>
References: <19BA7B81-4686-4132-AE02-E325CC0DB108@mac.com>
Message-ID: <47066293.506@cs.queensu.ca>

Hi Chuck,

The parsing methodology looks fine to me. There is no undue backtracking.

What version of Ragel are you using?

-Adrian

Chuck Remes wrote:
> I've written a log parsing tool using ragel and ruby. I'm using the  
> scanner construct to perform the parsing, but things appear to be  
> running very slowly. I fear I may have chosen the wrong methodology  
> to parse the log. (And yes, I know ruby isn't the quickest language  
> out there...) :-)
> 
> The log in question is a set of key/value pairs that look like this  
> (this is one line):
> 
> Oct  1 09:50:33.37204 [29193]: {market = ICE | type = order |  
> order_id = 4 | buy = 1 | price = 80.83 | volume = 1 | date =  
> 2007-10-01 | time = 09:50:33.37201 | metadata = {l={f=Quote|g=4|j=1| 
> sid=8290182729}|ac=289182|cf=2881|ca= 289182}}
> 
> I'm uninterested in the date and other data at the line start, so I  
> throw it away. I primarily search for the key (e.g. 'market = ') and  
> then fgoto another machine to parse the value. Upon hitting a pipe  
> character, I fgoto main again and look for another key. I pasted in a  
> section of the machine below to illustrate.
> 
> Is this the correct approach? Is there a superior method for rapidly  
> parsing long text strings? Be gentle with me... I'm new to this stuff.
> 
> Unfortunately, each log record is a slightly different format (for a  
> total of about 15 different formats). I also can't plan on the key/ 
> value pairs showing up in the same order every time.
> 
> Any suggestions?
> 
> ----------- snip here ---------------
> 	feedcode_name = [0-9a-zA-Z\-]+;
> 	numbers = [0-9]+;
> 
> #####
> 	feedcode := |*
> 		spaces;
> 
> 		'|' => { fgoto main; };
> 
> 		feedcode_name => { temp[:feedcode] = data[tokstart..tokend-1]; };
> 		any => {puts "ERR: feedcode #{data[tokstart..tokend-1]}"};
> 	*|;
> #####
> 	volume := |*
> 		spaces;
> 
> 		'|' => { fgoto main; };
> 
> 		numbers => { temp[:quantity] = data[tokstart..tokend].to_i; };
> 		any => {puts "ERR: volume #{data[tokstart..tokend]}"};
> 	*|;
> #####
>          main := |*
> 					'module = ' => { fgoto module; };
> 
> 					'market = ' => { fgoto market; };
> 
> 					'feedcode = ' => { fgoto feedcode; };
> 
> 					'type = ' => { fgoto type; };
> 
> 					'order_id = ' => { fgoto order_id; };
> 
> 					'buy = ' => { fgoto activity; };
> 
> 					'price = ' => { fgoto price; };
> 
> 					'volume = ' => { fgoto volume; };
> 
> 					'date = ' => { fgoto date; };
> 
> 					'time = ' => { fgoto time; };
> 
> 					( numbers | letters | spaces | '\n' | '{' | '}' | other | any );
> 		
>          *|;
> 
> 
> --~--~---------~--~----~------------~-------~--~----~
> You received this message because you are subscribed to the Google Groups "ragel-users" group.
> To post to this group, send email to ragel-users at googlegroups.com
> To unsubscribe from this group, send email to ragel-users-unsubscribe at googlegroups.com
> For more options, visit this group at http://groups.google.com/group/ragel-users?hl=en
> -~----------~----~----~----~------~----~------~--~---
> 
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20071005/788ebc17/attachment.sig>

From cremes.devl... at mac.com  Fri Oct  5 16:25:51 2007
From: cremes.devl... at mac.com (Chuck Remes)
Date: Fri, 5 Oct 2007 11:25:51 -0500
Subject: [ragel-users] Re: tuning/optimizing scanners
In-Reply-To: <47066293.506@cs.queensu.ca>
References: <19BA7B81-4686-4132-AE02-E325CC0DB108@mac.com> <47066293.506@cs.queensu.ca>
Message-ID: <B07B1DDF-FE3B-4B6A-BE9C-7865F73B07D0@mac.com>

Adrian,

I am using ragel 5.24 so I can have ruby support.


On Oct 5, 2007, at 11:13 AM, Adrian Thurston wrote:

> Hi Chuck,
>
> The parsing methodology looks fine to me. There is no undue  
> backtracking.
>
> What version of Ragel are you using?
>
> -Adrian
>
> Chuck Remes wrote:
>> I've written a log parsing tool using ragel and ruby. I'm using the
>> scanner construct to perform the parsing, but things appear to be
>> running very slowly. I fear I may have chosen the wrong methodology
>> to parse the log. (And yes, I know ruby isn't the quickest language
>> out there...) :-)
>>
>> The log in question is a set of key/value pairs that look like this
>> (this is one line):
>>
>> Oct  1 09:50:33.37204 [29193]: {market = ICE | type = order |
>> order_id = 4 | buy = 1 | price = 80.83 | volume = 1 | date =
>> 2007-10-01 | time = 09:50:33.37201 | metadata = {l={f=Quote|g=4|j=1|
>> sid=8290182729}|ac=289182|cf=2881|ca= 289182}}
>>
>> I'm uninterested in the date and other data at the line start, so I
>> throw it away. I primarily search for the key (e.g. 'market = ') and
>> then fgoto another machine to parse the value. Upon hitting a pipe
>> character, I fgoto main again and look for another key. I pasted in a
>> section of the machine below to illustrate.
>>
>> Is this the correct approach? Is there a superior method for rapidly
>> parsing long text strings? Be gentle with me... I'm new to this  
>> stuff.
[snip]


From thurs... at cs.queensu.ca  Fri Oct  5 16:45:26 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Fri, 05 Oct 2007 12:45:26 -0400
Subject: [ragel-users] Re: tuning/optimizing scanners
In-Reply-To: <B07B1DDF-FE3B-4B6A-BE9C-7865F73B07D0@mac.com>
References: <19BA7B81-4686-4132-AE02-E325CC0DB108@mac.com> <47066293.506@cs.queensu.ca> <B07B1DDF-FE3B-4B6A-BE9C-7865F73B07D0@mac.com>
Message-ID: <47066A26.2070900@cs.queensu.ca>

Hmmm, the -F1 option should be the fastest and you may get some marginal
speedups if you make the patterns mutually exclusive and as greedy as
possible, but I suppose I'd have to suggest using C if real speed is
what you're after.

Adrian

Chuck Remes wrote:
> Adrian,
> 
> I am using ragel 5.24 so I can have ruby support.
> 
> 
> On Oct 5, 2007, at 11:13 AM, Adrian Thurston wrote:
> 
>> Hi Chuck,
>>
>> The parsing methodology looks fine to me. There is no undue  
>> backtracking.
>>
>> What version of Ragel are you using?
>>
>> -Adrian
>>
>> Chuck Remes wrote:
>>> I've written a log parsing tool using ragel and ruby. I'm using the
>>> scanner construct to perform the parsing, but things appear to be
>>> running very slowly. I fear I may have chosen the wrong methodology
>>> to parse the log. (And yes, I know ruby isn't the quickest language
>>> out there...) :-)
>>>
>>> The log in question is a set of key/value pairs that look like this
>>> (this is one line):
>>>
>>> Oct  1 09:50:33.37204 [29193]: {market = ICE | type = order |
>>> order_id = 4 | buy = 1 | price = 80.83 | volume = 1 | date =
>>> 2007-10-01 | time = 09:50:33.37201 | metadata = {l={f=Quote|g=4|j=1|
>>> sid=8290182729}|ac=289182|cf=2881|ca= 289182}}
>>>
>>> I'm uninterested in the date and other data at the line start, so I
>>> throw it away. I primarily search for the key (e.g. 'market = ') and
>>> then fgoto another machine to parse the value. Upon hitting a pipe
>>> character, I fgoto main again and look for another key. I pasted in a
>>> section of the machine below to illustrate.
>>>
>>> Is this the correct approach? Is there a superior method for rapidly
>>> parsing long text strings? Be gentle with me... I'm new to this  
>>> stuff.
> [snip]
> 
> --~--~---------~--~----~------------~-------~--~----~
> You received this message because you are subscribed to the Google Groups "ragel-users" group.
> To post to this group, send email to ragel-users at googlegroups.com
> To unsubscribe from this group, send email to ragel-users-unsubscribe at googlegroups.com
> For more options, visit this group at http://groups.google.com/group/ragel-users?hl=en
> -~----------~----~----~----~------~----~------~--~---
> 
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20071005/5d51867f/attachment.sig>

From w... at wincent.com  Fri Oct  5 17:15:33 2007
From: w... at wincent.com (Wincent Colaiuta)
Date: Fri, 5 Oct 2007 19:15:33 +0200
Subject: [ragel-users] Re: tuning/optimizing scanners
In-Reply-To: <47066A26.2070900@cs.queensu.ca>
References: <19BA7B81-4686-4132-AE02-E325CC0DB108@mac.com> <47066293.506@cs.queensu.ca> <B07B1DDF-FE3B-4B6A-BE9C-7865F73B07D0@mac.com> <47066A26.2070900@cs.queensu.ca>
Message-ID: <6A8E3B97-5DDA-4576-B14B-A0FF82C934DC@wincent.com>

El 5/10/2007, a las 18:45, Adrian Thurston escribió:

> Hmmm, the -F1 option should be the fastest and you may get some  
> marginal
> speedups if you make the patterns mutually exclusive and as greedy as
> possible, but I suppose I'd have to suggest using C if real speed is
> what you're after.

And if you want to work from within Ruby, the fact that Ragel  
generates pure C code without any dependencies makes it an ideal  
candidate for insertion into a Ruby extension in C. A few high- 
profile Ruby projects do this, like Mongrel, Hpricot and SuperRedCloth.

Cheers,
Wincent


From cremes.devl... at mac.com  Fri Oct  5 18:04:29 2007
From: cremes.devl... at mac.com (Chuck Remes)
Date: Fri, 5 Oct 2007 13:04:29 -0500
Subject: [ragel-users] Re: tuning/optimizing scanners
In-Reply-To: <47066A26.2070900@cs.queensu.ca>
References: <19BA7B81-4686-4132-AE02-E325CC0DB108@mac.com> <47066293.506@cs.queensu.ca> <B07B1DDF-FE3B-4B6A-BE9C-7865F73B07D0@mac.com> <47066A26.2070900@cs.queensu.ca>
Message-ID: <EE84C847-3CB5-4CC4-A32D-5A79923B373A@mac.com>

The -F1 option is what I was missing! Initially I stayed away from  
those switches due to a note in the docs about not all of them being  
supported for the ruby target. I wanted correctness before I wanted  
speed.

Generating the code with that option resulted in a significant  
performance improvement. My baseline testcase went from 50 seconds  
(wall clock time) to 28 seconds. That's more than adequate for right  
now.

Now that I have my feet wet with ragel I'll be more comfortable  
trying things like generating the C code and interfacing to it from  
my ruby code.

Adrian, thanks for a great tool.

Another question before I drop this line of inquiry. What did you  
mean by "make the patterns mutually exclusive?" So I can understand  
it better, please provide an example of a non-exclusive set and a  
mutually exclusive set of patterns.

cr

On Oct 5, 2007, at 11:45 AM, Adrian Thurston wrote:

> Hmmm, the -F1 option should be the fastest and you may get some  
> marginal
> speedups if you make the patterns mutually exclusive and as greedy as
> possible, but I suppose I'd have to suggest using C if real speed is
> what you're after.
>
> Adrian
>
> Chuck Remes wrote:
>> Adrian,
>>
>> I am using ragel 5.24 so I can have ruby support.
>>
>>
>> On Oct 5, 2007, at 11:13 AM, Adrian Thurston wrote:
>>
>>> Hi Chuck,
>>>
>>> The parsing methodology looks fine to me. There is no undue
>>> backtracking.
>>>
>>> What version of Ragel are you using?
>>>
>>> -Adrian
>>>
>>> Chuck Remes wrote:
>>>> I've written a log parsing tool using ragel and ruby. I'm using the
>>>> scanner construct to perform the parsing, but things appear to be
>>>> running very slowly. I fear I may have chosen the wrong methodology
>>>> to parse the log. (And yes, I know ruby isn't the quickest language
>>>> out there...) :-)
>>>>
>>>> The log in question is a set of key/value pairs that look like this
>>>> (this is one line):
>>>>
>>>> Oct  1 09:50:33.37204 [29193]: {market = ICE | type = order |
>>>> order_id = 4 | buy = 1 | price = 80.83 | volume = 1 | date =
>>>> 2007-10-01 | time = 09:50:33.37201 | metadata = {l={f=Quote|g=4| 
>>>> j=1|
>>>> sid=8290182729}|ac=289182|cf=2881|ca= 289182}}
>>>>
>>>> I'm uninterested in the date and other data at the line start, so I
>>>> throw it away. I primarily search for the key (e.g. 'market = ')  
>>>> and
>>>> then fgoto another machine to parse the value. Upon hitting a pipe
>>>> character, I fgoto main again and look for another key. I pasted  
>>>> in a
>>>> section of the machine below to illustrate.
>>>>
>>>> Is this the correct approach? Is there a superior method for  
>>>> rapidly
>>>> parsing long text strings? Be gentle with me... I'm new to this
>>>> stuff.
>> [snip]
>>
>> >>
>>
>


From thurs... at cs.queensu.ca  Fri Oct  5 19:04:03 2007
From: thurs... at cs.queensu.ca (=?utf-8?B?QWRyaWFuIFRodXJzdG9u?=)
Date: Fri, 5 Oct 2007 19:04:03 +0000
Subject: [ragel-users] Re: tuning/optimizing scanners
In-Reply-To: <EE84C847-3CB5-4CC4-A32D-5A79923B373A@mac.com>
References: <19BA7B81-4686-4132-AE02-E325CC0DB108@mac.com> <47066293.506@cs.queensu.ca> <B07B1DDF-FE3B-4B6A-BE9C-7865F73B07D0@mac.com> <47066A26.2070900@cs.queensu.ca><EE84C847-3CB5-4CC4-A32D-5A79923B373A@mac.com>
Message-ID: <240251949-1191611038-cardhu_decombobulator_blackberry.rim.net-1515613405-@bxe033.bisx.prod.on.blackberry>

Hi Chuck,

Those switches are new with 5.24. They pass a number of tests, but are not heavily tested. 
By mutually exclusive I meant that the patterns do not overlap. For example,

'a';
'b';

are mutually exclusive, but

'a';
any;

are not. On second thought I'm not sure if it would be worth the effort to refactor in your case, as the time is probably dominated by the basic iterations of the driver and the gains from mutually exclusive patterns are very small. 

Adrian

-----Original Message-----
From: Chuck Remes <cremes.devlist at mac.com>

Date: Fri, 5 Oct 2007 13:04:29 
To:ragel-users at googlegroups.com
Subject: [ragel-users] Re: tuning/optimizing scanners



The -F1 option is what I was missing! Initially I stayed away from  
those switches due to a note in the docs about not all of them being  
supported for the ruby target. I wanted correctness before I wanted  
speed.

Generating the code with that option resulted in a significant  
performance improvement. My baseline testcase went from 50 seconds  
(wall clock time) to 28 seconds. That's more than adequate for right  
now.

Now that I have my feet wet with ragel I'll be more comfortable  
trying things like generating the C code and interfacing to it from  
my ruby code.

Adrian, thanks for a great tool.

Another question before I drop this line of inquiry. What did you  
mean by "make the patterns mutually exclusive?" So I can understand  
it better, please provide an example of a non-exclusive set and a  
mutually exclusive set of patterns.

cr

On Oct 5, 2007, at 11:45 AM, Adrian Thurston wrote:

> Hmmm, the -F1 option should be the fastest and you may get some  
> marginal
> speedups if you make the patterns mutually exclusive and as greedy as
> possible, but I suppose I'd have to suggest using C if real speed is
> what you're after.
>
> Adrian
>
> Chuck Remes wrote:
>> Adrian,
>>
>> I am using ragel 5.24 so I can have ruby support.
>>
>>
>> On Oct 5, 2007, at 11:13 AM, Adrian Thurston wrote:
>>
>>> Hi Chuck,
>>>
>>> The parsing methodology looks fine to me. There is no undue
>>> backtracking.
>>>
>>> What version of Ragel are you using?
>>>
>>> -Adrian
>>>
>>> Chuck Remes wrote:
>>>> I've written a log parsing tool using ragel and ruby. I'm using the
>>>> scanner construct to perform the parsing, but things appear to be
>>>> running very slowly. I fear I may have chosen the wrong methodology
>>>> to parse the log. (And yes, I know ruby isn't the quickest language
>>>> out there...) :-)
>>>>
>>>> The log in question is a set of key/value pairs that look like this
>>>> (this is one line):
>>>>
>>>> Oct  1 09:50:33.37204 [29193]: {market = ICE | type = order |
>>>> order_id = 4 | buy = 1 | price = 80.83 | volume = 1 | date =
>>>> 2007-10-01 | time = 09:50:33.37201 | metadata = {l={f=Quote|g=4| 
>>>> j=1|
>>>> sid=8290182729}|ac=289182|cf=2881|ca= 289182}}
>>>>
>>>> I'm uninterested in the date and other data at the line start, so I
>>>> throw it away. I primarily search for the key (e.g. 'market = ')  
>>>> and
>>>> then fgoto another machine to parse the value. Upon hitting a pipe
>>>> character, I fgoto main again and look for another key. I pasted  
>>>> in a
>>>> section of the machine below to illustrate.
>>>>
>>>> Is this the correct approach? Is there a superior method for  
>>>> rapidly
>>>> parsing long text strings? Be gentle with me... I'm new to this
>>>> stuff.
>> [snip]
>>
>> >>
>>
>





From cremes.devl... at mac.com  Sun Oct  7 18:16:27 2007
From: cremes.devl... at mac.com (Chuck Remes)
Date: Sun, 7 Oct 2007 13:16:27 -0500
Subject: parsing a netstring
Message-ID: <E84884A6-D742-4337-86B0-A2EB92196C5D@mac.com>

I'm suddenly finding all sorts of uses for ragel!

I want to write a parser for netstrings. The definition of a  
netstring is pretty simple. It comes in the following format:

size_in_decimal':''string array size_in_decimal bytes long'','

I wrote a machine to parse through this and capture every byte, but  
I'm unclear how to terminate my get_string machine. Right now I have  
it call the action store_string as a finishing action for each byte  
processed. The action stores the byte and increments a counter  
variable. When the counter variable exceeds the number of bytes to be  
processed, I want to advance out of that machine and move to the next  
machine to confirm the byte array was terminated properly.

I'm not sure I'm doing this correctly. From the docs (section 6.5) it  
appears using a 'semantic condition' would make sense here, but that  
part of the documentation is unclear to me so I'm using this  
alternate methodology. Am I on the right track? Also, is there a way  
to skip 'N' bytes forward instead of copying them one by one into a  
new array (super slow!)? I'm thinking I can directly modify the 'p'  
variable but I'm not sure this is the right way.

Secondly, I'm not sure how to capture errors. I'm already using the  
form '@action' to do some work in a machine. Can I specify an error  
action using the same operator in the same machine? E.g - get_size =  
( digit @store_size @err(size_error) )+;

Thanks for any input. My sample machine is listed below.

%%{
	machine parse_netstring;

	# snipped out some actions for the sake of brevity

	action store_size {
		size = ( size * 10 ) + fc; # accumulate string length
	};

	action alloc_buffer {
		buffer = Array.new(size);
		i = 0;
	};

	action store_string {
		buffer[i] = fc;
		i = i + 1;
		fnext get_string_terminator if i > size;
	};

	get_size = ( digit >validate_not_zero ) . ( digit @store_size )*;

	get_delimeter = ( ':' @alloc_buffer );

	get_string = ( any @store_string )*;

	get_netstring_terminator = ',' @finalize;

	main := get_size . get_delimeter . get_string;
}%%


From thurs... at cs.queensu.ca  Tue Oct  9 21:10:52 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Tue, 09 Oct 2007 17:10:52 -0400
Subject: [ragel-users] parsing a netstring
In-Reply-To: <E84884A6-D742-4337-86B0-A2EB92196C5D@mac.com>
References: <E84884A6-D742-4337-86B0-A2EB92196C5D@mac.com>
Message-ID: <470BEE5C.3020901@cs.queensu.ca>

Hi Chuck,

Yes, using fnext to call out of the string consuming machine is one way
to do it. The code looks good to me.

As you said you can use conditions as well. I think one of the examples
in the manual deals with variable length fields. So there is that route.

And also yes, you can modify p to jump ahead of the area. Just be
mindful of jumping past pe. If you have all the data at once this isn't
a problem, but if you get your data in blocks then you have to watch out
and hack in some solution.

With error actions you have to keep in mind that the operators have
slightly different meanings because they select states as opposed to
transitions. The error action embedding operators let you handle the
case of 'no transition' in the states they select.

Adrian

Chuck Remes wrote:
> I'm suddenly finding all sorts of uses for ragel!
> 
> I want to write a parser for netstrings. The definition of a  
> netstring is pretty simple. It comes in the following format:
> 
> size_in_decimal':''string array size_in_decimal bytes long'','
> 
> I wrote a machine to parse through this and capture every byte, but  
> I'm unclear how to terminate my get_string machine. Right now I have  
> it call the action store_string as a finishing action for each byte  
> processed. The action stores the byte and increments a counter  
> variable. When the counter variable exceeds the number of bytes to be  
> processed, I want to advance out of that machine and move to the next  
> machine to confirm the byte array was terminated properly.
> 
> I'm not sure I'm doing this correctly. From the docs (section 6.5) it  
> appears using a 'semantic condition' would make sense here, but that  
> part of the documentation is unclear to me so I'm using this  
> alternate methodology. Am I on the right track? Also, is there a way  
> to skip 'N' bytes forward instead of copying them one by one into a  
> new array (super slow!)? I'm thinking I can directly modify the 'p'  
> variable but I'm not sure this is the right way.
> 
> Secondly, I'm not sure how to capture errors. I'm already using the  
> form '@action' to do some work in a machine. Can I specify an error  
> action using the same operator in the same machine? E.g - get_size =  
> ( digit @store_size @err(size_error) )+;
> 
> Thanks for any input. My sample machine is listed below.
> 
> %%{
> 	machine parse_netstring;
> 
> 	# snipped out some actions for the sake of brevity
> 
> 	action store_size {
> 		size = ( size * 10 ) + fc; # accumulate string length
> 	};
> 
> 	action alloc_buffer {
> 		buffer = Array.new(size);
> 		i = 0;
> 	};
> 
> 	action store_string {
> 		buffer[i] = fc;
> 		i = i + 1;
> 		fnext get_string_terminator if i > size;
> 	};
> 
> 	get_size = ( digit >validate_not_zero ) . ( digit @store_size )*;
> 
> 	get_delimeter = ( ':' @alloc_buffer );
> 
> 	get_string = ( any @store_string )*;
> 
> 	get_netstring_terminator = ',' @finalize;
> 
> 	main := get_size . get_delimeter . get_string;
> }%%
> 
> --~--~---------~--~----~------------~-------~--~----~
> You received this message because you are subscribed to the Google Groups "ragel-users" group.
> To post to this group, send email to ragel-users at googlegroups.com
> To unsubscribe from this group, send email to ragel-users-unsubscribe at googlegroups.com
> For more options, visit this group at http://groups.google.com/group/ragel-users?hl=en
> -~----------~----~----~----~------~----~------~--~---
> 
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20071009/fa1fcd96/attachment.sig>

From cremes.devl... at mac.com  Wed Oct 10 15:49:48 2007
From: cremes.devl... at mac.com (Chuck Remes)
Date: Wed, 10 Oct 2007 10:49:48 -0500
Subject: [ragel-users] Re: parsing a netstring
In-Reply-To: <470BEE5C.3020901@cs.queensu.ca>
References: <E84884A6-D742-4337-86B0-A2EB92196C5D@mac.com> <470BEE5C.3020901@cs.queensu.ca>
Message-ID: <9064A031-F86F-4F59-B779-1CCE6808BF5B@mac.com>

Adrian,

thanks for the reply. It's encouraging to have my guesses confirmed.

I'm still a bit fuzzy on the last piece regarding error actions.

Let's use the example I contrived from the original email:


> get_size = ( digit @store_size @err(size_error) )+;
>

I'm interpreting your comment to mean that @err(size_error) will  
*only* get called if the get_size machine receives an input it isn't  
configured to handle. For example, if it receives an alphanumeric  
then action size_error will be called to handle it.

cr

On Oct 9, 2007, at 4:10 PM, Adrian Thurston wrote:

> Hi Chuck,
>
> Yes, using fnext to call out of the string consuming machine is one  
> way
> to do it. The code looks good to me.
>
> As you said you can use conditions as well. I think one of the  
> examples
> in the manual deals with variable length fields. So there is that  
> route.
>
> And also yes, you can modify p to jump ahead of the area. Just be
> mindful of jumping past pe. If you have all the data at once this  
> isn't
> a problem, but if you get your data in blocks then you have to  
> watch out
> and hack in some solution.
>
> With error actions you have to keep in mind that the operators have
> slightly different meanings because they select states as opposed to
> transitions. The error action embedding operators let you handle the
> case of 'no transition' in the states they select.
>
> Adrian
>
> Chuck Remes wrote:
>> I'm suddenly finding all sorts of uses for ragel!
>>
>> I want to write a parser for netstrings. The definition of a
>> netstring is pretty simple. It comes in the following format:
>>
>> size_in_decimal':''string array size_in_decimal bytes long'','
>>
>> I wrote a machine to parse through this and capture every byte, but
>> I'm unclear how to terminate my get_string machine. Right now I have
>> it call the action store_string as a finishing action for each byte
>> processed. The action stores the byte and increments a counter
>> variable. When the counter variable exceeds the number of bytes to be
>> processed, I want to advance out of that machine and move to the next
>> machine to confirm the byte array was terminated properly.
>>
>> I'm not sure I'm doing this correctly. From the docs (section 6.5) it
>> appears using a 'semantic condition' would make sense here, but that
>> part of the documentation is unclear to me so I'm using this
>> alternate methodology. Am I on the right track? Also, is there a way
>> to skip 'N' bytes forward instead of copying them one by one into a
>> new array (super slow!)? I'm thinking I can directly modify the 'p'
>> variable but I'm not sure this is the right way.
>>
>> Secondly, I'm not sure how to capture errors. I'm already using the
>> form '@action' to do some work in a machine. Can I specify an error
>> action using the same operator in the same machine? E.g - get_size =
>> ( digit @store_size @err(size_error) )+;
>>
>> Thanks for any input. My sample machine is listed below.
>>
>> %%{
>> 	machine parse_netstring;
>>
>> 	# snipped out some actions for the sake of brevity
>>
>> 	action store_size {
>> 		size = ( size * 10 ) + fc; # accumulate string length
>> 	};
>>
>> 	action alloc_buffer {
>> 		buffer = Array.new(size);
>> 		i = 0;
>> 	};
>>
>> 	action store_string {
>> 		buffer[i] = fc;
>> 		i = i + 1;
>> 		fnext get_string_terminator if i > size;
>> 	};
>>
>> 	get_size = ( digit >validate_not_zero ) . ( digit @store_size )*;
>>
>> 	get_delimeter = ( ':' @alloc_buffer );
>>
>> 	get_string = ( any @store_string )*;
>>
>> 	get_netstring_terminator = ',' @finalize;
>>
>> 	main := get_size . get_delimeter . get_string;
>> }%%
>>
>> >>
>>
>


From thurs... at cs.queensu.ca  Wed Oct 10 16:19:11 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Wed, 10 Oct 2007 12:19:11 -0400
Subject: [ragel-users] Re: parsing a netstring
In-Reply-To: <9064A031-F86F-4F59-B779-1CCE6808BF5B@mac.com>
References: <E84884A6-D742-4337-86B0-A2EB92196C5D@mac.com> <470BEE5C.3020901@cs.queensu.ca> <9064A031-F86F-4F59-B779-1CCE6808BF5B@mac.com>
Message-ID: <470CFB7F.7050209@cs.queensu.ca>

Chuck,

That's right, I should just point out a subtlety. With error actions
"inputs not handled" is computed when the final machine is complete. If
get_size is just on its own in main then this will be non-digits. If
get_size were unioned with something else then this would be non-digits
and non-something else (for the start state at least).

If you use local error actions instead @lerr(...) then the "inputs not
handled" are computed when the get_size machine is constructed. In this
case any non-digit.

So global error actions are executed when the whole machine fails and
local error actions are executed when the current definition fails.

-Adrian

Chuck Remes wrote:
> Adrian,
> 
> thanks for the reply. It's encouraging to have my guesses confirmed.
> 
> I'm still a bit fuzzy on the last piece regarding error actions.
> 
> Let's use the example I contrived from the original email:
> 
> 
>> get_size = ( digit @store_size @err(size_error) )+;
>>
> 
> I'm interpreting your comment to mean that @err(size_error) will  
> *only* get called if the get_size machine receives an input it isn't  
> configured to handle. For example, if it receives an alphanumeric  
> then action size_error will be called to handle it.
> 
> cr
> 
> On Oct 9, 2007, at 4:10 PM, Adrian Thurston wrote:
> 
>> Hi Chuck,
>>
>> Yes, using fnext to call out of the string consuming machine is one  
>> way
>> to do it. The code looks good to me.
>>
>> As you said you can use conditions as well. I think one of the  
>> examples
>> in the manual deals with variable length fields. So there is that  
>> route.
>>
>> And also yes, you can modify p to jump ahead of the area. Just be
>> mindful of jumping past pe. If you have all the data at once this  
>> isn't
>> a problem, but if you get your data in blocks then you have to  
>> watch out
>> and hack in some solution.
>>
>> With error actions you have to keep in mind that the operators have
>> slightly different meanings because they select states as opposed to
>> transitions. The error action embedding operators let you handle the
>> case of 'no transition' in the states they select.
>>
>> Adrian
>>
>> Chuck Remes wrote:
>>> I'm suddenly finding all sorts of uses for ragel!
>>>
>>> I want to write a parser for netstrings. The definition of a
>>> netstring is pretty simple. It comes in the following format:
>>>
>>> size_in_decimal':''string array size_in_decimal bytes long'','
>>>
>>> I wrote a machine to parse through this and capture every byte, but
>>> I'm unclear how to terminate my get_string machine. Right now I have
>>> it call the action store_string as a finishing action for each byte
>>> processed. The action stores the byte and increments a counter
>>> variable. When the counter variable exceeds the number of bytes to be
>>> processed, I want to advance out of that machine and move to the next
>>> machine to confirm the byte array was terminated properly.
>>>
>>> I'm not sure I'm doing this correctly. From the docs (section 6.5) it
>>> appears using a 'semantic condition' would make sense here, but that
>>> part of the documentation is unclear to me so I'm using this
>>> alternate methodology. Am I on the right track? Also, is there a way
>>> to skip 'N' bytes forward instead of copying them one by one into a
>>> new array (super slow!)? I'm thinking I can directly modify the 'p'
>>> variable but I'm not sure this is the right way.
>>>
>>> Secondly, I'm not sure how to capture errors. I'm already using the
>>> form '@action' to do some work in a machine. Can I specify an error
>>> action using the same operator in the same machine? E.g - get_size =
>>> ( digit @store_size @err(size_error) )+;
>>>
>>> Thanks for any input. My sample machine is listed below.
>>>
>>> %%{
>>> 	machine parse_netstring;
>>>
>>> 	# snipped out some actions for the sake of brevity
>>>
>>> 	action store_size {
>>> 		size = ( size * 10 ) + fc; # accumulate string length
>>> 	};
>>>
>>> 	action alloc_buffer {
>>> 		buffer = Array.new(size);
>>> 		i = 0;
>>> 	};
>>>
>>> 	action store_string {
>>> 		buffer[i] = fc;
>>> 		i = i + 1;
>>> 		fnext get_string_terminator if i > size;
>>> 	};
>>>
>>> 	get_size = ( digit >validate_not_zero ) . ( digit @store_size )*;
>>>
>>> 	get_delimeter = ( ':' @alloc_buffer );
>>>
>>> 	get_string = ( any @store_string )*;
>>>
>>> 	get_netstring_terminator = ',' @finalize;
>>>
>>> 	main := get_size . get_delimeter . get_string;
>>> }%%
>>>
> 
> 
> --~--~---------~--~----~------------~-------~--~----~
> You received this message because you are subscribed to the Google Groups "ragel-users" group.
> To post to this group, send email to ragel-users at googlegroups.com
> To unsubscribe from this group, send email to ragel-users-unsubscribe at googlegroups.com
> For more options, visit this group at http://groups.google.com/group/ragel-users?hl=en
> -~----------~----~----~----~------~----~------~--~---
> 
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20071010/5846bc0f/attachment.sig>

From thurs... at cs.queensu.ca  Tue Oct  9 22:48:05 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Tue, 09 Oct 2007 18:48:05 -0400
Subject: for 6.0: going back to 3.X semantics for >, %, err
Message-ID: <470C0525.5040003@cs.queensu.ca>

Hi,

In version 3 of Ragel the semantics of >, % and the error actions were
different.

1. The leaving operator '%' would also embed the action as an EOF action
if the final states of the machine it was applied to remained final in
the compiled machine. This meant that as long as the machine didn't
error, the leaving action would always be executed even if it came right
at the end of the input.

2. The starting transition operator '>' would embed a leaving action
into the start state if the start state was final. This meant that if a
machine accepted the zero-length string and control passed through the
zero-length string then the starting transition action would still get
executed.

3. All global and local error actions would be executed when the input
ended in a non-final state (and the error action was embedded into that
state).

This semantics meant a single action block could be executed on a
regular character transition and on an EOF event. The problem was that
regular actions were generated in the main processing loop using 'write
exec' and EOF actions were generated using 'write eof'. This often led
to compile errors because the context was not the same. You could fix
the compile errors by providing dummy variables to the EOF code, but
there would be no effect in the EOF code.

This inconsistency seemed to drive up the complexity of these operators
and in the 4.0 line I decided to simplify the operators by eliminating
the above action embedding behaviour.

In the 6.0 release I will be bringing this behaviour back. Now that EOF
actions are written in the main processing loop, they have available to
them everything that regular actions have and the original problem is gone.

-Adrian

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20071009/614a990f/attachment.sig>

From er... at atlasocean.com  Tue Oct  9 22:51:30 2007
From: er... at atlasocean.com (Erich Ocean)
Date: Tue, 9 Oct 2007 15:51:30 -0700
Subject: [ragel-users] for 6.0: going back to 3.X semantics for >, %, err
In-Reply-To: <470C0525.5040003@cs.queensu.ca>
References: <470C0525.5040003@cs.queensu.ca>
Message-ID: <D3AA945D-F918-47D5-860B-7D5C822074F3@atlasocean.com>

That's great! +1 for the change.

On Oct 9, 2007, at 3:48 PM, Adrian Thurston wrote:

> Hi,
>
> In version 3 of Ragel the semantics of >, % and the error actions were
> different.
>
> 1. The leaving operator '%' would also embed the action as an EOF  
> action
> if the final states of the machine it was applied to remained final in
> the compiled machine. This meant that as long as the machine didn't
> error, the leaving action would always be executed even if it came  
> right
> at the end of the input.
>
> 2. The starting transition operator '>' would embed a leaving action
> into the start state if the start state was final. This meant that  
> if a
> machine accepted the zero-length string and control passed through the
> zero-length string then the starting transition action would still get
> executed.
>
> 3. All global and local error actions would be executed when the input
> ended in a non-final state (and the error action was embedded into  
> that
> state).
>
> This semantics meant a single action block could be executed on a
> regular character transition and on an EOF event. The problem was that
> regular actions were generated in the main processing loop using  
> 'write
> exec' and EOF actions were generated using 'write eof'. This often led
> to compile errors because the context was not the same. You could fix
> the compile errors by providing dummy variables to the EOF code, but
> there would be no effect in the EOF code.
>
> This inconsistency seemed to drive up the complexity of these  
> operators
> and in the 4.0 line I decided to simplify the operators by eliminating
> the above action embedding behaviour.
>
> In the 6.0 release I will be bringing this behaviour back. Now that  
> EOF
> actions are written in the main processing loop, they have  
> available to
> them everything that regular actions have and the original problem  
> is gone.
>
> -Adrian
>


From br... at codefluency.com  Tue Oct  9 23:36:08 2007
From: br... at codefluency.com (Bruce Williams)
Date: Tue, 9 Oct 2007 18:36:08 -0500
Subject: [ragel-users] Re: for 6.0: going back to 3.X semantics for >, %, err
In-Reply-To: <D3AA945D-F918-47D5-860B-7D5C822074F3@atlasocean.com>
References: <470C0525.5040003@cs.queensu.ca>
	 <D3AA945D-F918-47D5-860B-7D5C822074F3@atlasocean.com>
Message-ID: <a2830e5b0710091636i6354c4fdy6dcbeabbaea1c42d@mail.gmail.com>

Adrian,

This sounds great; especially the '%' EOF action.

Cheers,
Bruce

---
Bruce Williams
http://codefluency.com

On 10/9/07, Erich Ocean <er... at atlasocean.com> wrote:
>
> That's great! +1 for the change.
>
> On Oct 9, 2007, at 3:48 PM, Adrian Thurston wrote:
>
> > Hi,
> >
> > In version 3 of Ragel the semantics of >, % and the error actions were
> > different.
> >
> > 1. The leaving operator '%' would also embed the action as an EOF
> > action
> > if the final states of the machine it was applied to remained final in
> > the compiled machine. This meant that as long as the machine didn't
> > error, the leaving action would always be executed even if it came
> > right
> > at the end of the input.
> >
> > 2. The starting transition operator '>' would embed a leaving action
> > into the start state if the start state was final. This meant that
> > if a
> > machine accepted the zero-length string and control passed through the
> > zero-length string then the starting transition action would still get
> > executed.
> >
> > 3. All global and local error actions would be executed when the input
> > ended in a non-final state (and the error action was embedded into
> > that
> > state).
> >
> > This semantics meant a single action block could be executed on a
> > regular character transition and on an EOF event. The problem was that
> > regular actions were generated in the main processing loop using
> > 'write
> > exec' and EOF actions were generated using 'write eof'. This often led
> > to compile errors because the context was not the same. You could fix
> > the compile errors by providing dummy variables to the EOF code, but
> > there would be no effect in the EOF code.
> >
> > This inconsistency seemed to drive up the complexity of these
> > operators
> > and in the 4.0 line I decided to simplify the operators by eliminating
> > the above action embedding behaviour.
> >
> > In the 6.0 release I will be bringing this behaviour back. Now that
> > EOF
> > actions are written in the main processing loop, they have
> > available to
> > them everything that regular actions have and the original problem
> > is gone.
> >
> > -Adrian
> >
>
>
> >
>


From thurs... at cs.queensu.ca  Wed Oct 17 16:11:24 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Wed, 17 Oct 2007 12:11:24 -0400
Subject: [ragel-users] for 6.0: going back to 3.X semantics for >, %,
 err
In-Reply-To: <470C0525.5040003@cs.queensu.ca>
References: <470C0525.5040003@cs.queensu.ca>
Message-ID: <4716342C.80100@cs.queensu.ca>

This has now been committed.

-Adrian

Adrian Thurston wrote:
> Hi,
> 
> In version 3 of Ragel the semantics of >, % and the error actions were
> different.
> 
> 1. The leaving operator '%' would also embed the action as an EOF action
> if the final states of the machine it was applied to remained final in
> the compiled machine. This meant that as long as the machine didn't
> error, the leaving action would always be executed even if it came right
> at the end of the input.
> 
> 2. The starting transition operator '>' would embed a leaving action
> into the start state if the start state was final. This meant that if a
> machine accepted the zero-length string and control passed through the
> zero-length string then the starting transition action would still get
> executed.
> 
> 3. All global and local error actions would be executed when the input
> ended in a non-final state (and the error action was embedded into that
> state).
> 
> This semantics meant a single action block could be executed on a
> regular character transition and on an EOF event. The problem was that
> regular actions were generated in the main processing loop using 'write
> exec' and EOF actions were generated using 'write eof'. This often led
> to compile errors because the context was not the same. You could fix
> the compile errors by providing dummy variables to the EOF code, but
> there would be no effect in the EOF code.
> 
> This inconsistency seemed to drive up the complexity of these operators
> and in the 4.0 line I decided to simplify the operators by eliminating
> the above action embedding behaviour.
> 
> In the 6.0 release I will be bringing this behaviour back. Now that EOF
> actions are written in the main processing loop, they have available to
> them everything that regular actions have and the original problem is gone.
> 
> -Adrian
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20071017/447f4651/attachment.sig>

From delgad... at caramail.com  Thu Oct 18 08:12:47 2007
From: delgad... at caramail.com (Mat|)
Date: Thu, 18 Oct 2007 01:12:47 -0700
Subject: [newbie] parsing CSS style
Message-ID: <1192695167.303804.101830@v29g2000prd.googlegroups.com>

Hello,

I am just discovering ragel and I after some time trying to
understand how I could use it for my needs, I would like to
write a CSS style parser as an exercise and I come up
with some questions.

The input string is in the following form :

min-width: 100px; background: green;

for example.

Here is some code from my .rl file :

%%{
      machine CSSStyle;
      alphtype char;

      action token { free(tk); tk = (char *) calloc(fpc-tk_start+1,
sizeof(char)); std::strncpy(tk, tk_start, fpc-tk_start); }
      action style_item_value { free(tk2); tk2 = (char *) calloc(fpc-
tk_start+1, sizeof(char)); std::strncpy(tk2, tk_start, fpc-tk_start);
listener.style_item_value(tk2); }
      action unit { free(tk2); tk2=(char *) calloc(fpc-tk_start+1,
sizeof(char)); std::strncpy(tk2, tk_start, fpc-tk_start); }
      action style_item { style_item = (char *) calloc(fpc-tk_start+1,
sizeof(char)); std::strncpy(style_item, tk_start, fpc-tk_start);
listener.style_item(style_item); free(style_item); }
      action style_item_size { listener.style_item_size(std::atoi(tk),
tk2); }

      number =  digit+ >{tk_start = fpc;} %token;
      style_item = (alpha | '-')+ >{tk_start=fpc;} %style_item;
      style_item_value = (alpha)+ >{tk_start=fpc;} %style_item_value;
      unit = ("em"|"px") >{tk_start=fpc;} %unit;
      size = number unit %style_item_size;
      style = space* style_item space* ":" space* (size |
style_item_value) space* ";";

      main := style+;
  }%%

My questions are :

- knowing that my target language is C++, is there a way to do
something simpler in my actions ? For the moment I use some
variables like tk and tk2 in a class and I have to reallocate them
with "calloc"...

- I have got a problem (maybe more than one but I could only
detect one !) with my machines, indeed in my expressions I always
have a terminating ";" character but for some reason the style_item
action is executed even if there is no terminating ";". For example,
if I use "background: green" as an input string, the style_item is
going to be executed but it should not because there is no ";" at
the end.

Can someone help ?

Thanks in advance!!!


From thurs... at cs.queensu.ca  Thu Oct 18 14:13:39 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Thu, 18 Oct 2007 10:13:39 -0400
Subject: [ragel-users] [newbie] parsing CSS style
In-Reply-To: <1192695167.303804.101830@v29g2000prd.googlegroups.com>
References: <1192695167.303804.101830@v29g2000prd.googlegroups.com>
Message-ID: <47176A13.9080803@cs.queensu.ca>


Mat| wrote:

> - knowing that my target language is C++, is there a way to do
> something simpler in my actions ? For the moment I use some
> variables like tk and tk2 in a class and I have to reallocate them
> with "calloc"...

You could use a macro or some function to simplify your actions.


> - I have got a problem (maybe more than one but I could only
> detect one !) with my machines, indeed in my expressions I always
> have a terminating ";" character but for some reason the style_item
> action is executed even if there is no terminating ";". For example,
> if I use "background: green" as an input string, the style_item is
> going to be executed but it should not because there is no ";" at
> the end.

Do you mean style_item_value action? The style_item action will get
executed when leaving the name portion, in this case on the colon.



-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20071018/3f4b7882/attachment.sig>

From delgad... at caramail.com  Thu Oct 18 15:31:38 2007
From: delgad... at caramail.com (Mat|)
Date: Thu, 18 Oct 2007 08:31:38 -0700
Subject: [newbie] parsing CSS style
In-Reply-To: <47176A13.9080803@cs.queensu.ca>
References: <1192695167.303804.101830@v29g2000prd.googlegroups.com>
   <47176A13.9080803@cs.queensu.ca>
Message-ID: <1192721498.210586.302460@y27g2000pre.googlegroups.com>

Hello,

First of all thanks for the quick answer!!!

On Oct 18, 4:13 pm, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> > - I have got a problem (maybe more than one but I could only
> > detect one !) with my machines, indeed in my expressions I always
> > have a terminating ";" character but for some reason the style_item
> > action is executed even if there is no terminating ";". For example,
> > if I use "background: green" as an input string, the style_item is
> > going to be executed but it should not because there is no ";" at
> > the end.
>
> Do you mean style_item_value action? The style_item action will get
> executed when leaving the name portion, in this case on the colon.
>

I am talking about the style_item action. I want it to be executed
only
when it's "complete", for me it means that everything has been
processed up to a ";". For the moment as your are pointing out it
is executed on the colon even if there is no ";" at the end (when
there
is no ";" the style machine should raise an error).

How can I change the .rl file to obey to this behaviour ?
I am a bit lost.

Cheers


From thurs... at cs.queensu.ca  Thu Oct 18 16:14:08 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Thu, 18 Oct 2007 12:14:08 -0400
Subject: [ragel-users] Re: [newbie] parsing CSS style
In-Reply-To: <1192721498.210586.302460@y27g2000pre.googlegroups.com>
References: <1192695167.303804.101830@v29g2000prd.googlegroups.com> <47176A13.9080803@cs.queensu.ca> <1192721498.210586.302460@y27g2000pre.googlegroups.com>
Message-ID: <47178650.4070009@cs.queensu.ca>

Sounds to me that Ragel is not the right tool for you. Ragel is designed
for single-pass parsing where actions are executed as you move over the
data. Perhaps a more traditional approach where you build the parse tree
first, then walk it would be more appropriate in your case. Something
like ANTLR or Lex+YACC might be better.

Adrian

Mat| wrote:
> Hello,
> 
> First of all thanks for the quick answer!!!
> 
> On Oct 18, 4:13 pm, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>>> - I have got a problem (maybe more than one but I could only
>>> detect one !) with my machines, indeed in my expressions I always
>>> have a terminating ";" character but for some reason the style_item
>>> action is executed even if there is no terminating ";". For example,
>>> if I use "background: green" as an input string, the style_item is
>>> going to be executed but it should not because there is no ";" at
>>> the end.
>> Do you mean style_item_value action? The style_item action will get
>> executed when leaving the name portion, in this case on the colon.
>>
> 
> I am talking about the style_item action. I want it to be executed
> only
> when it's "complete", for me it means that everything has been
> processed up to a ";". For the moment as your are pointing out it
> is executed on the colon even if there is no ";" at the end (when
> there
> is no ";" the style machine should raise an error).
> 
> How can I change the .rl file to obey to this behaviour ?
> I am a bit lost.
> 
> Cheers
> 
> 
> --~--~---------~--~----~------------~-------~--~----~
> You received this message because you are subscribed to the Google Groups "ragel-users" group.
> To post to this group, send email to ragel-users at googlegroups.com
> To unsubscribe from this group, send email to ragel-users-unsubscribe at googlegroups.com
> For more options, visit this group at http://groups.google.com/group/ragel-users?hl=en
> -~----------~----~----~----~------~----~------~--~---
> 
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20071018/26c8ca13/attachment.sig>

From chr... at gmail.com  Thu Oct 18 18:06:06 2007
From: chr... at gmail.com (Christer Sandberg)
Date: Thu, 18 Oct 2007 20:06:06 +0200
Subject: [ragel-users] Re: [newbie] parsing CSS style
In-Reply-To: <47178650.4070...@cs.queensu.ca>
References: <1192695167.303804.101...@v29g2000prd.googlegroups.com>
	 <47176A13.9080...@cs.queensu.ca>
	 <1192721498.210586.302...@y27g2000pre.googlegroups.com>
	 <47178650.4070...@cs.queensu.ca>
Message-ID: <13f6d2440710181106u2b3a56fao6eda9728eb15c0dc@mail.gmail.com>

I haven't followed the discussion closely because I'm at work.
But to my knowledge (out of my head), properties in CSS dosen't have to
en in a ';' if it's the only one for the selector.

I've been/am constructing a CSS parser with ragel and it's almost CSS
2.1 grammar complete, except for the error handling. Which I have in
my workspace but not in the SVN repository.

You can have a look at http://code.google.com/p/ruby-cssparser
It's coded in C as a Ruby module.

Christer

On 10/18/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> Sounds to me that Ragel is not the right tool for you. Ragel is designed
> for single-pass parsing where actions are executed as you move over the
> data. Perhaps a more traditional approach where you build the parse tree
> first, then walk it would be more appropriate in your case. Something
> like ANTLR or Lex+YACC might be better.
>
> Adrian
>
> Mat| wrote:
> > Hello,
> >
> > First of all thanks for the quick answer!!!
> >
> > On Oct 18, 4:13 pm, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> >>> - I have got a problem (maybe more than one but I could only
> >>> detect one !) with my machines, indeed in my expressions I always
> >>> have a terminating ";" character but for some reason the style_item
> >>> action is executed even if there is no terminating ";". For example,
> >>> if I use "background: green" as an input string, the style_item is
> >>> going to be executed but it should not because there is no ";" at
> >>> the end.
> >> Do you mean style_item_value action? The style_item action will get
> >> executed when leaving the name portion, in this case on the colon.
> >>
> >
> > I am talking about the style_item action. I want it to be executed
> > only
> > when it's "complete", for me it means that everything has been
> > processed up to a ";". For the moment as your are pointing out it
> > is executed on the colon even if there is no ";" at the end (when
> > there
> > is no ";" the style machine should raise an error).
> >
> > How can I change the .rl file to obey to this behaviour ?
> > I am a bit lost.
> >
> > Cheers
> >
> >
> > > >
> >
>
>
>


From thurs... at cs.queensu.ca  Wed Oct 24 18:48:26 2007
From: thurs... at cs.queensu.ca (=?utf-8?B?QWRyaWFuIFRodXJzdG9u?=)
Date: Wed, 24 Oct 2007 18:48:26 +0000
Subject: new for 6.0: frontend calls backed
Message-ID: <781331702-1193251680-cardhu_decombobulator_blackberry.rim.net-1758681022-@bxe033.bisx.prod.on.blackberry>

Hi,

I just committed new behavior. The ragel program now executes frontend and backend processes. No more pipes or temporary files, it is done automatically (with a temp). The frontend is the ragel program with the -f option. The backend program is chosen automatically.  

Adrian


From pat.ey... at gmail.com  Thu Oct 25 17:28:14 2007
From: pat.ey... at gmail.com (pat eyler)
Date: Thu, 25 Oct 2007 11:28:14 -0600
Subject: MountainWest RubyConf 2008
In-Reply-To: <6fd0654b0710251021r6d6dcebdu53cbda6a9dfa5...@mail.gmail.com>
References: <6fd0654b0710251019p6aa89cb8ncd95bbfa603b9...@mail.gmail.com>
	 <6fd0654b0710251020v72c913a6wd81b442e09192...@mail.gmail.com>
	 <6fd0654b0710251021r6d6dcebdu53cbda6a9dfa5...@mail.gmail.com>
Message-ID: <6fd0654b0710251028x33bf09bexd32780db322479f2@mail.gmail.com>

MountainWest RubyConf 2008 is scheduled for March 28 and 29, 2008.
It will be in Salt Lake City, at the same great venue we had last year, and
it is again our intent to record and make available all the talks under a
Creative Commons, Share-Alike license -- you can see last year's talks here:
        http://mtnwestrubyconf2007.confreaks.com/

If you've been working on a problem or project in Ruby, this is a great
opportunity to talk about it.  We looking for short (250-500 word) proposals
outlining the content and target audience for your talk.  Proposals will be
accepted until Midnight (MST) on Dec 31st.  Our selection committee will
then review the proposals, select the primary and alternate presenters, and
contact them in January of 2008.

We're looking for all sorts of Ruby and RoR related talks (and talks that
aren't strictly Ruby related but which would be of interest to rubyists).
Talks will be 45 minutes in length, and should allow some time for
audience questions.  If you'd prefer something shorter, we're hoping to run
lightning talk sessions on Friday and Saturday, with 8-10 five minute
presentations each session -- proposals are not required for lightning talks.

Proposals should be submitted to me:  p... at mtnwestruby.org

Last year, we received a number of high quality proposals for talks at the
2007 MountainWest RubyConf.  These talks made our regional conference
a huge success.  This year, we're hoping to do even better but we're going
to need your help -- please, propose a talk and plan on coming to enjoy this
regional conference.


-- 
thanks,
-pate
-------------------------
   Duty makes us do things, Love make us do things well.
http://on-ruby.blogspot.com       http://on-erlang.blogspot.com
          http://on-soccer.blogspot.com


From gasp... at teti.ch  Wed Oct 31 07:58:21 2007
From: gasp... at teti.ch (Gaspard Bucher)
Date: Wed, 31 Oct 2007 07:58:21 -0000
Subject: Is this the right way to do it ?
Message-ID: <1193817501.221237.216530@22g2000hsm.googlegroups.com>

I am implementing a parser to read commands from user (interactive) or
from a stored file. The idea is to build the objects and their
relation inside rubyk (http://rubyk.org). Some examples of the syntax:

create a metronome object: m1 = Metro(120)
create a metronome object: m1 = Metro(metro:120) # same as above
create a note out object:     n  = NoteOut(velocity:80 port:"funk")
create a script object:         cooking = Script(".... Lua code ....")
create links:               m1.1 => 1.cooking, cooking.1 =>
1.n

Here is a rough prototype to implement the parsing using ragel (have
been using flex/lemon).

Am I doing this right ? More precisely :
1. is there a better way to extract token values ( instead of by
repeated @a appends) ?
2. would it be simpler to use ragel only for building the tokens and
let lemon handle the actions ?

Thanks for your answers.

Gaspard

=================== prototype.rl ========
#include <iostream>
#include <cstdio>
#define MAX_BUFFER_SIZE 2048

%%{
  machine foo;
  write data noerror;
}%%

class Command
{
public:
  void parse(char * str)
  {
    char *p = str; // data pointer
    char *pe = str + strlen(str); // past end
    int cs;        // machine state
    int len = 0;
    char token[MAX_BUFFER_SIZE + 1];

    %%{
      action a {
        if (len >= MAX_BUFFER_SIZE) {
          std::cerr << "Buffer overflow !" << std::endl;
          // stop parsing
          return;
        }
        token[len] = fc; /* append */
        len++;
      }

      action set_var {
        token[len] = '\0';
        mVariable = token;
        len = 0;
      }

      action key {
        token[len] = '\0';
        std::cout << "[key   :" << token << "]" << std::endl;
        len = 0;
      }

      action set_klass {
        token[len] = '\0';
        mClass = token;
        len = 0;
      }

      action space {
        printf(" ");
      }

      action ret {
        printf("\n");
      }

      action set_string {
        token[len] = '\0';
        mValue = token;
        len = 0;
      }

      action set_float {
        token[len] = '\0';
        mValue = token;
        len = 0;
      }

      action set_integer {
        token[len] = '\0';
        mValue = token;
        len = 0;
      }

      action set_from {
        mFromPort = atoi(mValue.c_str());
        mFrom = mVariable;
      }

      action create_instance {
        std::cout << "NEW  (" << mVariable << "=" << mClass << "()" <<
")" << std::endl;
      }

      action create_link {
        mToPort = atoi(mValue.c_str());
        mTo   = mVariable;
        std::cout << "LINK (" << mFrom << "." << mFromPort << "=>" <<
mToPort << "." << mTo << ")" << std::endl;
      }

      ws     = (' ' | '\n' | '\t')+;

      identifier = 'a'..'z' @a (digit | alpha | '_')* @a;

      var    = identifier %set_var;

      klass  = 'A'..'Z' @a (digit | alpha | '_')* @a %set_klass;

      string  = '"' ([^"\\] | '\n' | ( '\\' (any | '\n') ))* @a
%set_string '"';
      float   = ('1'..'9' @a digit* @a '.' @a digit+ @a) %set_float;
      integer = ('1'..'9' @a digit* @a) %set_integer;

      value  = (string | float | integer);

      key    = identifier %key;

      param  = (key ':' ws* value);

      parameters = value | (param ws*)+;

      create_instance = var ws* '=' ws* klass '(' parameters? ')'
@create_instance;

      create_link = var '.' integer @set_from ws* '=>' ws* integer '.'
var @create_link;

      main := ((create_instance | create_link) ws*)+  ;

      write init;
      write exec;
    }%%

    printf("\n");
  }
private:
  std::string mVariable, mFrom, mTo, mClass, mValue;
  int         mFromPort,     mToPort;
};

int main()
{
  Command cmd;
  cmd.parse("a=Value() b=Super(23.3)c=This(hey:\"mosdffasl\" come:
3)\na.1=>1.b a.2=>2.b");
}
===========================


From thurs... at cs.queensu.ca  Wed Oct 31 15:35:14 2007
From: thurs... at cs.queensu.ca (=?utf-8?B?QWRyaWFuIFRodXJzdG9u?=)
Date: Wed, 31 Oct 2007 15:35:14 +0000
Subject: [ragel-users] Is this the right way to do it ?
In-Reply-To: <1193817501.221237.216530@22g2000hsm.googlegroups.com>
References: <1193817501.221237.216530@22g2000hsm.googlegroups.com>
Message-ID: <1216083823-1193844882-cardhu_decombobulator_blackberry.rim.net-711112415-@bxe011.bisx.prod.on.blackberry>

Hi Gaspard,

The other way to catpure token text is to set pointers to mark the start and end of tokens. It is faster but requires that you be careful about buffer boundaries.

In my opinion this is a valid way to parse and the motivation is speed. However if speed is not a requirement and you're dealing with a token stream I would suggest that you use the more traditional lexer+parser approach.

Adrian

-----Original Message-----
From: Gaspard Bucher <gaspard at teti.ch>

Date: Wed, 31 Oct 2007 07:58:21 
To:ragel-users <ragel-users at googlegroups.com>
Subject: [ragel-users] Is this the right way to do it ?



I am implementing a parser to read commands from user (interactive) or
from a stored file. The idea is to build the objects and their
relation inside rubyk (http://rubyk.org). Some examples of the syntax:

create a metronome object: m1 = Metro(120)
create a metronome object: m1 = Metro(metro:120) # same as above
create a note out object:     n  = NoteOut(velocity:80 port:"funk")
create a script object:         cooking = Script(".... Lua code ....")
create links:               m1.1 => 1.cooking, cooking.1 =>
1.n

Here is a rough prototype to implement the parsing using ragel (have
been using flex/lemon).

Am I doing this right ? More precisely :
1. is there a better way to extract token values ( instead of by
repeated @a appends) ?
2. would it be simpler to use ragel only for building the tokens and
let lemon handle the actions ?

Thanks for your answers.

Gaspard

=================== prototype.rl ========
#include <iostream>
#include <cstdio>
#define MAX_BUFFER_SIZE 2048

%%{
  machine foo;
  write data noerror;
}%%

class Command
{
public:
  void parse(char * str)
  {
    char *p = str; // data pointer
    char *pe = str + strlen(str); // past end
    int cs;        // machine state
    int len = 0;
    char token[MAX_BUFFER_SIZE + 1];

    %%{
      action a {
        if (len >= MAX_BUFFER_SIZE) {
          std::cerr << "Buffer overflow !" << std::endl;
          // stop parsing
          return;
        }
        token[len] = fc; /* append */
        len++;
      }

      action set_var {
        token[len] = '\0';
        mVariable = token;
        len = 0;
      }

      action key {
        token[len] = '\0';
        std::cout << "[key   :" << token << "]" << std::endl;
        len = 0;
      }

      action set_klass {
        token[len] = '\0';
        mClass = token;
        len = 0;
      }

      action space {
        printf(" ");
      }

      action ret {
        printf("\n");
      }

      action set_string {
        token[len] = '\0';
        mValue = token;
        len = 0;
      }

      action set_float {
        token[len] = '\0';
        mValue = token;
        len = 0;
      }

      action set_integer {
        token[len] = '\0';
        mValue = token;
        len = 0;
      }

      action set_from {
        mFromPort = atoi(mValue.c_str());
        mFrom = mVariable;
      }

      action create_instance {
        std::cout << "NEW  (" << mVariable << "=" << mClass << "()" <<
")" << std::endl;
      }

      action create_link {
        mToPort = atoi(mValue.c_str());
        mTo   = mVariable;
        std::cout << "LINK (" << mFrom << "." << mFromPort << "=>" <<
mToPort << "." << mTo << ")" << std::endl;
      }

      ws     = (' ' | '\n' | '\t')+;

      identifier = 'a'..'z' @a (digit | alpha | '_')* @a;

      var    = identifier %set_var;

      klass  = 'A'..'Z' @a (digit | alpha | '_')* @a %set_klass;

      string  = '"' ([^"\\] | '\n' | ( '\\' (any | '\n') ))* @a
%set_string '"';
      float   = ('1'..'9' @a digit* @a '.' @a digit+ @a) %set_float;
      integer = ('1'..'9' @a digit* @a) %set_integer;

      value  = (string | float | integer);

      key    = identifier %key;

      param  = (key ':' ws* value);

      parameters = value | (param ws*)+;

      create_instance = var ws* '=' ws* klass '(' parameters? ')'
@create_instance;

      create_link = var '.' integer @set_from ws* '=>' ws* integer '.'
var @create_link;

      main := ((create_instance | create_link) ws*)+  ;

      write init;
      write exec;
    }%%

    printf("\n");
  }
private:
  std::string mVariable, mFrom, mTo, mClass, mValue;
  int         mFromPort,     mToPort;
};

int main()
{
  Command cmd;
  cmd.parse("a=Value() b=Super(23.3)c=This(hey:\"mosdffasl\" come:
3)\na.1=>1.b a.2=>2.b");
}
===========================





From gasp... at teti.ch  Wed Oct 31 17:07:55 2007
From: gasp... at teti.ch (Gaspard Bucher)
Date: Wed, 31 Oct 2007 18:07:55 +0100
Subject: [ragel-users] Re: Is this the right way to do it ?
In-Reply-To: <1216083823-1193844882-cardhu_decombobulator_blackberry.rim.net-7111124...@bxe011.bisx.prod.on.blackberry>
References: <1193817501.221237.216...@22g2000hsm.googlegroups.com>
	 <1216083823-1193844882-cardhu_decombobulator_blackberry.rim.net-7111124...@bxe011.bisx.prod.on.blackberry>
Message-ID: <7a9f744a0710311007t7ebfca53v93d84c295fbec29c@mail.gmail.com>

Speed was not the main issue for choosing ragel: gluing my Command
class with the lexer and lemon was not easy and felt unnatural. The
way ragel works is very intuitive to me. Moreover, I had a grief
against lemon: when the current state is terminal (only a default
action which is a 'resolve'), it still needs one more token (or EOF)
to trigger the reduction.

Rubyk (the tool I am working on) is about multimedia and AI, so state
machines feels like home and learning about ragel might help me for
the music production (networks of possible melodies with paths chosen
from the pattern recognition). Music is a state machine !

I think I am becoming a fan of ragel. I might also use it to parse
zafu templates and zazen (textile improved) for the CMS I am working
on (http://zenadmin.org).

Ragel is the kind of goodie that puts you into the state "I should
rewrite this using ragel" a couple of times a day... So I am very glad
flex/lemon were not such good friends (even though lemon is really
nice to use).

Thanks for the reply. I feel more confident with the way I am doing things.

Gaspard

2007/10/31, Adrian Thurston <thurs... at cs.queensu.ca>:
> Hi Gaspard,
>
> The other way to catpure token text is to set pointers to mark the start and end of tokens. It is faster but requires that you be careful about buffer boundaries.
>
> In my opinion this is a valid way to parse and the motivation is speed. However if speed is not a requirement and you're dealing with a token stream I would suggest that you use the more traditional lexer+parser approach.
>
> Adrian
>
> -----Original Message-----
> From: Gaspard Bucher <gasp... at teti.ch>
>
> Date: Wed, 31 Oct 2007 07:58:21
> To:ragel-users <ragel-users at googlegroups.com>
> Subject: [ragel-users] Is this the right way to do it ?
>
>
>
> I am implementing a parser to read commands from user (interactive) or
> from a stored file. The idea is to build the objects and their
> relation inside rubyk (http://rubyk.org). Some examples of the syntax:
>
> create a metronome object: m1 = Metro(120)
> create a metronome object: m1 = Metro(metro:120) # same as above
> create a note out object:     n  = NoteOut(velocity:80 port:"funk")
> create a script object:         cooking = Script(".... Lua code ....")
> create links:               m1.1 => 1.cooking, cooking.1 =>
> 1.n
>
> Here is a rough prototype to implement the parsing using ragel (have
> been using flex/lemon).
>
> Am I doing this right ? More precisely :
> 1. is there a better way to extract token values ( instead of by
> repeated @a appends) ?
> 2. would it be simpler to use ragel only for building the tokens and
> let lemon handle the actions ?
>
> Thanks for your answers.
>
> Gaspard
>
> =================== prototype.rl ========
> #include <iostream>
> #include <cstdio>
> #define MAX_BUFFER_SIZE 2048
>
> %%{
>   machine foo;
>   write data noerror;
> }%%
>
> class Command
> {
> public:
>   void parse(char * str)
>   {
>     char *p = str; // data pointer
>     char *pe = str + strlen(str); // past end
>     int cs;        // machine state
>     int len = 0;
>     char token[MAX_BUFFER_SIZE + 1];
>
>     %%{
>       action a {
>         if (len >= MAX_BUFFER_SIZE) {
>           std::cerr << "Buffer overflow !" << std::endl;
>           // stop parsing
>           return;
>         }
>         token[len] = fc; /* append */
>         len++;
>       }
>
>       action set_var {
>         token[len] = '\0';
>         mVariable = token;
>         len = 0;
>       }
>
>       action key {
>         token[len] = '\0';
>         std::cout << "[key   :" << token << "]" << std::endl;
>         len = 0;
>       }
>
>       action set_klass {
>         token[len] = '\0';
>         mClass = token;
>         len = 0;
>       }
>
>       action space {
>         printf(" ");
>       }
>
>       action ret {
>         printf("\n");
>       }
>
>       action set_string {
>         token[len] = '\0';
>         mValue = token;
>         len = 0;
>       }
>
>       action set_float {
>         token[len] = '\0';
>         mValue = token;
>         len = 0;
>       }
>
>       action set_integer {
>         token[len] = '\0';
>         mValue = token;
>         len = 0;
>       }
>
>       action set_from {
>         mFromPort = atoi(mValue.c_str());
>         mFrom = mVariable;
>       }
>
>       action create_instance {
>         std::cout << "NEW  (" << mVariable << "=" << mClass << "()" <<
> ")" << std::endl;
>       }
>
>       action create_link {
>         mToPort = atoi(mValue.c_str());
>         mTo   = mVariable;
>         std::cout << "LINK (" << mFrom << "." << mFromPort << "=>" <<
> mToPort << "." << mTo << ")" << std::endl;
>       }
>
>       ws     = (' ' | '\n' | '\t')+;
>
>       identifier = 'a'..'z' @a (digit | alpha | '_')* @a;
>
>       var    = identifier %set_var;
>
>       klass  = 'A'..'Z' @a (digit | alpha | '_')* @a %set_klass;
>
>       string  = '"' ([^"\\] | '\n' | ( '\\' (any | '\n') ))* @a
> %set_string '"';
>       float   = ('1'..'9' @a digit* @a '.' @a digit+ @a) %set_float;
>       integer = ('1'..'9' @a digit* @a) %set_integer;
>
>       value  = (string | float | integer);
>
>       key    = identifier %key;
>
>       param  = (key ':' ws* value);
>
>       parameters = value | (param ws*)+;
>
>       create_instance = var ws* '=' ws* klass '(' parameters? ')'
> @create_instance;
>
>       create_link = var '.' integer @set_from ws* '=>' ws* integer '.'
> var @create_link;
>
>       main := ((create_instance | create_link) ws*)+  ;
>
>       write init;
>       write exec;
>     }%%
>
>     printf("\n");
>   }
> private:
>   std::string mVariable, mFrom, mTo, mClass, mValue;
>   int         mFromPort,     mToPort;
> };
>
> int main()
> {
>   Command cmd;
>   cmd.parse("a=Value() b=Super(23.3)c=This(hey:\"mosdffasl\" come:
> 3)\na.1=>1.b a.2=>2.b");
> }
> ===========================
>
>
>
>
>
> >
>


From thurs... at cs.queensu.ca  Wed Oct 31 17:20:59 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Wed, 31 Oct 2007 13:20:59 -0400
Subject: [ragel-users] Re: Is this the right way to do it ?
In-Reply-To: <7a9f744a0710311007t7ebfca53v93d84c295fbec29c@mail.gmail.com>
References: <1193817501.221237.216530@22g2000hsm.googlegroups.com> <1216083823-1193844882-cardhu_decombobulator_blackberry.rim.net-711112415-@bxe011.bisx.prod.on.blackberry> <7a9f744a0710311007t7ebfca53v93d84c295fbec29c@mail.gmail.com>
Message-ID: <4728B97B.5060709@cs.queensu.ca>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Ah I see.

Another approach you might want to consider is to chain two ragel
machines together. Others have had success with this. There is an
example in test/high1.rl in the source distribution.

Adrian

Gaspard Bucher wrote:
> Speed was not the main issue for choosing ragel: gluing my Command
> class with the lexer and lemon was not easy and felt unnatural. The
> way ragel works is very intuitive to me. Moreover, I had a grief
> against lemon: when the current state is terminal (only a default
> action which is a 'resolve'), it still needs one more token (or EOF)
> to trigger the reduction.
> 
> Rubyk (the tool I am working on) is about multimedia and AI, so state
> machines feels like home and learning about ragel might help me for
> the music production (networks of possible melodies with paths chosen
> from the pattern recognition). Music is a state machine !
> 
> I think I am becoming a fan of ragel. I might also use it to parse
> zafu templates and zazen (textile improved) for the CMS I am working
> on (http://zenadmin.org).
> 
> Ragel is the kind of goodie that puts you into the state "I should
> rewrite this using ragel" a couple of times a day... So I am very glad
> flex/lemon were not such good friends (even though lemon is really
> nice to use).
> 
> Thanks for the reply. I feel more confident with the way I am doing things.
> 
> Gaspard
> 
> 2007/10/31, Adrian Thurston <thurs... at cs.queensu.ca>:
>> Hi Gaspard,
>>
>> The other way to catpure token text is to set pointers to mark the start and end of tokens. It is faster but requires that you be careful about buffer boundaries.
>>
>> In my opinion this is a valid way to parse and the motivation is speed. However if speed is not a requirement and you're dealing with a token stream I would suggest that you use the more traditional lexer+parser approach.
>>
>> Adrian
>>
>> -----Original Message-----
>> From: Gaspard Bucher <gasp... at teti.ch>
>>
>> Date: Wed, 31 Oct 2007 07:58:21
>> To:ragel-users <ragel-users at googlegroups.com>
>> Subject: [ragel-users] Is this the right way to do it ?
>>
>>
>>
>> I am implementing a parser to read commands from user (interactive) or
>> from a stored file. The idea is to build the objects and their
>> relation inside rubyk (http://rubyk.org). Some examples of the syntax:
>>
>> create a metronome object: m1 = Metro(120)
>> create a metronome object: m1 = Metro(metro:120) # same as above
>> create a note out object:     n  = NoteOut(velocity:80 port:"funk")
>> create a script object:         cooking = Script(".... Lua code ....")
>> create links:               m1.1 => 1.cooking, cooking.1 =>
>> 1.n
>>
>> Here is a rough prototype to implement the parsing using ragel (have
>> been using flex/lemon).
>>
>> Am I doing this right ? More precisely :
>> 1. is there a better way to extract token values ( instead of by
>> repeated @a appends) ?
>> 2. would it be simpler to use ragel only for building the tokens and
>> let lemon handle the actions ?
>>
>> Thanks for your answers.
>>
>> Gaspard
>>
>> =================== prototype.rl ========
>> #include <iostream>
>> #include <cstdio>
>> #define MAX_BUFFER_SIZE 2048
>>
>> %%{
>>   machine foo;
>>   write data noerror;
>> }%%
>>
>> class Command
>> {
>> public:
>>   void parse(char * str)
>>   {
>>     char *p = str; // data pointer
>>     char *pe = str + strlen(str); // past end
>>     int cs;        // machine state
>>     int len = 0;
>>     char token[MAX_BUFFER_SIZE + 1];
>>
>>     %%{
>>       action a {
>>         if (len >= MAX_BUFFER_SIZE) {
>>           std::cerr << "Buffer overflow !" << std::endl;
>>           // stop parsing
>>           return;
>>         }
>>         token[len] = fc; /* append */
>>         len++;
>>       }
>>
>>       action set_var {
>>         token[len] = '\0';
>>         mVariable = token;
>>         len = 0;
>>       }
>>
>>       action key {
>>         token[len] = '\0';
>>         std::cout << "[key   :" << token << "]" << std::endl;
>>         len = 0;
>>       }
>>
>>       action set_klass {
>>         token[len] = '\0';
>>         mClass = token;
>>         len = 0;
>>       }
>>
>>       action space {
>>         printf(" ");
>>       }
>>
>>       action ret {
>>         printf("\n");
>>       }
>>
>>       action set_string {
>>         token[len] = '\0';
>>         mValue = token;
>>         len = 0;
>>       }
>>
>>       action set_float {
>>         token[len] = '\0';
>>         mValue = token;
>>         len = 0;
>>       }
>>
>>       action set_integer {
>>         token[len] = '\0';
>>         mValue = token;
>>         len = 0;
>>       }
>>
>>       action set_from {
>>         mFromPort = atoi(mValue.c_str());
>>         mFrom = mVariable;
>>       }
>>
>>       action create_instance {
>>         std::cout << "NEW  (" << mVariable << "=" << mClass << "()" <<
>> ")" << std::endl;
>>       }
>>
>>       action create_link {
>>         mToPort = atoi(mValue.c_str());
>>         mTo   = mVariable;
>>         std::cout << "LINK (" << mFrom << "." << mFromPort << "=>" <<
>> mToPort << "." << mTo << ")" << std::endl;
>>       }
>>
>>       ws     = (' ' | '\n' | '\t')+;
>>
>>       identifier = 'a'..'z' @a (digit | alpha | '_')* @a;
>>
>>       var    = identifier %set_var;
>>
>>       klass  = 'A'..'Z' @a (digit | alpha | '_')* @a %set_klass;
>>
>>       string  = '"' ([^"\\] | '\n' | ( '\\' (any | '\n') ))* @a
>> %set_string '"';
>>       float   = ('1'..'9' @a digit* @a '.' @a digit+ @a) %set_float;
>>       integer = ('1'..'9' @a digit* @a) %set_integer;
>>
>>       value  = (string | float | integer);
>>
>>       key    = identifier %key;
>>
>>       param  = (key ':' ws* value);
>>
>>       parameters = value | (param ws*)+;
>>
>>       create_instance = var ws* '=' ws* klass '(' parameters? ')'
>> @create_instance;
>>
>>       create_link = var '.' integer @set_from ws* '=>' ws* integer '.'
>> var @create_link;
>>
>>       main := ((create_instance | create_link) ws*)+  ;
>>
>>       write init;
>>       write exec;
>>     }%%
>>
>>     printf("\n");
>>   }
>> private:
>>   std::string mVariable, mFrom, mTo, mClass, mValue;
>>   int         mFromPort,     mToPort;
>> };
>>
>> int main()
>> {
>>   Command cmd;
>>   cmd.parse("a=Value() b=Super(23.3)c=This(hey:\"mosdffasl\" come:
>> 3)\na.1=>1.b a.2=>2.b");
>> }
>> ===========================
>>
>>
>>
>>
>>
> 
> > 
> 
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.6 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iD8DBQFHKLkHUP5HJ33BlvsRAlsiAKCXWKXJiVG+6RVZX39ZTPT14lzsRQCfatUZ
TkWrPWrHNm1rKYU7GTGWC+Y=
=oRvQ
-----END PGP SIGNATURE-----


From cremes.devl... at mac.com  Tue Oct  2 03:18:30 2007
From: cremes.devl... at mac.com (Chuck Remes)
Date: Mon, 1 Oct 2007 22:18:30 -0500
Subject: ragel 5.24 ruby examples?
Message-ID: <4886D6FD-FB37-460E-AD54-2C4B9E5E1955@mac.com>

Anyone have any sample code showing how to embed ragel FSMs inside a  
ruby program? 


From thurs... at cs.queensu.ca  Tue Oct  2 15:18:56 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Tue, 02 Oct 2007 11:18:56 -0400
Subject: [ragel-users] ragel 5.24 ruby examples?
In-Reply-To: <4886D6FD-FB37-460E-AD54-2C4B9E5E1955@mac.com>
References: <4886D6FD-FB37-460E-AD54-2C4B9E5E1955@mac.com>
Message-ID: <47026160.7010405@cs.queensu.ca>

Hi,

Grab the source tarball and look in the test directory for files that
contain 'LANG: ruby'.

If you want to make an C-based extension look at the Mongrel or Hpricot
sources.

Adrian

Chuck Remes wrote:
> Anyone have any sample code showing how to embed ragel FSMs inside a  
> ruby program? 
> 
> --~--~---------~--~----~------------~-------~--~----~
> You received this message because you are subscribed to the Google Groups "ragel-users" group.
> To post to this group, send email to ragel-users at googlegroups.com
> To unsubscribe from this group, send email to ragel-users-unsubscribe at googlegroups.com
> For more options, visit this group at http://groups.google.com/group/ragel-users?hl=en
> -~----------~----~----~----~------~----~------~--~---
> 
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20071002/26e6bc71/attachment-0001.sig>

From thurs... at cs.queensu.ca  Wed Oct  3 17:15:33 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Wed, 03 Oct 2007 13:15:33 -0400
Subject: [ragel-users] Re: Ruby and Java code generation
In-Reply-To: <46FEA0A2.1060802@cs.queensu.ca>
References: <46FD4FAD.8040708@cs.queensu.ca> <D3E9C3CA-A822-4D6C-B758-885B27D8747C@gmail.com> <46FD5E36.1090407@cs.queensu.ca> <46FD7ED0.7000101@cs.queensu.ca> <27BCED9F-A9B8-4948-A7BA-77010DB2600E@atlasocean.com> <46FEA0A2.1060802@cs.queensu.ca>
Message-ID: <4703CE35.1030509@cs.queensu.ca>

Update: I just checked in a new driver for Ruby. Ruby code generation is
now also current. Gotos are emulated using a series of if statements.

-Adrian

Adrian Thurston wrote:
> I just checked-in a java driver that uses a switch statement in place of
> gotos. Indeed it works well. Java code generation is now current.
> 
> -Adrian
> 
> Erich Ocean wrote:
>> Adrian,
>>
>> Duff's device can be used with Java, so you might be able to use that  
>> technique to jump back into the middle of the processing loop.
>>
>> See http://www.chiark.greenend.org.uk/~sgtatham/coroutines.html for  
>> an example.
>>
>> Best, Erich
>>
>> On Sep 28, 2007, at 3:23 PM, Adrian Thurston wrote:
>>
>>> Hi,
>>>
>>> What is now needed in Ruby and Java code is a jump back into the
>>> processing loop just like that found at rlgen-cd/tabcodegen.cpp:1041.
>>>
>>> -Adrian
>>>
>>> Adrian Thurston wrote:
>>>> Before loop breaks and variables were used in Ruby code call/cc  
>>>> features
>>>> were used. This was found to be very slow (about 10 times slower than
>>>> the current). Do you think throw/catch would be any better than  
>>>> call/cc?
>>>>
>>>> Later today I'm going to commit my work on the C version. I'll  
>>>> highlight
>>>> the part that is troublesome and maybe someone that knows Java and  
>>>> Ruby
>>>> well can suggest something.
>>>>
>>>> Adrian
>>>>
>>>> Ryan King wrote:
>>>>> On Sep 28, 2007, at 12:02 PM, Adrian Thurston wrote:
>>>>>> Hi,
>>>>>>
>>>>>> I'm having some trouble with Ruby and Java code generation as I
>>>>>> implement 6.0 features. The main problem with targeting both of  
>>>>>> these
>>>>>> languages is the lack of goto statement. This is problematic  
>>>>>> even for
>>>>>> the table-driven machine. There are a number of places in the  
>>>>>> driver
>>>>>> where a jump in or jump out of the processing loop is required.  
>>>>>> So far
>>>>>> I've gotten away with using named loops in Java and control flow
>>>>>> variables in Ruby, however with the latest changes things are  
>>>>>> getting
>>>>>> really ugly. I don't have a solution yet. I'm not sure what to do
>>>>>> right
>>>>>> now, so for the time being I will continue ahead with the 6.0  
>>>>>> features
>>>>>> and stall work on Ruby and Java code generation.
>>>>> You can emulate GOTO-ish behavior in ruby with throw and catch:
>>>>>
>>>>>
>>>>> catch(:foo) do
>>>>>   ...
>>>>>   throw(:foo)
>>>>>   ...
>>>>> end
>>>>>
>>>>> There are limits to how the code can be structured in these cases  
>>>>> (in
>>>>> blocks).
>>>>>
>>>>> -ryan
>>>>>
>>
>> --~--~---------~--~----~------------~-------~--~----~
>> You received this message because you are subscribed to the Google Groups "ragel-users" group.
>> To post to this group, send email to ragel-users at googlegroups.com
>> To unsubscribe from this group, send email to ragel-users-unsubscribe at googlegroups.com
>> For more options, visit this group at http://groups.google.com/group/ragel-users?hl=en
>> -~----------~----~----~----~------~----~------~--~---
>>
>>
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20071003/ce37f4c7/attachment-0001.sig>

From cremes.devl... at mac.com  Thu Oct  4 15:14:34 2007
From: cremes.devl... at mac.com (Chuck Remes)
Date: Thu, 4 Oct 2007 10:14:34 -0500
Subject: ruby code generation question
Message-ID: <5C1E4D66-55D0-4F32-A8CA-15876FD5E9E4@mac.com>

I'm writing a scanner using Ragel and Ruby, but I'm coming up against  
a problem that I can't seem to figure out. If I try to wrap the  
machine in a class, I get a peculiar error that it can't figure out.  
Here's a bit of sample code to illustrate.

#
# @LANG: ruby
#


%%{
     machine orcscanner;

     letters = [a-zA-Z]+;
     numbers = [0-9]+;
     spaces = [ \t\n]+;
     other = [\[:\.\]\-=|]+;

     main := |*

             ( numbers | letters | spaces | '{' | '}' | other );

     *|;

}%%

%% write data;


   def parse_line(data)
     p = 0;
     pe = data.length;
     cs = 0;
     tokstart = 0;
     tokend = 0;
     act = 0;

     %% write init;
     %% write exec;
     %% write eof;

     if cs == orcscanner_error
       puts "SCANNER_ERROR"
     end

   end



inp = [
                 "76 } sadf",
                 "Oct  1 09:50:33.37204 [29193]: {test text}"
]

inp.each { |str|
                 puts "input = #{str}"
                 parse_line(str)
         }

This all works just fine (though it does nothing). If I wrap it in a  
class I get an error:

class SomeClass

<code listed above>

inp = [
                 "76 } sadf",
                 "Oct  1 09:50:33.37204 [29193]: {test text}"
]

t = SomeClass.new

inp.each { |str|
                 puts "input = #{str}"
                 t.parse_line(str)
         }

end

Here's the error I get:

t.rb:146:in `parse_line': undefined local variable or method  
`orcscanner_start' for #<SomeClass:0x1cac0> (NameError)
         from t.rb:322
         from t.rb:320:in `each'
         from t.rb:320

Looking at the ruby code I see that orcscanner_start is defined like so:

class << self
         attr_accessor :orcscanner_start
end
self.orcscanner_start = 1;

This is adding a class method #orcscanner_start to the current class  
(self). I guess it works fine when adding to Object (the default  
class) but not my custom class. Why? What am I doing wrong?

The reason I want to do this is so my ragel actions can call methods  
or access variables that are part of my custom class. I have things  
nicely encapsulated.

Thanks for any help or pointers.

cr


From vhbo... at gmail.com  Thu Oct  4 15:36:07 2007
From: vhbo... at gmail.com (Victor Hugo Borja)
Date: Thu, 04 Oct 2007 15:36:07 -0000
Subject: ruby code generation question
In-Reply-To: <5C1E4D66-55D0-4F32-A8CA-15876FD5E9E4@mac.com>
References: <5C1E4D66-55D0-4F32-A8CA-15876FD5E9E4@mac.com>
Message-ID: <1191512167.391056.209320@k79g2000hse.googlegroups.com>

Chuck,

> Looking at the ruby code I see that orcscanner_start is defined like so:
>
> class << self
>          attr_accessor :orcscanner_start
> end
> self.orcscanner_start = 1;
>
> This is adding a class method #orcscanner_start to the current class
> (self). I guess it works fine when adding to Object (the default
> class) but not my custom class. Why? What am I doing wrong?

According to what I understand from your code, the ragel constants are
being added to
your SomeClass' metaclass. You may need to add something like:

class SomeClass
  def initialize
    %% write data;
  end

  # your parse/utility methods here
  ...
end


From cremes.devl... at mac.com  Thu Oct  4 16:33:11 2007
From: cremes.devl... at mac.com (Chuck Remes)
Date: Thu, 4 Oct 2007 11:33:11 -0500
Subject: [ragel-users] Re: ruby code generation question
In-Reply-To: <1191512167.391056.209320@k79g2000hse.googlegroups.com>
References: <5C1E4D66-55D0-4F32-A8CA-15876FD5E9E4@mac.com> <1191512167.391056.209320@k79g2000hse.googlegroups.com>
Message-ID: <5C4E4238-3C76-42C5-8228-3CEDF0406852@mac.com>


On Oct 4, 2007, at 10:36 AM, Victor Hugo Borja wrote:

>
> Chuck,
>
>> Looking at the ruby code I see that orcscanner_start is defined  
>> like so:
>>
>> class << self
>>          attr_accessor :orcscanner_start
>> end
>> self.orcscanner_start = 1;
>>
>> This is adding a class method #orcscanner_start to the current class
>> (self). I guess it works fine when adding to Object (the default
>> class) but not my custom class. Why? What am I doing wrong?
>
> According to what I understand from your code, the ragel constants are
> being added to
> your SomeClass' metaclass. You may need to add something like:
>
> class SomeClass
>   def initialize
>     %% write data;
>   end
>
>   # your parse/utility methods here
>   ...
> end

Does it really matter where '%% write data' appears in the class? I  
currently have that code on its own line outside of any method but  
still inside the class definition.

BTW, I just tried it and it worked! I realize this is probably a ruby- 
specific question, but why did it work when I moved that line to the  
class initializer but nowhere else?


From thurs... at cs.queensu.ca  Thu Oct  4 18:34:59 2007
From: thurs... at cs.queensu.ca (=?utf-8?B?QWRyaWFuIFRodXJzdG9u?=)
Date: Thu, 4 Oct 2007 18:34:59 +0000
Subject: first of the 6.0 changes
Message-ID: <1268825902-1191522894-cardhu_decombobulator_blackberry.rim.net-709777873-@bxe033.bisx.prod.on.blackberry>

Hi,

I've implemented the first of the 6.0 changes. A new variable named eof and of the same type as p and pe must be declared when there are any EOF actions embedded. When there is no more input following (the last run of write exec) it should be set to pe. Otherwise it should be set to null (-1 in the case of Java and Ruby). If EOF can be known only after the input is exhausted then p=pe=eof=buf can be set and the exec code run.

The advantage of indicating EOF in this way is that EOF actions can be moved into the main processing loop and run in the same context as regular actions. They can now adjust p and jump to some other state to resume processing.

Since EOF actions can now backtrack in the input, scanners can use them to 'flush' out the last token. There is no more need to do this manually by sending trailing whitespace or some EOF character.

Adrian


From cmantu... at gmail.com  Thu Oct  4 19:14:26 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Thu, 4 Oct 2007 15:14:26 -0400
Subject: [ragel-users] first of the 6.0 changes
In-Reply-To: <1268825902-1191522894-cardhu_decombobulator_blackberry.rim.net-7097778...@bxe033.bisx.prod.on.blackberry>
References: <1268825902-1191522894-cardhu_decombobulator_blackberry.rim.net-7097778...@bxe033.bisx.prod.on.blackberry>
Message-ID: <cb2ad8b50710041214x674bca6dpa1cedf017b6737a@mail.gmail.com>

On 10/4/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>
>
> Since EOF actions can now backtrack in the input, scanners can use them to 'flush' out
> the last token.
>

Hmm, do I smell the possibility of an inline scanner here? :)

More seriously, are you planning on implementing the "prefix' operator
in this implementation round?

Thanks!

Carlos


-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From thurs... at cs.queensu.ca  Thu Oct  4 19:30:56 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Thu, 04 Oct 2007 15:30:56 -0400
Subject: [ragel-users] Re: first of the 6.0 changes
In-Reply-To: <cb2ad8b50710041214x674bca6dpa1cedf017b6737a@mail.gmail.com>
References: <1268825902-1191522894-cardhu_decombobulator_blackberry.rim.net-709777873-@bxe033.bisx.prod.on.blackberry> <cb2ad8b50710041214x674bca6dpa1cedf017b6737a@mail.gmail.com>
Message-ID: <47053F70.2070304@cs.queensu.ca>

Yes the prefix operator I want to implement. I was planning on doing
that when other function-like syntax comes in.

Adrian

Carlos Antunes wrote:
> On 10/4/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>>
>> Since EOF actions can now backtrack in the input, scanners can use them to 'flush' out
>> the last token.
>>
> 
> Hmm, do I smell the possibility of an inline scanner here? :)
> 
> More seriously, are you planning on implementing the "prefix' operator
> in this implementation round?
> 
> Thanks!
> 
> Carlos
> 
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20071004/2c64cd8e/attachment-0001.sig>

From polus... at gmail.com  Thu Oct  4 20:03:39 2007
From: polus... at gmail.com (Andrei Polushin)
Date: Fri, 05 Oct 2007 03:03:39 +0700
Subject: [ragel-users] first of the 6.0 changes
In-Reply-To: <1268825902-1191522894-cardhu_decombobulator_blackberry.rim.net-7097778...@bxe033.bisx.prod.on.blackberry>
References: <1268825902-1191522894-cardhu_decombobulator_blackberry.rim.net-7097778...@bxe033.bisx.prod.on.blackberry>
Message-ID: <4705471B.7070...@gmail.com>

Adrian Thurston wrote:
> I've implemented the first of the 6.0 changes. A new variable named
> eof and of the same type as p and pe must be declared when there are
> any EOF actions embedded. When there is no more input following (the
> last run of write exec) it should be set to pe. Otherwise it should be
> set to null (-1 in the case of Java and Ruby). If EOF can be known
> only after the input is exhausted then p=pe=eof=buf can be set and the
> exec code run.

Could you rename it to 'peof', please?

(In my present code, I've used the name 'eof' for the character added at the
end of input, and 'peof' is the pointer to that character. It looks like
reasonable to me).

-- 
Andrei Polushin


From thurs... at cs.queensu.ca  Thu Oct  4 20:23:45 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Thu, 04 Oct 2007 16:23:45 -0400
Subject: [ragel-users] Re: first of the 6.0 changes
In-Reply-To: <4705471B.7070608@gmail.com>
References: <1268825902-1191522894-cardhu_decombobulator_blackberry.rim.net-709777873-@bxe033.bisx.prod.on.blackberry> <4705471B.7070608@gmail.com>
Message-ID: <47054BD1.5060907@cs.queensu.ca>

You will be able to override it using the variable statement, like you
can with the other variables.

variable eof peof;

-Adrian

Andrei Polushin wrote:
> Adrian Thurston wrote:
>> I've implemented the first of the 6.0 changes. A new variable named
>> eof and of the same type as p and pe must be declared when there are
>> any EOF actions embedded. When there is no more input following (the
>> last run of write exec) it should be set to pe. Otherwise it should be
>> set to null (-1 in the case of Java and Ruby). If EOF can be known
>> only after the input is exhausted then p=pe=eof=buf can be set and the
>> exec code run.
> 
> Could you rename it to 'peof', please?
> 
> (In my present code, I've used the name 'eof' for the character added at the
> end of input, and 'peof' is the pointer to that character. It looks like
> reasonable to me).
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20071004/9c1c3de8/attachment-0001.sig>

From jonathan.st... at gmail.com  Mon Oct  1 11:48:04 2007
From: jonathan.st... at gmail.com (Jonathan Stott)
Date: Mon, 1 Oct 2007 12:48:04 +0100
Subject: Parsing indented structures (again)
Message-ID: <14cf210a0710010448s4e85c2fax5aac98841e2e8556@mail.gmail.com>

Hi again

I /almost/ have a working parser for my files now, but it isn't quite
working yet and I'm not entirely sure why it is happening.

The problem is that my terminal actions aren't being called, so the
strings I use atoi and atof on lack trailing zeros (and thus have a
random length), so parameters later down the file turn out wrong.
Very wrong if I start parsing file names, I imagine.

I've attached the code I'm working on to test the parser with, since
it's quite complicated to explain.  I apologise for how messy it is,
but the code has been editted quite a lot as I try to make it work...

The file I'm using to test looks like:

# File for testing
x: 100
currents:
  ina: 2 # comment here
  ito: 3
y: 11

and the output says that
x = 100
ina = 200
ito = 300
y = 110

Regards,
Jonathan.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: double.rl
Type: application/octet-stream
Size: 4610 bytes
Desc: not available
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20071001/c4a10e46/attachment-0001.obj>

From thurs... at cs.queensu.ca  Tue Oct  2 15:36:37 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Tue, 02 Oct 2007 11:36:37 -0400
Subject: [ragel-users] Parsing indented structures (again)
In-Reply-To: <14cf210a0710010448s4e85c2fax5aac98841e2e8556@mail.gmail.com>
References: <14cf210a0710010448s4e85c2fax5aac98841e2e8556@mail.gmail.com>
Message-ID: <47026585.7040601@cs.queensu.ca>

Hi Jonathan,

The problem is that leaving actions embedded in the final state of a
scanner pattern action are not executed. In this case it is %term from
double that is not executed.

To solve this lift the term action up into the scanner pattern action.

-Adrian

Jonathan Stott wrote:
> Hi again
> 
> I /almost/ have a working parser for my files now, but it isn't quite
> working yet and I'm not entirely sure why it is happening.
> 
> The problem is that my terminal actions aren't being called, so the
> strings I use atoi and atof on lack trailing zeros (and thus have a
> random length), so parameters later down the file turn out wrong.
> Very wrong if I start parsing file names, I imagine.
> 
> I've attached the code I'm working on to test the parser with, since
> it's quite complicated to explain.  I apologise for how messy it is,
> but the code has been editted quite a lot as I try to make it work...
> 
> The file I'm using to test looks like:
> 
> # File for testing
> x: 100
> currents:
>   ina: 2 # comment here
>   ito: 3
> y: 11
> 
> and the output says that
> x = 100
> ina = 200
> ito = 300
> y = 110
> 
> Regards,
> Jonathan.
> 
> --~--~---------~--~----~------------~-------~--~----~
> You received this message because you are subscribed to the Google Groups "ragel-users" group.
> To post to this group, send email to ragel-users at googlegroups.com
> To unsubscribe from this group, send email to ragel-users-unsubscribe at googlegroups.com
> For more options, visit this group at http://groups.google.com/group/ragel-users?hl=en
> -~----------~----~----~----~------~----~------~--~---
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20071002/e7544f45/attachment-0001.sig>

From thurs... at cs.queensu.ca  Tue Oct  2 22:32:42 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Tue, 02 Oct 2007 18:32:42 -0400
Subject: [ragel-users] Re: Parsing indented structures (again)
In-Reply-To: <47026585.7040601@cs.queensu.ca>
References: <14cf210a0710010448s4e85c2fax5aac98841e2e8556@mail.gmail.com> <47026585.7040601@cs.queensu.ca>
Message-ID: <4702C70A.5090409@cs.queensu.ca>

I recognize that this situation, where actions fail to execute without
warning, is not optimal.

-Adrian

Adrian Thurston wrote:
> Hi Jonathan,
> 
> The problem is that leaving actions embedded in the final state of a
> scanner pattern action are not executed. In this case it is %term from
> double that is not executed.
> 
> To solve this lift the term action up into the scanner pattern action.
> 
> -Adrian
> 
> Jonathan Stott wrote:
>> Hi again
>>
>> I /almost/ have a working parser for my files now, but it isn't quite
>> working yet and I'm not entirely sure why it is happening.
>>
>> The problem is that my terminal actions aren't being called, so the
>> strings I use atoi and atof on lack trailing zeros (and thus have a
>> random length), so parameters later down the file turn out wrong.
>> Very wrong if I start parsing file names, I imagine.
>>
>> I've attached the code I'm working on to test the parser with, since
>> it's quite complicated to explain.  I apologise for how messy it is,
>> but the code has been editted quite a lot as I try to make it work...
>>
>> The file I'm using to test looks like:
>>
>> # File for testing
>> x: 100
>> currents:
>>   ina: 2 # comment here
>>   ito: 3
>> y: 11
>>
>> and the output says that
>> x = 100
>> ina = 200
>> ito = 300
>> y = 110
>>
>> Regards,
>> Jonathan.
>>
>> --~--~---------~--~----~------------~-------~--~----~
>> You received this message because you are subscribed to the Google Groups "ragel-users" group.
>> To post to this group, send email to ragel-users at googlegroups.com
>> To unsubscribe from this group, send email to ragel-users-unsubscribe at googlegroups.com
>> For more options, visit this group at http://groups.google.com/group/ragel-users?hl=en
>> -~----------~----~----~----~------~----~------~--~---
>>
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20071002/3cdfd326/attachment-0001.sig>

From jonathan.st... at gmail.com  Wed Oct  3 09:58:01 2007
From: jonathan.st... at gmail.com (namelessjon)
Date: Wed, 03 Oct 2007 09:58:01 -0000
Subject: Parsing indented structures (again)
In-Reply-To: <4702C70A.5090409@cs.queensu.ca>
References: <14cf210a0710010448s4e85c2fax5aac98841e2e8556@mail.gmail.com>
   <47026585.7040601@cs.queensu.ca>
   <4702C70A.5090409@cs.queensu.ca>
Message-ID: <1191405481.203974.56810@d55g2000hsg.googlegroups.com>

Hi Adrian

It works now, so thanks for the solution (and so quickly). :)
I could tell it wasn't being called, since at one point I had printf
statements in amongst the various actions.  I just couldn't think
why.  It hadn't occurred to me that the scanner action was yanking it
away before that point. In hindsight it was a little obvious.

Is it possible to embed an action in another? As in:

'ina:' double_on_line => {term;array[0] = atof(buffer);};

I am assuming not, as I can't find it in the manual. It would just be
a little neater than the if statements I have now in all the actions,
but ...

Thanks,
Jonathan.

On Oct 2, 11:32 pm, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> I recognize that this situation, where actions fail to execute without
> warning, is not optimal.
>
> -Adrian
>
> Adrian Thurston wrote:
> > Hi Jonathan,
>
> > The problem is that leaving actions embedded in the final state of a
> > scanner pattern action are not executed. In this case it is %term from
> > double that is not executed.
>
> > To solve this lift the term action up into the scanner pattern action.
>
> > -Adrian
>


From thurs... at cs.queensu.ca  Thu Oct  4 22:15:29 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Thu, 04 Oct 2007 18:15:29 -0400
Subject: [ragel-users] Re: Parsing indented structures (again)
In-Reply-To: <1191405481.203974.56810@d55g2000hsg.googlegroups.com>
References: <14cf210a0710010448s4e85c2fax5aac98841e2e8556@mail.gmail.com> <47026585.7040601@cs.queensu.ca> <4702C70A.5090409@cs.queensu.ca> <1191405481.203974.56810@d55g2000hsg.googlegroups.com>
Message-ID: <47056601.3030008@cs.queensu.ca>

Hi Jonathan,

Not currently. This is something I'd like to add to 6.0.

-Adrian

namelessjon wrote:
> Hi Adrian
> 
> It works now, so thanks for the solution (and so quickly). :)
> I could tell it wasn't being called, since at one point I had printf
> statements in amongst the various actions.  I just couldn't think
> why.  It hadn't occurred to me that the scanner action was yanking it
> away before that point. In hindsight it was a little obvious.
> 
> Is it possible to embed an action in another? As in:
> 
> 'ina:' double_on_line => {term;array[0] = atof(buffer);};
> 
> I am assuming not, as I can't find it in the manual. It would just be
> a little neater than the if statements I have now in all the actions,
> but ...
> 
> Thanks,
> Jonathan.
> 
> On Oct 2, 11:32 pm, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>> I recognize that this situation, where actions fail to execute without
>> warning, is not optimal.
>>
>> -Adrian
>>
>> Adrian Thurston wrote:
>>> Hi Jonathan,
>>> The problem is that leaving actions embedded in the final state of a
>>> scanner pattern action are not executed. In this case it is %term from
>>> double that is not executed.
>>> To solve this lift the term action up into the scanner pattern action.
>>> -Adrian
> 
> 
> --~--~---------~--~----~------------~-------~--~----~
> You received this message because you are subscribed to the Google Groups "ragel-users" group.
> To post to this group, send email to ragel-users at googlegroups.com
> To unsubscribe from this group, send email to ragel-users-unsubscribe at googlegroups.com
> For more options, visit this group at http://groups.google.com/group/ragel-users?hl=en
> -~----------~----~----~----~------~----~------~--~---
> 
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20071004/1179239e/attachment-0001.sig>

From cremes.devl... at mac.com  Fri Oct  5 15:47:25 2007
From: cremes.devl... at mac.com (Chuck Remes)
Date: Fri, 5 Oct 2007 10:47:25 -0500
Subject: tuning/optimizing scanners
Message-ID: <19BA7B81-4686-4132-AE02-E325CC0DB108@mac.com>

I've written a log parsing tool using ragel and ruby. I'm using the  
scanner construct to perform the parsing, but things appear to be  
running very slowly. I fear I may have chosen the wrong methodology  
to parse the log. (And yes, I know ruby isn't the quickest language  
out there...) :-)

The log in question is a set of key/value pairs that look like this  
(this is one line):

Oct  1 09:50:33.37204 [29193]: {market = ICE | type = order |  
order_id = 4 | buy = 1 | price = 80.83 | volume = 1 | date =  
2007-10-01 | time = 09:50:33.37201 | metadata = {l={f=Quote|g=4|j=1| 
sid=8290182729}|ac=289182|cf=2881|ca= 289182}}

I'm uninterested in the date and other data at the line start, so I  
throw it away. I primarily search for the key (e.g. 'market = ') and  
then fgoto another machine to parse the value. Upon hitting a pipe  
character, I fgoto main again and look for another key. I pasted in a  
section of the machine below to illustrate.

Is this the correct approach? Is there a superior method for rapidly  
parsing long text strings? Be gentle with me... I'm new to this stuff.

Unfortunately, each log record is a slightly different format (for a  
total of about 15 different formats). I also can't plan on the key/ 
value pairs showing up in the same order every time.

Any suggestions?

----------- snip here ---------------
	feedcode_name = [0-9a-zA-Z\-]+;
	numbers = [0-9]+;

#####
	feedcode := |*
		spaces;

		'|' => { fgoto main; };

		feedcode_name => { temp[:feedcode] = data[tokstart..tokend-1]; };
		any => {puts "ERR: feedcode #{data[tokstart..tokend-1]}"};
	*|;
#####
	volume := |*
		spaces;

		'|' => { fgoto main; };

		numbers => { temp[:quantity] = data[tokstart..tokend].to_i; };
		any => {puts "ERR: volume #{data[tokstart..tokend]}"};
	*|;
#####
         main := |*
					'module = ' => { fgoto module; };

					'market = ' => { fgoto market; };

					'feedcode = ' => { fgoto feedcode; };

					'type = ' => { fgoto type; };

					'order_id = ' => { fgoto order_id; };

					'buy = ' => { fgoto activity; };

					'price = ' => { fgoto price; };

					'volume = ' => { fgoto volume; };

					'date = ' => { fgoto date; };

					'time = ' => { fgoto time; };

					( numbers | letters | spaces | '\n' | '{' | '}' | other | any );
		
         *|;


From thurs... at cs.queensu.ca  Fri Oct  5 16:13:07 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Fri, 05 Oct 2007 12:13:07 -0400
Subject: [ragel-users] tuning/optimizing scanners
In-Reply-To: <19BA7B81-4686-4132-AE02-E325CC0DB108@mac.com>
References: <19BA7B81-4686-4132-AE02-E325CC0DB108@mac.com>
Message-ID: <47066293.506@cs.queensu.ca>

Hi Chuck,

The parsing methodology looks fine to me. There is no undue backtracking.

What version of Ragel are you using?

-Adrian

Chuck Remes wrote:
> I've written a log parsing tool using ragel and ruby. I'm using the  
> scanner construct to perform the parsing, but things appear to be  
> running very slowly. I fear I may have chosen the wrong methodology  
> to parse the log. (And yes, I know ruby isn't the quickest language  
> out there...) :-)
> 
> The log in question is a set of key/value pairs that look like this  
> (this is one line):
> 
> Oct  1 09:50:33.37204 [29193]: {market = ICE | type = order |  
> order_id = 4 | buy = 1 | price = 80.83 | volume = 1 | date =  
> 2007-10-01 | time = 09:50:33.37201 | metadata = {l={f=Quote|g=4|j=1| 
> sid=8290182729}|ac=289182|cf=2881|ca= 289182}}
> 
> I'm uninterested in the date and other data at the line start, so I  
> throw it away. I primarily search for the key (e.g. 'market = ') and  
> then fgoto another machine to parse the value. Upon hitting a pipe  
> character, I fgoto main again and look for another key. I pasted in a  
> section of the machine below to illustrate.
> 
> Is this the correct approach? Is there a superior method for rapidly  
> parsing long text strings? Be gentle with me... I'm new to this stuff.
> 
> Unfortunately, each log record is a slightly different format (for a  
> total of about 15 different formats). I also can't plan on the key/ 
> value pairs showing up in the same order every time.
> 
> Any suggestions?
> 
> ----------- snip here ---------------
> 	feedcode_name = [0-9a-zA-Z\-]+;
> 	numbers = [0-9]+;
> 
> #####
> 	feedcode := |*
> 		spaces;
> 
> 		'|' => { fgoto main; };
> 
> 		feedcode_name => { temp[:feedcode] = data[tokstart..tokend-1]; };
> 		any => {puts "ERR: feedcode #{data[tokstart..tokend-1]}"};
> 	*|;
> #####
> 	volume := |*
> 		spaces;
> 
> 		'|' => { fgoto main; };
> 
> 		numbers => { temp[:quantity] = data[tokstart..tokend].to_i; };
> 		any => {puts "ERR: volume #{data[tokstart..tokend]}"};
> 	*|;
> #####
>          main := |*
> 					'module = ' => { fgoto module; };
> 
> 					'market = ' => { fgoto market; };
> 
> 					'feedcode = ' => { fgoto feedcode; };
> 
> 					'type = ' => { fgoto type; };
> 
> 					'order_id = ' => { fgoto order_id; };
> 
> 					'buy = ' => { fgoto activity; };
> 
> 					'price = ' => { fgoto price; };
> 
> 					'volume = ' => { fgoto volume; };
> 
> 					'date = ' => { fgoto date; };
> 
> 					'time = ' => { fgoto time; };
> 
> 					( numbers | letters | spaces | '\n' | '{' | '}' | other | any );
> 		
>          *|;
> 
> 
> --~--~---------~--~----~------------~-------~--~----~
> You received this message because you are subscribed to the Google Groups "ragel-users" group.
> To post to this group, send email to ragel-users at googlegroups.com
> To unsubscribe from this group, send email to ragel-users-unsubscribe at googlegroups.com
> For more options, visit this group at http://groups.google.com/group/ragel-users?hl=en
> -~----------~----~----~----~------~----~------~--~---
> 
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20071005/788ebc17/attachment-0001.sig>

From cremes.devl... at mac.com  Fri Oct  5 16:25:51 2007
From: cremes.devl... at mac.com (Chuck Remes)
Date: Fri, 5 Oct 2007 11:25:51 -0500
Subject: [ragel-users] Re: tuning/optimizing scanners
In-Reply-To: <47066293.506@cs.queensu.ca>
References: <19BA7B81-4686-4132-AE02-E325CC0DB108@mac.com> <47066293.506@cs.queensu.ca>
Message-ID: <B07B1DDF-FE3B-4B6A-BE9C-7865F73B07D0@mac.com>

Adrian,

I am using ragel 5.24 so I can have ruby support.


On Oct 5, 2007, at 11:13 AM, Adrian Thurston wrote:

> Hi Chuck,
>
> The parsing methodology looks fine to me. There is no undue  
> backtracking.
>
> What version of Ragel are you using?
>
> -Adrian
>
> Chuck Remes wrote:
>> I've written a log parsing tool using ragel and ruby. I'm using the
>> scanner construct to perform the parsing, but things appear to be
>> running very slowly. I fear I may have chosen the wrong methodology
>> to parse the log. (And yes, I know ruby isn't the quickest language
>> out there...) :-)
>>
>> The log in question is a set of key/value pairs that look like this
>> (this is one line):
>>
>> Oct  1 09:50:33.37204 [29193]: {market = ICE | type = order |
>> order_id = 4 | buy = 1 | price = 80.83 | volume = 1 | date =
>> 2007-10-01 | time = 09:50:33.37201 | metadata = {l={f=Quote|g=4|j=1|
>> sid=8290182729}|ac=289182|cf=2881|ca= 289182}}
>>
>> I'm uninterested in the date and other data at the line start, so I
>> throw it away. I primarily search for the key (e.g. 'market = ') and
>> then fgoto another machine to parse the value. Upon hitting a pipe
>> character, I fgoto main again and look for another key. I pasted in a
>> section of the machine below to illustrate.
>>
>> Is this the correct approach? Is there a superior method for rapidly
>> parsing long text strings? Be gentle with me... I'm new to this  
>> stuff.
[snip]


From thurs... at cs.queensu.ca  Fri Oct  5 16:45:26 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Fri, 05 Oct 2007 12:45:26 -0400
Subject: [ragel-users] Re: tuning/optimizing scanners
In-Reply-To: <B07B1DDF-FE3B-4B6A-BE9C-7865F73B07D0@mac.com>
References: <19BA7B81-4686-4132-AE02-E325CC0DB108@mac.com> <47066293.506@cs.queensu.ca> <B07B1DDF-FE3B-4B6A-BE9C-7865F73B07D0@mac.com>
Message-ID: <47066A26.2070900@cs.queensu.ca>

Hmmm, the -F1 option should be the fastest and you may get some marginal
speedups if you make the patterns mutually exclusive and as greedy as
possible, but I suppose I'd have to suggest using C if real speed is
what you're after.

Adrian

Chuck Remes wrote:
> Adrian,
> 
> I am using ragel 5.24 so I can have ruby support.
> 
> 
> On Oct 5, 2007, at 11:13 AM, Adrian Thurston wrote:
> 
>> Hi Chuck,
>>
>> The parsing methodology looks fine to me. There is no undue  
>> backtracking.
>>
>> What version of Ragel are you using?
>>
>> -Adrian
>>
>> Chuck Remes wrote:
>>> I've written a log parsing tool using ragel and ruby. I'm using the
>>> scanner construct to perform the parsing, but things appear to be
>>> running very slowly. I fear I may have chosen the wrong methodology
>>> to parse the log. (And yes, I know ruby isn't the quickest language
>>> out there...) :-)
>>>
>>> The log in question is a set of key/value pairs that look like this
>>> (this is one line):
>>>
>>> Oct  1 09:50:33.37204 [29193]: {market = ICE | type = order |
>>> order_id = 4 | buy = 1 | price = 80.83 | volume = 1 | date =
>>> 2007-10-01 | time = 09:50:33.37201 | metadata = {l={f=Quote|g=4|j=1|
>>> sid=8290182729}|ac=289182|cf=2881|ca= 289182}}
>>>
>>> I'm uninterested in the date and other data at the line start, so I
>>> throw it away. I primarily search for the key (e.g. 'market = ') and
>>> then fgoto another machine to parse the value. Upon hitting a pipe
>>> character, I fgoto main again and look for another key. I pasted in a
>>> section of the machine below to illustrate.
>>>
>>> Is this the correct approach? Is there a superior method for rapidly
>>> parsing long text strings? Be gentle with me... I'm new to this  
>>> stuff.
> [snip]
> 
> --~--~---------~--~----~------------~-------~--~----~
> You received this message because you are subscribed to the Google Groups "ragel-users" group.
> To post to this group, send email to ragel-users at googlegroups.com
> To unsubscribe from this group, send email to ragel-users-unsubscribe at googlegroups.com
> For more options, visit this group at http://groups.google.com/group/ragel-users?hl=en
> -~----------~----~----~----~------~----~------~--~---
> 
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20071005/5d51867f/attachment-0001.sig>

From w... at wincent.com  Fri Oct  5 17:15:33 2007
From: w... at wincent.com (Wincent Colaiuta)
Date: Fri, 5 Oct 2007 19:15:33 +0200
Subject: [ragel-users] Re: tuning/optimizing scanners
In-Reply-To: <47066A26.2070900@cs.queensu.ca>
References: <19BA7B81-4686-4132-AE02-E325CC0DB108@mac.com> <47066293.506@cs.queensu.ca> <B07B1DDF-FE3B-4B6A-BE9C-7865F73B07D0@mac.com> <47066A26.2070900@cs.queensu.ca>
Message-ID: <6A8E3B97-5DDA-4576-B14B-A0FF82C934DC@wincent.com>

El 5/10/2007, a las 18:45, Adrian Thurston escribió:

> Hmmm, the -F1 option should be the fastest and you may get some  
> marginal
> speedups if you make the patterns mutually exclusive and as greedy as
> possible, but I suppose I'd have to suggest using C if real speed is
> what you're after.

And if you want to work from within Ruby, the fact that Ragel  
generates pure C code without any dependencies makes it an ideal  
candidate for insertion into a Ruby extension in C. A few high- 
profile Ruby projects do this, like Mongrel, Hpricot and SuperRedCloth.

Cheers,
Wincent


From cremes.devl... at mac.com  Fri Oct  5 18:04:29 2007
From: cremes.devl... at mac.com (Chuck Remes)
Date: Fri, 5 Oct 2007 13:04:29 -0500
Subject: [ragel-users] Re: tuning/optimizing scanners
In-Reply-To: <47066A26.2070900@cs.queensu.ca>
References: <19BA7B81-4686-4132-AE02-E325CC0DB108@mac.com> <47066293.506@cs.queensu.ca> <B07B1DDF-FE3B-4B6A-BE9C-7865F73B07D0@mac.com> <47066A26.2070900@cs.queensu.ca>
Message-ID: <EE84C847-3CB5-4CC4-A32D-5A79923B373A@mac.com>

The -F1 option is what I was missing! Initially I stayed away from  
those switches due to a note in the docs about not all of them being  
supported for the ruby target. I wanted correctness before I wanted  
speed.

Generating the code with that option resulted in a significant  
performance improvement. My baseline testcase went from 50 seconds  
(wall clock time) to 28 seconds. That's more than adequate for right  
now.

Now that I have my feet wet with ragel I'll be more comfortable  
trying things like generating the C code and interfacing to it from  
my ruby code.

Adrian, thanks for a great tool.

Another question before I drop this line of inquiry. What did you  
mean by "make the patterns mutually exclusive?" So I can understand  
it better, please provide an example of a non-exclusive set and a  
mutually exclusive set of patterns.

cr

On Oct 5, 2007, at 11:45 AM, Adrian Thurston wrote:

> Hmmm, the -F1 option should be the fastest and you may get some  
> marginal
> speedups if you make the patterns mutually exclusive and as greedy as
> possible, but I suppose I'd have to suggest using C if real speed is
> what you're after.
>
> Adrian
>
> Chuck Remes wrote:
>> Adrian,
>>
>> I am using ragel 5.24 so I can have ruby support.
>>
>>
>> On Oct 5, 2007, at 11:13 AM, Adrian Thurston wrote:
>>
>>> Hi Chuck,
>>>
>>> The parsing methodology looks fine to me. There is no undue
>>> backtracking.
>>>
>>> What version of Ragel are you using?
>>>
>>> -Adrian
>>>
>>> Chuck Remes wrote:
>>>> I've written a log parsing tool using ragel and ruby. I'm using the
>>>> scanner construct to perform the parsing, but things appear to be
>>>> running very slowly. I fear I may have chosen the wrong methodology
>>>> to parse the log. (And yes, I know ruby isn't the quickest language
>>>> out there...) :-)
>>>>
>>>> The log in question is a set of key/value pairs that look like this
>>>> (this is one line):
>>>>
>>>> Oct  1 09:50:33.37204 [29193]: {market = ICE | type = order |
>>>> order_id = 4 | buy = 1 | price = 80.83 | volume = 1 | date =
>>>> 2007-10-01 | time = 09:50:33.37201 | metadata = {l={f=Quote|g=4| 
>>>> j=1|
>>>> sid=8290182729}|ac=289182|cf=2881|ca= 289182}}
>>>>
>>>> I'm uninterested in the date and other data at the line start, so I
>>>> throw it away. I primarily search for the key (e.g. 'market = ')  
>>>> and
>>>> then fgoto another machine to parse the value. Upon hitting a pipe
>>>> character, I fgoto main again and look for another key. I pasted  
>>>> in a
>>>> section of the machine below to illustrate.
>>>>
>>>> Is this the correct approach? Is there a superior method for  
>>>> rapidly
>>>> parsing long text strings? Be gentle with me... I'm new to this
>>>> stuff.
>> [snip]
>>
>> >>
>>
>


From thurs... at cs.queensu.ca  Fri Oct  5 19:04:03 2007
From: thurs... at cs.queensu.ca (=?utf-8?B?QWRyaWFuIFRodXJzdG9u?=)
Date: Fri, 5 Oct 2007 19:04:03 +0000
Subject: [ragel-users] Re: tuning/optimizing scanners
In-Reply-To: <EE84C847-3CB5-4CC4-A32D-5A79923B373A@mac.com>
References: <19BA7B81-4686-4132-AE02-E325CC0DB108@mac.com> <47066293.506@cs.queensu.ca> <B07B1DDF-FE3B-4B6A-BE9C-7865F73B07D0@mac.com> <47066A26.2070900@cs.queensu.ca><EE84C847-3CB5-4CC4-A32D-5A79923B373A@mac.com>
Message-ID: <240251949-1191611038-cardhu_decombobulator_blackberry.rim.net-1515613405-@bxe033.bisx.prod.on.blackberry>

Hi Chuck,

Those switches are new with 5.24. They pass a number of tests, but are not heavily tested. 
By mutually exclusive I meant that the patterns do not overlap. For example,

'a';
'b';

are mutually exclusive, but

'a';
any;

are not. On second thought I'm not sure if it would be worth the effort to refactor in your case, as the time is probably dominated by the basic iterations of the driver and the gains from mutually exclusive patterns are very small. 

Adrian

-----Original Message-----
From: Chuck Remes <cremes.devlist at mac.com>

Date: Fri, 5 Oct 2007 13:04:29 
To:ragel-users at googlegroups.com
Subject: [ragel-users] Re: tuning/optimizing scanners



The -F1 option is what I was missing! Initially I stayed away from  
those switches due to a note in the docs about not all of them being  
supported for the ruby target. I wanted correctness before I wanted  
speed.

Generating the code with that option resulted in a significant  
performance improvement. My baseline testcase went from 50 seconds  
(wall clock time) to 28 seconds. That's more than adequate for right  
now.

Now that I have my feet wet with ragel I'll be more comfortable  
trying things like generating the C code and interfacing to it from  
my ruby code.

Adrian, thanks for a great tool.

Another question before I drop this line of inquiry. What did you  
mean by "make the patterns mutually exclusive?" So I can understand  
it better, please provide an example of a non-exclusive set and a  
mutually exclusive set of patterns.

cr

On Oct 5, 2007, at 11:45 AM, Adrian Thurston wrote:

> Hmmm, the -F1 option should be the fastest and you may get some  
> marginal
> speedups if you make the patterns mutually exclusive and as greedy as
> possible, but I suppose I'd have to suggest using C if real speed is
> what you're after.
>
> Adrian
>
> Chuck Remes wrote:
>> Adrian,
>>
>> I am using ragel 5.24 so I can have ruby support.
>>
>>
>> On Oct 5, 2007, at 11:13 AM, Adrian Thurston wrote:
>>
>>> Hi Chuck,
>>>
>>> The parsing methodology looks fine to me. There is no undue
>>> backtracking.
>>>
>>> What version of Ragel are you using?
>>>
>>> -Adrian
>>>
>>> Chuck Remes wrote:
>>>> I've written a log parsing tool using ragel and ruby. I'm using the
>>>> scanner construct to perform the parsing, but things appear to be
>>>> running very slowly. I fear I may have chosen the wrong methodology
>>>> to parse the log. (And yes, I know ruby isn't the quickest language
>>>> out there...) :-)
>>>>
>>>> The log in question is a set of key/value pairs that look like this
>>>> (this is one line):
>>>>
>>>> Oct  1 09:50:33.37204 [29193]: {market = ICE | type = order |
>>>> order_id = 4 | buy = 1 | price = 80.83 | volume = 1 | date =
>>>> 2007-10-01 | time = 09:50:33.37201 | metadata = {l={f=Quote|g=4| 
>>>> j=1|
>>>> sid=8290182729}|ac=289182|cf=2881|ca= 289182}}
>>>>
>>>> I'm uninterested in the date and other data at the line start, so I
>>>> throw it away. I primarily search for the key (e.g. 'market = ')  
>>>> and
>>>> then fgoto another machine to parse the value. Upon hitting a pipe
>>>> character, I fgoto main again and look for another key. I pasted  
>>>> in a
>>>> section of the machine below to illustrate.
>>>>
>>>> Is this the correct approach? Is there a superior method for  
>>>> rapidly
>>>> parsing long text strings? Be gentle with me... I'm new to this
>>>> stuff.
>> [snip]
>>
>> >>
>>
>





From cremes.devl... at mac.com  Sun Oct  7 18:16:27 2007
From: cremes.devl... at mac.com (Chuck Remes)
Date: Sun, 7 Oct 2007 13:16:27 -0500
Subject: parsing a netstring
Message-ID: <E84884A6-D742-4337-86B0-A2EB92196C5D@mac.com>

I'm suddenly finding all sorts of uses for ragel!

I want to write a parser for netstrings. The definition of a  
netstring is pretty simple. It comes in the following format:

size_in_decimal':''string array size_in_decimal bytes long'','

I wrote a machine to parse through this and capture every byte, but  
I'm unclear how to terminate my get_string machine. Right now I have  
it call the action store_string as a finishing action for each byte  
processed. The action stores the byte and increments a counter  
variable. When the counter variable exceeds the number of bytes to be  
processed, I want to advance out of that machine and move to the next  
machine to confirm the byte array was terminated properly.

I'm not sure I'm doing this correctly. From the docs (section 6.5) it  
appears using a 'semantic condition' would make sense here, but that  
part of the documentation is unclear to me so I'm using this  
alternate methodology. Am I on the right track? Also, is there a way  
to skip 'N' bytes forward instead of copying them one by one into a  
new array (super slow!)? I'm thinking I can directly modify the 'p'  
variable but I'm not sure this is the right way.

Secondly, I'm not sure how to capture errors. I'm already using the  
form '@action' to do some work in a machine. Can I specify an error  
action using the same operator in the same machine? E.g - get_size =  
( digit @store_size @err(size_error) )+;

Thanks for any input. My sample machine is listed below.

%%{
	machine parse_netstring;

	# snipped out some actions for the sake of brevity

	action store_size {
		size = ( size * 10 ) + fc; # accumulate string length
	};

	action alloc_buffer {
		buffer = Array.new(size);
		i = 0;
	};

	action store_string {
		buffer[i] = fc;
		i = i + 1;
		fnext get_string_terminator if i > size;
	};

	get_size = ( digit >validate_not_zero ) . ( digit @store_size )*;

	get_delimeter = ( ':' @alloc_buffer );

	get_string = ( any @store_string )*;

	get_netstring_terminator = ',' @finalize;

	main := get_size . get_delimeter . get_string;
}%%


From thurs... at cs.queensu.ca  Tue Oct  9 21:10:52 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Tue, 09 Oct 2007 17:10:52 -0400
Subject: [ragel-users] parsing a netstring
In-Reply-To: <E84884A6-D742-4337-86B0-A2EB92196C5D@mac.com>
References: <E84884A6-D742-4337-86B0-A2EB92196C5D@mac.com>
Message-ID: <470BEE5C.3020901@cs.queensu.ca>

Hi Chuck,

Yes, using fnext to call out of the string consuming machine is one way
to do it. The code looks good to me.

As you said you can use conditions as well. I think one of the examples
in the manual deals with variable length fields. So there is that route.

And also yes, you can modify p to jump ahead of the area. Just be
mindful of jumping past pe. If you have all the data at once this isn't
a problem, but if you get your data in blocks then you have to watch out
and hack in some solution.

With error actions you have to keep in mind that the operators have
slightly different meanings because they select states as opposed to
transitions. The error action embedding operators let you handle the
case of 'no transition' in the states they select.

Adrian

Chuck Remes wrote:
> I'm suddenly finding all sorts of uses for ragel!
> 
> I want to write a parser for netstrings. The definition of a  
> netstring is pretty simple. It comes in the following format:
> 
> size_in_decimal':''string array size_in_decimal bytes long'','
> 
> I wrote a machine to parse through this and capture every byte, but  
> I'm unclear how to terminate my get_string machine. Right now I have  
> it call the action store_string as a finishing action for each byte  
> processed. The action stores the byte and increments a counter  
> variable. When the counter variable exceeds the number of bytes to be  
> processed, I want to advance out of that machine and move to the next  
> machine to confirm the byte array was terminated properly.
> 
> I'm not sure I'm doing this correctly. From the docs (section 6.5) it  
> appears using a 'semantic condition' would make sense here, but that  
> part of the documentation is unclear to me so I'm using this  
> alternate methodology. Am I on the right track? Also, is there a way  
> to skip 'N' bytes forward instead of copying them one by one into a  
> new array (super slow!)? I'm thinking I can directly modify the 'p'  
> variable but I'm not sure this is the right way.
> 
> Secondly, I'm not sure how to capture errors. I'm already using the  
> form '@action' to do some work in a machine. Can I specify an error  
> action using the same operator in the same machine? E.g - get_size =  
> ( digit @store_size @err(size_error) )+;
> 
> Thanks for any input. My sample machine is listed below.
> 
> %%{
> 	machine parse_netstring;
> 
> 	# snipped out some actions for the sake of brevity
> 
> 	action store_size {
> 		size = ( size * 10 ) + fc; # accumulate string length
> 	};
> 
> 	action alloc_buffer {
> 		buffer = Array.new(size);
> 		i = 0;
> 	};
> 
> 	action store_string {
> 		buffer[i] = fc;
> 		i = i + 1;
> 		fnext get_string_terminator if i > size;
> 	};
> 
> 	get_size = ( digit >validate_not_zero ) . ( digit @store_size )*;
> 
> 	get_delimeter = ( ':' @alloc_buffer );
> 
> 	get_string = ( any @store_string )*;
> 
> 	get_netstring_terminator = ',' @finalize;
> 
> 	main := get_size . get_delimeter . get_string;
> }%%
> 
> --~--~---------~--~----~------------~-------~--~----~
> You received this message because you are subscribed to the Google Groups "ragel-users" group.
> To post to this group, send email to ragel-users at googlegroups.com
> To unsubscribe from this group, send email to ragel-users-unsubscribe at googlegroups.com
> For more options, visit this group at http://groups.google.com/group/ragel-users?hl=en
> -~----------~----~----~----~------~----~------~--~---
> 
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20071009/fa1fcd96/attachment-0001.sig>

From cremes.devl... at mac.com  Wed Oct 10 15:49:48 2007
From: cremes.devl... at mac.com (Chuck Remes)
Date: Wed, 10 Oct 2007 10:49:48 -0500
Subject: [ragel-users] Re: parsing a netstring
In-Reply-To: <470BEE5C.3020901@cs.queensu.ca>
References: <E84884A6-D742-4337-86B0-A2EB92196C5D@mac.com> <470BEE5C.3020901@cs.queensu.ca>
Message-ID: <9064A031-F86F-4F59-B779-1CCE6808BF5B@mac.com>

Adrian,

thanks for the reply. It's encouraging to have my guesses confirmed.

I'm still a bit fuzzy on the last piece regarding error actions.

Let's use the example I contrived from the original email:


> get_size = ( digit @store_size @err(size_error) )+;
>

I'm interpreting your comment to mean that @err(size_error) will  
*only* get called if the get_size machine receives an input it isn't  
configured to handle. For example, if it receives an alphanumeric  
then action size_error will be called to handle it.

cr

On Oct 9, 2007, at 4:10 PM, Adrian Thurston wrote:

> Hi Chuck,
>
> Yes, using fnext to call out of the string consuming machine is one  
> way
> to do it. The code looks good to me.
>
> As you said you can use conditions as well. I think one of the  
> examples
> in the manual deals with variable length fields. So there is that  
> route.
>
> And also yes, you can modify p to jump ahead of the area. Just be
> mindful of jumping past pe. If you have all the data at once this  
> isn't
> a problem, but if you get your data in blocks then you have to  
> watch out
> and hack in some solution.
>
> With error actions you have to keep in mind that the operators have
> slightly different meanings because they select states as opposed to
> transitions. The error action embedding operators let you handle the
> case of 'no transition' in the states they select.
>
> Adrian
>
> Chuck Remes wrote:
>> I'm suddenly finding all sorts of uses for ragel!
>>
>> I want to write a parser for netstrings. The definition of a
>> netstring is pretty simple. It comes in the following format:
>>
>> size_in_decimal':''string array size_in_decimal bytes long'','
>>
>> I wrote a machine to parse through this and capture every byte, but
>> I'm unclear how to terminate my get_string machine. Right now I have
>> it call the action store_string as a finishing action for each byte
>> processed. The action stores the byte and increments a counter
>> variable. When the counter variable exceeds the number of bytes to be
>> processed, I want to advance out of that machine and move to the next
>> machine to confirm the byte array was terminated properly.
>>
>> I'm not sure I'm doing this correctly. From the docs (section 6.5) it
>> appears using a 'semantic condition' would make sense here, but that
>> part of the documentation is unclear to me so I'm using this
>> alternate methodology. Am I on the right track? Also, is there a way
>> to skip 'N' bytes forward instead of copying them one by one into a
>> new array (super slow!)? I'm thinking I can directly modify the 'p'
>> variable but I'm not sure this is the right way.
>>
>> Secondly, I'm not sure how to capture errors. I'm already using the
>> form '@action' to do some work in a machine. Can I specify an error
>> action using the same operator in the same machine? E.g - get_size =
>> ( digit @store_size @err(size_error) )+;
>>
>> Thanks for any input. My sample machine is listed below.
>>
>> %%{
>> 	machine parse_netstring;
>>
>> 	# snipped out some actions for the sake of brevity
>>
>> 	action store_size {
>> 		size = ( size * 10 ) + fc; # accumulate string length
>> 	};
>>
>> 	action alloc_buffer {
>> 		buffer = Array.new(size);
>> 		i = 0;
>> 	};
>>
>> 	action store_string {
>> 		buffer[i] = fc;
>> 		i = i + 1;
>> 		fnext get_string_terminator if i > size;
>> 	};
>>
>> 	get_size = ( digit >validate_not_zero ) . ( digit @store_size )*;
>>
>> 	get_delimeter = ( ':' @alloc_buffer );
>>
>> 	get_string = ( any @store_string )*;
>>
>> 	get_netstring_terminator = ',' @finalize;
>>
>> 	main := get_size . get_delimeter . get_string;
>> }%%
>>
>> >>
>>
>


From thurs... at cs.queensu.ca  Wed Oct 10 16:19:11 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Wed, 10 Oct 2007 12:19:11 -0400
Subject: [ragel-users] Re: parsing a netstring
In-Reply-To: <9064A031-F86F-4F59-B779-1CCE6808BF5B@mac.com>
References: <E84884A6-D742-4337-86B0-A2EB92196C5D@mac.com> <470BEE5C.3020901@cs.queensu.ca> <9064A031-F86F-4F59-B779-1CCE6808BF5B@mac.com>
Message-ID: <470CFB7F.7050209@cs.queensu.ca>

Chuck,

That's right, I should just point out a subtlety. With error actions
"inputs not handled" is computed when the final machine is complete. If
get_size is just on its own in main then this will be non-digits. If
get_size were unioned with something else then this would be non-digits
and non-something else (for the start state at least).

If you use local error actions instead @lerr(...) then the "inputs not
handled" are computed when the get_size machine is constructed. In this
case any non-digit.

So global error actions are executed when the whole machine fails and
local error actions are executed when the current definition fails.

-Adrian

Chuck Remes wrote:
> Adrian,
> 
> thanks for the reply. It's encouraging to have my guesses confirmed.
> 
> I'm still a bit fuzzy on the last piece regarding error actions.
> 
> Let's use the example I contrived from the original email:
> 
> 
>> get_size = ( digit @store_size @err(size_error) )+;
>>
> 
> I'm interpreting your comment to mean that @err(size_error) will  
> *only* get called if the get_size machine receives an input it isn't  
> configured to handle. For example, if it receives an alphanumeric  
> then action size_error will be called to handle it.
> 
> cr
> 
> On Oct 9, 2007, at 4:10 PM, Adrian Thurston wrote:
> 
>> Hi Chuck,
>>
>> Yes, using fnext to call out of the string consuming machine is one  
>> way
>> to do it. The code looks good to me.
>>
>> As you said you can use conditions as well. I think one of the  
>> examples
>> in the manual deals with variable length fields. So there is that  
>> route.
>>
>> And also yes, you can modify p to jump ahead of the area. Just be
>> mindful of jumping past pe. If you have all the data at once this  
>> isn't
>> a problem, but if you get your data in blocks then you have to  
>> watch out
>> and hack in some solution.
>>
>> With error actions you have to keep in mind that the operators have
>> slightly different meanings because they select states as opposed to
>> transitions. The error action embedding operators let you handle the
>> case of 'no transition' in the states they select.
>>
>> Adrian
>>
>> Chuck Remes wrote:
>>> I'm suddenly finding all sorts of uses for ragel!
>>>
>>> I want to write a parser for netstrings. The definition of a
>>> netstring is pretty simple. It comes in the following format:
>>>
>>> size_in_decimal':''string array size_in_decimal bytes long'','
>>>
>>> I wrote a machine to parse through this and capture every byte, but
>>> I'm unclear how to terminate my get_string machine. Right now I have
>>> it call the action store_string as a finishing action for each byte
>>> processed. The action stores the byte and increments a counter
>>> variable. When the counter variable exceeds the number of bytes to be
>>> processed, I want to advance out of that machine and move to the next
>>> machine to confirm the byte array was terminated properly.
>>>
>>> I'm not sure I'm doing this correctly. From the docs (section 6.5) it
>>> appears using a 'semantic condition' would make sense here, but that
>>> part of the documentation is unclear to me so I'm using this
>>> alternate methodology. Am I on the right track? Also, is there a way
>>> to skip 'N' bytes forward instead of copying them one by one into a
>>> new array (super slow!)? I'm thinking I can directly modify the 'p'
>>> variable but I'm not sure this is the right way.
>>>
>>> Secondly, I'm not sure how to capture errors. I'm already using the
>>> form '@action' to do some work in a machine. Can I specify an error
>>> action using the same operator in the same machine? E.g - get_size =
>>> ( digit @store_size @err(size_error) )+;
>>>
>>> Thanks for any input. My sample machine is listed below.
>>>
>>> %%{
>>> 	machine parse_netstring;
>>>
>>> 	# snipped out some actions for the sake of brevity
>>>
>>> 	action store_size {
>>> 		size = ( size * 10 ) + fc; # accumulate string length
>>> 	};
>>>
>>> 	action alloc_buffer {
>>> 		buffer = Array.new(size);
>>> 		i = 0;
>>> 	};
>>>
>>> 	action store_string {
>>> 		buffer[i] = fc;
>>> 		i = i + 1;
>>> 		fnext get_string_terminator if i > size;
>>> 	};
>>>
>>> 	get_size = ( digit >validate_not_zero ) . ( digit @store_size )*;
>>>
>>> 	get_delimeter = ( ':' @alloc_buffer );
>>>
>>> 	get_string = ( any @store_string )*;
>>>
>>> 	get_netstring_terminator = ',' @finalize;
>>>
>>> 	main := get_size . get_delimeter . get_string;
>>> }%%
>>>
> 
> 
> --~--~---------~--~----~------------~-------~--~----~
> You received this message because you are subscribed to the Google Groups "ragel-users" group.
> To post to this group, send email to ragel-users at googlegroups.com
> To unsubscribe from this group, send email to ragel-users-unsubscribe at googlegroups.com
> For more options, visit this group at http://groups.google.com/group/ragel-users?hl=en
> -~----------~----~----~----~------~----~------~--~---
> 
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20071010/5846bc0f/attachment-0001.sig>

From thurs... at cs.queensu.ca  Tue Oct  9 22:48:05 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Tue, 09 Oct 2007 18:48:05 -0400
Subject: for 6.0: going back to 3.X semantics for >, %, err
Message-ID: <470C0525.5040003@cs.queensu.ca>

Hi,

In version 3 of Ragel the semantics of >, % and the error actions were
different.

1. The leaving operator '%' would also embed the action as an EOF action
if the final states of the machine it was applied to remained final in
the compiled machine. This meant that as long as the machine didn't
error, the leaving action would always be executed even if it came right
at the end of the input.

2. The starting transition operator '>' would embed a leaving action
into the start state if the start state was final. This meant that if a
machine accepted the zero-length string and control passed through the
zero-length string then the starting transition action would still get
executed.

3. All global and local error actions would be executed when the input
ended in a non-final state (and the error action was embedded into that
state).

This semantics meant a single action block could be executed on a
regular character transition and on an EOF event. The problem was that
regular actions were generated in the main processing loop using 'write
exec' and EOF actions were generated using 'write eof'. This often led
to compile errors because the context was not the same. You could fix
the compile errors by providing dummy variables to the EOF code, but
there would be no effect in the EOF code.

This inconsistency seemed to drive up the complexity of these operators
and in the 4.0 line I decided to simplify the operators by eliminating
the above action embedding behaviour.

In the 6.0 release I will be bringing this behaviour back. Now that EOF
actions are written in the main processing loop, they have available to
them everything that regular actions have and the original problem is gone.

-Adrian

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20071009/614a990f/attachment-0001.sig>

From er... at atlasocean.com  Tue Oct  9 22:51:30 2007
From: er... at atlasocean.com (Erich Ocean)
Date: Tue, 9 Oct 2007 15:51:30 -0700
Subject: [ragel-users] for 6.0: going back to 3.X semantics for >, %, err
In-Reply-To: <470C0525.5040003@cs.queensu.ca>
References: <470C0525.5040003@cs.queensu.ca>
Message-ID: <D3AA945D-F918-47D5-860B-7D5C822074F3@atlasocean.com>

That's great! +1 for the change.

On Oct 9, 2007, at 3:48 PM, Adrian Thurston wrote:

> Hi,
>
> In version 3 of Ragel the semantics of >, % and the error actions were
> different.
>
> 1. The leaving operator '%' would also embed the action as an EOF  
> action
> if the final states of the machine it was applied to remained final in
> the compiled machine. This meant that as long as the machine didn't
> error, the leaving action would always be executed even if it came  
> right
> at the end of the input.
>
> 2. The starting transition operator '>' would embed a leaving action
> into the start state if the start state was final. This meant that  
> if a
> machine accepted the zero-length string and control passed through the
> zero-length string then the starting transition action would still get
> executed.
>
> 3. All global and local error actions would be executed when the input
> ended in a non-final state (and the error action was embedded into  
> that
> state).
>
> This semantics meant a single action block could be executed on a
> regular character transition and on an EOF event. The problem was that
> regular actions were generated in the main processing loop using  
> 'write
> exec' and EOF actions were generated using 'write eof'. This often led
> to compile errors because the context was not the same. You could fix
> the compile errors by providing dummy variables to the EOF code, but
> there would be no effect in the EOF code.
>
> This inconsistency seemed to drive up the complexity of these  
> operators
> and in the 4.0 line I decided to simplify the operators by eliminating
> the above action embedding behaviour.
>
> In the 6.0 release I will be bringing this behaviour back. Now that  
> EOF
> actions are written in the main processing loop, they have  
> available to
> them everything that regular actions have and the original problem  
> is gone.
>
> -Adrian
>


From br... at codefluency.com  Tue Oct  9 23:36:08 2007
From: br... at codefluency.com (Bruce Williams)
Date: Tue, 9 Oct 2007 18:36:08 -0500
Subject: [ragel-users] Re: for 6.0: going back to 3.X semantics for >, %, err
In-Reply-To: <D3AA945D-F918-47D5-860B-7D5C822074F3@atlasocean.com>
References: <470C0525.5040003@cs.queensu.ca>
	 <D3AA945D-F918-47D5-860B-7D5C822074F3@atlasocean.com>
Message-ID: <a2830e5b0710091636i6354c4fdy6dcbeabbaea1c42d@mail.gmail.com>

Adrian,

This sounds great; especially the '%' EOF action.

Cheers,
Bruce

---
Bruce Williams
http://codefluency.com

On 10/9/07, Erich Ocean <er... at atlasocean.com> wrote:
>
> That's great! +1 for the change.
>
> On Oct 9, 2007, at 3:48 PM, Adrian Thurston wrote:
>
> > Hi,
> >
> > In version 3 of Ragel the semantics of >, % and the error actions were
> > different.
> >
> > 1. The leaving operator '%' would also embed the action as an EOF
> > action
> > if the final states of the machine it was applied to remained final in
> > the compiled machine. This meant that as long as the machine didn't
> > error, the leaving action would always be executed even if it came
> > right
> > at the end of the input.
> >
> > 2. The starting transition operator '>' would embed a leaving action
> > into the start state if the start state was final. This meant that
> > if a
> > machine accepted the zero-length string and control passed through the
> > zero-length string then the starting transition action would still get
> > executed.
> >
> > 3. All global and local error actions would be executed when the input
> > ended in a non-final state (and the error action was embedded into
> > that
> > state).
> >
> > This semantics meant a single action block could be executed on a
> > regular character transition and on an EOF event. The problem was that
> > regular actions were generated in the main processing loop using
> > 'write
> > exec' and EOF actions were generated using 'write eof'. This often led
> > to compile errors because the context was not the same. You could fix
> > the compile errors by providing dummy variables to the EOF code, but
> > there would be no effect in the EOF code.
> >
> > This inconsistency seemed to drive up the complexity of these
> > operators
> > and in the 4.0 line I decided to simplify the operators by eliminating
> > the above action embedding behaviour.
> >
> > In the 6.0 release I will be bringing this behaviour back. Now that
> > EOF
> > actions are written in the main processing loop, they have
> > available to
> > them everything that regular actions have and the original problem
> > is gone.
> >
> > -Adrian
> >
>
>
> >
>


From thurs... at cs.queensu.ca  Wed Oct 17 16:11:24 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Wed, 17 Oct 2007 12:11:24 -0400
Subject: [ragel-users] for 6.0: going back to 3.X semantics for >, %,
 err
In-Reply-To: <470C0525.5040003@cs.queensu.ca>
References: <470C0525.5040003@cs.queensu.ca>
Message-ID: <4716342C.80100@cs.queensu.ca>

This has now been committed.

-Adrian

Adrian Thurston wrote:
> Hi,
> 
> In version 3 of Ragel the semantics of >, % and the error actions were
> different.
> 
> 1. The leaving operator '%' would also embed the action as an EOF action
> if the final states of the machine it was applied to remained final in
> the compiled machine. This meant that as long as the machine didn't
> error, the leaving action would always be executed even if it came right
> at the end of the input.
> 
> 2. The starting transition operator '>' would embed a leaving action
> into the start state if the start state was final. This meant that if a
> machine accepted the zero-length string and control passed through the
> zero-length string then the starting transition action would still get
> executed.
> 
> 3. All global and local error actions would be executed when the input
> ended in a non-final state (and the error action was embedded into that
> state).
> 
> This semantics meant a single action block could be executed on a
> regular character transition and on an EOF event. The problem was that
> regular actions were generated in the main processing loop using 'write
> exec' and EOF actions were generated using 'write eof'. This often led
> to compile errors because the context was not the same. You could fix
> the compile errors by providing dummy variables to the EOF code, but
> there would be no effect in the EOF code.
> 
> This inconsistency seemed to drive up the complexity of these operators
> and in the 4.0 line I decided to simplify the operators by eliminating
> the above action embedding behaviour.
> 
> In the 6.0 release I will be bringing this behaviour back. Now that EOF
> actions are written in the main processing loop, they have available to
> them everything that regular actions have and the original problem is gone.
> 
> -Adrian
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20071017/447f4651/attachment-0001.sig>

From delgad... at caramail.com  Thu Oct 18 08:12:47 2007
From: delgad... at caramail.com (Mat|)
Date: Thu, 18 Oct 2007 01:12:47 -0700
Subject: [newbie] parsing CSS style
Message-ID: <1192695167.303804.101830@v29g2000prd.googlegroups.com>

Hello,

I am just discovering ragel and I after some time trying to
understand how I could use it for my needs, I would like to
write a CSS style parser as an exercise and I come up
with some questions.

The input string is in the following form :

min-width: 100px; background: green;

for example.

Here is some code from my .rl file :

%%{
      machine CSSStyle;
      alphtype char;

      action token { free(tk); tk = (char *) calloc(fpc-tk_start+1,
sizeof(char)); std::strncpy(tk, tk_start, fpc-tk_start); }
      action style_item_value { free(tk2); tk2 = (char *) calloc(fpc-
tk_start+1, sizeof(char)); std::strncpy(tk2, tk_start, fpc-tk_start);
listener.style_item_value(tk2); }
      action unit { free(tk2); tk2=(char *) calloc(fpc-tk_start+1,
sizeof(char)); std::strncpy(tk2, tk_start, fpc-tk_start); }
      action style_item { style_item = (char *) calloc(fpc-tk_start+1,
sizeof(char)); std::strncpy(style_item, tk_start, fpc-tk_start);
listener.style_item(style_item); free(style_item); }
      action style_item_size { listener.style_item_size(std::atoi(tk),
tk2); }

      number =  digit+ >{tk_start = fpc;} %token;
      style_item = (alpha | '-')+ >{tk_start=fpc;} %style_item;
      style_item_value = (alpha)+ >{tk_start=fpc;} %style_item_value;
      unit = ("em"|"px") >{tk_start=fpc;} %unit;
      size = number unit %style_item_size;
      style = space* style_item space* ":" space* (size |
style_item_value) space* ";";

      main := style+;
  }%%

My questions are :

- knowing that my target language is C++, is there a way to do
something simpler in my actions ? For the moment I use some
variables like tk and tk2 in a class and I have to reallocate them
with "calloc"...

- I have got a problem (maybe more than one but I could only
detect one !) with my machines, indeed in my expressions I always
have a terminating ";" character but for some reason the style_item
action is executed even if there is no terminating ";". For example,
if I use "background: green" as an input string, the style_item is
going to be executed but it should not because there is no ";" at
the end.

Can someone help ?

Thanks in advance!!!


From thurs... at cs.queensu.ca  Thu Oct 18 14:13:39 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Thu, 18 Oct 2007 10:13:39 -0400
Subject: [ragel-users] [newbie] parsing CSS style
In-Reply-To: <1192695167.303804.101830@v29g2000prd.googlegroups.com>
References: <1192695167.303804.101830@v29g2000prd.googlegroups.com>
Message-ID: <47176A13.9080803@cs.queensu.ca>


Mat| wrote:

> - knowing that my target language is C++, is there a way to do
> something simpler in my actions ? For the moment I use some
> variables like tk and tk2 in a class and I have to reallocate them
> with "calloc"...

You could use a macro or some function to simplify your actions.


> - I have got a problem (maybe more than one but I could only
> detect one !) with my machines, indeed in my expressions I always
> have a terminating ";" character but for some reason the style_item
> action is executed even if there is no terminating ";". For example,
> if I use "background: green" as an input string, the style_item is
> going to be executed but it should not because there is no ";" at
> the end.

Do you mean style_item_value action? The style_item action will get
executed when leaving the name portion, in this case on the colon.



-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20071018/3f4b7882/attachment-0001.sig>

From delgad... at caramail.com  Thu Oct 18 15:31:38 2007
From: delgad... at caramail.com (Mat|)
Date: Thu, 18 Oct 2007 08:31:38 -0700
Subject: [newbie] parsing CSS style
In-Reply-To: <47176A13.9080803@cs.queensu.ca>
References: <1192695167.303804.101830@v29g2000prd.googlegroups.com>
   <47176A13.9080803@cs.queensu.ca>
Message-ID: <1192721498.210586.302460@y27g2000pre.googlegroups.com>

Hello,

First of all thanks for the quick answer!!!

On Oct 18, 4:13 pm, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> > - I have got a problem (maybe more than one but I could only
> > detect one !) with my machines, indeed in my expressions I always
> > have a terminating ";" character but for some reason the style_item
> > action is executed even if there is no terminating ";". For example,
> > if I use "background: green" as an input string, the style_item is
> > going to be executed but it should not because there is no ";" at
> > the end.
>
> Do you mean style_item_value action? The style_item action will get
> executed when leaving the name portion, in this case on the colon.
>

I am talking about the style_item action. I want it to be executed
only
when it's "complete", for me it means that everything has been
processed up to a ";". For the moment as your are pointing out it
is executed on the colon even if there is no ";" at the end (when
there
is no ";" the style machine should raise an error).

How can I change the .rl file to obey to this behaviour ?
I am a bit lost.

Cheers


From thurs... at cs.queensu.ca  Thu Oct 18 16:14:08 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Thu, 18 Oct 2007 12:14:08 -0400
Subject: [ragel-users] Re: [newbie] parsing CSS style
In-Reply-To: <1192721498.210586.302460@y27g2000pre.googlegroups.com>
References: <1192695167.303804.101830@v29g2000prd.googlegroups.com> <47176A13.9080803@cs.queensu.ca> <1192721498.210586.302460@y27g2000pre.googlegroups.com>
Message-ID: <47178650.4070009@cs.queensu.ca>

Sounds to me that Ragel is not the right tool for you. Ragel is designed
for single-pass parsing where actions are executed as you move over the
data. Perhaps a more traditional approach where you build the parse tree
first, then walk it would be more appropriate in your case. Something
like ANTLR or Lex+YACC might be better.

Adrian

Mat| wrote:
> Hello,
> 
> First of all thanks for the quick answer!!!
> 
> On Oct 18, 4:13 pm, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>>> - I have got a problem (maybe more than one but I could only
>>> detect one !) with my machines, indeed in my expressions I always
>>> have a terminating ";" character but for some reason the style_item
>>> action is executed even if there is no terminating ";". For example,
>>> if I use "background: green" as an input string, the style_item is
>>> going to be executed but it should not because there is no ";" at
>>> the end.
>> Do you mean style_item_value action? The style_item action will get
>> executed when leaving the name portion, in this case on the colon.
>>
> 
> I am talking about the style_item action. I want it to be executed
> only
> when it's "complete", for me it means that everything has been
> processed up to a ";". For the moment as your are pointing out it
> is executed on the colon even if there is no ";" at the end (when
> there
> is no ";" the style machine should raise an error).
> 
> How can I change the .rl file to obey to this behaviour ?
> I am a bit lost.
> 
> Cheers
> 
> 
> --~--~---------~--~----~------------~-------~--~----~
> You received this message because you are subscribed to the Google Groups "ragel-users" group.
> To post to this group, send email to ragel-users at googlegroups.com
> To unsubscribe from this group, send email to ragel-users-unsubscribe at googlegroups.com
> For more options, visit this group at http://groups.google.com/group/ragel-users?hl=en
> -~----------~----~----~----~------~----~------~--~---
> 
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20071018/26c8ca13/attachment-0001.sig>

From chr... at gmail.com  Thu Oct 18 18:06:06 2007
From: chr... at gmail.com (Christer Sandberg)
Date: Thu, 18 Oct 2007 20:06:06 +0200
Subject: [ragel-users] Re: [newbie] parsing CSS style
In-Reply-To: <47178650.4070...@cs.queensu.ca>
References: <1192695167.303804.101...@v29g2000prd.googlegroups.com>
	 <47176A13.9080...@cs.queensu.ca>
	 <1192721498.210586.302...@y27g2000pre.googlegroups.com>
	 <47178650.4070...@cs.queensu.ca>
Message-ID: <13f6d2440710181106u2b3a56fao6eda9728eb15c0dc@mail.gmail.com>

I haven't followed the discussion closely because I'm at work.
But to my knowledge (out of my head), properties in CSS dosen't have to
en in a ';' if it's the only one for the selector.

I've been/am constructing a CSS parser with ragel and it's almost CSS
2.1 grammar complete, except for the error handling. Which I have in
my workspace but not in the SVN repository.

You can have a look at http://code.google.com/p/ruby-cssparser
It's coded in C as a Ruby module.

Christer

On 10/18/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> Sounds to me that Ragel is not the right tool for you. Ragel is designed
> for single-pass parsing where actions are executed as you move over the
> data. Perhaps a more traditional approach where you build the parse tree
> first, then walk it would be more appropriate in your case. Something
> like ANTLR or Lex+YACC might be better.
>
> Adrian
>
> Mat| wrote:
> > Hello,
> >
> > First of all thanks for the quick answer!!!
> >
> > On Oct 18, 4:13 pm, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> >>> - I have got a problem (maybe more than one but I could only
> >>> detect one !) with my machines, indeed in my expressions I always
> >>> have a terminating ";" character but for some reason the style_item
> >>> action is executed even if there is no terminating ";". For example,
> >>> if I use "background: green" as an input string, the style_item is
> >>> going to be executed but it should not because there is no ";" at
> >>> the end.
> >> Do you mean style_item_value action? The style_item action will get
> >> executed when leaving the name portion, in this case on the colon.
> >>
> >
> > I am talking about the style_item action. I want it to be executed
> > only
> > when it's "complete", for me it means that everything has been
> > processed up to a ";". For the moment as your are pointing out it
> > is executed on the colon even if there is no ";" at the end (when
> > there
> > is no ";" the style machine should raise an error).
> >
> > How can I change the .rl file to obey to this behaviour ?
> > I am a bit lost.
> >
> > Cheers
> >
> >
> > > >
> >
>
>
>


From thurs... at cs.queensu.ca  Wed Oct 24 18:48:26 2007
From: thurs... at cs.queensu.ca (=?utf-8?B?QWRyaWFuIFRodXJzdG9u?=)
Date: Wed, 24 Oct 2007 18:48:26 +0000
Subject: new for 6.0: frontend calls backed
Message-ID: <781331702-1193251680-cardhu_decombobulator_blackberry.rim.net-1758681022-@bxe033.bisx.prod.on.blackberry>

Hi,

I just committed new behavior. The ragel program now executes frontend and backend processes. No more pipes or temporary files, it is done automatically (with a temp). The frontend is the ragel program with the -f option. The backend program is chosen automatically.  

Adrian


From pat.ey... at gmail.com  Thu Oct 25 17:28:14 2007
From: pat.ey... at gmail.com (pat eyler)
Date: Thu, 25 Oct 2007 11:28:14 -0600
Subject: MountainWest RubyConf 2008
In-Reply-To: <6fd0654b0710251021r6d6dcebdu53cbda6a9dfa5...@mail.gmail.com>
References: <6fd0654b0710251019p6aa89cb8ncd95bbfa603b9...@mail.gmail.com>
	 <6fd0654b0710251020v72c913a6wd81b442e09192...@mail.gmail.com>
	 <6fd0654b0710251021r6d6dcebdu53cbda6a9dfa5...@mail.gmail.com>
Message-ID: <6fd0654b0710251028x33bf09bexd32780db322479f2@mail.gmail.com>

MountainWest RubyConf 2008 is scheduled for March 28 and 29, 2008.
It will be in Salt Lake City, at the same great venue we had last year, and
it is again our intent to record and make available all the talks under a
Creative Commons, Share-Alike license -- you can see last year's talks here:
        http://mtnwestrubyconf2007.confreaks.com/

If you've been working on a problem or project in Ruby, this is a great
opportunity to talk about it.  We looking for short (250-500 word) proposals
outlining the content and target audience for your talk.  Proposals will be
accepted until Midnight (MST) on Dec 31st.  Our selection committee will
then review the proposals, select the primary and alternate presenters, and
contact them in January of 2008.

We're looking for all sorts of Ruby and RoR related talks (and talks that
aren't strictly Ruby related but which would be of interest to rubyists).
Talks will be 45 minutes in length, and should allow some time for
audience questions.  If you'd prefer something shorter, we're hoping to run
lightning talk sessions on Friday and Saturday, with 8-10 five minute
presentations each session -- proposals are not required for lightning talks.

Proposals should be submitted to me:  p... at mtnwestruby.org

Last year, we received a number of high quality proposals for talks at the
2007 MountainWest RubyConf.  These talks made our regional conference
a huge success.  This year, we're hoping to do even better but we're going
to need your help -- please, propose a talk and plan on coming to enjoy this
regional conference.


-- 
thanks,
-pate
-------------------------
   Duty makes us do things, Love make us do things well.
http://on-ruby.blogspot.com       http://on-erlang.blogspot.com
          http://on-soccer.blogspot.com


From gasp... at teti.ch  Wed Oct 31 07:58:21 2007
From: gasp... at teti.ch (Gaspard Bucher)
Date: Wed, 31 Oct 2007 07:58:21 -0000
Subject: Is this the right way to do it ?
Message-ID: <1193817501.221237.216530@22g2000hsm.googlegroups.com>

I am implementing a parser to read commands from user (interactive) or
from a stored file. The idea is to build the objects and their
relation inside rubyk (http://rubyk.org). Some examples of the syntax:

create a metronome object: m1 = Metro(120)
create a metronome object: m1 = Metro(metro:120) # same as above
create a note out object:     n  = NoteOut(velocity:80 port:"funk")
create a script object:         cooking = Script(".... Lua code ....")
create links:               m1.1 => 1.cooking, cooking.1 =>
1.n

Here is a rough prototype to implement the parsing using ragel (have
been using flex/lemon).

Am I doing this right ? More precisely :
1. is there a better way to extract token values ( instead of by
repeated @a appends) ?
2. would it be simpler to use ragel only for building the tokens and
let lemon handle the actions ?

Thanks for your answers.

Gaspard

=================== prototype.rl ========
#include <iostream>
#include <cstdio>
#define MAX_BUFFER_SIZE 2048

%%{
  machine foo;
  write data noerror;
}%%

class Command
{
public:
  void parse(char * str)
  {
    char *p = str; // data pointer
    char *pe = str + strlen(str); // past end
    int cs;        // machine state
    int len = 0;
    char token[MAX_BUFFER_SIZE + 1];

    %%{
      action a {
        if (len >= MAX_BUFFER_SIZE) {
          std::cerr << "Buffer overflow !" << std::endl;
          // stop parsing
          return;
        }
        token[len] = fc; /* append */
        len++;
      }

      action set_var {
        token[len] = '\0';
        mVariable = token;
        len = 0;
      }

      action key {
        token[len] = '\0';
        std::cout << "[key   :" << token << "]" << std::endl;
        len = 0;
      }

      action set_klass {
        token[len] = '\0';
        mClass = token;
        len = 0;
      }

      action space {
        printf(" ");
      }

      action ret {
        printf("\n");
      }

      action set_string {
        token[len] = '\0';
        mValue = token;
        len = 0;
      }

      action set_float {
        token[len] = '\0';
        mValue = token;
        len = 0;
      }

      action set_integer {
        token[len] = '\0';
        mValue = token;
        len = 0;
      }

      action set_from {
        mFromPort = atoi(mValue.c_str());
        mFrom = mVariable;
      }

      action create_instance {
        std::cout << "NEW  (" << mVariable << "=" << mClass << "()" <<
")" << std::endl;
      }

      action create_link {
        mToPort = atoi(mValue.c_str());
        mTo   = mVariable;
        std::cout << "LINK (" << mFrom << "." << mFromPort << "=>" <<
mToPort << "." << mTo << ")" << std::endl;
      }

      ws     = (' ' | '\n' | '\t')+;

      identifier = 'a'..'z' @a (digit | alpha | '_')* @a;

      var    = identifier %set_var;

      klass  = 'A'..'Z' @a (digit | alpha | '_')* @a %set_klass;

      string  = '"' ([^"\\] | '\n' | ( '\\' (any | '\n') ))* @a
%set_string '"';
      float   = ('1'..'9' @a digit* @a '.' @a digit+ @a) %set_float;
      integer = ('1'..'9' @a digit* @a) %set_integer;

      value  = (string | float | integer);

      key    = identifier %key;

      param  = (key ':' ws* value);

      parameters = value | (param ws*)+;

      create_instance = var ws* '=' ws* klass '(' parameters? ')'
@create_instance;

      create_link = var '.' integer @set_from ws* '=>' ws* integer '.'
var @create_link;

      main := ((create_instance | create_link) ws*)+  ;

      write init;
      write exec;
    }%%

    printf("\n");
  }
private:
  std::string mVariable, mFrom, mTo, mClass, mValue;
  int         mFromPort,     mToPort;
};

int main()
{
  Command cmd;
  cmd.parse("a=Value() b=Super(23.3)c=This(hey:\"mosdffasl\" come:
3)\na.1=>1.b a.2=>2.b");
}
===========================


From thurs... at cs.queensu.ca  Wed Oct 31 15:35:14 2007
From: thurs... at cs.queensu.ca (=?utf-8?B?QWRyaWFuIFRodXJzdG9u?=)
Date: Wed, 31 Oct 2007 15:35:14 +0000
Subject: [ragel-users] Is this the right way to do it ?
In-Reply-To: <1193817501.221237.216530@22g2000hsm.googlegroups.com>
References: <1193817501.221237.216530@22g2000hsm.googlegroups.com>
Message-ID: <1216083823-1193844882-cardhu_decombobulator_blackberry.rim.net-711112415-@bxe011.bisx.prod.on.blackberry>

Hi Gaspard,

The other way to catpure token text is to set pointers to mark the start and end of tokens. It is faster but requires that you be careful about buffer boundaries.

In my opinion this is a valid way to parse and the motivation is speed. However if speed is not a requirement and you're dealing with a token stream I would suggest that you use the more traditional lexer+parser approach.

Adrian

-----Original Message-----
From: Gaspard Bucher <gaspard at teti.ch>

Date: Wed, 31 Oct 2007 07:58:21 
To:ragel-users <ragel-users at googlegroups.com>
Subject: [ragel-users] Is this the right way to do it ?



I am implementing a parser to read commands from user (interactive) or
from a stored file. The idea is to build the objects and their
relation inside rubyk (http://rubyk.org). Some examples of the syntax:

create a metronome object: m1 = Metro(120)
create a metronome object: m1 = Metro(metro:120) # same as above
create a note out object:     n  = NoteOut(velocity:80 port:"funk")
create a script object:         cooking = Script(".... Lua code ....")
create links:               m1.1 => 1.cooking, cooking.1 =>
1.n

Here is a rough prototype to implement the parsing using ragel (have
been using flex/lemon).

Am I doing this right ? More precisely :
1. is there a better way to extract token values ( instead of by
repeated @a appends) ?
2. would it be simpler to use ragel only for building the tokens and
let lemon handle the actions ?

Thanks for your answers.

Gaspard

=================== prototype.rl ========
#include <iostream>
#include <cstdio>
#define MAX_BUFFER_SIZE 2048

%%{
  machine foo;
  write data noerror;
}%%

class Command
{
public:
  void parse(char * str)
  {
    char *p = str; // data pointer
    char *pe = str + strlen(str); // past end
    int cs;        // machine state
    int len = 0;
    char token[MAX_BUFFER_SIZE + 1];

    %%{
      action a {
        if (len >= MAX_BUFFER_SIZE) {
          std::cerr << "Buffer overflow !" << std::endl;
          // stop parsing
          return;
        }
        token[len] = fc; /* append */
        len++;
      }

      action set_var {
        token[len] = '\0';
        mVariable = token;
        len = 0;
      }

      action key {
        token[len] = '\0';
        std::cout << "[key   :" << token << "]" << std::endl;
        len = 0;
      }

      action set_klass {
        token[len] = '\0';
        mClass = token;
        len = 0;
      }

      action space {
        printf(" ");
      }

      action ret {
        printf("\n");
      }

      action set_string {
        token[len] = '\0';
        mValue = token;
        len = 0;
      }

      action set_float {
        token[len] = '\0';
        mValue = token;
        len = 0;
      }

      action set_integer {
        token[len] = '\0';
        mValue = token;
        len = 0;
      }

      action set_from {
        mFromPort = atoi(mValue.c_str());
        mFrom = mVariable;
      }

      action create_instance {
        std::cout << "NEW  (" << mVariable << "=" << mClass << "()" <<
")" << std::endl;
      }

      action create_link {
        mToPort = atoi(mValue.c_str());
        mTo   = mVariable;
        std::cout << "LINK (" << mFrom << "." << mFromPort << "=>" <<
mToPort << "." << mTo << ")" << std::endl;
      }

      ws     = (' ' | '\n' | '\t')+;

      identifier = 'a'..'z' @a (digit | alpha | '_')* @a;

      var    = identifier %set_var;

      klass  = 'A'..'Z' @a (digit | alpha | '_')* @a %set_klass;

      string  = '"' ([^"\\] | '\n' | ( '\\' (any | '\n') ))* @a
%set_string '"';
      float   = ('1'..'9' @a digit* @a '.' @a digit+ @a) %set_float;
      integer = ('1'..'9' @a digit* @a) %set_integer;

      value  = (string | float | integer);

      key    = identifier %key;

      param  = (key ':' ws* value);

      parameters = value | (param ws*)+;

      create_instance = var ws* '=' ws* klass '(' parameters? ')'
@create_instance;

      create_link = var '.' integer @set_from ws* '=>' ws* integer '.'
var @create_link;

      main := ((create_instance | create_link) ws*)+  ;

      write init;
      write exec;
    }%%

    printf("\n");
  }
private:
  std::string mVariable, mFrom, mTo, mClass, mValue;
  int         mFromPort,     mToPort;
};

int main()
{
  Command cmd;
  cmd.parse("a=Value() b=Super(23.3)c=This(hey:\"mosdffasl\" come:
3)\na.1=>1.b a.2=>2.b");
}
===========================





From gasp... at teti.ch  Wed Oct 31 17:07:55 2007
From: gasp... at teti.ch (Gaspard Bucher)
Date: Wed, 31 Oct 2007 18:07:55 +0100
Subject: [ragel-users] Re: Is this the right way to do it ?
In-Reply-To: <1216083823-1193844882-cardhu_decombobulator_blackberry.rim.net-7111124...@bxe011.bisx.prod.on.blackberry>
References: <1193817501.221237.216...@22g2000hsm.googlegroups.com>
	 <1216083823-1193844882-cardhu_decombobulator_blackberry.rim.net-7111124...@bxe011.bisx.prod.on.blackberry>
Message-ID: <7a9f744a0710311007t7ebfca53v93d84c295fbec29c@mail.gmail.com>

Speed was not the main issue for choosing ragel: gluing my Command
class with the lexer and lemon was not easy and felt unnatural. The
way ragel works is very intuitive to me. Moreover, I had a grief
against lemon: when the current state is terminal (only a default
action which is a 'resolve'), it still needs one more token (or EOF)
to trigger the reduction.

Rubyk (the tool I am working on) is about multimedia and AI, so state
machines feels like home and learning about ragel might help me for
the music production (networks of possible melodies with paths chosen
from the pattern recognition). Music is a state machine !

I think I am becoming a fan of ragel. I might also use it to parse
zafu templates and zazen (textile improved) for the CMS I am working
on (http://zenadmin.org).

Ragel is the kind of goodie that puts you into the state "I should
rewrite this using ragel" a couple of times a day... So I am very glad
flex/lemon were not such good friends (even though lemon is really
nice to use).

Thanks for the reply. I feel more confident with the way I am doing things.

Gaspard

2007/10/31, Adrian Thurston <thurs... at cs.queensu.ca>:
> Hi Gaspard,
>
> The other way to catpure token text is to set pointers to mark the start and end of tokens. It is faster but requires that you be careful about buffer boundaries.
>
> In my opinion this is a valid way to parse and the motivation is speed. However if speed is not a requirement and you're dealing with a token stream I would suggest that you use the more traditional lexer+parser approach.
>
> Adrian
>
> -----Original Message-----
> From: Gaspard Bucher <gasp... at teti.ch>
>
> Date: Wed, 31 Oct 2007 07:58:21
> To:ragel-users <ragel-users at googlegroups.com>
> Subject: [ragel-users] Is this the right way to do it ?
>
>
>
> I am implementing a parser to read commands from user (interactive) or
> from a stored file. The idea is to build the objects and their
> relation inside rubyk (http://rubyk.org). Some examples of the syntax:
>
> create a metronome object: m1 = Metro(120)
> create a metronome object: m1 = Metro(metro:120) # same as above
> create a note out object:     n  = NoteOut(velocity:80 port:"funk")
> create a script object:         cooking = Script(".... Lua code ....")
> create links:               m1.1 => 1.cooking, cooking.1 =>
> 1.n
>
> Here is a rough prototype to implement the parsing using ragel (have
> been using flex/lemon).
>
> Am I doing this right ? More precisely :
> 1. is there a better way to extract token values ( instead of by
> repeated @a appends) ?
> 2. would it be simpler to use ragel only for building the tokens and
> let lemon handle the actions ?
>
> Thanks for your answers.
>
> Gaspard
>
> =================== prototype.rl ========
> #include <iostream>
> #include <cstdio>
> #define MAX_BUFFER_SIZE 2048
>
> %%{
>   machine foo;
>   write data noerror;
> }%%
>
> class Command
> {
> public:
>   void parse(char * str)
>   {
>     char *p = str; // data pointer
>     char *pe = str + strlen(str); // past end
>     int cs;        // machine state
>     int len = 0;
>     char token[MAX_BUFFER_SIZE + 1];
>
>     %%{
>       action a {
>         if (len >= MAX_BUFFER_SIZE) {
>           std::cerr << "Buffer overflow !" << std::endl;
>           // stop parsing
>           return;
>         }
>         token[len] = fc; /* append */
>         len++;
>       }
>
>       action set_var {
>         token[len] = '\0';
>         mVariable = token;
>         len = 0;
>       }
>
>       action key {
>         token[len] = '\0';
>         std::cout << "[key   :" << token << "]" << std::endl;
>         len = 0;
>       }
>
>       action set_klass {
>         token[len] = '\0';
>         mClass = token;
>         len = 0;
>       }
>
>       action space {
>         printf(" ");
>       }
>
>       action ret {
>         printf("\n");
>       }
>
>       action set_string {
>         token[len] = '\0';
>         mValue = token;
>         len = 0;
>       }
>
>       action set_float {
>         token[len] = '\0';
>         mValue = token;
>         len = 0;
>       }
>
>       action set_integer {
>         token[len] = '\0';
>         mValue = token;
>         len = 0;
>       }
>
>       action set_from {
>         mFromPort = atoi(mValue.c_str());
>         mFrom = mVariable;
>       }
>
>       action create_instance {
>         std::cout << "NEW  (" << mVariable << "=" << mClass << "()" <<
> ")" << std::endl;
>       }
>
>       action create_link {
>         mToPort = atoi(mValue.c_str());
>         mTo   = mVariable;
>         std::cout << "LINK (" << mFrom << "." << mFromPort << "=>" <<
> mToPort << "." << mTo << ")" << std::endl;
>       }
>
>       ws     = (' ' | '\n' | '\t')+;
>
>       identifier = 'a'..'z' @a (digit | alpha | '_')* @a;
>
>       var    = identifier %set_var;
>
>       klass  = 'A'..'Z' @a (digit | alpha | '_')* @a %set_klass;
>
>       string  = '"' ([^"\\] | '\n' | ( '\\' (any | '\n') ))* @a
> %set_string '"';
>       float   = ('1'..'9' @a digit* @a '.' @a digit+ @a) %set_float;
>       integer = ('1'..'9' @a digit* @a) %set_integer;
>
>       value  = (string | float | integer);
>
>       key    = identifier %key;
>
>       param  = (key ':' ws* value);
>
>       parameters = value | (param ws*)+;
>
>       create_instance = var ws* '=' ws* klass '(' parameters? ')'
> @create_instance;
>
>       create_link = var '.' integer @set_from ws* '=>' ws* integer '.'
> var @create_link;
>
>       main := ((create_instance | create_link) ws*)+  ;
>
>       write init;
>       write exec;
>     }%%
>
>     printf("\n");
>   }
> private:
>   std::string mVariable, mFrom, mTo, mClass, mValue;
>   int         mFromPort,     mToPort;
> };
>
> int main()
> {
>   Command cmd;
>   cmd.parse("a=Value() b=Super(23.3)c=This(hey:\"mosdffasl\" come:
> 3)\na.1=>1.b a.2=>2.b");
> }
> ===========================
>
>
>
>
>
> >
>


From thurs... at cs.queensu.ca  Wed Oct 31 17:20:59 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Wed, 31 Oct 2007 13:20:59 -0400
Subject: [ragel-users] Re: Is this the right way to do it ?
In-Reply-To: <7a9f744a0710311007t7ebfca53v93d84c295fbec29c@mail.gmail.com>
References: <1193817501.221237.216530@22g2000hsm.googlegroups.com> <1216083823-1193844882-cardhu_decombobulator_blackberry.rim.net-711112415-@bxe011.bisx.prod.on.blackberry> <7a9f744a0710311007t7ebfca53v93d84c295fbec29c@mail.gmail.com>
Message-ID: <4728B97B.5060709@cs.queensu.ca>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Ah I see.

Another approach you might want to consider is to chain two ragel
machines together. Others have had success with this. There is an
example in test/high1.rl in the source distribution.

Adrian

Gaspard Bucher wrote:
> Speed was not the main issue for choosing ragel: gluing my Command
> class with the lexer and lemon was not easy and felt unnatural. The
> way ragel works is very intuitive to me. Moreover, I had a grief
> against lemon: when the current state is terminal (only a default
> action which is a 'resolve'), it still needs one more token (or EOF)
> to trigger the reduction.
> 
> Rubyk (the tool I am working on) is about multimedia and AI, so state
> machines feels like home and learning about ragel might help me for
> the music production (networks of possible melodies with paths chosen
> from the pattern recognition). Music is a state machine !
> 
> I think I am becoming a fan of ragel. I might also use it to parse
> zafu templates and zazen (textile improved) for the CMS I am working
> on (http://zenadmin.org).
> 
> Ragel is the kind of goodie that puts you into the state "I should
> rewrite this using ragel" a couple of times a day... So I am very glad
> flex/lemon were not such good friends (even though lemon is really
> nice to use).
> 
> Thanks for the reply. I feel more confident with the way I am doing things.
> 
> Gaspard
> 
> 2007/10/31, Adrian Thurston <thurs... at cs.queensu.ca>:
>> Hi Gaspard,
>>
>> The other way to catpure token text is to set pointers to mark the start and end of tokens. It is faster but requires that you be careful about buffer boundaries.
>>
>> In my opinion this is a valid way to parse and the motivation is speed. However if speed is not a requirement and you're dealing with a token stream I would suggest that you use the more traditional lexer+parser approach.
>>
>> Adrian
>>
>> -----Original Message-----
>> From: Gaspard Bucher <gasp... at teti.ch>
>>
>> Date: Wed, 31 Oct 2007 07:58:21
>> To:ragel-users <ragel-users at googlegroups.com>
>> Subject: [ragel-users] Is this the right way to do it ?
>>
>>
>>
>> I am implementing a parser to read commands from user (interactive) or
>> from a stored file. The idea is to build the objects and their
>> relation inside rubyk (http://rubyk.org). Some examples of the syntax:
>>
>> create a metronome object: m1 = Metro(120)
>> create a metronome object: m1 = Metro(metro:120) # same as above
>> create a note out object:     n  = NoteOut(velocity:80 port:"funk")
>> create a script object:         cooking = Script(".... Lua code ....")
>> create links:               m1.1 => 1.cooking, cooking.1 =>
>> 1.n
>>
>> Here is a rough prototype to implement the parsing using ragel (have
>> been using flex/lemon).
>>
>> Am I doing this right ? More precisely :
>> 1. is there a better way to extract token values ( instead of by
>> repeated @a appends) ?
>> 2. would it be simpler to use ragel only for building the tokens and
>> let lemon handle the actions ?
>>
>> Thanks for your answers.
>>
>> Gaspard
>>
>> =================== prototype.rl ========
>> #include <iostream>
>> #include <cstdio>
>> #define MAX_BUFFER_SIZE 2048
>>
>> %%{
>>   machine foo;
>>   write data noerror;
>> }%%
>>
>> class Command
>> {
>> public:
>>   void parse(char * str)
>>   {
>>     char *p = str; // data pointer
>>     char *pe = str + strlen(str); // past end
>>     int cs;        // machine state
>>     int len = 0;
>>     char token[MAX_BUFFER_SIZE + 1];
>>
>>     %%{
>>       action a {
>>         if (len >= MAX_BUFFER_SIZE) {
>>           std::cerr << "Buffer overflow !" << std::endl;
>>           // stop parsing
>>           return;
>>         }
>>         token[len] = fc; /* append */
>>         len++;
>>       }
>>
>>       action set_var {
>>         token[len] = '\0';
>>         mVariable = token;
>>         len = 0;
>>       }
>>
>>       action key {
>>         token[len] = '\0';
>>         std::cout << "[key   :" << token << "]" << std::endl;
>>         len = 0;
>>       }
>>
>>       action set_klass {
>>         token[len] = '\0';
>>         mClass = token;
>>         len = 0;
>>       }
>>
>>       action space {
>>         printf(" ");
>>       }
>>
>>       action ret {
>>         printf("\n");
>>       }
>>
>>       action set_string {
>>         token[len] = '\0';
>>         mValue = token;
>>         len = 0;
>>       }
>>
>>       action set_float {
>>         token[len] = '\0';
>>         mValue = token;
>>         len = 0;
>>       }
>>
>>       action set_integer {
>>         token[len] = '\0';
>>         mValue = token;
>>         len = 0;
>>       }
>>
>>       action set_from {
>>         mFromPort = atoi(mValue.c_str());
>>         mFrom = mVariable;
>>       }
>>
>>       action create_instance {
>>         std::cout << "NEW  (" << mVariable << "=" << mClass << "()" <<
>> ")" << std::endl;
>>       }
>>
>>       action create_link {
>>         mToPort = atoi(mValue.c_str());
>>         mTo   = mVariable;
>>         std::cout << "LINK (" << mFrom << "." << mFromPort << "=>" <<
>> mToPort << "." << mTo << ")" << std::endl;
>>       }
>>
>>       ws     = (' ' | '\n' | '\t')+;
>>
>>       identifier = 'a'..'z' @a (digit | alpha | '_')* @a;
>>
>>       var    = identifier %set_var;
>>
>>       klass  = 'A'..'Z' @a (digit | alpha | '_')* @a %set_klass;
>>
>>       string  = '"' ([^"\\] | '\n' | ( '\\' (any | '\n') ))* @a
>> %set_string '"';
>>       float   = ('1'..'9' @a digit* @a '.' @a digit+ @a) %set_float;
>>       integer = ('1'..'9' @a digit* @a) %set_integer;
>>
>>       value  = (string | float | integer);
>>
>>       key    = identifier %key;
>>
>>       param  = (key ':' ws* value);
>>
>>       parameters = value | (param ws*)+;
>>
>>       create_instance = var ws* '=' ws* klass '(' parameters? ')'
>> @create_instance;
>>
>>       create_link = var '.' integer @set_from ws* '=>' ws* integer '.'
>> var @create_link;
>>
>>       main := ((create_instance | create_link) ws*)+  ;
>>
>>       write init;
>>       write exec;
>>     }%%
>>
>>     printf("\n");
>>   }
>> private:
>>   std::string mVariable, mFrom, mTo, mClass, mValue;
>>   int         mFromPort,     mToPort;
>> };
>>
>> int main()
>> {
>>   Command cmd;
>>   cmd.parse("a=Value() b=Super(23.3)c=This(hey:\"mosdffasl\" come:
>> 3)\na.1=>1.b a.2=>2.b");
>> }
>> ===========================
>>
>>
>>
>>
>>
> 
> > 
> 
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.6 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iD8DBQFHKLkHUP5HJ33BlvsRAlsiAKCXWKXJiVG+6RVZX39ZTPT14lzsRQCfatUZ
TkWrPWrHNm1rKYU7GTGWC+Y=
=oRvQ
-----END PGP SIGNATURE-----


