From angaut... at yahoo.com  Mon Jul  2 04:15:44 2007
From: angaut... at yahoo.com (gautham a n)
Date: Sun, 1 Jul 2007 21:15:44 -0700 (PDT)
Subject: [ragel-users] Re: Newbie question - regarding anchoring
Message-ID: <383983.91141.qm@web53604.mail.re2.yahoo.com>

Hi,

Thanks a lot for the clarification. I understand now.

-gautham

----- Original Message ----
From: Adrian Thurston <thurs... at cs.queensu.ca>
To: ragel-users at googlegroups.com
Sent: Friday, June 29, 2007 7:35:04 PM
Subject: [ragel-users] Re: Newbie question - regarding anchoring

Hello,

gautham a n wrote:
> would print "you said hello.\n" for both input strings - "Hello world"
> and "world Hello abcdef".

That is true of regular expressions as they are commonly known, but it
is not the case with Ragel. Ragel is more like a parser generator that
works with regular languages than a regular expression engine. If you
wanted to match the second string you would either have to put an "any*"
at the front or manually re-call the machine at every input location.

Cheers,
 Adrian

> 
> But, what would I need to do if I wanted the above printf() to be called only in the case when "Hello" is found at the beginning of the input string and, don't want the printf() to be called if some other substring is present at the beginning of the input string ?
> 
> Thanks in advance.
> 
> -gautham
> 
> ----- Original Message ----
> From: Adrian Thurston <thurs... at cs.queensu.ca>
> To: ragel-users at googlegroups.com
> Sent: Thursday, June 28, 2007 8:55:43 PM
> Subject: [ragel-users] Re: Newbie question - regarding anchoring
> 
> Hi,
> 
> Ragel does not employ a regular expression matching engine, just a
> simple state machine which begins operation at the start of the input
> string. Since it does not attempt to match a pattern at every input
> position you don't need ^ to restrict the pattern to the beginning of an
> input string.
> 
> Cheers,
>  Adrian
> 
> gautham wrote:
>> Hi,
>>
>> I am new to Ragel. I am trying out different regular expressions to
>> gain more familiariaty.
>>
>> I am unable to write a regex which is matched only when it is found at
>> the beginning of the input string. For example, the regex should match
>> "hello world start" and not match "world hello start".
>>
>> I tried using "^hello" - similar to lex/awk, but the "^" seems to be
>> interpreted literally.
>>
>> Thanks in advance.
>>
>> -gautham
>>
>>
>>
> 
> 
> 
> 
> 
>        
> ____________________________________________________________________________________
> Sick sense of humor? Visit Yahoo! TV's 
> Comedy with an Edge to see what's on, when. 
> http://tv.yahoo.com/collections/222
> 
> 





       
____________________________________________________________________________________
Take the Internet to Go: Yahoo!Go puts the Internet in your pocket: mail, news, photos & more. 
http://mobile.yahoo.com/go?refer=1GNXIC


From cmantu... at gmail.com  Tue Jul  3 23:04:50 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Tue, 3 Jul 2007 19:04:50 -0400
Subject: Capturing subpatterns
Message-ID: <cb2ad8b50707031604oe30af3ax4f44b00388d1edb@mail.gmail.com>

HI Adrian,

As promised, here's my request for a capture feature.

I base my request on a similar feature used on PCRE called Named
Subpatterns. This is useful because it obviates the need to do capture
byte-by-byte. A typical expression would be (as given in the
pcrepattern(3) man-page :

(?P<DN>Mon|Fri|Sun)(?:day)?|
(?P<DN>Tue)(?:sday)?|
(?P<DN>Wed)(?:nesday)?|
(?P<DN>Thu)(?:rsday)?|
(?P<DN>Sat)(?:urday)?

The syntax uses '?' as a modifier to '(' and allows different and
context-sensitive extensions to its regular meaning. The 'P<name>' is
the one used for naming capturing subpatterns. (The fact that
subpatterns in Ragel don't currently do any capturing is of no
consequence, I would suggest.)

Personally, I think this feature would be very useful as it would make
the life of the programmer easier.It would facilitate the capture of
portions of the input stream without relying on byte-by-byte copying.

So, here I am, humbly requesting yet another feature! :)

Thanks!

Carlos

-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From thurs... at cs.queensu.ca  Wed Jul 11 17:33:09 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Wed, 11 Jul 2007 13:33:09 -0400
Subject: [ragel-users] Capturing subpatterns
In-Reply-To: <cb2ad8b50707031604oe30af3ax4f44b00388d1edb@mail.gmail.com>
References: <cb2ad8b50707031604oe30af3ax4f44b00388d1edb@mail.gmail.com>
Message-ID: <46951455.80200@cs.queensu.ca>

Hello,

This is a feature I've spent some time thinking about. It would end up
being syntactic sugar for

( ( 'Mon' | 'Fri' | 'Sun' ) 'day'? ) >{ m=p; } %{ me=p; }

It seems too trivial to me to deserve it's own syntax. Also, there is
more than one way to do this. Sometimes you may be able to record the
end position on the last character (IE using @).

This may be obvious to Ragel users, but I just want state for the record
that PCRE is a different kind of tool from Ragel. PCRE has an
interpretor that can backtrack through regular expressions (not to be
confused with backtracking through input), whereas Ragel generates
deterministic state machines. They both support nondeterministic
expressions. The difference is that in PCRE nondeterminism can occur at
runtime, whereas in Ragel it is always eliminated at compile time.

Regards,
 Adrian

Carlos Antunes wrote:
> HI Adrian,
> 
> As promised, here's my request for a capture feature.
> 
> I base my request on a similar feature used on PCRE called Named
> Subpatterns. This is useful because it obviates the need to do capture
> byte-by-byte. A typical expression would be (as given in the
> pcrepattern(3) man-page :
> 
> (?P<DN>Mon|Fri|Sun)(?:day)?|
> (?P<DN>Tue)(?:sday)?|
> (?P<DN>Wed)(?:nesday)?|
> (?P<DN>Thu)(?:rsday)?|
> (?P<DN>Sat)(?:urday)?
> 
> The syntax uses '?' as a modifier to '(' and allows different and
> context-sensitive extensions to its regular meaning. The 'P<name>' is
> the one used for naming capturing subpatterns. (The fact that
> subpatterns in Ragel don't currently do any capturing is of no
> consequence, I would suggest.)
> 
> Personally, I think this feature would be very useful as it would make
> the life of the programmer easier.It would facilitate the capture of
> portions of the input stream without relying on byte-by-byte copying.
> 
> So, here I am, humbly requesting yet another feature! :)
> 
> Thanks!
> 
> Carlos
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20070711/70521633/attachment.sig>

From cmantu... at gmail.com  Sun Jul  1 03:58:20 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Sat, 30 Jun 2007 20:58:20 -0700
Subject: Inline scanner
Message-ID: <1183262300.051714.182320@m36g2000hse.googlegroups.com>

Hi Adrian,

It's been a while...

It's good to know you are still supporting Ragel. With that being
said, is there any chance of having "inline scanner" functionality
added? We discussed this quite some time ago. The idea is to be have a
"longest match with capture" of start and stop of the match inline
instead of having to rely on external scanners.

Alternatively, what about the ability to automatically jump from a
state to a scanner without needing a match followed by an fcall?

Thanks!

Carlos


From thurs... at cs.queensu.ca  Sun Jul  1 15:58:58 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Sun, 01 Jul 2007 11:58:58 -0400
Subject: [ragel-users] Inline scanner
In-Reply-To: <1183262300.051714.182320@m36g2000hse.googlegroups.com>
References: <1183262300.051714.182320@m36g2000hse.googlegroups.com>
Message-ID: <4687CF42.1040202@cs.queensu.ca>

Hi Carlos,

Yeah, I remember that conversation. I thought about those issues and a
clear design with good value and a nice implementation never became
apparent to me. Since discussions didn't prove fruitful last time I
think a mockup would be really helpful to hash out the idea. An example
of the new syntax used to solve a real problem paired with the an
implementation using the existing syntax (the classic before and after)
would really make things clear.

Cheers,
 Adrian

Carlos Antunes wrote:
> Hi Adrian,
> 
> It's been a while...
> 
> It's good to know you are still supporting Ragel. With that being
> said, is there any chance of having "inline scanner" functionality
> added? We discussed this quite some time ago. The idea is to be have a
> "longest match with capture" of start and stop of the match inline
> instead of having to rely on external scanners.
> 
> Alternatively, what about the ability to automatically jump from a
> state to a scanner without needing a match followed by an fcall?
> 
> Thanks!
> 
> Carlos
> 
> 
> --~--~---------~--~----~------------~-------~--~----~
> You received this message because you are subscribed to the Google Groups "ragel-users" group.
> To post to this group, send email to ragel-users at googlegroups.com
> To unsubscribe from this group, send email to ragel-users-unsubscribe at googlegroups.com
> For more options, visit this group at http://groups.google.com/group/ragel-users?hl=en
> -~----------~----~----~----~------~----~------~--~---

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20070701/ff3f52b5/attachment.sig>

From cmantu... at gmail.com  Sun Jul  1 20:17:52 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Sun, 1 Jul 2007 16:17:52 -0400
Subject: [ragel-users] Re: Inline scanner
In-Reply-To: <4687CF42.1040202@cs.queensu.ca>
References: <1183262300.051714.182320@m36g2000hse.googlegroups.com>
	 <4687CF42.1040...@cs.queensu.ca>
Message-ID: <cb2ad8b50707011317i603dd0d5rd63c024393ba56de@mail.gmail.com>

Adrian,

I have been doing a SIP parser using ragel. The main practical problem
I encountered, when using ragel to ijmplement the SIP parser, has to
do with spaces.

In SIP, a space can be defined as:

sp = ( ( "\r"? "\n" )? [ \t] )+;

On the other hand, a CRLF can be defined as

crlf = "\r"? "\n";

In many case, we have lines that may end up as:

line = "start" whatever sp? crlf;

with:

whatever = ( sp? something)*

Now, without priorities, the thing just don't work because of the
bactracking necessary to resolve between a sp and a crlf. Also,
without priorities, whatever ends up being evaluated several times
because something might start with spaces (or not). With priorities, I
was able to make many of these things work but the numbers of states
just explodes beyond belief. The problem is that is takes 30 minutes
to compile each time I make a modification and I am not done with all
the SIP rules yet.

The bottom line is that the SIP grammar is tough. Ragel has a good
shot at implementing the thing but the pure FSM approach just doesn't
cut it. On the other hand, because inline longest match scanners
aren't available, one has to resort to ugly tricks to call external
scanners.

How would one do the above example with an inline scanner?

sp_optional = |*

  ( ( "\r"? "\n" )? [ \t] )* { fret; };

*|;

line = "start" whatever sp_optional crlf;

whatever = ( sp_optional something)*

The obvious advantage in this case is that the longest match feature
of the scanner will eliminate the need for priorities and FSM
backtracking; therefore, I posit, the FSM would be simpler and it
wouldn't take 30 minutes to compile as of now! :)

I'll leave the capture feature for a subsequent email.

Thanks!

Carlos



On 7/1/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> Hi Carlos,
>
> Yeah, I remember that conversation. I thought about those issues and a
> clear design with good value and a nice implementation never became
> apparent to me. Since discussions didn't prove fruitful last time I
> think a mockup would be really helpful to hash out the idea. An example
> of the new syntax used to solve a real problem paired with the an
> implementation using the existing syntax (the classic before and after)
> would really make things clear.
>
> Cheers,
>  Adrian
>
> Carlos Antunes wrote:
> > Hi Adrian,
> >
> > It's been a while...
> >
> > It's good to know you are still supporting Ragel. With that being
> > said, is there any chance of having "inline scanner" functionality
> > added? We discussed this quite some time ago. The idea is to be have a
> > "longest match with capture" of start and stop of the match inline
> > instead of having to rely on external scanners.
> >
> > Alternatively, what about the ability to automatically jump from a
> > state to a scanner without needing a match followed by an fcall?
> >
> > Thanks!
> >
> > Carlos
> >
> >
> > >
>
>


-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From thurs... at cs.queensu.ca  Wed Jul  4 04:54:17 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Wed, 04 Jul 2007 00:54:17 -0400
Subject: [ragel-users] Re: Inline scanner
In-Reply-To: <cb2ad8b50707011317i603dd0d5rd63c024393ba56de@mail.gmail.com>
References: <1183262300.051714.182320@m36g2000hse.googlegroups.com> <4687CF42.1040202@cs.queensu.ca> <cb2ad8b50707011317i603dd0d5rd63c024393ba56de@mail.gmail.com>
Message-ID: <468B27F9.9040300@cs.queensu.ca>

Hey Carlos, I think this does what you want. It moves the processing of
whitespace out of the main machine and should reduce the number of states.

When a whitespace character is seen there is a call to a scanner which
consumes whitespace. When the whitespace scanner sees non-whitespace it
holds it and returns. When it sees the end-of-header pattern ('\n' with
no continuation) it holds the '\n' and returns. This held '\n' is then
read by the end of header string and the header terminates.

Cheers,
 Adrian
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: sip-ws.rl
URL: <http://www.colm.net/pipermail/ragel/attachments/20070704/bca67ba4/attachment.ksh>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20070704/bca67ba4/attachment.sig>

From cmantu... at gmail.com  Thu Jul  5 03:08:36 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Wed, 4 Jul 2007 23:08:36 -0400
Subject: [ragel-users] Re: Inline scanner
In-Reply-To: <468B27F9.9040300@cs.queensu.ca>
References: <1183262300.051714.182...@m36g2000hse.googlegroups.com>
	 <4687CF42.1040...@cs.queensu.ca>
	 <cb2ad8b50707011317i603dd0d5rd63c024393ba5...@mail.gmail.com>
	 <468B27F9.9040...@cs.queensu.ca>
Message-ID: <cb2ad8b50707042008g19ed44daq7b3174cca9972243@mail.gmail.com>

Hi Adrian!

Thanks for the idea and code!

I was now able to reduce ragel's memory usage to 330Mbytes with 24212
states. Compilation time is now roughly 2m45s. I'm still adding stuff
so I don't know how things will progress.

In any case, is there any particular reason you resist the
implementation of a "longest match with backtracking" feature? I am
asking because this feature, as you know, is the default in pretty
much any regex lib/app out there. I still think it would be useful in
ragel, without the need to match and call "external" scanners (which
tends to break the continuity of the grammar.)

Thanks!

Carlos

On 7/4/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> Hey Carlos, I think this does what you want. It moves the processing of
> whitespace out of the main machine and should reduce the number of states.
>
> When a whitespace character is seen there is a call to a scanner which
> consumes whitespace. When the whitespace scanner sees non-whitespace it
> holds it and returns. When it sees the end-of-header pattern ('\n' with
> no continuation) it holds the '\n' and returns. This held '\n' is then
> read by the end of header string and the header terminates.
>
> Cheers,
>  Adrian
>
> #include <iostream>
> #include <stdlib.h>
> #include <stdio.h>
>
> using namespace std;
>
> %%{
>         machine sipws;
>         write data;
> }%%
>
> void sipws( char *str )
> {
>         char *p = str, *pe = str + strlen(str) + 1;
>         int cs;
>         int stack[1];
>         int top, act;
>         char *tokstart, *tokend;
>
>         %%{
>                 ws_scan := |*
>                         # Consume spaces.
>                         [ \t]+;
>
>                         # Consume line continuations
>                         '\r'? '\n' [ \t]+;
>
>                         # An end of header. Holds the \n so the end pattern can match.
>                         '\r'? '\n' => {
>                                 cerr << "returning from ws (done) " << (p-str) << endl;
>                                 fhold; fret;
>                         };
>
>                         # Any other character, hold it and return. */
>                         any => {
>                                 cerr << "returning from ws (cont)" << endl;
>                                 fhold; fret;
>                         };
>                 *|;
>
>                 # A word is any non-whitespace.
>                 word = [^ \t\r\n]+;
>
>                 # Whitespace machine: holds the character and jumps to the whitespace
>                 # scanner for processing.
>                 ws = [ \t\r\n] @{
>                         cerr << "going to whitespace " << (p-str) << endl;
>                         fhold; fcall ws_scan;
>                 };
>
>                 # A newline immediately after coming back from the whitespace scanner
>                 # signifies the end of a header.
>                 ws_end = ws '\n';
>
>                 header = [a-z]+ ':' ws? word (ws word)* ws_end;
>
>                 main := header+ 0;
>
>                 # Initialize and execute.
>                 write init;
>                 write exec;
>         }%%
>
>         if ( cs < sipws_first_final )
>                 cerr << "sipws: there was an error at position " << (p-str) << endl;
> };
>
>
> #define BUFSIZE 1024
>
> int main()
> {
>         sipws(
>                 "hr: asdf ljfa ljd\n"
>                 "       cont\n"
>                 "new:asiei\n"
>         );
>         return 0;
> }
>
>
>


-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From thurs... at cs.queensu.ca  Thu Jul  5 05:42:25 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Thu, 05 Jul 2007 01:42:25 -0400
Subject: [ragel-users] Re: Inline scanner
In-Reply-To: <cb2ad8b50707042008g19ed44daq7b3174cca9972243@mail.gmail.com>
References: <1183262300.051714.182320@m36g2000hse.googlegroups.com> <4687CF42.1040202@cs.queensu.ca> <cb2ad8b50707011317i603dd0d5rd63c024393ba56de@mail.gmail.com> <468B27F9.9040300@cs.queensu.ca> <cb2ad8b50707042008g19ed44daq7b3174cca9972243@mail.gmail.com>
Message-ID: <468C84C1.10900@cs.queensu.ca>

Hi Carlos,

I'm not yet convinced that a new feature is necessary to solve this
problem. It seems to me that it's more a matter of coding technique. But
of course I could be wrong ... I just need to know how an inline scanner
is different and better than the code I sent.

One difference I can think of (you described this previously) is that
the inline scanner is entered immediately upon moving to the start state
 (as opposed to the first character out of the start state).
Unfortunately this is not compatible with the current run-time model, in
which actions take place only on transitions over characters. Anything
that involves changing the run-time model I have to consider very carefully.

-Adrian

Carlos Antunes wrote:
> Hi Adrian!
> 
> Thanks for the idea and code!
> 
> I was now able to reduce ragel's memory usage to 330Mbytes with 24212
> states. Compilation time is now roughly 2m45s. I'm still adding stuff
> so I don't know how things will progress.
> 
> In any case, is there any particular reason you resist the
> implementation of a "longest match with backtracking" feature? I am
> asking because this feature, as you know, is the default in pretty
> much any regex lib/app out there. I still think it would be useful in
> ragel, without the need to match and call "external" scanners (which
> tends to break the continuity of the grammar.)
> 
> Thanks!
> 
> Carlos
> 
> On 7/4/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>> Hey Carlos, I think this does what you want. It moves the processing of
>> whitespace out of the main machine and should reduce the number of states.
>>
>> When a whitespace character is seen there is a call to a scanner which
>> consumes whitespace. When the whitespace scanner sees non-whitespace it
>> holds it and returns. When it sees the end-of-header pattern ('\n' with
>> no continuation) it holds the '\n' and returns. This held '\n' is then
>> read by the end of header string and the header terminates.
>>
>> Cheers,
>>  Adrian
>>
>> #include <iostream>
>> #include <stdlib.h>
>> #include <stdio.h>
>>
>> using namespace std;
>>
>> %%{
>>         machine sipws;
>>         write data;
>> }%%
>>
>> void sipws( char *str )
>> {
>>         char *p = str, *pe = str + strlen(str) + 1;
>>         int cs;
>>         int stack[1];
>>         int top, act;
>>         char *tokstart, *tokend;
>>
>>         %%{
>>                 ws_scan := |*
>>                         # Consume spaces.
>>                         [ \t]+;
>>
>>                         # Consume line continuations
>>                         '\r'? '\n' [ \t]+;
>>
>>                         # An end of header. Holds the \n so the end pattern can match.
>>                         '\r'? '\n' => {
>>                                 cerr << "returning from ws (done) " << (p-str) << endl;
>>                                 fhold; fret;
>>                         };
>>
>>                         # Any other character, hold it and return. */
>>                         any => {
>>                                 cerr << "returning from ws (cont)" << endl;
>>                                 fhold; fret;
>>                         };
>>                 *|;
>>
>>                 # A word is any non-whitespace.
>>                 word = [^ \t\r\n]+;
>>
>>                 # Whitespace machine: holds the character and jumps to the whitespace
>>                 # scanner for processing.
>>                 ws = [ \t\r\n] @{
>>                         cerr << "going to whitespace " << (p-str) << endl;
>>                         fhold; fcall ws_scan;
>>                 };
>>
>>                 # A newline immediately after coming back from the whitespace scanner
>>                 # signifies the end of a header.
>>                 ws_end = ws '\n';
>>
>>                 header = [a-z]+ ':' ws? word (ws word)* ws_end;
>>
>>                 main := header+ 0;
>>
>>                 # Initialize and execute.
>>                 write init;
>>                 write exec;
>>         }%%
>>
>>         if ( cs < sipws_first_final )
>>                 cerr << "sipws: there was an error at position " << (p-str) << endl;
>> };
>>
>>
>> #define BUFSIZE 1024
>>
>> int main()
>> {
>>         sipws(
>>                 "hr: asdf ljfa ljd\n"
>>                 "       cont\n"
>>                 "new:asiei\n"
>>         );
>>         return 0;
>> }
>>
>>
>>
> 
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20070705/91692b60/attachment.sig>

From cmantu... at gmail.com  Thu Jul  5 16:00:33 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Thu, 5 Jul 2007 12:00:33 -0400
Subject: [ragel-users] Re: Inline scanner
In-Reply-To: <468C84C1.10900@cs.queensu.ca>
References: <1183262300.051714.182...@m36g2000hse.googlegroups.com>
	 <4687CF42.1040...@cs.queensu.ca>
	 <cb2ad8b50707011317i603dd0d5rd63c024393ba5...@mail.gmail.com>
	 <468B27F9.9040...@cs.queensu.ca>
	 <cb2ad8b50707042008g19ed44daq7b3174cca9972...@mail.gmail.com>
	 <468C84C1.10...@cs.queensu.ca>
Message-ID: <cb2ad8b50707050900q7cf6a14fmbc2ab81299f395b@mail.gmail.com>

On 7/5/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>
> I'm not yet convinced that a new feature is necessary to solve this
> problem. It seems to me that it's more a matter of coding technique. But
> of course I could be wrong ... I just need to know how an inline scanner
> is different and better than the code I sent.
>

Adrian, the code you sent, while very useful in my case, is a hack!
This preprocessing code is necessary because ragel is not able to
efficiently handle a SIP parser in practical terms, with only
priorities.

Let me give you an example of something very common in the way SIP is defined:

    algorithm_value = /MD5/i @(p_algorithm_value, 1) |
                              /MD5-sess/i @(p_algorithm_value, 1) |
                              token @(p_algorithm_value, 0);

I have to use priorities here to make sure that /MD5/ and /MD5-sess/
aren't evaluated in parallel with token, given that token matches
(almost) everything. With a scanner, this would be a breeze and would
require no priorities.

Right now, I have:

A)    algorithm = /algorithm/i equal algorithm_value;

Currently, to code with a scanner, I have to do something like this:

B)    algorithm = /algorithm/i sp_optional '=' @{ fcall scan_algorithm_value; }

However, this breaks the "flow" of the grammar. What is easier to
understand, maintain (and keep consistent with SIP, in this case), 'A'
or 'B'? For me, I prefer to use 'A'.

>
> One difference I can think of (you described this previously) is that
> the inline scanner is entered immediately upon moving to the start state
>  (as opposed to the first character out of the start state).
> Unfortunately this is not compatible with the current run-time model, in
> which actions take place only on transitions over characters. Anything
> that involves changing the run-time model I have to consider very carefully.
>

Assuming I understand the idea you are trying to convey here (there's
a good chance that I don't), isn't it possible to transition directly
to the scanner by looking at all the potential transitions of the
scanner as if it was a "normal" state machine?

For example, let's assume one has the machine:

C)    variable '=' digit+;

With an inline scanner, this would be, for example:

D)    variable '=' |* digit+ *|;

In 'C', you transition from state "matched_equal" to state
"matched_digit" upon seeing a digit. Now, you could do the same in
'D', no? For all practical purposes, the transition process appears to
be the same in both 'C' and 'D'. The fact that in 'D' you would be
operating under the "longest match with backtracking" paradigm appears
to not affect that initial transition into the scanner. What I am
trying to get at is that maybe you really don't have to change your
run-time model?

Thanks!

Carlos

-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From thurs... at cs.queensu.ca  Thu Jul  5 18:04:30 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Thu, 05 Jul 2007 14:04:30 -0400
Subject: [ragel-users] Re: Inline scanner
In-Reply-To: <cb2ad8b50707050900q7cf6a14fmbc2ab81299f395b@mail.gmail.com>
References: <1183262300.051714.182320@m36g2000hse.googlegroups.com> <4687CF42.1040202@cs.queensu.ca> <cb2ad8b50707011317i603dd0d5rd63c024393ba56de@mail.gmail.com> <468B27F9.9040300@cs.queensu.ca> <cb2ad8b50707042008g19ed44daq7b3174cca9972243@mail.gmail.com> <468C84C1.10900@cs.queensu.ca> <cb2ad8b50707050900q7cf6a14fmbc2ab81299f395b@mail.gmail.com>
Message-ID: <468D32AE.1040206@cs.queensu.ca>


Carlos Antunes wrote:
> Adrian, the code you sent, while very useful in my case, is a hack!
> This preprocessing code is necessary because ragel is not able to
> efficiently handle a SIP parser in practical terms, with only
> priorities.

Indeed, the code is a hack. However, I think it is the appropriate
implementation technique for an inline scanner feature so we should be
playing with it. This is how I work on Ragel: mock up the new feature,
then try to do implementations using the existing syntax. It shows you
exactly where the existing language fails and gives you lots of insight
into how the new feature can be implemented in the Ragel compiler. If
it's not really a new feature that you need, but instead a coding
technique, it usually shows that as well.

I should tell you that this problem is well suited to my current
project. It's called Colm (for computer language manipulation) and it
could possibly become my PhD thesis project. It's not currently
released. Colm is going to be a transformation system in the spirit of
TXL (http://www.txl.ca/). The parsing engine is what you would be
interested in. I don't want to give details at this point, but I think
it would provide for an easy implementation of the SIP grammar. So part
of me wants to say "just wait for that" ;)

But since that's not really of use to anyone right now I think the way
to proceed is to do more of these implementations using existing ragel
syntax. I will send some more soon.

> Assuming I understand the idea you are trying to convey here (there's
> a good chance that I don't), isn't it possible to transition directly
> to the scanner by looking at all the potential transitions of the
> scanner as if it was a "normal" state machine?

Yes, that's possible. The code I sent does exactly that, only it's
explicitly implemented. When it sees a whitespace character it jumps to
the whitespace scanner. I'll rework what I sent so hopefully it's clear
that it is an implementation of an inline scanner.

Regards,
 Adrian

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20070705/225ae0af/attachment.sig>

From thurs... at cs.queensu.ca  Fri Jul  6 00:24:39 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Thu, 05 Jul 2007 20:24:39 -0400
Subject: [ragel-users] Re: Inline scanner
In-Reply-To: <468D32AE.1040206@cs.queensu.ca>
References: <1183262300.051714.182320@m36g2000hse.googlegroups.com> <4687CF42.1040202@cs.queensu.ca> <cb2ad8b50707011317i603dd0d5rd63c024393ba56de@mail.gmail.com> <468B27F9.9040300@cs.queensu.ca> <cb2ad8b50707042008g19ed44daq7b3174cca9972243@mail.gmail.com> <468C84C1.10900@cs.queensu.ca> <cb2ad8b50707050900q7cf6a14fmbc2ab81299f395b@mail.gmail.com> <468D32AE.1040206@cs.queensu.ca>
Message-ID: <468D8BC7.1030308@cs.queensu.ca>

Hi Carlos,

Here is a better implementation of the whitespace problem. It pretty
much looks like the mockup except there is a wrapper which calls the
scanner and an extra pattern which is used to return from the scanner.

Adrian
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: sip-ws.rl
URL: <http://www.colm.net/pipermail/ragel/attachments/20070705/e4bc36a9/attachment.ksh>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20070705/e4bc36a9/attachment.sig>

From cmantu... at gmail.com  Tue Jul 10 23:47:07 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Tue, 10 Jul 2007 19:47:07 -0400
Subject: [ragel-users] Re: Inline scanner
In-Reply-To: <468D32AE.1040206@cs.queensu.ca>
References: <1183262300.051714.182...@m36g2000hse.googlegroups.com>
	 <4687CF42.1040...@cs.queensu.ca>
	 <cb2ad8b50707011317i603dd0d5rd63c024393ba5...@mail.gmail.com>
	 <468B27F9.9040...@cs.queensu.ca>
	 <cb2ad8b50707042008g19ed44daq7b3174cca9972...@mail.gmail.com>
	 <468C84C1.10...@cs.queensu.ca>
	 <cb2ad8b50707050900q7cf6a14fmbc2ab81299f3...@mail.gmail.com>
	 <468D32AE.1040...@cs.queensu.ca>
Message-ID: <cb2ad8b50707101647u7a978de6q9ba2011ae30d23dc@mail.gmail.com>

On 7/5/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>
>
> > Assuming I understand the idea you are trying to convey here (there's
> > a good chance that I don't), isn't it possible to transition directly
> > to the scanner by looking at all the potential transitions of the
> > scanner as if it was a "normal" state machine?
>
> Yes, that's possible. The code I sent does exactly that, only it's
> explicitly implemented. When it sees a whitespace character it jumps to
> the whitespace scanner. I'll rework what I sent so hopefully it's clear
> that it is an implementation of an inline scanner.
>

Adrian, now that you've been able to explicitly design an inline
scanner, would you be able to code ragel to do it implicitly? Although
one can always do it by hand, as you did, it is error prone and
sometimes somewhat difficult, depending on what you have inside the
scanner. This feature would be very much appreciated.

Thanks!

Carlos Antunes

-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From thurs... at cs.queensu.ca  Wed Jul 11 16:57:39 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Wed, 11 Jul 2007 12:57:39 -0400
Subject: [ragel-users] Re: Inline scanner
In-Reply-To: <cb2ad8b50707101647u7a978de6q9ba2011ae30d23dc@mail.gmail.com>
References: <1183262300.051714.182320@m36g2000hse.googlegroups.com> <4687CF42.1040202@cs.queensu.ca> <cb2ad8b50707011317i603dd0d5rd63c024393ba56de@mail.gmail.com> <468B27F9.9040300@cs.queensu.ca> <cb2ad8b50707042008g19ed44daq7b3174cca9972243@mail.gmail.com> <468C84C1.10900@cs.queensu.ca> <cb2ad8b50707050900q7cf6a14fmbc2ab81299f395b@mail.gmail.com> <468D32AE.1040206@cs.queensu.ca> <cb2ad8b50707101647u7a978de6q9ba2011ae30d23dc@mail.gmail.com>
Message-ID: <46950C03.4000503@cs.queensu.ca>

Hi Carlos,

After much thought I've decided that inline scanners are not a suitable
feature for ragel. It is a good technique but there are a few issues.

I think that calls and returns should not be encoded in a language
construct. They need to be treated with care and I'm not comfortable
with encapsulating them.

There is the issue of when to return. Since the feature would be using
the scanning machinery, one might expect to be able to match multiple
tokens as an alternative to matching just a single token. Letting the
user implement the technique allows them to chose. Also, it allows for
the option of erring when no pattern matches.

So far all the inline machine construction operators are compositional.
Inline scanners are not. For example you cannot safely union a machine
that contains an inline scanner because the call necessary to invoke it
could interfere with the other machine. This is related to the issue of
encapsulating calls and returns.

I would however be interested to add a prefix operator which would allow
you to automatically set up the machine that the call is embedded in.
The prefix operator would simply set every state final (this might have
another name in the literature). After you run the prefix operator you
could intersect it with something else to get the correct length (one in
this case).

pat = [a-z][a-z0-9]*;

inline_scanner = |*
    pat => { fret; };
    any => { fhold; fret; };
  *|;

call_pat = ( prefix(pat) & any ) @{ fhold; fcall inline_scanner; };

Regards,
 Adrian

Carlos Antunes wrote:
> On 7/5/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>>
>>> Assuming I understand the idea you are trying to convey here (there's
>>> a good chance that I don't), isn't it possible to transition directly
>>> to the scanner by looking at all the potential transitions of the
>>> scanner as if it was a "normal" state machine?
>> Yes, that's possible. The code I sent does exactly that, only it's
>> explicitly implemented. When it sees a whitespace character it jumps to
>> the whitespace scanner. I'll rework what I sent so hopefully it's clear
>> that it is an implementation of an inline scanner.
>>
> 
> Adrian, now that you've been able to explicitly design an inline
> scanner, would you be able to code ragel to do it implicitly? Although
> one can always do it by hand, as you did, it is error prone and
> sometimes somewhat difficult, depending on what you have inside the
> scanner. This feature would be very much appreciated.
> 
> Thanks!
> 
> Carlos Antunes
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20070711/49711107/attachment.sig>

From cmantu... at gmail.com  Wed Jul 11 17:22:51 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Wed, 11 Jul 2007 13:22:51 -0400
Subject: [ragel-users] Re: Inline scanner
In-Reply-To: <46950C03.4000503@cs.queensu.ca>
References: <1183262300.051714.182...@m36g2000hse.googlegroups.com>
	 <4687CF42.1040...@cs.queensu.ca>
	 <cb2ad8b50707011317i603dd0d5rd63c024393ba5...@mail.gmail.com>
	 <468B27F9.9040...@cs.queensu.ca>
	 <cb2ad8b50707042008g19ed44daq7b3174cca9972...@mail.gmail.com>
	 <468C84C1.10...@cs.queensu.ca>
	 <cb2ad8b50707050900q7cf6a14fmbc2ab81299f3...@mail.gmail.com>
	 <468D32AE.1040...@cs.queensu.ca>
	 <cb2ad8b50707101647u7a978de6q9ba2011ae30d2...@mail.gmail.com>
	 <46950C03.4000...@cs.queensu.ca>
Message-ID: <cb2ad8b50707111022m1eb0188aj2d739d1372a62af9@mail.gmail.com>

Adrian,

The prefix operatior would be GREAT!

<carlos_thinking_out_loud>

And it's a incremental step toward that holy "inline scanner" grail :)

</carlos_thinking_out_loud>

Now, it would be AWESOME, if one could apply that prefix operator to
*any* machine, including scanners, obviating the need to do it
explicitly. Following your example below, one would simply do
prefix(inline_scanner), for example.

I'll be anxiously checking ragel-trunk for news!

Thanks!

Carlos

On 7/11/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> Hi Carlos,
>
> After much thought I've decided that inline scanners are not a suitable
> feature for ragel. It is a good technique but there are a few issues.
>
> I think that calls and returns should not be encoded in a language
> construct. They need to be treated with care and I'm not comfortable
> with encapsulating them.
>
> There is the issue of when to return. Since the feature would be using
> the scanning machinery, one might expect to be able to match multiple
> tokens as an alternative to matching just a single token. Letting the
> user implement the technique allows them to chose. Also, it allows for
> the option of erring when no pattern matches.
>
> So far all the inline machine construction operators are compositional.
> Inline scanners are not. For example you cannot safely union a machine
> that contains an inline scanner because the call necessary to invoke it
> could interfere with the other machine. This is related to the issue of
> encapsulating calls and returns.
>
> I would however be interested to add a prefix operator which would allow
> you to automatically set up the machine that the call is embedded in.
> The prefix operator would simply set every state final (this might have
> another name in the literature). After you run the prefix operator you
> could intersect it with something else to get the correct length (one in
> this case).
>
> pat = [a-z][a-z0-9]*;
>
> inline_scanner = |*
>     pat => { fret; };
>     any => { fhold; fret; };
>   *|;
>
> call_pat = ( prefix(pat) & any ) @{ fhold; fcall inline_scanner; };
>
> Regards,
>  Adrian
>
> Carlos Antunes wrote:
> > On 7/5/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> >>
> >>> Assuming I understand the idea you are trying to convey here (there's
> >>> a good chance that I don't), isn't it possible to transition directly
> >>> to the scanner by looking at all the potential transitions of the
> >>> scanner as if it was a "normal" state machine?
> >> Yes, that's possible. The code I sent does exactly that, only it's
> >> explicitly implemented. When it sees a whitespace character it jumps to
> >> the whitespace scanner. I'll rework what I sent so hopefully it's clear
> >> that it is an implementation of an inline scanner.
> >>
> >
> > Adrian, now that you've been able to explicitly design an inline
> > scanner, would you be able to code ragel to do it implicitly? Although
> > one can always do it by hand, as you did, it is error prone and
> > sometimes somewhat difficult, depending on what you have inside the
> > scanner. This feature would be very much appreciated.
> >
> > Thanks!
> >
> > Carlos Antunes
> >
>
>
>


-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From thurs... at cs.queensu.ca  Thu Jul 12 07:14:48 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Thu, 12 Jul 2007 03:14:48 -0400
Subject: [ragel-users] Re: Inline scanner
In-Reply-To: <cb2ad8b50707111022m1eb0188aj2d739d1372a62af9@mail.gmail.com>
References: <1183262300.051714.182320@m36g2000hse.googlegroups.com> <4687CF42.1040202@cs.queensu.ca> <cb2ad8b50707011317i603dd0d5rd63c024393ba56de@mail.gmail.com> <468B27F9.9040300@cs.queensu.ca> <cb2ad8b50707042008g19ed44daq7b3174cca9972243@mail.gmail.com> <468C84C1.10900@cs.queensu.ca> <cb2ad8b50707050900q7cf6a14fmbc2ab81299f395b@mail.gmail.com> <468D32AE.1040206@cs.queensu.ca> <cb2ad8b50707101647u7a978de6q9ba2011ae30d23dc@mail.gmail.com> <46950C03.4000503@cs.queensu.ca> <cb2ad8b50707111022m1eb0188aj2d739d1372a62af9@mail.gmail.com>
Message-ID: <4695D4E8.9040501@cs.queensu.ca>

Carlos Antunes wrote:
> Now, it would be AWESOME, if one could apply that prefix operator to
> *any* machine, including scanners, obviating the need to do it
> explicitly. Following your example below, one would simply do
> prefix(inline_scanner), for example.

Sure, my guess is that the prefix of a scanner would actually be the
prefix of the union of all scanner patterns. I don't think the prefix of
final scanner machinery would make much sense since it sometimes uses
error actions to restart and there is also backtracking of input.

Adrian

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20070712/895f4a14/attachment.sig>

From cmantu... at gmail.com  Thu Jul 12 14:21:22 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Thu, 12 Jul 2007 10:21:22 -0400
Subject: [ragel-users] Re: Inline scanner
In-Reply-To: <4695D4E8.9040501@cs.queensu.ca>
References: <1183262300.051714.182...@m36g2000hse.googlegroups.com>
	 <468B27F9.9040...@cs.queensu.ca>
	 <cb2ad8b50707042008g19ed44daq7b3174cca9972...@mail.gmail.com>
	 <468C84C1.10...@cs.queensu.ca>
	 <cb2ad8b50707050900q7cf6a14fmbc2ab81299f3...@mail.gmail.com>
	 <468D32AE.1040...@cs.queensu.ca>
	 <cb2ad8b50707101647u7a978de6q9ba2011ae30d2...@mail.gmail.com>
	 <46950C03.4000...@cs.queensu.ca>
	 <cb2ad8b50707111022m1eb0188aj2d739d1372a62...@mail.gmail.com>
	 <4695D4E8.9040...@cs.queensu.ca>
Message-ID: <cb2ad8b50707120721h699a534v7e81c17c067181b0@mail.gmail.com>

On 7/12/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> Carlos Antunes wrote:
> > Now, it would be AWESOME, if one could apply that prefix operator to
> > *any* machine, including scanners, obviating the need to do it
> > explicitly. Following your example below, one would simply do
> > prefix(inline_scanner), for example.
>
> Sure, my guess is that the prefix of a scanner would actually be the
> prefix of the union of all scanner patterns.
>

Yes, that's what I was thinking.

>
>I don't think the prefix of final scanner machinery would make much sense
>

Agreed. I'm not seeing any application for this.

Thanks!

Carlos

-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From zeds... at zedshaw.com  Thu Jul 12 12:23:25 2007
From: zeds... at zedshaw.com (Zed A. Shaw)
Date: Thu, 12 Jul 2007 08:23:25 -0400
Subject: New Project Using Ragel
Message-ID: <20070712082325.9dbf39c6.zedshaw@zedshaw.com>

Hey Adrian,

I cranked out another project that uses Ragel:

  http://ihate.rubyforge.org/profligacy/

It's a JRuby project that makes it really easy to produce Swing GUIs without trying to be a complete abstraction over all of Swing.

I used Ragel to produce the Layout Expression Language parser:

  http://ihate.rubyforge.org/profligacy/lel.html

LEL is a kind of wiki table syntax that configures one of Swing's more annoying to code layout managers.  Ragel produces a .java file which is compile into a .class file, and then JRuby accesses it with just Ruby.  It works pretty nice and as usual is very fast.

Thanks again for Ragel.

-- 
Zed A. Shaw
- Hate: http://savingtheinternetwithhate.com/
- Good: http://www.zedshaw.com/
- Evil: http://yearofevil.com/


From thurs... at cs.queensu.ca  Fri Jul 13 21:03:30 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Fri, 13 Jul 2007 17:03:30 -0400
Subject: [ragel-users] New Project Using Ragel
In-Reply-To: <20070712082325.9dbf39c6.zedshaw@zedshaw.com>
References: <20070712082325.9dbf39c6.zedshaw@zedshaw.com>
Message-ID: <4697E8A2.8070802@cs.queensu.ca>

Oh nice! I'll add it to the links section.

Cheers,
 Adrian

Zed A. Shaw wrote:
> Hey Adrian,
> 
> I cranked out another project that uses Ragel:
> 
>   http://ihate.rubyforge.org/profligacy/
> 
> It's a JRuby project that makes it really easy to produce Swing GUIs without trying to be a complete abstraction over all of Swing.
> 
> I used Ragel to produce the Layout Expression Language parser:
> 
>   http://ihate.rubyforge.org/profligacy/lel.html
> 
> LEL is a kind of wiki table syntax that configures one of Swing's more annoying to code layout managers.  Ragel produces a .java file which is compile into a .class file, and then JRuby accesses it with just Ruby.  It works pretty nice and as usual is very fast.
> 
> Thanks again for Ragel.
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20070713/d5d6ddbf/attachment.sig>

From ad... at cse.iitk.ac.in  Wed Jul 11 13:27:09 2007
From: ad... at cse.iitk.ac.in (Aditi)
Date: Wed, 11 Jul 2007 13:27:09 -0000
Subject: Problem: Change state only when a new input is received
Message-ID: <1184160429.916174.129560@m3g2000hsh.googlegroups.com>

Hi,
I am new to ragel and was hoping to use it for the following purpose-
I need to match a regular expression, but the input which is to be
matched comes as a series of tokens over a socket. I need the state
machine to advance to the next state as and when it receives the
token.

I am trying to do this with ragel but have been unsuccessful so far.
According to my understanding of ragel, I need to specify the whole
chunk of string between pointers p and pe and let machine run on it.
Instead I want p to read one value from socket on advance on it. Can
somebody please give me pointers on how to do this?

This is a code snippet of one of my futile attempts :( -->
<snip>
		if ((rval=read(msgsock, buff, 4)) < 0){
			perror("reading stream message");
			exit(1);
		}

		p = buff;

		%% write init;
		%% write exec noend;

		while(true) {
			if ((rval=read(msgsock, buff, 4)) < 0){
				perror("reading stream message");
				break;
			}
			else {
				p = buff;
				printf("-->%s\n", buff);

			}
			if(strcmp(buff,"exit")== 0) break;
		}
</snip>

My token will by of type integer, but as a startup i was trying with
normal string tokens. It would be really helpful if someone can help
me out with this.
Regards,
Aditi.


From thurs... at cs.queensu.ca  Wed Jul 11 17:42:23 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Wed, 11 Jul 2007 13:42:23 -0400
Subject: [ragel-users] Problem: Change state only when a new input is
 received
In-Reply-To: <1184160429.916174.129560@m3g2000hsh.googlegroups.com>
References: <1184160429.916174.129560@m3g2000hsh.googlegroups.com>
Message-ID: <4695167F.8090508@cs.queensu.ca>

Hi Aditi,

For this task don't use the "noend" write option. Set the alphabet type
to int and when an integer arrives set p to point it and set pe to (p +
1). Also, make sure you separate out the init code so it is invoked only
once before you start reading input.

I've always wanted to add a "one-at-a-time" option to write which would
eliminate the unnecessary loop over the single character but never got
around to it.

Adrian

Aditi wrote:
> Hi,
> I am new to ragel and was hoping to use it for the following purpose-
> I need to match a regular expression, but the input which is to be
> matched comes as a series of tokens over a socket. I need the state
> machine to advance to the next state as and when it receives the
> token.
> 
> I am trying to do this with ragel but have been unsuccessful so far.
> According to my understanding of ragel, I need to specify the whole
> chunk of string between pointers p and pe and let machine run on it.
> Instead I want p to read one value from socket on advance on it. Can
> somebody please give me pointers on how to do this?
> 
> This is a code snippet of one of my futile attempts :( -->
> <snip>
> 		if ((rval=read(msgsock, buff, 4)) < 0){
> 			perror("reading stream message");
> 			exit(1);
> 		}
> 
> 		p = buff;
> 
> 		%% write init;
> 		%% write exec noend;
> 
> 		while(true) {
> 			if ((rval=read(msgsock, buff, 4)) < 0){
> 				perror("reading stream message");
> 				break;
> 			}
> 			else {
> 				p = buff;
> 				printf("-->%s\n", buff);
> 
> 			}
> 			if(strcmp(buff,"exit")== 0) break;
> 		}
> </snip>
> 
> My token will by of type integer, but as a startup i was trying with
> normal string tokens. It would be really helpful if someone can help
> me out with this.
> Regards,
> Aditi.
> 
> 
> --~--~---------~--~----~------------~-------~--~----~
> You received this message because you are subscribed to the Google Groups "ragel-users" group.
> To post to this group, send email to ragel-users at googlegroups.com
> To unsubscribe from this group, send email to ragel-users-unsubscribe at googlegroups.com
> For more options, visit this group at http://groups.google.com/group/ragel-users?hl=en
> -~----------~----~----~----~------~----~------~--~---
> 
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20070711/644625aa/attachment.sig>

From ad... at cse.iitk.ac.in  Wed Jul 11 19:43:19 2007
From: ad... at cse.iitk.ac.in (Aditi)
Date: Wed, 11 Jul 2007 19:43:19 -0000
Subject: Problem: Change state only when a new input is received
In-Reply-To: <4695167F.8090508@cs.queensu.ca>
References: <1184160429.916174.129560@m3g2000hsh.googlegroups.com>
   <4695167F.8090508@cs.queensu.ca>
Message-ID: <1184182999.252708.220010@w3g2000hsg.googlegroups.com>

Hi Adrian,
Thanks for your reply. With your help I got it partially working, but
I still have some doubts and problems:
Here is the code snipet-
<snip>
		%% write init;

		while(true) {
 			if ((rval=read(msgsock, buff, 1024)) < 0){
				perror("reading stream message");
				break;
			}
			else {
				sscanf(buff, "%d", &num);
				printf("-->%d\n", num);
				p = &num;
				pe = p + 1;
			}

			%% write exec;

			if(num == 0) break;
		}
</snip>
Now,
1.) %% write exec will be executed in every iteration of the loop.
Will this effect the performance? Is there a better way to do it? I
couldn't get it working by putting it just once outside the loop. I am
using this to build a tool which is required to be efficient, that's
why I am concerned with this point.
2.) The printing of the tokens and the action triggered(as of now,
just a print statement) happen only after I send the next token. Why
is there this delay of one token in the processing. Is my approach not
correct?
3.) There are certain other issues also, like I want to match this
pattern anywhere in the string and may be multiple times if it occurs.
This is not happening here. This code works if I give my pattern in
the beginning only. What should I do?
I am sorry about putting so many questions together. Any kind of help
will be immensely useful.
Thanks Again!
Cheers,
Aditi.


On Jul 11, 7:42 pm, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> Hi Aditi,
>
> For this task don't use the "noend" write option. Set the alphabet type
> to int and when an integer arrives set p to point it and set pe to (p +
> 1). Also, make sure you separate out the init code so it is invoked only
> once before you start reading input.
>
> I've always wanted to add a "one-at-a-time" option to write which would
> eliminate the unnecessary loop over the single character but never got
> around to it.
>
> Adrian
>
> Aditi wrote:
> > Hi,
> > I am new to ragel and was hoping to use it for the following purpose-
> > I need to match a regular expression, but the input which is to be
> > matched comes as a series of tokens over a socket. I need the state
> > machine to advance to the next state as and when it receives the
> > token.
>
> > I am trying to do this with ragel but have been unsuccessful so far.
> > According to my understanding of ragel, I need to specify the whole
> > chunk of string between pointers p and pe and let machine run on it.
> > Instead I want p to read one value from socket on advance on it. Can
> > somebody please give me pointers on how to do this?
>
> > This is a code snippet of one of my futile attempts :( -->
> > <snip>
> >            if ((rval=read(msgsock, buff, 4)) < 0){
> >                    perror("reading stream message");
> >                    exit(1);
> >            }
>
> >            p = buff;
>
> >            %% write init;
> >            %% write exec noend;
>
> >            while(true) {
> >                    if ((rval=read(msgsock, buff, 4)) < 0){
> >                            perror("reading stream message");
> >                            break;
> >                    }
> >                    else {
> >                            p = buff;
> >                            printf("-->%s\n", buff);
>
> >                    }
> >                    if(strcmp(buff,"exit")== 0) break;
> >            }
> > </snip>
>
> > My token will by of type integer, but as a startup i was trying with
> > normal string tokens. It would be really helpful if someone can help
> > me out with this.
> > Regards,
> > Aditi.
>
> > >
>
>
>  signature.asc
> 1KDownload


From thurs... at cs.queensu.ca  Thu Jul 12 07:05:51 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Thu, 12 Jul 2007 03:05:51 -0400
Subject: [ragel-users] Re: Problem: Change state only when a new input
 is received
In-Reply-To: <1184182999.252708.220010@w3g2000hsg.googlegroups.com>
References: <1184160429.916174.129560@m3g2000hsh.googlegroups.com> <4695167F.8090508@cs.queensu.ca> <1184182999.252708.220010@w3g2000hsg.googlegroups.com>
Message-ID: <4695D2CF.1030609@cs.queensu.ca>

Hi Aditi,

> 1.) %% write exec will be executed in every iteration of the loop.
> Will this effect the performance? Is there a better way to do it? I
> couldn't get it working by putting it just once outside the loop. I am
> using this to build a tool which is required to be efficient, that's
> why I am concerned with this point.

As far as I can tell you need the code generated by write exec to run on
every iteration of the loop. The only consideration here is that there
will be an unnecessary check of p against pe. In this case pe - p always
equals one. This should just be a few processor instructions however. If
you really need to squeeze out instructions and you are concerned you
can always look at the generated code.

> 2.) The printing of the tokens and the action triggered(as of now,
> just a print statement) happen only after I send the next token. Why
> is there this delay of one token in the processing. Is my approach not
> correct?

My best guess is that you are embedding actions using the '%' operator.
Provide some ragel code and I'll tell ya for certain :)

> 3.) There are certain other issues also, like I want to match this
> pattern anywhere in the string and may be multiple times if it occurs.
> This is not happening here. This code works if I give my pattern in
> the beginning only. What should I do?

See:

http://groups.google.com/group/ragel-users/browse_thread/thread/8094b90ad7f9cf89/#

-Adrian

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20070712/ccc91ae9/attachment.sig>

From ad... at cse.iitk.ac.in  Thu Jul 12 08:33:06 2007
From: ad... at cse.iitk.ac.in (Aditi)
Date: Thu, 12 Jul 2007 08:33:06 -0000
Subject: Problem: Change state only when a new input is received
In-Reply-To: <4695D2CF.1030609@cs.queensu.ca>
References: <1184160429.916174.129560@m3g2000hsh.googlegroups.com>
   <4695167F.8090508@cs.queensu.ca>
   <1184182999.252708.220010@w3g2000hsg.googlegroups.com>
   <4695D2CF.1030609@cs.queensu.ca>
Message-ID: <1184229186.768496.247050@57g2000hsv.googlegroups.com>

Hi Adrian,
Thanks for you prompt replies :)
@1.) I'll have to test my tool for performance overheads once I finish
it, I hope I would not need this tweaking and it will also be a bit
difficult to do because this is a component of my framework which will
be generated automatically and be used by another component.
@2.) Here is a snippet of ragel code->
<snip>
	action trigger {
		printf("Regex Matched!\n");
	}

	main := any* (2 4 6) @trigger;
</snip>
I am using very simple regex and actions to see if it works. Both of
these are actually going to be user specified and hence more complex.
So, why am I getting a delay of one token? Even the test printf
statement which is printing the tokens is executed only after I send
the next token! :(

@3.) Yeah, It worked; I just had to add any* :)

Thanks again!
Aditi.

On Jul 12, 9:05 am, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> Hi Aditi,
>
> > 1.) %% write exec will be executed in every iteration of the loop.
> > Will this effect the performance? Is there a better way to do it? I
> > couldn't get it working by putting it just once outside the loop. I am
> > using this to build a tool which is required to be efficient, that's
> > why I am concerned with this point.
>
> As far as I can tell you need the code generated by write exec to run on
> every iteration of the loop. The only consideration here is that there
> will be an unnecessary check of p against pe. In this case pe - p always
> equals one. This should just be a few processor instructions however. If
> you really need to squeeze out instructions and you are concerned you
> can always look at the generated code.
>
> > 2.) The printing of the tokens and the action triggered(as of now,
> > just a print statement) happen only after I send the next token. Why
> > is there this delay of one token in the processing. Is my approach not
> > correct?
>
> My best guess is that you are embedding actions using the '%' operator.
> Provide some ragel code and I'll tell ya for certain :)
>
> > 3.) There are certain other issues also, like I want to match this
> > pattern anywhere in the string and may be multiple times if it occurs.
> > This is not happening here. This code works if I give my pattern in
> > the beginning only. What should I do?
>
> See:
>
> http://groups.google.com/group/ragel-users/browse_thread/thread/8094b...
>
> -Adrian
>
>  signature.asc
> 1KDownload


From thurs... at cs.queensu.ca  Fri Jul 13 21:32:40 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Fri, 13 Jul 2007 17:32:40 -0400
Subject: [ragel-users] Re: Problem: Change state only when a new input
 is received
In-Reply-To: <1184229186.768496.247050@57g2000hsv.googlegroups.com>
References: <1184160429.916174.129560@m3g2000hsh.googlegroups.com> <4695167F.8090508@cs.queensu.ca> <1184182999.252708.220010@w3g2000hsg.googlegroups.com> <4695D2CF.1030609@cs.queensu.ca> <1184229186.768496.247050@57g2000hsv.googlegroups.com>
Message-ID: <4697EF78.9070409@cs.queensu.ca>

Aditi,

The trigger action should get executed when the machine moves over the 6
value. If it isn't then something else must be wrong.

Regards,
 Adrian

Aditi wrote:
> @2.) Here is a snippet of ragel code->
> <snip>
> 	action trigger {
> 		printf("Regex Matched!\n");
> 	}
> 
> 	main := any* (2 4 6) @trigger;
> </snip>
> I am using very simple regex and actions to see if it works. Both of
> these are actually going to be user specified and hence more complex.
> So, why am I getting a delay of one token? Even the test printf
> statement which is printing the tokens is executed only after I send
> the next token! :(




-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20070713/686c6fa6/attachment.sig>

From cmantu... at gmail.com  Sat Jul 14 06:35:03 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Sat, 14 Jul 2007 02:35:03 -0400
Subject: Bug or feature?
Message-ID: <cb2ad8b50707132335j2b71486ara2c50949932c4b60@mail.gmail.com>

Adrian,

I have the following construct:

password = password_char**
               >{ capture_start(capid_password, p); }
               %{ capture_stop(capid_password, p); };

When I feed a string that doesn't match "password", "capture_stop" is
immediately called but not "capture_start". I would expect that either
both or none are called (I prefer both). What say you?

Thanks!

Carlos

-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From thurs... at cs.queensu.ca  Sat Jul 14 20:08:45 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Sat, 14 Jul 2007 16:08:45 -0400
Subject: [ragel-users] Bug or feature?
In-Reply-To: <cb2ad8b50707132335j2b71486ara2c50949932c4b60@mail.gmail.com>
References: <cb2ad8b50707132335j2b71486ara2c50949932c4b60@mail.gmail.com>
Message-ID: <46992D4D.5050108@cs.queensu.ca>

Hi Carlos,

See this thread:

http://groups.google.com/group/ragel-users/browse_thread/thread/9509ab83d7f022f1/

And in particular this message:

http://groups.google.com/group/ragel-users/msg/79546a93494e6773

-Adrian

Carlos Antunes wrote:
> Adrian,
> 
> I have the following construct:
> 
> password = password_char**
>                >{ capture_start(capid_password, p); }
>                %{ capture_stop(capid_password, p); };
> 
> When I feed a string that doesn't match "password", "capture_stop" is
> immediately called but not "capture_start". I would expect that either
> both or none are called (I prefer both). What say you?
> 
> Thanks!
> 
> Carlos
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20070714/266b69fe/attachment.sig>

From cmantu... at gmail.com  Sat Jul 14 20:24:18 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Sat, 14 Jul 2007 16:24:18 -0400
Subject: [ragel-users] Re: Bug or feature?
In-Reply-To: <46992D4D.5050108@cs.queensu.ca>
References: <cb2ad8b50707132335j2b71486ara2c50949932c4...@mail.gmail.com>
	 <46992D4D.5050...@cs.queensu.ca>
Message-ID: <cb2ad8b50707141324j44ae5d7qb80b98ea1c89ca0a@mail.gmail.com>

Adrian,

Ok, read the thread and that message specifically. I still don't get
why a machine that doesn't get entered gets to be exited. If a
transition goes around, not through, the machine, why would the exit
action of that machine be called? After all, that optional machine
final state may never be transitioned to, right? How come it can be
transitioned from, then?

Thanks!

Carlos

On 7/14/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> Hi Carlos,
>
> See this thread:
>
> http://groups.google.com/group/ragel-users/browse_thread/thread/9509ab83d7f022f1/
>
> And in particular this message:
>
> http://groups.google.com/group/ragel-users/msg/79546a93494e6773
>
> -Adrian
>
> Carlos Antunes wrote:
> > Adrian,
> >
> > I have the following construct:
> >
> > password = password_char**
> >                >{ capture_start(capid_password, p); }
> >                %{ capture_stop(capid_password, p); };
> >
> > When I feed a string that doesn't match "password", "capture_stop" is
> > immediately called but not "capture_start". I would expect that either
> > both or none are called (I prefer both). What say you?
> >
> > Thanks!
> >
> > Carlos
> >
>
>
>


-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From thurs... at cs.queensu.ca  Sat Jul 14 20:47:02 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Sat, 14 Jul 2007 16:47:02 -0400
Subject: [ragel-users] Re: Bug or feature?
In-Reply-To: <cb2ad8b50707141324j44ae5d7qb80b98ea1c89ca0a@mail.gmail.com>
References: <cb2ad8b50707132335j2b71486ara2c50949932c4b60@mail.gmail.com> <46992D4D.5050108@cs.queensu.ca> <cb2ad8b50707141324j44ae5d7qb80b98ea1c89ca0a@mail.gmail.com>
Message-ID: <46993646.8000607@cs.queensu.ca>

Carlos,

The leaving action is run because the machine accepts the zero-length
word at the time that it is embedded. That is, the start state is also
final. When you 'pass over' a machine that accepts the zero-length word
you are always passing through the start state which is also final. And
so you are 'leaving' it.

But entering actions are always associated with transitions inside the
machine. This is how you can leave a machine you have never 'entered.'

It's true, the wording of things doesn't perfectly match the semantics,
and they used to match better (see the thread), but to me the current
state of things seems the best way to go. The semantics of the operators
are simple and easy to define.

If you make a habit of factoring out zero-length machines then you can
avoid this problem.

word = char+ >enter %leave;
opt_word = word?;

-Adrian

Carlos Antunes wrote:
> Adrian,
> 
> Ok, read the thread and that message specifically. I still don't get
> why a machine that doesn't get entered gets to be exited. If a
> transition goes around, not through, the machine, why would the exit
> action of that machine be called? After all, that optional machine
> final state may never be transitioned to, right? How come it can be
> transitioned from, then?
> 
> Thanks!
> 
> Carlos
> 
> On 7/14/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>> Hi Carlos,
>>
>> See this thread:
>>
>> http://groups.google.com/group/ragel-users/browse_thread/thread/9509ab83d7f022f1/
>>
>> And in particular this message:
>>
>> http://groups.google.com/group/ragel-users/msg/79546a93494e6773
>>
>> -Adrian
>>
>> Carlos Antunes wrote:
>>> Adrian,
>>>
>>> I have the following construct:
>>>
>>> password = password_char**
>>>                >{ capture_start(capid_password, p); }
>>>                %{ capture_stop(capid_password, p); };
>>>
>>> When I feed a string that doesn't match "password", "capture_stop" is
>>> immediately called but not "capture_start". I would expect that either
>>> both or none are called (I prefer both). What say you?
>>>
>>> Thanks!
>>>
>>> Carlos
>>>
>>
>>
> 
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20070714/32252be3/attachment.sig>

From cmantu... at gmail.com  Sat Jul 14 20:54:12 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Sat, 14 Jul 2007 16:54:12 -0400
Subject: [ragel-users] Re: Bug or feature?
In-Reply-To: <46993646.8000607@cs.queensu.ca>
References: <cb2ad8b50707132335j2b71486ara2c50949932c4b60@mail.gmail.com>
	 <46992D4D.5050108@cs.queensu.ca>
	 <cb2ad8b50707141324j44ae5d7qb80b98ea1c89c...@mail.gmail.com>
	 <46993646.8000...@cs.queensu.ca>
Message-ID: <cb2ad8b50707141354r135c014y4c3331d8fd5809c7@mail.gmail.com>

Adrian,

Let me start by saying that I was wrong when I said that the optional
machine is bypassed. You are right, there is a state which is both the
start and finish and that state is always transitioned to. Attahed,
you'll find the image that convinced me of that. I'm going to reread
that thread to see if I "get it". To be honest with you, I am still
confused so expect additional questions from me. I hope you don't
kind! :)

Thanks!

Carlos

On 7/14/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> Carlos,
>
> The leaving action is run because the machine accepts the zero-length
> word at the time that it is embedded. That is, the start state is also
> final. When you 'pass over' a machine that accepts the zero-length word
> you are always passing through the start state which is also final. And
> so you are 'leaving' it.
>
> But entering actions are always associated with transitions inside the
> machine. This is how you can leave a machine you have never 'entered.'
>
> It's true, the wording of things doesn't perfectly match the semantics,
> and they used to match better (see the thread), but to me the current
> state of things seems the best way to go. The semantics of the operators
> are simple and easy to define.
>
> If you make a habit of factoring out zero-length machines then you can
> avoid this problem.
>
> word = char+ >enter %leave;
> opt_word = word?;
>
> -Adrian
>
> Carlos Antunes wrote:
> > Adrian,
> >
> > Ok, read the thread and that message specifically. I still don't get
> > why a machine that doesn't get entered gets to be exited. If a
> > transition goes around, not through, the machine, why would the exit
> > action of that machine be called? After all, that optional machine
> > final state may never be transitioned to, right? How come it can be
> > transitioned from, then?
> >
> > Thanks!
> >
> > Carlos
> >
> > On 7/14/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> >> Hi Carlos,
> >>
> >> See this thread:
> >>
> >> http://groups.google.com/group/ragel-users/browse_thread/thread/9509ab83d7f022f1/
> >>
> >> And in particular this message:
> >>
> >> http://groups.google.com/group/ragel-users/msg/79546a93494e6773
> >>
> >> -Adrian
> >>
> >> Carlos Antunes wrote:
> >>> Adrian,
> >>>
> >>> I have the following construct:
> >>>
> >>> password = password_char**
> >>>                >{ capture_start(capid_password, p); }
> >>>                %{ capture_stop(capid_password, p); };
> >>>
> >>> When I feed a string that doesn't match "password", "capture_stop" is
> >>> immediately called but not "capture_start". I would expect that either
> >>> both or none are called (I prefer both). What say you?
> >>>
> >>> Thanks!
> >>>
> >>> Carlos
> >>>
> >>
> >>
> >
> >
>
>
>


-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson
-------------- next part --------------
A non-text attachment was scrubbed...
Name: graph-dot[1].png
Type: image/png
Size: 868 bytes
Desc: not available
URL: <http://www.colm.net/pipermail/ragel/attachments/20070714/032e3704/attachment.png>

From cmantu... at gmail.com  Sat Jul 14 21:11:08 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Sat, 14 Jul 2007 17:11:08 -0400
Subject: [ragel-users] Re: Bug or feature?
In-Reply-To: <cb2ad8b50707141354r135c014y4c3331d8fd5809c7@mail.gmail.com>
References: <cb2ad8b50707132335j2b71486ara2c50949932c4...@mail.gmail.com>
	 <46992D4D.5050...@cs.queensu.ca>
	 <cb2ad8b50707141324j44ae5d7qb80b98ea1c89c...@mail.gmail.com>
	 <46993646.8000...@cs.queensu.ca>
	 <cb2ad8b50707141354r135c014y4c3331d8fd580...@mail.gmail.com>
Message-ID: <cb2ad8b50707141411r2c3167bas40a877fb323252e8@mail.gmail.com>

Adrian,

I just reread the thread and, for the life of me, I don't understand
why the OUT transition (not shown on the graph on the previous msg)
gets its action executed but the IN transition doesn't get the same
treatment.

You've said, and I quote you:

"Prior to version 4.0, the entering action operator actually did exactly
what you describe. If the machine's start state was final, then it also
embedded the action into the start state as a leaving action. Initially
I thought this was very intuitive, however over time I gradually took
the opinion that all operators should have a single purpose."

Now, it appears to me that you were associating the entering action
with the OUT transition when both the start and final states are the
same. I agree with you, this is not intuitive. However, what I don't
understand is why you don't associate the entering action with the IN
transition. Entering action goes with IN and leaving action goes with
OUT. No dual purpose here, or am I still missing something?

Thanks!

Carlos

On 7/14/07, Carlos Antunes <cmantu... at gmail.com> wrote:
> Adrian,
>
> Let me start by saying that I was wrong when I said that the optional
> machine is bypassed. You are right, there is a state which is both the
> start and finish and that state is always transitioned to. Attahed,
> you'll find the image that convinced me of that. I'm going to reread
> that thread to see if I "get it". To be honest with you, I am still
> confused so expect additional questions from me. I hope you don't
> kind! :)
>
> Thanks!
>
> Carlos
>
> On 7/14/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> > Carlos,
> >
> > The leaving action is run because the machine accepts the zero-length
> > word at the time that it is embedded. That is, the start state is also
> > final. When you 'pass over' a machine that accepts the zero-length word
> > you are always passing through the start state which is also final. And
> > so you are 'leaving' it.
> >
> > But entering actions are always associated with transitions inside the
> > machine. This is how you can leave a machine you have never 'entered.'
> >
> > It's true, the wording of things doesn't perfectly match the semantics,
> > and they used to match better (see the thread), but to me the current
> > state of things seems the best way to go. The semantics of the operators
> > are simple and easy to define.
> >
> > If you make a habit of factoring out zero-length machines then you can
> > avoid this problem.
> >
> > word = char+ >enter %leave;
> > opt_word = word?;
> >
> > -Adrian
> >
> > Carlos Antunes wrote:
> > > Adrian,
> > >
> > > Ok, read the thread and that message specifically. I still don't get
> > > why a machine that doesn't get entered gets to be exited. If a
> > > transition goes around, not through, the machine, why would the exit
> > > action of that machine be called? After all, that optional machine
> > > final state may never be transitioned to, right? How come it can be
> > > transitioned from, then?
> > >
> > > Thanks!
> > >
> > > Carlos
> > >
> > > On 7/14/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> > >> Hi Carlos,
> > >>
> > >> See this thread:
> > >>
> > >> http://groups.google.com/group/ragel-users/browse_thread/thread/9509ab83d7f022f1/
> > >>
> > >> And in particular this message:
> > >>
> > >> http://groups.google.com/group/ragel-users/msg/79546a93494e6773
> > >>
> > >> -Adrian
> > >>
> > >> Carlos Antunes wrote:
> > >>> Adrian,
> > >>>
> > >>> I have the following construct:
> > >>>
> > >>> password = password_char**
> > >>>                >{ capture_start(capid_password, p); }
> > >>>                %{ capture_stop(capid_password, p); };
> > >>>
> > >>> When I feed a string that doesn't match "password", "capture_stop" is
> > >>> immediately called but not "capture_start". I would expect that either
> > >>> both or none are called (I prefer both). What say you?
> > >>>
> > >>> Thanks!
> > >>>
> > >>> Carlos
> > >>>
> > >>
> > >>
> > >
> > >
> >
> >
> >
>
>
> --
> "We hold [...] that all men are created equal; that they are
> endowed [...] with certain inalienable rights; that among
> these are life, liberty, and the pursuit of happiness"
>         -- Thomas Jefferson
>
>


-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From cmantu... at gmail.com  Sat Jul 14 21:23:49 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Sat, 14 Jul 2007 17:23:49 -0400
Subject: [ragel-users] Re: Bug or feature?
In-Reply-To: <cb2ad8b50707141422n51e6fd18h453c0b543e12cc32@mail.gmail.com>
References: <cb2ad8b50707132335j2b71486ara2c50949932c4b60@mail.gmail.com>
	 <46992D4D.5050...@cs.queensu.ca>
	 <cb2ad8b50707141324j44ae5d7qb80b98ea1c89c...@mail.gmail.com>
	 <46993646.8000...@cs.queensu.ca>
	 <cb2ad8b50707141354r135c014y4c3331d8fd580...@mail.gmail.com>
	 <cb2ad8b50707141411r2c3167bas40a877fb32325...@mail.gmail.com>
	 <cb2ad8b50707141422n51e6fd18h453c0b543e12c...@mail.gmail.com>
Message-ID: <cb2ad8b50707141423s143ee837v820d00ab824faf0f@mail.gmail.com>

[Now with the machine attached]

Adrian,

Just built the following example machine:

action action_in {}
action action_out {}

testmach := lower* >action_in %action_out '$';

Graph is attached. Now, I am even more confused. Does that mean that
the entering action is really not the entering action into the machine
but it is the action that gets executed after a character is matched
for the first time? If that's the case, I think there is one operator
missing for symmetry, no? One which gets executed with the IN
transition?

Thanks and sorry about all the "thinking aloud" here. "thinking aloud" here.

Carlos



> On 7/14/07, Carlos Antunes <cmantu... at gmail.com> wrote:
> > Adrian,
> >
> > I just reread the thread and, for the life of me, I don't understand
> > why the OUT transition (not shown on the graph on the previous msg)
> > gets its action executed but the IN transition doesn't get the same
> > treatment.
> >
> > You've said, and I quote you:
> >
> > "Prior to version 4.0, the entering action operator actually did exactly
> > what you describe. If the machine's start state was final, then it also
> > embedded the action into the start state as a leaving action. Initially
> > I thought this was very intuitive, however over time I gradually took
> > the opinion that all operators should have a single purpose."
> >
> > Now, it appears to me that you were associating the entering action
> > with the OUT transition when both the start and final states are the
> > same. I agree with you, this is not intuitive. However, what I don't
> > understand is why you don't associate the entering action with the IN
> > transition. Entering action goes with IN and leaving action goes with
> > OUT. No dual purpose here, or am I still missing something?
> >
> > Thanks!
> >
> > Carlos
> >
> > On 7/14/07, Carlos Antunes <cmantu... at gmail.com> wrote:
> > > Adrian,
> > >
> > > Let me start by saying that I was wrong when I said that the optional
> > > machine is bypassed. You are right, there is a state which is both the
> > > start and finish and that state is always transitioned to. Attahed,
> > > you'll find the image that convinced me of that. I'm going to reread
> > > that thread to see if I "get it". To be honest with you, I am still
> > > confused so expect additional questions from me. I hope you don't
> > > kind! :)
> > >
> > > Thanks!
> > >
> > > Carlos
> > >
> > > On 7/14/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> > > > Carlos,
> > > >
> > > > The leaving action is run because the machine accepts the zero-length
> > > > word at the time that it is embedded. That is, the start state is also
> > > > final. When you 'pass over' a machine that accepts the zero-length word
> > > > you are always passing through the start state which is also final. And
> > > > so you are 'leaving' it.
> > > >
> > > > But entering actions are always associated with transitions inside the
> > > > machine. This is how you can leave a machine you have never 'entered.'
> > > >
> > > > It's true, the wording of things doesn't perfectly match the semantics,
> > > > and they used to match better (see the thread), but to me the current
> > > > state of things seems the best way to go. The semantics of the operators
> > > > are simple and easy to define.
> > > >
> > > > If you make a habit of factoring out zero-length machines then you can
> > > > avoid this problem.
> > > >
> > > > word = char+ >enter %leave;
> > > > opt_word = word?;
> > > >
> > > > -Adrian
> > > >
> > > > Carlos Antunes wrote:
> > > > > Adrian,
> > > > >
> > > > > Ok, read the thread and that message specifically. I still don't get
> > > > > why a machine that doesn't get entered gets to be exited. If a
> > > > > transition goes around, not through, the machine, why would the exit
> > > > > action of that machine be called? After all, that optional machine
> > > > > final state may never be transitioned to, right? How come it can be
> > > > > transitioned from, then?
> > > > >
> > > > > Thanks!
> > > > >
> > > > > Carlos
> > > > >
> > > > > On 7/14/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> > > > >> Hi Carlos,
> > > > >>
> > > > >> See this thread:
> > > > >>
> > > > >> http://groups.google.com/group/ragel-users/browse_thread/thread/9509ab83d7f022f1/
> > > > >>
> > > > >> And in particular this message:
> > > > >>
> > > > >> http://groups.google.com/group/ragel-users/msg/79546a93494e6773
> > > > >>
> > > > >> -Adrian
> > > > >>
> > > > >> Carlos Antunes wrote:
> > > > >>> Adrian,
> > > > >>>
> > > > >>> I have the following construct:
> > > > >>>
> > > > >>> password = password_char**
> > > > >>>                >{ capture_start(capid_password, p); }
> > > > >>>                %{ capture_stop(capid_password, p); };
> > > > >>>
> > > > >>> When I feed a string that doesn't match "password", "capture_stop" is
> > > > >>> immediately called but not "capture_start". I would expect that either
> > > > >>> both or none are called (I prefer both). What say you?
> > > > >>>
> > > > >>> Thanks!
> > > > >>>
> > > > >>> Carlos
> > > > >>>
> > > > >>
> > > > >>
> > > > >
> > > > >
> > > >
> > > >
> > > >
> > >
> > >
> > > --
> > > "We hold [...] that all men are created equal; that they are
> > > endowed [...] with certain inalienable rights; that among
> > > these are life, liberty, and the pursuit of happiness"
> > >         -- Thomas Jefferson
> > >
> > >
> >
> >
> > --
> > "We hold [...] that all men are created equal; that they are
> > endowed [...] with certain inalienable rights; that among
> > these are life, liberty, and the pursuit of happiness"
> >         -- Thomas Jefferson
> >
>
>
> --
> "We hold [...] that all men are created equal; that they are
> endowed [...] with certain inalienable rights; that among
> these are life, liberty, and the pursuit of happiness"
>         -- Thomas Jefferson
>


-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson
-------------- next part --------------
A non-text attachment was scrubbed...
Name: graph-dot[1].png
Type: image/png
Size: 2908 bytes
Desc: not available
URL: <http://www.colm.net/pipermail/ragel/attachments/20070714/412a29f0/attachment.png>

From thurs... at cs.queensu.ca  Sat Jul 14 22:01:46 2007
From: thurs... at cs.queensu.ca (=?utf-8?B?QWRyaWFuIFRodXJzdG9u?=)
Date: Sat, 14 Jul 2007 22:01:46 +0000
Subject: [ragel-users] Re: Bug or feature?
In-Reply-To: <cb2ad8b50707141423s143ee837v820d00ab824faf0f@mail.gmail.com>
References: <cb2ad8b50707132335j2b71486ara2c50949932c4b60@mail.gmail.com> <46992D4D.5050108@cs.queensu.ca> <cb2ad8b50707141324j44ae5d7qb80b98ea1c89ca0a@mail.gmail.com> <46993646.8000607@cs.queensu.ca> <cb2ad8b50707141354r135c014y4c3331d8fd5809c7@mail.gmail.com> <cb2ad8b50707141411r2c3167bas40a877fb323252e8@mail.gmail.com> <cb2ad8b50707141422n51e6fd18h453c0b543e12cc32@mail.gmail.com><cb2ad8b50707141423s143ee837v820d00ab824faf0f@mail.gmail.com>
Message-ID: <824544157-1184450505-cardhu_decombobulator_blackberry.rim.net-731876917-@bxe123.bisx.prod.on.blackberry>

Yes the entering action is associated with the first transitions of the machine. Remember that there is no transition into the start state. There is only the previous machine's transitions into its final state, which is the same as the following machine's start state (speaking about concatenation). 

If you look near the end of that thread I'd like to revive the old semantics (the missing operator you speak of) however there are no more symbols left. Instead I want to add an identifier-based embedding operator but I haven't had the time.

The old semantics would embed entering actions as they are currently known, but it would also embed the action as a leaving action if the start state was final. This made it symmetrical. 

Adrian
-----Original Message-----
From: "Carlos Antunes" <cmantunes at gmail.com>

Date: Sat, 14 Jul 2007 17:23:49 
To:ragel-users at googlegroups.com
Subject: [ragel-users] Re: Bug or feature?


[Now with the machine attached]

Adrian,

Just built the following example machine:

action action_in {}
action action_out {}

testmach := lower* >action_in %action_out '$';

Graph is attached. Now, I am even more confused. Does that mean that
the entering action is really not the entering action into the machine
but it is the action that gets executed after a character is matched
for the first time? If that's the case, I think there is one operator
missing for symmetry, no? One which gets executed with the IN
transition?

Thanks and sorry about all the "thinking aloud" here. "thinking aloud" here.

Carlos



> On 7/14/07, Carlos Antunes <cmantunes at gmail.com> wrote:
> > Adrian,
> >
> > I just reread the thread and, for the life of me, I don't understand
> > why the OUT transition (not shown on the graph on the previous msg)
> > gets its action executed but the IN transition doesn't get the same
> > treatment.
> >
> > You've said, and I quote you:
> >
> > "Prior to version 4.0, the entering action operator actually did exactly
> > what you describe. If the machine's start state was final, then it also
> > embedded the action into the start state as a leaving action. Initially
> > I thought this was very intuitive, however over time I gradually took
> > the opinion that all operators should have a single purpose."
> >
> > Now, it appears to me that you were associating the entering action
> > with the OUT transition when both the start and final states are the
> > same. I agree with you, this is not intuitive. However, what I don't
> > understand is why you don't associate the entering action with the IN
> > transition. Entering action goes with IN and leaving action goes with
> > OUT. No dual purpose here, or am I still missing something?
> >
> > Thanks!
> >
> > Carlos
> >
> > On 7/14/07, Carlos Antunes <cmantunes at gmail.com> wrote:
> > > Adrian,
> > >
> > > Let me start by saying that I was wrong when I said that the optional
> > > machine is bypassed. You are right, there is a state which is both the
> > > start and finish and that state is always transitioned to. Attahed,
> > > you'll find the image that convinced me of that. I'm going to reread
> > > that thread to see if I "get it". To be honest with you, I am still
> > > confused so expect additional questions from me. I hope you don't
> > > kind! :)
> > >
> > > Thanks!
> > >
> > > Carlos
> > >
> > > On 7/14/07, Adrian Thurston <thurston at cs.queensu.ca> wrote:
> > > > Carlos,
> > > >
> > > > The leaving action is run because the machine accepts the zero-length
> > > > word at the time that it is embedded. That is, the start state is also
> > > > final. When you 'pass over' a machine that accepts the zero-length word
> > > > you are always passing through the start state which is also final. And
> > > > so you are 'leaving' it.
> > > >
> > > > But entering actions are always associated with transitions inside the
> > > > machine. This is how you can leave a machine you have never 'entered.'
> > > >
> > > > It's true, the wording of things doesn't perfectly match the semantics,
> > > > and they used to match better (see the thread), but to me the current
> > > > state of things seems the best way to go. The semantics of the operators
> > > > are simple and easy to define.
> > > >
> > > > If you make a habit of factoring out zero-length machines then you can
> > > > avoid this problem.
> > > >
> > > > word = char+ >enter %leave;
> > > > opt_word = word?;
> > > >
> > > > -Adrian
> > > >
> > > > Carlos Antunes wrote:
> > > > > Adrian,
> > > > >
> > > > > Ok, read the thread and that message specifically. I still don't get
> > > > > why a machine that doesn't get entered gets to be exited. If a
> > > > > transition goes around, not through, the machine, why would the exit
> > > > > action of that machine be called? After all, that optional machine
> > > > > final state may never be transitioned to, right? How come it can be
> > > > > transitioned from, then?
> > > > >
> > > > > Thanks!
> > > > >
> > > > > Carlos
> > > > >
> > > > > On 7/14/07, Adrian Thurston <thurston at cs.queensu.ca> wrote:
> > > > >> Hi Carlos,
> > > > >>
> > > > >> See this thread:
> > > > >>
> > > > >> http://groups.google.com/group/ragel-users/browse_thread/thread/9509ab83d7f022f1/
> > > > >>
> > > > >> And in particular this message:
> > > > >>
> > > > >> http://groups.google.com/group/ragel-users/msg/79546a93494e6773
> > > > >>
> > > > >> -Adrian
> > > > >>
> > > > >> Carlos Antunes wrote:
> > > > >>> Adrian,
> > > > >>>
> > > > >>> I have the following construct:
> > > > >>>
> > > > >>> password = password_char**
> > > > >>>                >{ capture_start(capid_password, p); }
> > > > >>>                %{ capture_stop(capid_password, p); };
> > > > >>>
> > > > >>> When I feed a string that doesn't match "password", "capture_stop" is
> > > > >>> immediately called but not "capture_start". I would expect that either
> > > > >>> both or none are called (I prefer both). What say you?
> > > > >>>
> > > > >>> Thanks!
> > > > >>>
> > > > >>> Carlos
> > > > >>>
> > > > >>
> > > > >>
> > > > >
> > > > >
> > > >
> > > >
> > > >
> > >
> > >
> > > --
> > > "We hold [...] that all men are created equal; that they are
> > > endowed [...] with certain inalienable rights; that among
> > > these are life, liberty, and the pursuit of happiness"
> > >         -- Thomas Jefferson
> > >
> > >
> >
> >
> > --
> > "We hold [...] that all men are created equal; that they are
> > endowed [...] with certain inalienable rights; that among
> > these are life, liberty, and the pursuit of happiness"
> >         -- Thomas Jefferson
> >
>
>
> --
> "We hold [...] that all men are created equal; that they are
> endowed [...] with certain inalienable rights; that among
> these are life, liberty, and the pursuit of happiness"
>         -- Thomas Jefferson
>


-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson




From cmantu... at gmail.com  Sat Jul 14 22:20:30 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Sat, 14 Jul 2007 18:20:30 -0400
Subject: [ragel-users] Re: Bug or feature?
In-Reply-To: <824544157-1184450505-cardhu_decombobulator_blackberry.rim.net-731876917-@bxe123.bisx.prod.on.blackberry>
References: <cb2ad8b50707132335j2b71486ara2c50949932c4...@mail.gmail.com>
	 <46992D4D.5050...@cs.queensu.ca>
	 <cb2ad8b50707141324j44ae5d7qb80b98ea1c89c...@mail.gmail.com>
	 <46993646.8000...@cs.queensu.ca>
	 <cb2ad8b50707141354r135c014y4c3331d8fd580...@mail.gmail.com>
	 <cb2ad8b50707141411r2c3167bas40a877fb32325...@mail.gmail.com>
	 <cb2ad8b50707141422n51e6fd18h453c0b543e12c...@mail.gmail.com>
	 <cb2ad8b50707141423s143ee837v820d00ab824fa...@mail.gmail.com>
	 <824544157-1184450505-cardhu_decombobulator_blackberry.rim.net-7318769...@bxe123.bisx.prod.on.blackberry>
Message-ID: <cb2ad8b50707141520w2c37f0aic8811bd7101d72b5@mail.gmail.com>

On 7/14/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>
> If you look near the end of that thread I'd like to revive the old semantics (the missing operator you speak of) however there are no more symbols left.
>

Do you see any harm in reviving the old semantics? How about a compile
time switch for the entering operator or maybe an option to write
init? The default would be the new semantics. I guess this would be
easier than to code additional operators. Personally, I find the old
semantics more intuitive and from a pragmatic point of view, they
would be more useful to me (in this particular case, I have to deal
with the possibility of an empty password; the old semantics would
work very well here.)

>
>Instead I want to add an identifier-based embedding operator
>

A what!? :) You lost me with the identifier-based...

Thanks!

Carlos


> -----Original Message-----
> From: "Carlos Antunes" <cmantu... at gmail.com>
>
> Date: Sat, 14 Jul 2007 17:23:49
> To:ragel-users at googlegroups.com
> Subject: [ragel-users] Re: Bug or feature?
>
>
> [Now with the machine attached]
>
> Adrian,
>
> Just built the following example machine:
>
> action action_in {}
> action action_out {}
>
> testmach := lower* >action_in %action_out '$';
>
> Graph is attached. Now, I am even more confused. Does that mean that
> the entering action is really not the entering action into the machine
> but it is the action that gets executed after a character is matched
> for the first time? If that's the case, I think there is one operator
> missing for symmetry, no? One which gets executed with the IN
> transition?
>
> Thanks and sorry about all the "thinking aloud" here. "thinking aloud" here.
>
> Carlos
>
>
>
> > On 7/14/07, Carlos Antunes <cmantu... at gmail.com> wrote:
> > > Adrian,
> > >
> > > I just reread the thread and, for the life of me, I don't understand
> > > why the OUT transition (not shown on the graph on the previous msg)
> > > gets its action executed but the IN transition doesn't get the same
> > > treatment.
> > >
> > > You've said, and I quote you:
> > >
> > > "Prior to version 4.0, the entering action operator actually did exactly
> > > what you describe. If the machine's start state was final, then it also
> > > embedded the action into the start state as a leaving action. Initially
> > > I thought this was very intuitive, however over time I gradually took
> > > the opinion that all operators should have a single purpose."
> > >
> > > Now, it appears to me that you were associating the entering action
> > > with the OUT transition when both the start and final states are the
> > > same. I agree with you, this is not intuitive. However, what I don't
> > > understand is why you don't associate the entering action with the IN
> > > transition. Entering action goes with IN and leaving action goes with
> > > OUT. No dual purpose here, or am I still missing something?
> > >
> > > Thanks!
> > >
> > > Carlos
> > >
> > > On 7/14/07, Carlos Antunes <cmantu... at gmail.com> wrote:
> > > > Adrian,
> > > >
> > > > Let me start by saying that I was wrong when I said that the optional
> > > > machine is bypassed. You are right, there is a state which is both the
> > > > start and finish and that state is always transitioned to. Attahed,
> > > > you'll find the image that convinced me of that. I'm going to reread
> > > > that thread to see if I "get it". To be honest with you, I am still
> > > > confused so expect additional questions from me. I hope you don't
> > > > kind! :)
> > > >
> > > > Thanks!
> > > >
> > > > Carlos
> > > >
> > > > On 7/14/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> > > > > Carlos,
> > > > >
> > > > > The leaving action is run because the machine accepts the zero-length
> > > > > word at the time that it is embedded. That is, the start state is also
> > > > > final. When you 'pass over' a machine that accepts the zero-length word
> > > > > you are always passing through the start state which is also final. And
> > > > > so you are 'leaving' it.
> > > > >
> > > > > But entering actions are always associated with transitions inside the
> > > > > machine. This is how you can leave a machine you have never 'entered.'
> > > > >
> > > > > It's true, the wording of things doesn't perfectly match the semantics,
> > > > > and they used to match better (see the thread), but to me the current
> > > > > state of things seems the best way to go. The semantics of the operators
> > > > > are simple and easy to define.
> > > > >
> > > > > If you make a habit of factoring out zero-length machines then you can
> > > > > avoid this problem.
> > > > >
> > > > > word = char+ >enter %leave;
> > > > > opt_word = word?;
> > > > >
> > > > > -Adrian
> > > > >
> > > > > Carlos Antunes wrote:
> > > > > > Adrian,
> > > > > >
> > > > > > Ok, read the thread and that message specifically. I still don't get
> > > > > > why a machine that doesn't get entered gets to be exited. If a
> > > > > > transition goes around, not through, the machine, why would the exit
> > > > > > action of that machine be called? After all, that optional machine
> > > > > > final state may never be transitioned to, right? How come it can be
> > > > > > transitioned from, then?
> > > > > >
> > > > > > Thanks!
> > > > > >
> > > > > > Carlos
> > > > > >
> > > > > > On 7/14/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> > > > > >> Hi Carlos,
> > > > > >>
> > > > > >> See this thread:
> > > > > >>
> > > > > >> http://groups.google.com/group/ragel-users/browse_thread/thread/9509ab83d7f022f1/
> > > > > >>
> > > > > >> And in particular this message:
> > > > > >>
> > > > > >> http://groups.google.com/group/ragel-users/msg/79546a93494e6773
> > > > > >>
> > > > > >> -Adrian
> > > > > >>
> > > > > >> Carlos Antunes wrote:
> > > > > >>> Adrian,
> > > > > >>>
> > > > > >>> I have the following construct:
> > > > > >>>
> > > > > >>> password = password_char**
> > > > > >>>                >{ capture_start(capid_password, p); }
> > > > > >>>                %{ capture_stop(capid_password, p); };
> > > > > >>>
> > > > > >>> When I feed a string that doesn't match "password", "capture_stop" is
> > > > > >>> immediately called but not "capture_start". I would expect that either
> > > > > >>> both or none are called (I prefer both). What say you?
> > > > > >>>
> > > > > >>> Thanks!
> > > > > >>>
> > > > > >>> Carlos
> > > > > >>>
> > > > > >>
> > > > > >>
> > > > > >
> > > > > >
> > > > >
> > > > >
> > > > >
> > > >
> > > >
> > > > --
> > > > "We hold [...] that all men are created equal; that they are
> > > > endowed [...] with certain inalienable rights; that among
> > > > these are life, liberty, and the pursuit of happiness"
> > > >         -- Thomas Jefferson
> > > >
> > > >
> > >
> > >
> > > --
> > > "We hold [...] that all men are created equal; that they are
> > > endowed [...] with certain inalienable rights; that among
> > > these are life, liberty, and the pursuit of happiness"
> > >         -- Thomas Jefferson
> > >
> >
> >
> > --
> > "We hold [...] that all men are created equal; that they are
> > endowed [...] with certain inalienable rights; that among
> > these are life, liberty, and the pursuit of happiness"
> >         -- Thomas Jefferson
> >
>
>
> --
> "We hold [...] that all men are created equal; that they are
> endowed [...] with certain inalienable rights; that among
> these are life, liberty, and the pursuit of happiness"
>         -- Thomas Jefferson
>
>
>
>
> >
>


-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From thurs... at cs.queensu.ca  Sat Jul 14 22:45:59 2007
From: thurs... at cs.queensu.ca (=?utf-8?B?QWRyaWFuIFRodXJzdG9u?=)
Date: Sat, 14 Jul 2007 22:45:59 +0000
Subject: [ragel-users] Re: Bug or feature?
In-Reply-To: <cb2ad8b50707141520w2c37f0aic8811bd7101d72b5@mail.gmail.com>
References: <cb2ad8b50707132335j2b71486ara2c50949932c4b60@mail.gmail.com> <46992D4D.5050108@cs.queensu.ca> <cb2ad8b50707141324j44ae5d7qb80b98ea1c89ca0a@mail.gmail.com> <46993646.8000607@cs.queensu.ca> <cb2ad8b50707141354r135c014y4c3331d8fd5809c7@mail.gmail.com> <cb2ad8b50707141411r2c3167bas40a877fb323252e8@mail.gmail.com> <cb2ad8b50707141422n51e6fd18h453c0b543e12cc32@mail.gmail.com> <cb2ad8b50707141423s143ee837v820d00ab824faf0f@mail.gmail.com> <824544157-1184450505-cardhu_decombobulator_blackberry.rim.net-731876917-@bxe123.bisx.prod.on.blackberry><cb2ad8b50707141520w2c37f0aic8811bd7101d72b5@mail.gmail.com>
Message-ID: <769225302-1184453157-cardhu_decombobulator_blackberry.rim.net-1259516554-@bxe123.bisx.prod.on.blackberry>

I think a compile time switch that affects language semantics is a bad idea. It would be like forking the language.

Was thinking like this:

main := char? <-old_enter(a1) %a2;

Where a1 and a2 are the entering and leaving actions.

For literal actions the syntax would be like this:

<-old_enter{code}

Adrian

-----Original Message-----
From: "Carlos Antunes" <cmantunes at gmail.com>

Date: Sat, 14 Jul 2007 18:20:30 
To:ragel-users at googlegroups.com
Subject: [ragel-users] Re: Bug or feature?



On 7/14/07, Adrian Thurston <thurston at cs.queensu.ca> wrote:
>
> If you look near the end of that thread I'd like to revive the old semantics (the missing operator you speak of) however there are no more symbols left.
>

Do you see any harm in reviving the old semantics? How about a compile
time switch for the entering operator or maybe an option to write
init? The default would be the new semantics. I guess this would be
easier than to code additional operators. Personally, I find the old
semantics more intuitive and from a pragmatic point of view, they
would be more useful to me (in this particular case, I have to deal
with the possibility of an empty password; the old semantics would
work very well here.)

>
>Instead I want to add an identifier-based embedding operator
>

A what!? :) You lost me with the identifier-based...

Thanks!

Carlos


> -----Original Message-----
> From: "Carlos Antunes" <cmantunes at gmail.com>
>
> Date: Sat, 14 Jul 2007 17:23:49
> To:ragel-users at googlegroups.com
> Subject: [ragel-users] Re: Bug or feature?
>
>
> [Now with the machine attached]
>
> Adrian,
>
> Just built the following example machine:
>
> action action_in {}
> action action_out {}
>
> testmach := lower* >action_in %action_out '$';
>
> Graph is attached. Now, I am even more confused. Does that mean that
> the entering action is really not the entering action into the machine
> but it is the action that gets executed after a character is matched
> for the first time? If that's the case, I think there is one operator
> missing for symmetry, no? One which gets executed with the IN
> transition?
>
> Thanks and sorry about all the "thinking aloud" here. "thinking aloud" here.
>
> Carlos
>
>
>
> > On 7/14/07, Carlos Antunes <cmantunes at gmail.com> wrote:
> > > Adrian,
> > >
> > > I just reread the thread and, for the life of me, I don't understand
> > > why the OUT transition (not shown on the graph on the previous msg)
> > > gets its action executed but the IN transition doesn't get the same
> > > treatment.
> > >
> > > You've said, and I quote you:
> > >
> > > "Prior to version 4.0, the entering action operator actually did exactly
> > > what you describe. If the machine's start state was final, then it also
> > > embedded the action into the start state as a leaving action. Initially
> > > I thought this was very intuitive, however over time I gradually took
> > > the opinion that all operators should have a single purpose."
> > >
> > > Now, it appears to me that you were associating the entering action
> > > with the OUT transition when both the start and final states are the
> > > same. I agree with you, this is not intuitive. However, what I don't
> > > understand is why you don't associate the entering action with the IN
> > > transition. Entering action goes with IN and leaving action goes with
> > > OUT. No dual purpose here, or am I still missing something?
> > >
> > > Thanks!
> > >
> > > Carlos
> > >
> > > On 7/14/07, Carlos Antunes <cmantunes at gmail.com> wrote:
> > > > Adrian,
> > > >
> > > > Let me start by saying that I was wrong when I said that the optional
> > > > machine is bypassed. You are right, there is a state which is both the
> > > > start and finish and that state is always transitioned to. Attahed,
> > > > you'll find the image that convinced me of that. I'm going to reread
> > > > that thread to see if I "get it". To be honest with you, I am still
> > > > confused so expect additional questions from me. I hope you don't
> > > > kind! :)
> > > >
> > > > Thanks!
> > > >
> > > > Carlos
> > > >
> > > > On 7/14/07, Adrian Thurston <thurston at cs.queensu.ca> wrote:
> > > > > Carlos,
> > > > >
> > > > > The leaving action is run because the machine accepts the zero-length
> > > > > word at the time that it is embedded. That is, the start state is also
> > > > > final. When you 'pass over' a machine that accepts the zero-length word
> > > > > you are always passing through the start state which is also final. And
> > > > > so you are 'leaving' it.
> > > > >
> > > > > But entering actions are always associated with transitions inside the
> > > > > machine. This is how you can leave a machine you have never 'entered.'
> > > > >
> > > > > It's true, the wording of things doesn't perfectly match the semantics,
> > > > > and they used to match better (see the thread), but to me the current
> > > > > state of things seems the best way to go. The semantics of the operators
> > > > > are simple and easy to define.
> > > > >
> > > > > If you make a habit of factoring out zero-length machines then you can
> > > > > avoid this problem.
> > > > >
> > > > > word = char+ >enter %leave;
> > > > > opt_word = word?;
> > > > >
> > > > > -Adrian
> > > > >
> > > > > Carlos Antunes wrote:
> > > > > > Adrian,
> > > > > >
> > > > > > Ok, read the thread and that message specifically. I still don't get
> > > > > > why a machine that doesn't get entered gets to be exited. If a
> > > > > > transition goes around, not through, the machine, why would the exit
> > > > > > action of that machine be called? After all, that optional machine
> > > > > > final state may never be transitioned to, right? How come it can be
> > > > > > transitioned from, then?
> > > > > >
> > > > > > Thanks!
> > > > > >
> > > > > > Carlos
> > > > > >
> > > > > > On 7/14/07, Adrian Thurston <thurston at cs.queensu.ca> wrote:
> > > > > >> Hi Carlos,
> > > > > >>
> > > > > >> See this thread:
> > > > > >>
> > > > > >> http://groups.google.com/group/ragel-users/browse_thread/thread/9509ab83d7f022f1/
> > > > > >>
> > > > > >> And in particular this message:
> > > > > >>
> > > > > >> http://groups.google.com/group/ragel-users/msg/79546a93494e6773
> > > > > >>
> > > > > >> -Adrian
> > > > > >>
> > > > > >> Carlos Antunes wrote:
> > > > > >>> Adrian,
> > > > > >>>
> > > > > >>> I have the following construct:
> > > > > >>>
> > > > > >>> password = password_char**
> > > > > >>>                >{ capture_start(capid_password, p); }
> > > > > >>>                %{ capture_stop(capid_password, p); };
> > > > > >>>
> > > > > >>> When I feed a string that doesn't match "password", "capture_stop" is
> > > > > >>> immediately called but not "capture_start". I would expect that either
> > > > > >>> both or none are called (I prefer both). What say you?
> > > > > >>>
> > > > > >>> Thanks!
> > > > > >>>
> > > > > >>> Carlos
> > > > > >>>
> > > > > >>
> > > > > >>
> > > > > >
> > > > > >
> > > > >
> > > > >
> > > > >
> > > >
> > > >
> > > > --
> > > > "We hold [...] that all men are created equal; that they are
> > > > endowed [...] with certain inalienable rights; that among
> > > > these are life, liberty, and the pursuit of happiness"
> > > >         -- Thomas Jefferson
> > > >
> > > >
> > >
> > >
> > > --
> > > "We hold [...] that all men are created equal; that they are
> > > endowed [...] with certain inalienable rights; that among
> > > these are life, liberty, and the pursuit of happiness"
> > >         -- Thomas Jefferson
> > >
> >
> >
> > --
> > "We hold [...] that all men are created equal; that they are
> > endowed [...] with certain inalienable rights; that among
> > these are life, liberty, and the pursuit of happiness"
> >         -- Thomas Jefferson
> >
>
>
> --
> "We hold [...] that all men are created equal; that they are
> endowed [...] with certain inalienable rights; that among
> these are life, liberty, and the pursuit of happiness"
>         -- Thomas Jefferson
>
>
>
>
> >
>


-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson




From cmantu... at gmail.com  Sat Jul 14 22:55:05 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Sat, 14 Jul 2007 18:55:05 -0400
Subject: [ragel-users] Re: Bug or feature?
In-Reply-To: <769225302-1184453157-cardhu_decombobulator_blackberry.rim.net-1259516554-@bxe123.bisx.prod.on.blackberry>
References: <cb2ad8b50707132335j2b71486ara2c50949932c4...@mail.gmail.com>
	 <cb2ad8b50707141324j44ae5d7qb80b98ea1c89c...@mail.gmail.com>
	 <46993646.8000...@cs.queensu.ca>
	 <cb2ad8b50707141354r135c014y4c3331d8fd580...@mail.gmail.com>
	 <cb2ad8b50707141411r2c3167bas40a877fb32325...@mail.gmail.com>
	 <cb2ad8b50707141422n51e6fd18h453c0b543e12c...@mail.gmail.com>
	 <cb2ad8b50707141423s143ee837v820d00ab824fa...@mail.gmail.com>
	 <824544157-1184450505-cardhu_decombobulator_blackberry.rim.net-7318769...@bxe123.bisx.prod.on.blackberry>
	 <cb2ad8b50707141520w2c37f0aic8811bd7101d7...@mail.gmail.com>
	 <769225302-1184453157-cardhu_decombobulator_blackberry.rim.net-12595165...@bxe123.bisx.prod.on.blackberry>
Message-ID: <cb2ad8b50707141555h363f8c4xebeef95aa24eba8d@mail.gmail.com>

On 7/14/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> I think a compile time switch that affects language semantics is a bad idea. It would be like forking the language.
>

Yes, you are right.

>
> Was thinking like this:
>
> main := char? <-old_enter(a1) %a2;
>
> Where a1 and a2 are the entering and leaving actions.
>
> For literal actions the syntax would be like this:
>
> <-old_enter{code}
>

Ok, got it! I just don't like the "old" prefix. How about "right_enter"? :)

Question: would you be able to associate the "old_enter" action with
the final state's OUT transition from the previous machine? This would
be equivalent to associating "old_enter" action with the IN transition
of the current machine.

Thanks!

Carlos

> Adrian
>
> -----Original Message-----
> From: "Carlos Antunes" <cmantu... at gmail.com>
>
> Date: Sat, 14 Jul 2007 18:20:30
> To:ragel-users at googlegroups.com
> Subject: [ragel-users] Re: Bug or feature?
>
>
>
> On 7/14/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> >
> > If you look near the end of that thread I'd like to revive the old semantics (the missing operator you speak of) however there are no more symbols left.
> >
>
> Do you see any harm in reviving the old semantics? How about a compile
> time switch for the entering operator or maybe an option to write
> init? The default would be the new semantics. I guess this would be
> easier than to code additional operators. Personally, I find the old
> semantics more intuitive and from a pragmatic point of view, they
> would be more useful to me (in this particular case, I have to deal
> with the possibility of an empty password; the old semantics would
> work very well here.)
>
> >
> >Instead I want to add an identifier-based embedding operator
> >
>
> A what!? :) You lost me with the identifier-based...
>
> Thanks!
>
> Carlos
>
>
> > -----Original Message-----
> > From: "Carlos Antunes" <cmantu... at gmail.com>
> >
> > Date: Sat, 14 Jul 2007 17:23:49
> > To:ragel-users at googlegroups.com
> > Subject: [ragel-users] Re: Bug or feature?
> >
> >
> > [Now with the machine attached]
> >
> > Adrian,
> >
> > Just built the following example machine:
> >
> > action action_in {}
> > action action_out {}
> >
> > testmach := lower* >action_in %action_out '$';
> >
> > Graph is attached. Now, I am even more confused. Does that mean that
> > the entering action is really not the entering action into the machine
> > but it is the action that gets executed after a character is matched
> > for the first time? If that's the case, I think there is one operator
> > missing for symmetry, no? One which gets executed with the IN
> > transition?
> >
> > Thanks and sorry about all the "thinking aloud" here. "thinking aloud" here.
> >
> > Carlos
> >
> >
> >
> > > On 7/14/07, Carlos Antunes <cmantu... at gmail.com> wrote:
> > > > Adrian,
> > > >
> > > > I just reread the thread and, for the life of me, I don't understand
> > > > why the OUT transition (not shown on the graph on the previous msg)
> > > > gets its action executed but the IN transition doesn't get the same
> > > > treatment.
> > > >
> > > > You've said, and I quote you:
> > > >
> > > > "Prior to version 4.0, the entering action operator actually did exactly
> > > > what you describe. If the machine's start state was final, then it also
> > > > embedded the action into the start state as a leaving action. Initially
> > > > I thought this was very intuitive, however over time I gradually took
> > > > the opinion that all operators should have a single purpose."
> > > >
> > > > Now, it appears to me that you were associating the entering action
> > > > with the OUT transition when both the start and final states are the
> > > > same. I agree with you, this is not intuitive. However, what I don't
> > > > understand is why you don't associate the entering action with the IN
> > > > transition. Entering action goes with IN and leaving action goes with
> > > > OUT. No dual purpose here, or am I still missing something?
> > > >
> > > > Thanks!
> > > >
> > > > Carlos
> > > >
> > > > On 7/14/07, Carlos Antunes <cmantu... at gmail.com> wrote:
> > > > > Adrian,
> > > > >
> > > > > Let me start by saying that I was wrong when I said that the optional
> > > > > machine is bypassed. You are right, there is a state which is both the
> > > > > start and finish and that state is always transitioned to. Attahed,
> > > > > you'll find the image that convinced me of that. I'm going to reread
> > > > > that thread to see if I "get it". To be honest with you, I am still
> > > > > confused so expect additional questions from me. I hope you don't
> > > > > kind! :)
> > > > >
> > > > > Thanks!
> > > > >
> > > > > Carlos
> > > > >
> > > > > On 7/14/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> > > > > > Carlos,
> > > > > >
> > > > > > The leaving action is run because the machine accepts the zero-length
> > > > > > word at the time that it is embedded. That is, the start state is also
> > > > > > final. When you 'pass over' a machine that accepts the zero-length word
> > > > > > you are always passing through the start state which is also final. And
> > > > > > so you are 'leaving' it.
> > > > > >
> > > > > > But entering actions are always associated with transitions inside the
> > > > > > machine. This is how you can leave a machine you have never 'entered.'
> > > > > >
> > > > > > It's true, the wording of things doesn't perfectly match the semantics,
> > > > > > and they used to match better (see the thread), but to me the current
> > > > > > state of things seems the best way to go. The semantics of the operators
> > > > > > are simple and easy to define.
> > > > > >
> > > > > > If you make a habit of factoring out zero-length machines then you can
> > > > > > avoid this problem.
> > > > > >
> > > > > > word = char+ >enter %leave;
> > > > > > opt_word = word?;
> > > > > >
> > > > > > -Adrian
> > > > > >
> > > > > > Carlos Antunes wrote:
> > > > > > > Adrian,
> > > > > > >
> > > > > > > Ok, read the thread and that message specifically. I still don't get
> > > > > > > why a machine that doesn't get entered gets to be exited. If a
> > > > > > > transition goes around, not through, the machine, why would the exit
> > > > > > > action of that machine be called? After all, that optional machine
> > > > > > > final state may never be transitioned to, right? How come it can be
> > > > > > > transitioned from, then?
> > > > > > >
> > > > > > > Thanks!
> > > > > > >
> > > > > > > Carlos
> > > > > > >
> > > > > > > On 7/14/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> > > > > > >> Hi Carlos,
> > > > > > >>
> > > > > > >> See this thread:
> > > > > > >>
> > > > > > >> http://groups.google.com/group/ragel-users/browse_thread/thread/9509ab83d7f022f1/
> > > > > > >>
> > > > > > >> And in particular this message:
> > > > > > >>
> > > > > > >> http://groups.google.com/group/ragel-users/msg/79546a93494e6773
> > > > > > >>
> > > > > > >> -Adrian
> > > > > > >>
> > > > > > >> Carlos Antunes wrote:
> > > > > > >>> Adrian,
> > > > > > >>>
> > > > > > >>> I have the following construct:
> > > > > > >>>
> > > > > > >>> password = password_char**
> > > > > > >>>                >{ capture_start(capid_password, p); }
> > > > > > >>>                %{ capture_stop(capid_password, p); };
> > > > > > >>>
> > > > > > >>> When I feed a string that doesn't match "password", "capture_stop" is
> > > > > > >>> immediately called but not "capture_start". I would expect that either
> > > > > > >>> both or none are called (I prefer both). What say you?
> > > > > > >>>
> > > > > > >>> Thanks!
> > > > > > >>>
> > > > > > >>> Carlos
> > > > > > >>>
> > > > > > >>
> > > > > > >>
> > > > > > >
> > > > > > >
> > > > > >
> > > > > >
> > > > > >
> > > > >
> > > > >
> > > > > --
> > > > > "We hold [...] that all men are created equal; that they are
> > > > > endowed [...] with certain inalienable rights; that among
> > > > > these are life, liberty, and the pursuit of happiness"
> > > > >         -- Thomas Jefferson
> > > > >
> > > > >
> > > >
> > > >
> > > > --
> > > > "We hold [...] that all men are created equal; that they are
> > > > endowed [...] with certain inalienable rights; that among
> > > > these are life, liberty, and the pursuit of happiness"
> > > >         -- Thomas Jefferson
> > > >
> > >
> > >
> > > --
> > > "We hold [...] that all men are created equal; that they are
> > > endowed [...] with certain inalienable rights; that among
> > > these are life, liberty, and the pursuit of happiness"
> > >         -- Thomas Jefferson
> > >
> >
> >
> > --
> > "We hold [...] that all men are created equal; that they are
> > endowed [...] with certain inalienable rights; that among
> > these are life, liberty, and the pursuit of happiness"
> >         -- Thomas Jefferson
> >
> >
> >
> >
> > >
> >
>
>
> --
> "We hold [...] that all men are created equal; that they are
> endowed [...] with certain inalienable rights; that among
> these are life, liberty, and the pursuit of happiness"
>         -- Thomas Jefferson
>
>
>
>
> >
>


-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From thurs... at cs.queensu.ca  Fri Jul 20 03:31:13 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Thu, 19 Jul 2007 23:31:13 -0400
Subject: [ragel-users] Re: Bug or feature?
In-Reply-To: <cb2ad8b50707141555h363f8c4xebeef95aa24eb...@mail.gmail.com>
References: <cb2ad8b50707132335j2b71486ara2c50949932c4b60@mail.gmail.com> <cb2ad8b50707141324j44ae5d7qb80b98ea1c89ca0a@mail.gmail.com> <46993646.8000607@cs.queensu.ca> <cb2ad8b50707141354r135c014y4c3331d8fd5809c7@mail.gmail.com> <cb2ad8b50707141411r2c3167bas40a877fb323252e8@mail.gmail.com> <cb2ad8b50707141422n51e6fd18h453c0b543e12cc32@mail.gmail.com> <cb2ad8b50707141423s143ee837v820d00ab824faf0f@mail.gmail.com> <824544157-1184450505-cardhu_decombobulator_blackberry.rim.net-731876917-@bxe123.bisx.prod.on.blackberry> <cb2ad8b50707141520w2c37f0aic8811bd7101d72b5@mail.gmail.com> <769225302-1184453157-cardhu_decombobulator_blackberry.rim.net-1259516554-@bxe123.bisx.prod.on.blackberry> <cb2ad8b50707141555h363f8c4xebeef95aa24eba8d@mail.gmail.com>
Message-ID: <46A02C81.4060307@cs.queensu.ca>

Hi Carlos,

If I understand you correctly, this happens automatically. When you
concatenation two machines the start state of the second machine is
effectively copied into the final states of the first machine by way of
an epsilon transition.

Adrian

Carlos Antunes wrote:
> Question: would you be able to associate the "old_enter" action with
> the final state's OUT transition from the previous machine? This would
> be equivalent to associating "old_enter" action with the IN transition
> of the current machine.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20070719/c8a84f07/attachment.sig>

From cmantu... at gmail.com  Fri Jul 20 04:46:11 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Fri, 20 Jul 2007 00:46:11 -0400
Subject: [ragel-users] Re: Bug or feature?
In-Reply-To: <46A02C81.4060307@cs.queensu.ca>
References: <cb2ad8b50707132335j2b71486ara2c50949932c4...@mail.gmail.com>
	 <cb2ad8b50707141354r135c014y4c3331d8fd580...@mail.gmail.com>
	 <cb2ad8b50707141411r2c3167bas40a877fb32325...@mail.gmail.com>
	 <cb2ad8b50707141422n51e6fd18h453c0b543e12c...@mail.gmail.com>
	 <cb2ad8b50707141423s143ee837v820d00ab824fa...@mail.gmail.com>
	 <824544157-1184450505-cardhu_decombobulator_blackberry.rim.net-7318769...@bxe123.bisx.prod.on.blackberry>
	 <cb2ad8b50707141520w2c37f0aic8811bd7101d7...@mail.gmail.com>
	 <769225302-1184453157-cardhu_decombobulator_blackberry.rim.net-12595165...@bxe123.bisx.prod.on.blackberry>
	 <cb2ad8b50707141555h363f8c4xebeef95aa24eb...@mail.gmail.com>
	 <46A02C81.4060...@cs.queensu.ca>
Message-ID: <cb2ad8b50707192146t85e3448ve2d95f34200b06a@mail.gmail.com>

Adrian,

Yes, that what I was mentioning. However, that was not the behavior of
old_enter, was it? Old_enter still needed something to process first,
no?

In any case, I was trying to get to something. Let me illustrate:

machine_a = machine_b %action_b machine_c

Now, this is semantically equivalent to (assuming that ">" is really
associated with the start state:

machine_a = machine_b  machine_c >action_b

This means that, from a semantic point of view,

machine_c >action_b <=> %action_b machine_c

So, why not actually use something like:

machine_d = %entering_c machine_c?

After all, because the start and final states are collapsed, they are
essential the same and this sameness is reflected in the "same" symbol
to represent both. The only change would  be to accept two %% in
sequence (one final, the other start), for consistency purposes. For
example:

machine_a = expr1 %final_a

machine_b = %start_b expr2

machine_c = machine_a machine_b <=> machine_c = expr1 ( %final_a
%start_b ) expr2

The bottom line is that, because the start and final states are
indistinguishable, the symbols that represents transition actions into
them should be too. The syntax just needs to be slightly adjusted to
reflect this and all will be good.

Thanks!

Carlos

On 7/19/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> Hi Carlos,
>
> If I understand you correctly, this happens automatically. When you
> concatenation two machines the start state of the second machine is
> effectively copied into the final states of the first machine by way of
> an epsilon transition.
>
> Adrian
>
> Carlos Antunes wrote:
> > Question: would you be able to associate the "old_enter" action with
> > the final state's OUT transition from the previous machine? This would
> > be equivalent to associating "old_enter" action with the IN transition
> > of the current machine.
>
>
>


-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From thurs... at cs.queensu.ca  Fri Jul 20 06:03:58 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Fri, 20 Jul 2007 02:03:58 -0400
Subject: [ragel-users] Re: Bug or feature?
In-Reply-To: <cb2ad8b50707192146t85e3448ve2d95f34200b...@mail.gmail.com>
References: <cb2ad8b50707132335j2b71486ara2c50949932c4b60@mail.gmail.com> <cb2ad8b50707141354r135c014y4c3331d8fd5809c7@mail.gmail.com> <cb2ad8b50707141411r2c3167bas40a877fb323252e8@mail.gmail.com> <cb2ad8b50707141422n51e6fd18h453c0b543e12cc32@mail.gmail.com> <cb2ad8b50707141423s143ee837v820d00ab824faf0f@mail.gmail.com> <824544157-1184450505-cardhu_decombobulator_blackberry.rim.net-731876917-@bxe123.bisx.prod.on.blackberry> <cb2ad8b50707141520w2c37f0aic8811bd7101d72b5@mail.gmail.com> <769225302-1184453157-cardhu_decombobulator_blackberry.rim.net-1259516554-@bxe123.bisx.prod.on.blackberry> <cb2ad8b50707141555h363f8c4xebeef95aa24eba8d@mail.gmail.com> <46A02C81.4060307@cs.queensu.ca> <cb2ad8b50707192146t85e3448ve2d95f34200b06a@mail.gmail.com>
Message-ID: <46A0504E.6020503@cs.queensu.ca>

Carlos Antunes wrote:
> machine_a = machine_b %action_b machine_c
> 
> Now, this is semantically equivalent to (assuming that ">" is really
> associated with the start state:
> 
> machine_a = machine_b  machine_c >action_b

They are not quite equivalent. Consider the case of machine_c accepting
the zero-length word (start state is final). Then action_b will be a
pending out action of machine_a.

Note however that the first form above is equivalent to the second form
under the old semantics of >.

One thing I don't like about the syntax you propose is that it creates
an ambiguity in the ragel language itself. When you parse % is it
associated with the tree on the left or the tree on the right? Right now
all embedding operators are currently of this form:

<expr> <op> <action>

and this syntax changes that.

Also note that you can achieve the same thing using the existing
language by putting "" in front of %. Like this:

machine_a = machine_b ( ""%action_b machine_c );

So that brings up an interesting point. The line directly above is
another way to emulate the old semantics of >.

-Adrian

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20070720/64309d04/attachment.sig>

From cmantu... at gmail.com  Fri Jul 20 15:00:29 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Fri, 20 Jul 2007 11:00:29 -0400
Subject: [ragel-users] Re: Bug or feature?
In-Reply-To: <46A0504E.6020503@cs.queensu.ca>
References: <cb2ad8b50707132335j2b71486ara2c50949932c4...@mail.gmail.com>
	 <cb2ad8b50707141422n51e6fd18h453c0b543e12c...@mail.gmail.com>
	 <cb2ad8b50707141423s143ee837v820d00ab824fa...@mail.gmail.com>
	 <824544157-1184450505-cardhu_decombobulator_blackberry.rim.net-7318769...@bxe123.bisx.prod.on.blackberry>
	 <cb2ad8b50707141520w2c37f0aic8811bd7101d7...@mail.gmail.com>
	 <769225302-1184453157-cardhu_decombobulator_blackberry.rim.net-12595165...@bxe123.bisx.prod.on.blackberry>
	 <cb2ad8b50707141555h363f8c4xebeef95aa24eb...@mail.gmail.com>
	 <46A02C81.4060...@cs.queensu.ca>
	 <cb2ad8b50707192146t85e3448ve2d95f34200b...@mail.gmail.com>
	 <46A0504E.6020...@cs.queensu.ca>
Message-ID: <cb2ad8b50707200800g3a31eaf9nf54eff12e757469d@mail.gmail.com>

On 7/20/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> Carlos Antunes wrote:
> > machine_a = machine_b %action_b machine_c
> >
> > Now, this is semantically equivalent to (assuming that ">" is really
> > associated with the start state:
> >
> > machine_a = machine_b  machine_c >action_b
>
> They are not quite equivalent. Consider the case of machine_c accepting
> the zero-length word (start state is final). Then action_b will be a
> pending out action of machine_a.
>

Adrian, my point is that when the start and final states are one and
the same, there is no difference between "pending in" and "pending
out". In the example above, and using the old semantics, ">action_b"
may indeed represent a "pending out". But this is consistent with what
I've said: there is no semantic difference between "pending_in" and
"pending_out" when start and final states are one and the same. And
the empty machine just so happens to have a start state
indistinguishable from a final one, no?

>
> One thing I don't like about the syntax you propose is that it creates
> an ambiguity in the ragel language itself. When you parse % is it
> associated with the tree on the left or the tree on the right?
>

At the end of the day, I don't think it matters. The end result, from
a semantic point of view, is the same. After all, from a semantic
point of view "(expr1 %action) expr2" is the same as "expr1 (%action
expr2)".

>
>Right now all embedding operators are currently of this form:
>
> <expr> <op> <action>
>
> and this syntax changes that.
>

Yes, you are right.

>
> Also note that you can achieve the same thing using the existing
> language by putting "" in front of %. Like this:
>
> machine_a = machine_b ( ""%action_b machine_c );
>
> So that brings up an interesting point. The line directly above is
> another way to emulate the old semantics of >.
>

Indeed and that is, right now, the best practical way to recover the
old semantics.

However, allow me to be mathematical one more time:

machine_a = machine_b ( ""%action_b machine_c )

<=> machine_a = ( machine_b ""%action_b ) machine_c

<=> machine_a = ( machine_b "" ) %action_b machine_c

<=> machine_a = ( machine_b ) %action_b machine_c

<=> machine_a = machine_b ( %action_b machine_c)

Obviously, "<=>" refers to semantic rather than syntactic equivalence.
But the end result is always the same: no difference in the way the
FSM "sees" the "%" operator. In reality, I guess one could call it
simply the "transition between machines" operator because that's the
way a FSM sees it. The ">" in the old semantics would simply be a
redundant beast.

However, I understand the syntactic simplicity of "<expr> <op>
<action>" and, as much as I think it would be cool, it is not that
important from a practical point of view. Maybe, as a suggestion, you
could mention the ( "" %action ) trick in the documentation?

Thanks!

Carlos

-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From thurs... at cs.queensu.ca  Fri Jul 20 16:16:10 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Fri, 20 Jul 2007 12:16:10 -0400
Subject: [ragel-users] Re: Bug or feature?
In-Reply-To: <cb2ad8b50707200800g3a31eaf9nf54eff12e757469d@mail.gmail.com>
References: <cb2ad8b50707132335j2b71486ara2c50949932c4b60@mail.gmail.com> <cb2ad8b50707141422n51e6fd18h453c0b543e12cc32@mail.gmail.com> <cb2ad8b50707141423s143ee837v820d00ab824faf0f@mail.gmail.com> <824544157-1184450505-cardhu_decombobulator_blackberry.rim.net-731876917-@bxe123.bisx.prod.on.blackberry> <cb2ad8b50707141520w2c37f0aic8811bd7101d72b5@mail.gmail.com> <769225302-1184453157-cardhu_decombobulator_blackberry.rim.net-1259516554-@bxe123.bisx.prod.on.blackberry> <cb2ad8b50707141555h363f8c4xebeef95aa24eba8d@mail.gmail.com> <46A02C81.4060307@cs.queensu.ca> <cb2ad8b50707192146t85e3448ve2d95f34200b06a@mail.gmail.com> <46A0504E.6020503@cs.queensu.ca> <cb2ad8b50707200800g3a31eaf9nf54eff12e757469d@mail.gmail.com>
Message-ID: <46A0DFCA.2000604@cs.queensu.ca>


Carlos Antunes wrote:
> Adrian, my point is that when the start and final states are one and
> the same, there is no difference between "pending in" and "pending
> out". In the example above, and using the old semantics, ">action_b"
> may indeed represent a "pending out". But this is consistent with what
> I've said: there is no semantic difference between "pending_in" and
> "pending_out" when start and final states are one and the same. And
> the empty machine just so happens to have a start state
> indistinguishable from a final one, no?

Yes, that's right. I do like the idea of reducing the number of
operators and if I were to redesign ragel from the ground up this kind
of operator would be something to consider.

It would depend on the whole redesign, but I think a starting operator
(the current semantics) could still be desirable. Consider:

m1 = ':';
m2 = [a-z]*;

action act1 { printf( "first char of m2 is %c\n", *p ); }

m = m1 ""%act1 m2 '\n';

Just to be clear, this is equivalent to the old semantics of >. With
this you get the message on the newline in the case that m2 matches
nothing, which is wrong. You have to refactor things in order to "fight"
the behaviour of the operator. I don't like that. I'd rather you have to
refactor things to add the above effect when you want it. This is one of
the reasons for me simplifying > and making it go ONLY on the first
characters of the machine, not also on pending out actions when the
start state is final.

> However, I understand the syntactic simplicity of "<expr> <op>
> <action>" and, as much as I think it would be cool, it is not that
> important from a practical point of view. Maybe, as a suggestion, you
> could mention the ( "" %action ) trick in the documentation?

I think a ragel "tricks/hacks" section would be good. I can think of
other stuff to put in there :)

-Adrian

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20070720/cf9cbefd/attachment.sig>

From thurs... at cs.queensu.ca  Fri Jul 20 18:58:33 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Fri, 20 Jul 2007 14:58:33 -0400
Subject: renaming the ">" operator
Message-ID: <46A105D9.6010100@cs.queensu.ca>

Hi,

Looking at a couple discussions on this list I realize that the ">"
operator needs to be renamed. The current name "entering" suggests that
it is symmetrical with the leaving operator. In fact, it once was, so
back then it was a good name.

But the semantics have since changed and the name should have been
changed along with the semantics. Since it is now closer to being
symmetrical with the finishing transition operator it should be named
"starting".

So now the transition-based embedding operators are like this:

">" - starting a machine - transitions leaving the start state
"@" - finishing a machine - transitions into a final state
"%" - leaving a machine - transitions out of a final state
"$" - all transitions

Now in the case that the start state is final we can say that it is
possible to "leave" the machine without ever "starting" it and it
doesn't sound as much like a contradiction. After all, you can leave a
lot of things without actually starting them :)

Regards,
 Adrian

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20070720/62404cc5/attachment.sig>

From cmantu... at gmail.com  Mon Jul 23 13:27:59 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Mon, 23 Jul 2007 09:27:59 -0400
Subject: [ragel-users] renaming the ">" operator
In-Reply-To: <46A105D9.6010100@cs.queensu.ca>
References: <46A105D9.6010...@cs.queensu.ca>
Message-ID: <cb2ad8b50707230627q6d557f72v9f076a103236cfcb@mail.gmail.com>

On 7/20/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>
> Since it is now closer to being symmetrical with the finishing transition operator
> it should be named "starting".
>

Yeap, make sense.

>
> ">" - starting a machine - transitions leaving the start state
>

I guess you could include a note in the docs mentioning that if the
start and final states are one and the same, ">" won't apply, maybe?

Carlos

-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From thurs... at cs.queensu.ca  Mon Jul 23 14:49:30 2007
From: thurs... at cs.queensu.ca (=?utf-8?B?QWRyaWFuIFRodXJzdG9u?=)
Date: Mon, 23 Jul 2007 14:49:30 +0000
Subject: [ragel-users] Re: renaming the ">" operator
In-Reply-To: <cb2ad8b50707230627q6d557f72v9f076a103236cfcb@mail.gmail.com>
References: <46A105D9.6010100@cs.queensu.ca><cb2ad8b50707230627q6d557f72v9f076a103236cfcb@mail.gmail.com>
Message-ID: <2051553119-1185202150-cardhu_decombobulator_blackberry.rim.net-1605775854-@bxe121.bisx.prod.on.blackberry>

I think it's already mentioned in the description of ">". Except I speak about "bypassing" the machine in case the start state is final. 

Adrian
-----Original Message-----
From: "Carlos Antunes" <cmantunes at gmail.com>

Date: Mon, 23 Jul 2007 09:27:59 
To:ragel-users at googlegroups.com
Subject: [ragel-users] Re: renaming the ">" operator



On 7/20/07, Adrian Thurston <thurston at cs.queensu.ca> wrote:
>
> Since it is now closer to being symmetrical with the finishing transition operator
> it should be named "starting".
>

Yeap, make sense.

>
> ">" - starting a machine - transitions leaving the start state
>

I guess you could include a note in the docs mentioning that if the
start and final states are one and the same, ">" won't apply, maybe?

Carlos

-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson




From cmantu... at gmail.com  Mon Jul 23 15:15:05 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Mon, 23 Jul 2007 11:15:05 -0400
Subject: [ragel-users] Re: renaming the ">" operator
In-Reply-To: <2051553119-1185202150-cardhu_decombobulator_blackberry.rim.net-1605775854-@bxe121.bisx.prod.on.blackberry>
References: <46A105D9.6010...@cs.queensu.ca>
	 <cb2ad8b50707230627q6d557f72v9f076a103236c...@mail.gmail.com>
	 <2051553119-1185202150-cardhu_decombobulator_blackberry.rim.net-16057758...@bxe121.bisx.prod.on.blackberry>
Message-ID: <cb2ad8b50707230815t357fe2b3o80ecf677e1dbc7b1@mail.gmail.com>

On 7/23/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> I think it's already mentioned in the description of ">". Except I speak about "bypassing" the machine in case the start state is final.
>

The "bypass" word suggests, to me at least, that the machine is
entirely bypassed and absolutely no action would be performed,
including those associated with "%".

Carlos

-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From stephenhorne... at aol.com  Sun Jul 22 23:07:24 2007
From: stephenhorne... at aol.com (Steve Horne)
Date: Sun, 22 Jul 2007 16:07:24 -0700
Subject: Stack handling for fcall and fret
Message-ID: <1185145644.396780.96820@r34g2000hsd.googlegroups.com>

I was recently toying with the idea of using Ragel to create a
recursive descent parser. I figured that for simple DSLs, this would
be convenient - allowing the scanner and parser to be developed using
the same language and tools. While thinking about this, I noticed a
wider issue with Ragels stack handling.

The stack consists of the user-defined variables 'stack' and 'top',
with presumably 'top' being a stack pointer subscript into 'stack'.
Fine - but Ragel doesn't appear to know how big the stack is, and
therefore cannot detect when it is full.

This is a problem for recursive descent parsing as there is no way to
resize the stack when needed, but then I'm not sure Ragel can handle
recursive descent parsing of expressions etc anyway. But potential
stack overflow is also a wider problem.

I understand that Ragel is being used to generate protocol handlers,
where security is potentially a major concern. A stack overflow is
basically a buffer overflow, which is of course the classic security
flaw.

Most likely this is a phantom issue - such code probably doesn't use
fcall/fret and doesn't have a stack at all. Even if it does, in many
cases the stack will have a fixed maximum possible size (though you
are still dependent on the user working this out accurately).

Even so, having a mechanism to allow the push and pop code to be
modified seems like a good idea. Maybe something like...

  %%stack push { stk.push ( $ );  }
  %%stack pop { $ = stk.pop ();  }

In the above, the content of the braces is like action code, except
that the '$' is replaced by the source/target expression by Ragel.

Also, could you add a small section to the "Interface to Host" section
of the manual, that lists all the variables that the user may need to
declare (cs, p, pe etc) with short descriptions and links to
appropriate sections of the manual.

I find that I tend to work out all the regular expression stuff first,
and then come back to add actions and code later. It's so easy to
forget that, for instance, since I used a |* ... *| construct I need
the 'act' variable - tokstart and tokend I always remember, but act
loves to drive me mad!


From thurs... at cs.queensu.ca  Mon Jul 23 15:24:38 2007
From: thurs... at cs.queensu.ca (=?utf-8?B?QWRyaWFuIFRodXJzdG9u?=)
Date: Mon, 23 Jul 2007 15:24:38 +0000
Subject: [ragel-users] Stack handling for fcall and fret
In-Reply-To: <1185145644.396780.96820@r34g2000hsd.googlegroups.com>
References: <1185145644.396780.96820@r34g2000hsd.googlegroups.com>
Message-ID: <403679371-1185204259-cardhu_decombobulator_blackberry.rim.net-912206922-@bxe121.bisx.prod.on.blackberry>

When I first made fcall/fret I only imagined a fixed size stack as being useful, but now I recognise this as an issue. People want to handle simple recursion of arbitrary depth. Someting to this effect is in the TODO but as usual I haven't gotten around to it.  Public requests always speed things up though. :)

In regards to the new section that's already done. It will be there in the next release. 

Adrian

-----Original Message-----
From: Steve Horne <stephenhorne100 at aol.com>

Date: Sun, 22 Jul 2007 16:07:24 
To:ragel-users <ragel-users at googlegroups.com>
Subject: [ragel-users] Stack handling for fcall and fret



I was recently toying with the idea of using Ragel to create a
recursive descent parser. I figured that for simple DSLs, this would
be convenient - allowing the scanner and parser to be developed using
the same language and tools. While thinking about this, I noticed a
wider issue with Ragels stack handling.

The stack consists of the user-defined variables 'stack' and 'top',
with presumably 'top' being a stack pointer subscript into 'stack'.
Fine - but Ragel doesn't appear to know how big the stack is, and
therefore cannot detect when it is full.

This is a problem for recursive descent parsing as there is no way to
resize the stack when needed, but then I'm not sure Ragel can handle
recursive descent parsing of expressions etc anyway. But potential
stack overflow is also a wider problem.

I understand that Ragel is being used to generate protocol handlers,
where security is potentially a major concern. A stack overflow is
basically a buffer overflow, which is of course the classic security
flaw.

Most likely this is a phantom issue - such code probably doesn't use
fcall/fret and doesn't have a stack at all. Even if it does, in many
cases the stack will have a fixed maximum possible size (though you
are still dependent on the user working this out accurately).

Even so, having a mechanism to allow the push and pop code to be
modified seems like a good idea. Maybe something like...

  %%stack push { stk.push ( $ );  }
  %%stack pop { $ = stk.pop ();  }

In the above, the content of the braces is like action code, except
that the '$' is replaced by the source/target expression by Ragel.

Also, could you add a small section to the "Interface to Host" section
of the manual, that lists all the variables that the user may need to
declare (cs, p, pe etc) with short descriptions and links to
appropriate sections of the manual.

I find that I tend to work out all the regular expression stuff first,
and then come back to add actions and code later. It's so easy to
forget that, for instance, since I used a |* ... *| construct I need
the 'act' variable - tokstart and tokend I always remember, but act
loves to drive me mad!





From stephenhorne... at aol.com  Mon Jul 23 19:46:22 2007
From: stephenhorne... at aol.com (Steve Horne)
Date: Mon, 23 Jul 2007 12:46:22 -0700
Subject: Stack handling for fcall and fret
In-Reply-To: <403679371-1185204259-cardhu_decombobulator_blackberry.rim.net-912206922-@bxe121.bisx.prod.on.blackberry>
References: <1185145644.396780.96820@r34g2000hsd.googlegroups.com>
   <403679371-1185204259-cardhu_decombobulator_blackberry.rim.net-912206922-@bxe121.bisx.prod.on.blackberry>
Message-ID: <1185219982.695587.21350@k79g2000hse.googlegroups.com>

Thanks.

Don't put too much priority on the stack thing, though - I don't have
any real immediate need.


From thurs... at cs.queensu.ca  Tue Jul 24 21:38:14 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Tue, 24 Jul 2007 17:38:14 -0400
Subject: ragel 5.23 released
Message-ID: <46A67146.7020209@cs.queensu.ca>

Hi,

Ragel 5.23 has been released. It includes updates to the documentation
and changes to the Ruby code generator. Ola Bini reports considerable
speed improvements with the elimination of callcc.

This will be the last development release of the 5.X line. I am going to
begin work on version 6.

Cheers,
 Adrian




-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel/attachments/20070724/73e63e94/attachment.sig>

From cmantu... at gmail.com  Tue Jul 24 21:57:51 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Tue, 24 Jul 2007 17:57:51 -0400
Subject: [ragel-users] ragel 5.23 released
In-Reply-To: <46A67146.7020209@cs.queensu.ca>
References: <46A67146.7020...@cs.queensu.ca>
Message-ID: <cb2ad8b50707241457y111b1b88pbe45dee0248b51ce@mail.gmail.com>

On 7/24/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>
> I am going to begin work on version 6.
>

Yippee! :)

-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From stephenhorne... at aol.com  Wed Jul 25 08:04:05 2007
From: stephenhorne... at aol.com (Steve Horne)
Date: Wed, 25 Jul 2007 01:04:05 -0700
Subject: ragel 5.23 released
In-Reply-To: <46A67146.7020209@cs.queensu.ca>
References: <46A67146.7020209@cs.queensu.ca>
Message-ID: <1185350645.365300.67370@w3g2000hsg.googlegroups.com>


On Jul 24, 10:38 pm, Adrian Thurston <thurs... at cs.queensu.ca> wrote:

> This will be the last development release of the 5.X line. I am going to
> begin work on version 6.

Probably a good time to make a few suggestions then...

First, any chance of a new built-in machine? - one that never matches
anything? The idea is to use it in placeholder rules, that will be
filled in later - options that aren't implemented yet.

Second, consider this fragment of the code generated by Ragel in
response to a 'write data' command...

static const char _mwt_scn2_actions[] = {
  <blah>
};

First the really trivial issue - according to the C and C++ standards,
identifiers beginning with an underscore or containing a double-
underscore anywhere are reserved (non-standard keywords and standard
library stuff). A trailing single underscore is perfectly fine,
however. Yes, I know, sorry, I can't help it.

More significantly, this cannot be embedded in a class or struct, at
least in some compilers (Microsoft VC++ 2003 being the case in point).
There was an older approach to this kind of thing, where the static
const data is declared in the class but defined (given values)
outside, and usually in the .cpp file rather than the header. Syntax
is IIRC...

class classname
{
  static const int membername;
};
...
static const int classname::membername = 5;

(not quite 100% on this - not sure if the 'static' should be repeated)

I'm not really clear on the state of this in the standard. Certainly,
more recent compilers can cope with static const data in the class
definition, but I don't know if there are any limitations. In any
case, it might be useful to some (i.e. me) if you could have 'write
data declarations' and 'write data definitions in scopename' or
similar options.

But only if it's easy, of course - there's plenty of ways of working
around this issue. I tend to just put the 'write data' in a global
area ATM.


From angaut... at yahoo.com  Mon Jul  2 04:15:44 2007
From: angaut... at yahoo.com (gautham a n)
Date: Sun, 1 Jul 2007 21:15:44 -0700 (PDT)
Subject: [ragel-users] Re: Newbie question - regarding anchoring
Message-ID: <383983.91141.qm@web53604.mail.re2.yahoo.com>

Hi,

Thanks a lot for the clarification. I understand now.

-gautham

----- Original Message ----
From: Adrian Thurston <thurs... at cs.queensu.ca>
To: ragel-users at googlegroups.com
Sent: Friday, June 29, 2007 7:35:04 PM
Subject: [ragel-users] Re: Newbie question - regarding anchoring

Hello,

gautham a n wrote:
> would print "you said hello.\n" for both input strings - "Hello world"
> and "world Hello abcdef".

That is true of regular expressions as they are commonly known, but it
is not the case with Ragel. Ragel is more like a parser generator that
works with regular languages than a regular expression engine. If you
wanted to match the second string you would either have to put an "any*"
at the front or manually re-call the machine at every input location.

Cheers,
 Adrian

> 
> But, what would I need to do if I wanted the above printf() to be called only in the case when "Hello" is found at the beginning of the input string and, don't want the printf() to be called if some other substring is present at the beginning of the input string ?
> 
> Thanks in advance.
> 
> -gautham
> 
> ----- Original Message ----
> From: Adrian Thurston <thurs... at cs.queensu.ca>
> To: ragel-users at googlegroups.com
> Sent: Thursday, June 28, 2007 8:55:43 PM
> Subject: [ragel-users] Re: Newbie question - regarding anchoring
> 
> Hi,
> 
> Ragel does not employ a regular expression matching engine, just a
> simple state machine which begins operation at the start of the input
> string. Since it does not attempt to match a pattern at every input
> position you don't need ^ to restrict the pattern to the beginning of an
> input string.
> 
> Cheers,
>  Adrian
> 
> gautham wrote:
>> Hi,
>>
>> I am new to Ragel. I am trying out different regular expressions to
>> gain more familiariaty.
>>
>> I am unable to write a regex which is matched only when it is found at
>> the beginning of the input string. For example, the regex should match
>> "hello world start" and not match "world hello start".
>>
>> I tried using "^hello" - similar to lex/awk, but the "^" seems to be
>> interpreted literally.
>>
>> Thanks in advance.
>>
>> -gautham
>>
>>
>>
> 
> 
> 
> 
> 
>        
> ____________________________________________________________________________________
> Sick sense of humor? Visit Yahoo! TV's 
> Comedy with an Edge to see what's on, when. 
> http://tv.yahoo.com/collections/222
> 
> 





       
____________________________________________________________________________________
Take the Internet to Go: Yahoo!Go puts the Internet in your pocket: mail, news, photos & more. 
http://mobile.yahoo.com/go?refer=1GNXIC


From cmantu... at gmail.com  Tue Jul  3 23:04:50 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Tue, 3 Jul 2007 19:04:50 -0400
Subject: Capturing subpatterns
Message-ID: <cb2ad8b50707031604oe30af3ax4f44b00388d1edb@mail.gmail.com>

HI Adrian,

As promised, here's my request for a capture feature.

I base my request on a similar feature used on PCRE called Named
Subpatterns. This is useful because it obviates the need to do capture
byte-by-byte. A typical expression would be (as given in the
pcrepattern(3) man-page :

(?P<DN>Mon|Fri|Sun)(?:day)?|
(?P<DN>Tue)(?:sday)?|
(?P<DN>Wed)(?:nesday)?|
(?P<DN>Thu)(?:rsday)?|
(?P<DN>Sat)(?:urday)?

The syntax uses '?' as a modifier to '(' and allows different and
context-sensitive extensions to its regular meaning. The 'P<name>' is
the one used for naming capturing subpatterns. (The fact that
subpatterns in Ragel don't currently do any capturing is of no
consequence, I would suggest.)

Personally, I think this feature would be very useful as it would make
the life of the programmer easier.It would facilitate the capture of
portions of the input stream without relying on byte-by-byte copying.

So, here I am, humbly requesting yet another feature! :)

Thanks!

Carlos

-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From thurs... at cs.queensu.ca  Wed Jul 11 17:33:09 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Wed, 11 Jul 2007 13:33:09 -0400
Subject: [ragel-users] Capturing subpatterns
In-Reply-To: <cb2ad8b50707031604oe30af3ax4f44b00388d1edb@mail.gmail.com>
References: <cb2ad8b50707031604oe30af3ax4f44b00388d1edb@mail.gmail.com>
Message-ID: <46951455.80200@cs.queensu.ca>

Hello,

This is a feature I've spent some time thinking about. It would end up
being syntactic sugar for

( ( 'Mon' | 'Fri' | 'Sun' ) 'day'? ) >{ m=p; } %{ me=p; }

It seems too trivial to me to deserve it's own syntax. Also, there is
more than one way to do this. Sometimes you may be able to record the
end position on the last character (IE using @).

This may be obvious to Ragel users, but I just want state for the record
that PCRE is a different kind of tool from Ragel. PCRE has an
interpretor that can backtrack through regular expressions (not to be
confused with backtracking through input), whereas Ragel generates
deterministic state machines. They both support nondeterministic
expressions. The difference is that in PCRE nondeterminism can occur at
runtime, whereas in Ragel it is always eliminated at compile time.

Regards,
 Adrian

Carlos Antunes wrote:
> HI Adrian,
> 
> As promised, here's my request for a capture feature.
> 
> I base my request on a similar feature used on PCRE called Named
> Subpatterns. This is useful because it obviates the need to do capture
> byte-by-byte. A typical expression would be (as given in the
> pcrepattern(3) man-page :
> 
> (?P<DN>Mon|Fri|Sun)(?:day)?|
> (?P<DN>Tue)(?:sday)?|
> (?P<DN>Wed)(?:nesday)?|
> (?P<DN>Thu)(?:rsday)?|
> (?P<DN>Sat)(?:urday)?
> 
> The syntax uses '?' as a modifier to '(' and allows different and
> context-sensitive extensions to its regular meaning. The 'P<name>' is
> the one used for naming capturing subpatterns. (The fact that
> subpatterns in Ragel don't currently do any capturing is of no
> consequence, I would suggest.)
> 
> Personally, I think this feature would be very useful as it would make
> the life of the programmer easier.It would facilitate the capture of
> portions of the input stream without relying on byte-by-byte copying.
> 
> So, here I am, humbly requesting yet another feature! :)
> 
> Thanks!
> 
> Carlos
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20070711/70521633/attachment-0001.sig>

From cmantu... at gmail.com  Sun Jul  1 03:58:20 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Sat, 30 Jun 2007 20:58:20 -0700
Subject: Inline scanner
Message-ID: <1183262300.051714.182320@m36g2000hse.googlegroups.com>

Hi Adrian,

It's been a while...

It's good to know you are still supporting Ragel. With that being
said, is there any chance of having "inline scanner" functionality
added? We discussed this quite some time ago. The idea is to be have a
"longest match with capture" of start and stop of the match inline
instead of having to rely on external scanners.

Alternatively, what about the ability to automatically jump from a
state to a scanner without needing a match followed by an fcall?

Thanks!

Carlos


From thurs... at cs.queensu.ca  Sun Jul  1 15:58:58 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Sun, 01 Jul 2007 11:58:58 -0400
Subject: [ragel-users] Inline scanner
In-Reply-To: <1183262300.051714.182320@m36g2000hse.googlegroups.com>
References: <1183262300.051714.182320@m36g2000hse.googlegroups.com>
Message-ID: <4687CF42.1040202@cs.queensu.ca>

Hi Carlos,

Yeah, I remember that conversation. I thought about those issues and a
clear design with good value and a nice implementation never became
apparent to me. Since discussions didn't prove fruitful last time I
think a mockup would be really helpful to hash out the idea. An example
of the new syntax used to solve a real problem paired with the an
implementation using the existing syntax (the classic before and after)
would really make things clear.

Cheers,
 Adrian

Carlos Antunes wrote:
> Hi Adrian,
> 
> It's been a while...
> 
> It's good to know you are still supporting Ragel. With that being
> said, is there any chance of having "inline scanner" functionality
> added? We discussed this quite some time ago. The idea is to be have a
> "longest match with capture" of start and stop of the match inline
> instead of having to rely on external scanners.
> 
> Alternatively, what about the ability to automatically jump from a
> state to a scanner without needing a match followed by an fcall?
> 
> Thanks!
> 
> Carlos
> 
> 
> --~--~---------~--~----~------------~-------~--~----~
> You received this message because you are subscribed to the Google Groups "ragel-users" group.
> To post to this group, send email to ragel-users at googlegroups.com
> To unsubscribe from this group, send email to ragel-users-unsubscribe at googlegroups.com
> For more options, visit this group at http://groups.google.com/group/ragel-users?hl=en
> -~----------~----~----~----~------~----~------~--~---

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20070701/ff3f52b5/attachment-0001.sig>

From cmantu... at gmail.com  Sun Jul  1 20:17:52 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Sun, 1 Jul 2007 16:17:52 -0400
Subject: [ragel-users] Re: Inline scanner
In-Reply-To: <4687CF42.1040202@cs.queensu.ca>
References: <1183262300.051714.182320@m36g2000hse.googlegroups.com>
	 <4687CF42.1040...@cs.queensu.ca>
Message-ID: <cb2ad8b50707011317i603dd0d5rd63c024393ba56de@mail.gmail.com>

Adrian,

I have been doing a SIP parser using ragel. The main practical problem
I encountered, when using ragel to ijmplement the SIP parser, has to
do with spaces.

In SIP, a space can be defined as:

sp = ( ( "\r"? "\n" )? [ \t] )+;

On the other hand, a CRLF can be defined as

crlf = "\r"? "\n";

In many case, we have lines that may end up as:

line = "start" whatever sp? crlf;

with:

whatever = ( sp? something)*

Now, without priorities, the thing just don't work because of the
bactracking necessary to resolve between a sp and a crlf. Also,
without priorities, whatever ends up being evaluated several times
because something might start with spaces (or not). With priorities, I
was able to make many of these things work but the numbers of states
just explodes beyond belief. The problem is that is takes 30 minutes
to compile each time I make a modification and I am not done with all
the SIP rules yet.

The bottom line is that the SIP grammar is tough. Ragel has a good
shot at implementing the thing but the pure FSM approach just doesn't
cut it. On the other hand, because inline longest match scanners
aren't available, one has to resort to ugly tricks to call external
scanners.

How would one do the above example with an inline scanner?

sp_optional = |*

  ( ( "\r"? "\n" )? [ \t] )* { fret; };

*|;

line = "start" whatever sp_optional crlf;

whatever = ( sp_optional something)*

The obvious advantage in this case is that the longest match feature
of the scanner will eliminate the need for priorities and FSM
backtracking; therefore, I posit, the FSM would be simpler and it
wouldn't take 30 minutes to compile as of now! :)

I'll leave the capture feature for a subsequent email.

Thanks!

Carlos



On 7/1/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> Hi Carlos,
>
> Yeah, I remember that conversation. I thought about those issues and a
> clear design with good value and a nice implementation never became
> apparent to me. Since discussions didn't prove fruitful last time I
> think a mockup would be really helpful to hash out the idea. An example
> of the new syntax used to solve a real problem paired with the an
> implementation using the existing syntax (the classic before and after)
> would really make things clear.
>
> Cheers,
>  Adrian
>
> Carlos Antunes wrote:
> > Hi Adrian,
> >
> > It's been a while...
> >
> > It's good to know you are still supporting Ragel. With that being
> > said, is there any chance of having "inline scanner" functionality
> > added? We discussed this quite some time ago. The idea is to be have a
> > "longest match with capture" of start and stop of the match inline
> > instead of having to rely on external scanners.
> >
> > Alternatively, what about the ability to automatically jump from a
> > state to a scanner without needing a match followed by an fcall?
> >
> > Thanks!
> >
> > Carlos
> >
> >
> > >
>
>


-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From thurs... at cs.queensu.ca  Wed Jul  4 04:54:17 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Wed, 04 Jul 2007 00:54:17 -0400
Subject: [ragel-users] Re: Inline scanner
In-Reply-To: <cb2ad8b50707011317i603dd0d5rd63c024393ba56de@mail.gmail.com>
References: <1183262300.051714.182320@m36g2000hse.googlegroups.com> <4687CF42.1040202@cs.queensu.ca> <cb2ad8b50707011317i603dd0d5rd63c024393ba56de@mail.gmail.com>
Message-ID: <468B27F9.9040300@cs.queensu.ca>

Hey Carlos, I think this does what you want. It moves the processing of
whitespace out of the main machine and should reduce the number of states.

When a whitespace character is seen there is a call to a scanner which
consumes whitespace. When the whitespace scanner sees non-whitespace it
holds it and returns. When it sees the end-of-header pattern ('\n' with
no continuation) it holds the '\n' and returns. This held '\n' is then
read by the end of header string and the header terminates.

Cheers,
 Adrian
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: sip-ws.rl
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20070704/bca67ba4/attachment-0001.ksh>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20070704/bca67ba4/attachment-0001.sig>

From cmantu... at gmail.com  Thu Jul  5 03:08:36 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Wed, 4 Jul 2007 23:08:36 -0400
Subject: [ragel-users] Re: Inline scanner
In-Reply-To: <468B27F9.9040300@cs.queensu.ca>
References: <1183262300.051714.182...@m36g2000hse.googlegroups.com>
	 <4687CF42.1040...@cs.queensu.ca>
	 <cb2ad8b50707011317i603dd0d5rd63c024393ba5...@mail.gmail.com>
	 <468B27F9.9040...@cs.queensu.ca>
Message-ID: <cb2ad8b50707042008g19ed44daq7b3174cca9972243@mail.gmail.com>

Hi Adrian!

Thanks for the idea and code!

I was now able to reduce ragel's memory usage to 330Mbytes with 24212
states. Compilation time is now roughly 2m45s. I'm still adding stuff
so I don't know how things will progress.

In any case, is there any particular reason you resist the
implementation of a "longest match with backtracking" feature? I am
asking because this feature, as you know, is the default in pretty
much any regex lib/app out there. I still think it would be useful in
ragel, without the need to match and call "external" scanners (which
tends to break the continuity of the grammar.)

Thanks!

Carlos

On 7/4/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> Hey Carlos, I think this does what you want. It moves the processing of
> whitespace out of the main machine and should reduce the number of states.
>
> When a whitespace character is seen there is a call to a scanner which
> consumes whitespace. When the whitespace scanner sees non-whitespace it
> holds it and returns. When it sees the end-of-header pattern ('\n' with
> no continuation) it holds the '\n' and returns. This held '\n' is then
> read by the end of header string and the header terminates.
>
> Cheers,
>  Adrian
>
> #include <iostream>
> #include <stdlib.h>
> #include <stdio.h>
>
> using namespace std;
>
> %%{
>         machine sipws;
>         write data;
> }%%
>
> void sipws( char *str )
> {
>         char *p = str, *pe = str + strlen(str) + 1;
>         int cs;
>         int stack[1];
>         int top, act;
>         char *tokstart, *tokend;
>
>         %%{
>                 ws_scan := |*
>                         # Consume spaces.
>                         [ \t]+;
>
>                         # Consume line continuations
>                         '\r'? '\n' [ \t]+;
>
>                         # An end of header. Holds the \n so the end pattern can match.
>                         '\r'? '\n' => {
>                                 cerr << "returning from ws (done) " << (p-str) << endl;
>                                 fhold; fret;
>                         };
>
>                         # Any other character, hold it and return. */
>                         any => {
>                                 cerr << "returning from ws (cont)" << endl;
>                                 fhold; fret;
>                         };
>                 *|;
>
>                 # A word is any non-whitespace.
>                 word = [^ \t\r\n]+;
>
>                 # Whitespace machine: holds the character and jumps to the whitespace
>                 # scanner for processing.
>                 ws = [ \t\r\n] @{
>                         cerr << "going to whitespace " << (p-str) << endl;
>                         fhold; fcall ws_scan;
>                 };
>
>                 # A newline immediately after coming back from the whitespace scanner
>                 # signifies the end of a header.
>                 ws_end = ws '\n';
>
>                 header = [a-z]+ ':' ws? word (ws word)* ws_end;
>
>                 main := header+ 0;
>
>                 # Initialize and execute.
>                 write init;
>                 write exec;
>         }%%
>
>         if ( cs < sipws_first_final )
>                 cerr << "sipws: there was an error at position " << (p-str) << endl;
> };
>
>
> #define BUFSIZE 1024
>
> int main()
> {
>         sipws(
>                 "hr: asdf ljfa ljd\n"
>                 "       cont\n"
>                 "new:asiei\n"
>         );
>         return 0;
> }
>
>
>


-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From thurs... at cs.queensu.ca  Thu Jul  5 05:42:25 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Thu, 05 Jul 2007 01:42:25 -0400
Subject: [ragel-users] Re: Inline scanner
In-Reply-To: <cb2ad8b50707042008g19ed44daq7b3174cca9972243@mail.gmail.com>
References: <1183262300.051714.182320@m36g2000hse.googlegroups.com> <4687CF42.1040202@cs.queensu.ca> <cb2ad8b50707011317i603dd0d5rd63c024393ba56de@mail.gmail.com> <468B27F9.9040300@cs.queensu.ca> <cb2ad8b50707042008g19ed44daq7b3174cca9972243@mail.gmail.com>
Message-ID: <468C84C1.10900@cs.queensu.ca>

Hi Carlos,

I'm not yet convinced that a new feature is necessary to solve this
problem. It seems to me that it's more a matter of coding technique. But
of course I could be wrong ... I just need to know how an inline scanner
is different and better than the code I sent.

One difference I can think of (you described this previously) is that
the inline scanner is entered immediately upon moving to the start state
 (as opposed to the first character out of the start state).
Unfortunately this is not compatible with the current run-time model, in
which actions take place only on transitions over characters. Anything
that involves changing the run-time model I have to consider very carefully.

-Adrian

Carlos Antunes wrote:
> Hi Adrian!
> 
> Thanks for the idea and code!
> 
> I was now able to reduce ragel's memory usage to 330Mbytes with 24212
> states. Compilation time is now roughly 2m45s. I'm still adding stuff
> so I don't know how things will progress.
> 
> In any case, is there any particular reason you resist the
> implementation of a "longest match with backtracking" feature? I am
> asking because this feature, as you know, is the default in pretty
> much any regex lib/app out there. I still think it would be useful in
> ragel, without the need to match and call "external" scanners (which
> tends to break the continuity of the grammar.)
> 
> Thanks!
> 
> Carlos
> 
> On 7/4/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>> Hey Carlos, I think this does what you want. It moves the processing of
>> whitespace out of the main machine and should reduce the number of states.
>>
>> When a whitespace character is seen there is a call to a scanner which
>> consumes whitespace. When the whitespace scanner sees non-whitespace it
>> holds it and returns. When it sees the end-of-header pattern ('\n' with
>> no continuation) it holds the '\n' and returns. This held '\n' is then
>> read by the end of header string and the header terminates.
>>
>> Cheers,
>>  Adrian
>>
>> #include <iostream>
>> #include <stdlib.h>
>> #include <stdio.h>
>>
>> using namespace std;
>>
>> %%{
>>         machine sipws;
>>         write data;
>> }%%
>>
>> void sipws( char *str )
>> {
>>         char *p = str, *pe = str + strlen(str) + 1;
>>         int cs;
>>         int stack[1];
>>         int top, act;
>>         char *tokstart, *tokend;
>>
>>         %%{
>>                 ws_scan := |*
>>                         # Consume spaces.
>>                         [ \t]+;
>>
>>                         # Consume line continuations
>>                         '\r'? '\n' [ \t]+;
>>
>>                         # An end of header. Holds the \n so the end pattern can match.
>>                         '\r'? '\n' => {
>>                                 cerr << "returning from ws (done) " << (p-str) << endl;
>>                                 fhold; fret;
>>                         };
>>
>>                         # Any other character, hold it and return. */
>>                         any => {
>>                                 cerr << "returning from ws (cont)" << endl;
>>                                 fhold; fret;
>>                         };
>>                 *|;
>>
>>                 # A word is any non-whitespace.
>>                 word = [^ \t\r\n]+;
>>
>>                 # Whitespace machine: holds the character and jumps to the whitespace
>>                 # scanner for processing.
>>                 ws = [ \t\r\n] @{
>>                         cerr << "going to whitespace " << (p-str) << endl;
>>                         fhold; fcall ws_scan;
>>                 };
>>
>>                 # A newline immediately after coming back from the whitespace scanner
>>                 # signifies the end of a header.
>>                 ws_end = ws '\n';
>>
>>                 header = [a-z]+ ':' ws? word (ws word)* ws_end;
>>
>>                 main := header+ 0;
>>
>>                 # Initialize and execute.
>>                 write init;
>>                 write exec;
>>         }%%
>>
>>         if ( cs < sipws_first_final )
>>                 cerr << "sipws: there was an error at position " << (p-str) << endl;
>> };
>>
>>
>> #define BUFSIZE 1024
>>
>> int main()
>> {
>>         sipws(
>>                 "hr: asdf ljfa ljd\n"
>>                 "       cont\n"
>>                 "new:asiei\n"
>>         );
>>         return 0;
>> }
>>
>>
>>
> 
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20070705/91692b60/attachment-0001.sig>

From cmantu... at gmail.com  Thu Jul  5 16:00:33 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Thu, 5 Jul 2007 12:00:33 -0400
Subject: [ragel-users] Re: Inline scanner
In-Reply-To: <468C84C1.10900@cs.queensu.ca>
References: <1183262300.051714.182...@m36g2000hse.googlegroups.com>
	 <4687CF42.1040...@cs.queensu.ca>
	 <cb2ad8b50707011317i603dd0d5rd63c024393ba5...@mail.gmail.com>
	 <468B27F9.9040...@cs.queensu.ca>
	 <cb2ad8b50707042008g19ed44daq7b3174cca9972...@mail.gmail.com>
	 <468C84C1.10...@cs.queensu.ca>
Message-ID: <cb2ad8b50707050900q7cf6a14fmbc2ab81299f395b@mail.gmail.com>

On 7/5/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>
> I'm not yet convinced that a new feature is necessary to solve this
> problem. It seems to me that it's more a matter of coding technique. But
> of course I could be wrong ... I just need to know how an inline scanner
> is different and better than the code I sent.
>

Adrian, the code you sent, while very useful in my case, is a hack!
This preprocessing code is necessary because ragel is not able to
efficiently handle a SIP parser in practical terms, with only
priorities.

Let me give you an example of something very common in the way SIP is defined:

    algorithm_value = /MD5/i @(p_algorithm_value, 1) |
                              /MD5-sess/i @(p_algorithm_value, 1) |
                              token @(p_algorithm_value, 0);

I have to use priorities here to make sure that /MD5/ and /MD5-sess/
aren't evaluated in parallel with token, given that token matches
(almost) everything. With a scanner, this would be a breeze and would
require no priorities.

Right now, I have:

A)    algorithm = /algorithm/i equal algorithm_value;

Currently, to code with a scanner, I have to do something like this:

B)    algorithm = /algorithm/i sp_optional '=' @{ fcall scan_algorithm_value; }

However, this breaks the "flow" of the grammar. What is easier to
understand, maintain (and keep consistent with SIP, in this case), 'A'
or 'B'? For me, I prefer to use 'A'.

>
> One difference I can think of (you described this previously) is that
> the inline scanner is entered immediately upon moving to the start state
>  (as opposed to the first character out of the start state).
> Unfortunately this is not compatible with the current run-time model, in
> which actions take place only on transitions over characters. Anything
> that involves changing the run-time model I have to consider very carefully.
>

Assuming I understand the idea you are trying to convey here (there's
a good chance that I don't), isn't it possible to transition directly
to the scanner by looking at all the potential transitions of the
scanner as if it was a "normal" state machine?

For example, let's assume one has the machine:

C)    variable '=' digit+;

With an inline scanner, this would be, for example:

D)    variable '=' |* digit+ *|;

In 'C', you transition from state "matched_equal" to state
"matched_digit" upon seeing a digit. Now, you could do the same in
'D', no? For all practical purposes, the transition process appears to
be the same in both 'C' and 'D'. The fact that in 'D' you would be
operating under the "longest match with backtracking" paradigm appears
to not affect that initial transition into the scanner. What I am
trying to get at is that maybe you really don't have to change your
run-time model?

Thanks!

Carlos

-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From thurs... at cs.queensu.ca  Thu Jul  5 18:04:30 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Thu, 05 Jul 2007 14:04:30 -0400
Subject: [ragel-users] Re: Inline scanner
In-Reply-To: <cb2ad8b50707050900q7cf6a14fmbc2ab81299f395b@mail.gmail.com>
References: <1183262300.051714.182320@m36g2000hse.googlegroups.com> <4687CF42.1040202@cs.queensu.ca> <cb2ad8b50707011317i603dd0d5rd63c024393ba56de@mail.gmail.com> <468B27F9.9040300@cs.queensu.ca> <cb2ad8b50707042008g19ed44daq7b3174cca9972243@mail.gmail.com> <468C84C1.10900@cs.queensu.ca> <cb2ad8b50707050900q7cf6a14fmbc2ab81299f395b@mail.gmail.com>
Message-ID: <468D32AE.1040206@cs.queensu.ca>


Carlos Antunes wrote:
> Adrian, the code you sent, while very useful in my case, is a hack!
> This preprocessing code is necessary because ragel is not able to
> efficiently handle a SIP parser in practical terms, with only
> priorities.

Indeed, the code is a hack. However, I think it is the appropriate
implementation technique for an inline scanner feature so we should be
playing with it. This is how I work on Ragel: mock up the new feature,
then try to do implementations using the existing syntax. It shows you
exactly where the existing language fails and gives you lots of insight
into how the new feature can be implemented in the Ragel compiler. If
it's not really a new feature that you need, but instead a coding
technique, it usually shows that as well.

I should tell you that this problem is well suited to my current
project. It's called Colm (for computer language manipulation) and it
could possibly become my PhD thesis project. It's not currently
released. Colm is going to be a transformation system in the spirit of
TXL (http://www.txl.ca/). The parsing engine is what you would be
interested in. I don't want to give details at this point, but I think
it would provide for an easy implementation of the SIP grammar. So part
of me wants to say "just wait for that" ;)

But since that's not really of use to anyone right now I think the way
to proceed is to do more of these implementations using existing ragel
syntax. I will send some more soon.

> Assuming I understand the idea you are trying to convey here (there's
> a good chance that I don't), isn't it possible to transition directly
> to the scanner by looking at all the potential transitions of the
> scanner as if it was a "normal" state machine?

Yes, that's possible. The code I sent does exactly that, only it's
explicitly implemented. When it sees a whitespace character it jumps to
the whitespace scanner. I'll rework what I sent so hopefully it's clear
that it is an implementation of an inline scanner.

Regards,
 Adrian

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20070705/225ae0af/attachment-0001.sig>

From thurs... at cs.queensu.ca  Fri Jul  6 00:24:39 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Thu, 05 Jul 2007 20:24:39 -0400
Subject: [ragel-users] Re: Inline scanner
In-Reply-To: <468D32AE.1040206@cs.queensu.ca>
References: <1183262300.051714.182320@m36g2000hse.googlegroups.com> <4687CF42.1040202@cs.queensu.ca> <cb2ad8b50707011317i603dd0d5rd63c024393ba56de@mail.gmail.com> <468B27F9.9040300@cs.queensu.ca> <cb2ad8b50707042008g19ed44daq7b3174cca9972243@mail.gmail.com> <468C84C1.10900@cs.queensu.ca> <cb2ad8b50707050900q7cf6a14fmbc2ab81299f395b@mail.gmail.com> <468D32AE.1040206@cs.queensu.ca>
Message-ID: <468D8BC7.1030308@cs.queensu.ca>

Hi Carlos,

Here is a better implementation of the whitespace problem. It pretty
much looks like the mockup except there is a wrapper which calls the
scanner and an extra pattern which is used to return from the scanner.

Adrian
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: sip-ws.rl
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20070705/e4bc36a9/attachment-0001.ksh>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20070705/e4bc36a9/attachment-0001.sig>

From cmantu... at gmail.com  Tue Jul 10 23:47:07 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Tue, 10 Jul 2007 19:47:07 -0400
Subject: [ragel-users] Re: Inline scanner
In-Reply-To: <468D32AE.1040206@cs.queensu.ca>
References: <1183262300.051714.182...@m36g2000hse.googlegroups.com>
	 <4687CF42.1040...@cs.queensu.ca>
	 <cb2ad8b50707011317i603dd0d5rd63c024393ba5...@mail.gmail.com>
	 <468B27F9.9040...@cs.queensu.ca>
	 <cb2ad8b50707042008g19ed44daq7b3174cca9972...@mail.gmail.com>
	 <468C84C1.10...@cs.queensu.ca>
	 <cb2ad8b50707050900q7cf6a14fmbc2ab81299f3...@mail.gmail.com>
	 <468D32AE.1040...@cs.queensu.ca>
Message-ID: <cb2ad8b50707101647u7a978de6q9ba2011ae30d23dc@mail.gmail.com>

On 7/5/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>
>
> > Assuming I understand the idea you are trying to convey here (there's
> > a good chance that I don't), isn't it possible to transition directly
> > to the scanner by looking at all the potential transitions of the
> > scanner as if it was a "normal" state machine?
>
> Yes, that's possible. The code I sent does exactly that, only it's
> explicitly implemented. When it sees a whitespace character it jumps to
> the whitespace scanner. I'll rework what I sent so hopefully it's clear
> that it is an implementation of an inline scanner.
>

Adrian, now that you've been able to explicitly design an inline
scanner, would you be able to code ragel to do it implicitly? Although
one can always do it by hand, as you did, it is error prone and
sometimes somewhat difficult, depending on what you have inside the
scanner. This feature would be very much appreciated.

Thanks!

Carlos Antunes

-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From thurs... at cs.queensu.ca  Wed Jul 11 16:57:39 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Wed, 11 Jul 2007 12:57:39 -0400
Subject: [ragel-users] Re: Inline scanner
In-Reply-To: <cb2ad8b50707101647u7a978de6q9ba2011ae30d23dc@mail.gmail.com>
References: <1183262300.051714.182320@m36g2000hse.googlegroups.com> <4687CF42.1040202@cs.queensu.ca> <cb2ad8b50707011317i603dd0d5rd63c024393ba56de@mail.gmail.com> <468B27F9.9040300@cs.queensu.ca> <cb2ad8b50707042008g19ed44daq7b3174cca9972243@mail.gmail.com> <468C84C1.10900@cs.queensu.ca> <cb2ad8b50707050900q7cf6a14fmbc2ab81299f395b@mail.gmail.com> <468D32AE.1040206@cs.queensu.ca> <cb2ad8b50707101647u7a978de6q9ba2011ae30d23dc@mail.gmail.com>
Message-ID: <46950C03.4000503@cs.queensu.ca>

Hi Carlos,

After much thought I've decided that inline scanners are not a suitable
feature for ragel. It is a good technique but there are a few issues.

I think that calls and returns should not be encoded in a language
construct. They need to be treated with care and I'm not comfortable
with encapsulating them.

There is the issue of when to return. Since the feature would be using
the scanning machinery, one might expect to be able to match multiple
tokens as an alternative to matching just a single token. Letting the
user implement the technique allows them to chose. Also, it allows for
the option of erring when no pattern matches.

So far all the inline machine construction operators are compositional.
Inline scanners are not. For example you cannot safely union a machine
that contains an inline scanner because the call necessary to invoke it
could interfere with the other machine. This is related to the issue of
encapsulating calls and returns.

I would however be interested to add a prefix operator which would allow
you to automatically set up the machine that the call is embedded in.
The prefix operator would simply set every state final (this might have
another name in the literature). After you run the prefix operator you
could intersect it with something else to get the correct length (one in
this case).

pat = [a-z][a-z0-9]*;

inline_scanner = |*
    pat => { fret; };
    any => { fhold; fret; };
  *|;

call_pat = ( prefix(pat) & any ) @{ fhold; fcall inline_scanner; };

Regards,
 Adrian

Carlos Antunes wrote:
> On 7/5/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>>
>>> Assuming I understand the idea you are trying to convey here (there's
>>> a good chance that I don't), isn't it possible to transition directly
>>> to the scanner by looking at all the potential transitions of the
>>> scanner as if it was a "normal" state machine?
>> Yes, that's possible. The code I sent does exactly that, only it's
>> explicitly implemented. When it sees a whitespace character it jumps to
>> the whitespace scanner. I'll rework what I sent so hopefully it's clear
>> that it is an implementation of an inline scanner.
>>
> 
> Adrian, now that you've been able to explicitly design an inline
> scanner, would you be able to code ragel to do it implicitly? Although
> one can always do it by hand, as you did, it is error prone and
> sometimes somewhat difficult, depending on what you have inside the
> scanner. This feature would be very much appreciated.
> 
> Thanks!
> 
> Carlos Antunes
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20070711/49711107/attachment-0001.sig>

From cmantu... at gmail.com  Wed Jul 11 17:22:51 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Wed, 11 Jul 2007 13:22:51 -0400
Subject: [ragel-users] Re: Inline scanner
In-Reply-To: <46950C03.4000503@cs.queensu.ca>
References: <1183262300.051714.182...@m36g2000hse.googlegroups.com>
	 <4687CF42.1040...@cs.queensu.ca>
	 <cb2ad8b50707011317i603dd0d5rd63c024393ba5...@mail.gmail.com>
	 <468B27F9.9040...@cs.queensu.ca>
	 <cb2ad8b50707042008g19ed44daq7b3174cca9972...@mail.gmail.com>
	 <468C84C1.10...@cs.queensu.ca>
	 <cb2ad8b50707050900q7cf6a14fmbc2ab81299f3...@mail.gmail.com>
	 <468D32AE.1040...@cs.queensu.ca>
	 <cb2ad8b50707101647u7a978de6q9ba2011ae30d2...@mail.gmail.com>
	 <46950C03.4000...@cs.queensu.ca>
Message-ID: <cb2ad8b50707111022m1eb0188aj2d739d1372a62af9@mail.gmail.com>

Adrian,

The prefix operatior would be GREAT!

<carlos_thinking_out_loud>

And it's a incremental step toward that holy "inline scanner" grail :)

</carlos_thinking_out_loud>

Now, it would be AWESOME, if one could apply that prefix operator to
*any* machine, including scanners, obviating the need to do it
explicitly. Following your example below, one would simply do
prefix(inline_scanner), for example.

I'll be anxiously checking ragel-trunk for news!

Thanks!

Carlos

On 7/11/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> Hi Carlos,
>
> After much thought I've decided that inline scanners are not a suitable
> feature for ragel. It is a good technique but there are a few issues.
>
> I think that calls and returns should not be encoded in a language
> construct. They need to be treated with care and I'm not comfortable
> with encapsulating them.
>
> There is the issue of when to return. Since the feature would be using
> the scanning machinery, one might expect to be able to match multiple
> tokens as an alternative to matching just a single token. Letting the
> user implement the technique allows them to chose. Also, it allows for
> the option of erring when no pattern matches.
>
> So far all the inline machine construction operators are compositional.
> Inline scanners are not. For example you cannot safely union a machine
> that contains an inline scanner because the call necessary to invoke it
> could interfere with the other machine. This is related to the issue of
> encapsulating calls and returns.
>
> I would however be interested to add a prefix operator which would allow
> you to automatically set up the machine that the call is embedded in.
> The prefix operator would simply set every state final (this might have
> another name in the literature). After you run the prefix operator you
> could intersect it with something else to get the correct length (one in
> this case).
>
> pat = [a-z][a-z0-9]*;
>
> inline_scanner = |*
>     pat => { fret; };
>     any => { fhold; fret; };
>   *|;
>
> call_pat = ( prefix(pat) & any ) @{ fhold; fcall inline_scanner; };
>
> Regards,
>  Adrian
>
> Carlos Antunes wrote:
> > On 7/5/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> >>
> >>> Assuming I understand the idea you are trying to convey here (there's
> >>> a good chance that I don't), isn't it possible to transition directly
> >>> to the scanner by looking at all the potential transitions of the
> >>> scanner as if it was a "normal" state machine?
> >> Yes, that's possible. The code I sent does exactly that, only it's
> >> explicitly implemented. When it sees a whitespace character it jumps to
> >> the whitespace scanner. I'll rework what I sent so hopefully it's clear
> >> that it is an implementation of an inline scanner.
> >>
> >
> > Adrian, now that you've been able to explicitly design an inline
> > scanner, would you be able to code ragel to do it implicitly? Although
> > one can always do it by hand, as you did, it is error prone and
> > sometimes somewhat difficult, depending on what you have inside the
> > scanner. This feature would be very much appreciated.
> >
> > Thanks!
> >
> > Carlos Antunes
> >
>
>
>


-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From thurs... at cs.queensu.ca  Thu Jul 12 07:14:48 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Thu, 12 Jul 2007 03:14:48 -0400
Subject: [ragel-users] Re: Inline scanner
In-Reply-To: <cb2ad8b50707111022m1eb0188aj2d739d1372a62af9@mail.gmail.com>
References: <1183262300.051714.182320@m36g2000hse.googlegroups.com> <4687CF42.1040202@cs.queensu.ca> <cb2ad8b50707011317i603dd0d5rd63c024393ba56de@mail.gmail.com> <468B27F9.9040300@cs.queensu.ca> <cb2ad8b50707042008g19ed44daq7b3174cca9972243@mail.gmail.com> <468C84C1.10900@cs.queensu.ca> <cb2ad8b50707050900q7cf6a14fmbc2ab81299f395b@mail.gmail.com> <468D32AE.1040206@cs.queensu.ca> <cb2ad8b50707101647u7a978de6q9ba2011ae30d23dc@mail.gmail.com> <46950C03.4000503@cs.queensu.ca> <cb2ad8b50707111022m1eb0188aj2d739d1372a62af9@mail.gmail.com>
Message-ID: <4695D4E8.9040501@cs.queensu.ca>

Carlos Antunes wrote:
> Now, it would be AWESOME, if one could apply that prefix operator to
> *any* machine, including scanners, obviating the need to do it
> explicitly. Following your example below, one would simply do
> prefix(inline_scanner), for example.

Sure, my guess is that the prefix of a scanner would actually be the
prefix of the union of all scanner patterns. I don't think the prefix of
final scanner machinery would make much sense since it sometimes uses
error actions to restart and there is also backtracking of input.

Adrian

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20070712/895f4a14/attachment-0001.sig>

From cmantu... at gmail.com  Thu Jul 12 14:21:22 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Thu, 12 Jul 2007 10:21:22 -0400
Subject: [ragel-users] Re: Inline scanner
In-Reply-To: <4695D4E8.9040501@cs.queensu.ca>
References: <1183262300.051714.182...@m36g2000hse.googlegroups.com>
	 <468B27F9.9040...@cs.queensu.ca>
	 <cb2ad8b50707042008g19ed44daq7b3174cca9972...@mail.gmail.com>
	 <468C84C1.10...@cs.queensu.ca>
	 <cb2ad8b50707050900q7cf6a14fmbc2ab81299f3...@mail.gmail.com>
	 <468D32AE.1040...@cs.queensu.ca>
	 <cb2ad8b50707101647u7a978de6q9ba2011ae30d2...@mail.gmail.com>
	 <46950C03.4000...@cs.queensu.ca>
	 <cb2ad8b50707111022m1eb0188aj2d739d1372a62...@mail.gmail.com>
	 <4695D4E8.9040...@cs.queensu.ca>
Message-ID: <cb2ad8b50707120721h699a534v7e81c17c067181b0@mail.gmail.com>

On 7/12/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> Carlos Antunes wrote:
> > Now, it would be AWESOME, if one could apply that prefix operator to
> > *any* machine, including scanners, obviating the need to do it
> > explicitly. Following your example below, one would simply do
> > prefix(inline_scanner), for example.
>
> Sure, my guess is that the prefix of a scanner would actually be the
> prefix of the union of all scanner patterns.
>

Yes, that's what I was thinking.

>
>I don't think the prefix of final scanner machinery would make much sense
>

Agreed. I'm not seeing any application for this.

Thanks!

Carlos

-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From zeds... at zedshaw.com  Thu Jul 12 12:23:25 2007
From: zeds... at zedshaw.com (Zed A. Shaw)
Date: Thu, 12 Jul 2007 08:23:25 -0400
Subject: New Project Using Ragel
Message-ID: <20070712082325.9dbf39c6.zedshaw@zedshaw.com>

Hey Adrian,

I cranked out another project that uses Ragel:

  http://ihate.rubyforge.org/profligacy/

It's a JRuby project that makes it really easy to produce Swing GUIs without trying to be a complete abstraction over all of Swing.

I used Ragel to produce the Layout Expression Language parser:

  http://ihate.rubyforge.org/profligacy/lel.html

LEL is a kind of wiki table syntax that configures one of Swing's more annoying to code layout managers.  Ragel produces a .java file which is compile into a .class file, and then JRuby accesses it with just Ruby.  It works pretty nice and as usual is very fast.

Thanks again for Ragel.

-- 
Zed A. Shaw
- Hate: http://savingtheinternetwithhate.com/
- Good: http://www.zedshaw.com/
- Evil: http://yearofevil.com/


From thurs... at cs.queensu.ca  Fri Jul 13 21:03:30 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Fri, 13 Jul 2007 17:03:30 -0400
Subject: [ragel-users] New Project Using Ragel
In-Reply-To: <20070712082325.9dbf39c6.zedshaw@zedshaw.com>
References: <20070712082325.9dbf39c6.zedshaw@zedshaw.com>
Message-ID: <4697E8A2.8070802@cs.queensu.ca>

Oh nice! I'll add it to the links section.

Cheers,
 Adrian

Zed A. Shaw wrote:
> Hey Adrian,
> 
> I cranked out another project that uses Ragel:
> 
>   http://ihate.rubyforge.org/profligacy/
> 
> It's a JRuby project that makes it really easy to produce Swing GUIs without trying to be a complete abstraction over all of Swing.
> 
> I used Ragel to produce the Layout Expression Language parser:
> 
>   http://ihate.rubyforge.org/profligacy/lel.html
> 
> LEL is a kind of wiki table syntax that configures one of Swing's more annoying to code layout managers.  Ragel produces a .java file which is compile into a .class file, and then JRuby accesses it with just Ruby.  It works pretty nice and as usual is very fast.
> 
> Thanks again for Ragel.
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20070713/d5d6ddbf/attachment-0001.sig>

From ad... at cse.iitk.ac.in  Wed Jul 11 13:27:09 2007
From: ad... at cse.iitk.ac.in (Aditi)
Date: Wed, 11 Jul 2007 13:27:09 -0000
Subject: Problem: Change state only when a new input is received
Message-ID: <1184160429.916174.129560@m3g2000hsh.googlegroups.com>

Hi,
I am new to ragel and was hoping to use it for the following purpose-
I need to match a regular expression, but the input which is to be
matched comes as a series of tokens over a socket. I need the state
machine to advance to the next state as and when it receives the
token.

I am trying to do this with ragel but have been unsuccessful so far.
According to my understanding of ragel, I need to specify the whole
chunk of string between pointers p and pe and let machine run on it.
Instead I want p to read one value from socket on advance on it. Can
somebody please give me pointers on how to do this?

This is a code snippet of one of my futile attempts :( -->
<snip>
		if ((rval=read(msgsock, buff, 4)) < 0){
			perror("reading stream message");
			exit(1);
		}

		p = buff;

		%% write init;
		%% write exec noend;

		while(true) {
			if ((rval=read(msgsock, buff, 4)) < 0){
				perror("reading stream message");
				break;
			}
			else {
				p = buff;
				printf("-->%s\n", buff);

			}
			if(strcmp(buff,"exit")== 0) break;
		}
</snip>

My token will by of type integer, but as a startup i was trying with
normal string tokens. It would be really helpful if someone can help
me out with this.
Regards,
Aditi.


From thurs... at cs.queensu.ca  Wed Jul 11 17:42:23 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Wed, 11 Jul 2007 13:42:23 -0400
Subject: [ragel-users] Problem: Change state only when a new input is
 received
In-Reply-To: <1184160429.916174.129560@m3g2000hsh.googlegroups.com>
References: <1184160429.916174.129560@m3g2000hsh.googlegroups.com>
Message-ID: <4695167F.8090508@cs.queensu.ca>

Hi Aditi,

For this task don't use the "noend" write option. Set the alphabet type
to int and when an integer arrives set p to point it and set pe to (p +
1). Also, make sure you separate out the init code so it is invoked only
once before you start reading input.

I've always wanted to add a "one-at-a-time" option to write which would
eliminate the unnecessary loop over the single character but never got
around to it.

Adrian

Aditi wrote:
> Hi,
> I am new to ragel and was hoping to use it for the following purpose-
> I need to match a regular expression, but the input which is to be
> matched comes as a series of tokens over a socket. I need the state
> machine to advance to the next state as and when it receives the
> token.
> 
> I am trying to do this with ragel but have been unsuccessful so far.
> According to my understanding of ragel, I need to specify the whole
> chunk of string between pointers p and pe and let machine run on it.
> Instead I want p to read one value from socket on advance on it. Can
> somebody please give me pointers on how to do this?
> 
> This is a code snippet of one of my futile attempts :( -->
> <snip>
> 		if ((rval=read(msgsock, buff, 4)) < 0){
> 			perror("reading stream message");
> 			exit(1);
> 		}
> 
> 		p = buff;
> 
> 		%% write init;
> 		%% write exec noend;
> 
> 		while(true) {
> 			if ((rval=read(msgsock, buff, 4)) < 0){
> 				perror("reading stream message");
> 				break;
> 			}
> 			else {
> 				p = buff;
> 				printf("-->%s\n", buff);
> 
> 			}
> 			if(strcmp(buff,"exit")== 0) break;
> 		}
> </snip>
> 
> My token will by of type integer, but as a startup i was trying with
> normal string tokens. It would be really helpful if someone can help
> me out with this.
> Regards,
> Aditi.
> 
> 
> --~--~---------~--~----~------------~-------~--~----~
> You received this message because you are subscribed to the Google Groups "ragel-users" group.
> To post to this group, send email to ragel-users at googlegroups.com
> To unsubscribe from this group, send email to ragel-users-unsubscribe at googlegroups.com
> For more options, visit this group at http://groups.google.com/group/ragel-users?hl=en
> -~----------~----~----~----~------~----~------~--~---
> 
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20070711/644625aa/attachment-0001.sig>

From ad... at cse.iitk.ac.in  Wed Jul 11 19:43:19 2007
From: ad... at cse.iitk.ac.in (Aditi)
Date: Wed, 11 Jul 2007 19:43:19 -0000
Subject: Problem: Change state only when a new input is received
In-Reply-To: <4695167F.8090508@cs.queensu.ca>
References: <1184160429.916174.129560@m3g2000hsh.googlegroups.com>
   <4695167F.8090508@cs.queensu.ca>
Message-ID: <1184182999.252708.220010@w3g2000hsg.googlegroups.com>

Hi Adrian,
Thanks for your reply. With your help I got it partially working, but
I still have some doubts and problems:
Here is the code snipet-
<snip>
		%% write init;

		while(true) {
 			if ((rval=read(msgsock, buff, 1024)) < 0){
				perror("reading stream message");
				break;
			}
			else {
				sscanf(buff, "%d", &num);
				printf("-->%d\n", num);
				p = &num;
				pe = p + 1;
			}

			%% write exec;

			if(num == 0) break;
		}
</snip>
Now,
1.) %% write exec will be executed in every iteration of the loop.
Will this effect the performance? Is there a better way to do it? I
couldn't get it working by putting it just once outside the loop. I am
using this to build a tool which is required to be efficient, that's
why I am concerned with this point.
2.) The printing of the tokens and the action triggered(as of now,
just a print statement) happen only after I send the next token. Why
is there this delay of one token in the processing. Is my approach not
correct?
3.) There are certain other issues also, like I want to match this
pattern anywhere in the string and may be multiple times if it occurs.
This is not happening here. This code works if I give my pattern in
the beginning only. What should I do?
I am sorry about putting so many questions together. Any kind of help
will be immensely useful.
Thanks Again!
Cheers,
Aditi.


On Jul 11, 7:42 pm, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> Hi Aditi,
>
> For this task don't use the "noend" write option. Set the alphabet type
> to int and when an integer arrives set p to point it and set pe to (p +
> 1). Also, make sure you separate out the init code so it is invoked only
> once before you start reading input.
>
> I've always wanted to add a "one-at-a-time" option to write which would
> eliminate the unnecessary loop over the single character but never got
> around to it.
>
> Adrian
>
> Aditi wrote:
> > Hi,
> > I am new to ragel and was hoping to use it for the following purpose-
> > I need to match a regular expression, but the input which is to be
> > matched comes as a series of tokens over a socket. I need the state
> > machine to advance to the next state as and when it receives the
> > token.
>
> > I am trying to do this with ragel but have been unsuccessful so far.
> > According to my understanding of ragel, I need to specify the whole
> > chunk of string between pointers p and pe and let machine run on it.
> > Instead I want p to read one value from socket on advance on it. Can
> > somebody please give me pointers on how to do this?
>
> > This is a code snippet of one of my futile attempts :( -->
> > <snip>
> >            if ((rval=read(msgsock, buff, 4)) < 0){
> >                    perror("reading stream message");
> >                    exit(1);
> >            }
>
> >            p = buff;
>
> >            %% write init;
> >            %% write exec noend;
>
> >            while(true) {
> >                    if ((rval=read(msgsock, buff, 4)) < 0){
> >                            perror("reading stream message");
> >                            break;
> >                    }
> >                    else {
> >                            p = buff;
> >                            printf("-->%s\n", buff);
>
> >                    }
> >                    if(strcmp(buff,"exit")== 0) break;
> >            }
> > </snip>
>
> > My token will by of type integer, but as a startup i was trying with
> > normal string tokens. It would be really helpful if someone can help
> > me out with this.
> > Regards,
> > Aditi.
>
> > >
>
>
>  signature.asc
> 1KDownload


From thurs... at cs.queensu.ca  Thu Jul 12 07:05:51 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Thu, 12 Jul 2007 03:05:51 -0400
Subject: [ragel-users] Re: Problem: Change state only when a new input
 is received
In-Reply-To: <1184182999.252708.220010@w3g2000hsg.googlegroups.com>
References: <1184160429.916174.129560@m3g2000hsh.googlegroups.com> <4695167F.8090508@cs.queensu.ca> <1184182999.252708.220010@w3g2000hsg.googlegroups.com>
Message-ID: <4695D2CF.1030609@cs.queensu.ca>

Hi Aditi,

> 1.) %% write exec will be executed in every iteration of the loop.
> Will this effect the performance? Is there a better way to do it? I
> couldn't get it working by putting it just once outside the loop. I am
> using this to build a tool which is required to be efficient, that's
> why I am concerned with this point.

As far as I can tell you need the code generated by write exec to run on
every iteration of the loop. The only consideration here is that there
will be an unnecessary check of p against pe. In this case pe - p always
equals one. This should just be a few processor instructions however. If
you really need to squeeze out instructions and you are concerned you
can always look at the generated code.

> 2.) The printing of the tokens and the action triggered(as of now,
> just a print statement) happen only after I send the next token. Why
> is there this delay of one token in the processing. Is my approach not
> correct?

My best guess is that you are embedding actions using the '%' operator.
Provide some ragel code and I'll tell ya for certain :)

> 3.) There are certain other issues also, like I want to match this
> pattern anywhere in the string and may be multiple times if it occurs.
> This is not happening here. This code works if I give my pattern in
> the beginning only. What should I do?

See:

http://groups.google.com/group/ragel-users/browse_thread/thread/8094b90ad7f9cf89/#

-Adrian

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20070712/ccc91ae9/attachment-0001.sig>

From ad... at cse.iitk.ac.in  Thu Jul 12 08:33:06 2007
From: ad... at cse.iitk.ac.in (Aditi)
Date: Thu, 12 Jul 2007 08:33:06 -0000
Subject: Problem: Change state only when a new input is received
In-Reply-To: <4695D2CF.1030609@cs.queensu.ca>
References: <1184160429.916174.129560@m3g2000hsh.googlegroups.com>
   <4695167F.8090508@cs.queensu.ca>
   <1184182999.252708.220010@w3g2000hsg.googlegroups.com>
   <4695D2CF.1030609@cs.queensu.ca>
Message-ID: <1184229186.768496.247050@57g2000hsv.googlegroups.com>

Hi Adrian,
Thanks for you prompt replies :)
@1.) I'll have to test my tool for performance overheads once I finish
it, I hope I would not need this tweaking and it will also be a bit
difficult to do because this is a component of my framework which will
be generated automatically and be used by another component.
@2.) Here is a snippet of ragel code->
<snip>
	action trigger {
		printf("Regex Matched!\n");
	}

	main := any* (2 4 6) @trigger;
</snip>
I am using very simple regex and actions to see if it works. Both of
these are actually going to be user specified and hence more complex.
So, why am I getting a delay of one token? Even the test printf
statement which is printing the tokens is executed only after I send
the next token! :(

@3.) Yeah, It worked; I just had to add any* :)

Thanks again!
Aditi.

On Jul 12, 9:05 am, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> Hi Aditi,
>
> > 1.) %% write exec will be executed in every iteration of the loop.
> > Will this effect the performance? Is there a better way to do it? I
> > couldn't get it working by putting it just once outside the loop. I am
> > using this to build a tool which is required to be efficient, that's
> > why I am concerned with this point.
>
> As far as I can tell you need the code generated by write exec to run on
> every iteration of the loop. The only consideration here is that there
> will be an unnecessary check of p against pe. In this case pe - p always
> equals one. This should just be a few processor instructions however. If
> you really need to squeeze out instructions and you are concerned you
> can always look at the generated code.
>
> > 2.) The printing of the tokens and the action triggered(as of now,
> > just a print statement) happen only after I send the next token. Why
> > is there this delay of one token in the processing. Is my approach not
> > correct?
>
> My best guess is that you are embedding actions using the '%' operator.
> Provide some ragel code and I'll tell ya for certain :)
>
> > 3.) There are certain other issues also, like I want to match this
> > pattern anywhere in the string and may be multiple times if it occurs.
> > This is not happening here. This code works if I give my pattern in
> > the beginning only. What should I do?
>
> See:
>
> http://groups.google.com/group/ragel-users/browse_thread/thread/8094b...
>
> -Adrian
>
>  signature.asc
> 1KDownload


From thurs... at cs.queensu.ca  Fri Jul 13 21:32:40 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Fri, 13 Jul 2007 17:32:40 -0400
Subject: [ragel-users] Re: Problem: Change state only when a new input
 is received
In-Reply-To: <1184229186.768496.247050@57g2000hsv.googlegroups.com>
References: <1184160429.916174.129560@m3g2000hsh.googlegroups.com> <4695167F.8090508@cs.queensu.ca> <1184182999.252708.220010@w3g2000hsg.googlegroups.com> <4695D2CF.1030609@cs.queensu.ca> <1184229186.768496.247050@57g2000hsv.googlegroups.com>
Message-ID: <4697EF78.9070409@cs.queensu.ca>

Aditi,

The trigger action should get executed when the machine moves over the 6
value. If it isn't then something else must be wrong.

Regards,
 Adrian

Aditi wrote:
> @2.) Here is a snippet of ragel code->
> <snip>
> 	action trigger {
> 		printf("Regex Matched!\n");
> 	}
> 
> 	main := any* (2 4 6) @trigger;
> </snip>
> I am using very simple regex and actions to see if it works. Both of
> these are actually going to be user specified and hence more complex.
> So, why am I getting a delay of one token? Even the test printf
> statement which is printing the tokens is executed only after I send
> the next token! :(




-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20070713/686c6fa6/attachment-0001.sig>

From cmantu... at gmail.com  Sat Jul 14 06:35:03 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Sat, 14 Jul 2007 02:35:03 -0400
Subject: Bug or feature?
Message-ID: <cb2ad8b50707132335j2b71486ara2c50949932c4b60@mail.gmail.com>

Adrian,

I have the following construct:

password = password_char**
               >{ capture_start(capid_password, p); }
               %{ capture_stop(capid_password, p); };

When I feed a string that doesn't match "password", "capture_stop" is
immediately called but not "capture_start". I would expect that either
both or none are called (I prefer both). What say you?

Thanks!

Carlos

-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From thurs... at cs.queensu.ca  Sat Jul 14 20:08:45 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Sat, 14 Jul 2007 16:08:45 -0400
Subject: [ragel-users] Bug or feature?
In-Reply-To: <cb2ad8b50707132335j2b71486ara2c50949932c4b60@mail.gmail.com>
References: <cb2ad8b50707132335j2b71486ara2c50949932c4b60@mail.gmail.com>
Message-ID: <46992D4D.5050108@cs.queensu.ca>

Hi Carlos,

See this thread:

http://groups.google.com/group/ragel-users/browse_thread/thread/9509ab83d7f022f1/

And in particular this message:

http://groups.google.com/group/ragel-users/msg/79546a93494e6773

-Adrian

Carlos Antunes wrote:
> Adrian,
> 
> I have the following construct:
> 
> password = password_char**
>                >{ capture_start(capid_password, p); }
>                %{ capture_stop(capid_password, p); };
> 
> When I feed a string that doesn't match "password", "capture_stop" is
> immediately called but not "capture_start". I would expect that either
> both or none are called (I prefer both). What say you?
> 
> Thanks!
> 
> Carlos
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20070714/266b69fe/attachment-0001.sig>

From cmantu... at gmail.com  Sat Jul 14 20:24:18 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Sat, 14 Jul 2007 16:24:18 -0400
Subject: [ragel-users] Re: Bug or feature?
In-Reply-To: <46992D4D.5050108@cs.queensu.ca>
References: <cb2ad8b50707132335j2b71486ara2c50949932c4...@mail.gmail.com>
	 <46992D4D.5050...@cs.queensu.ca>
Message-ID: <cb2ad8b50707141324j44ae5d7qb80b98ea1c89ca0a@mail.gmail.com>

Adrian,

Ok, read the thread and that message specifically. I still don't get
why a machine that doesn't get entered gets to be exited. If a
transition goes around, not through, the machine, why would the exit
action of that machine be called? After all, that optional machine
final state may never be transitioned to, right? How come it can be
transitioned from, then?

Thanks!

Carlos

On 7/14/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> Hi Carlos,
>
> See this thread:
>
> http://groups.google.com/group/ragel-users/browse_thread/thread/9509ab83d7f022f1/
>
> And in particular this message:
>
> http://groups.google.com/group/ragel-users/msg/79546a93494e6773
>
> -Adrian
>
> Carlos Antunes wrote:
> > Adrian,
> >
> > I have the following construct:
> >
> > password = password_char**
> >                >{ capture_start(capid_password, p); }
> >                %{ capture_stop(capid_password, p); };
> >
> > When I feed a string that doesn't match "password", "capture_stop" is
> > immediately called but not "capture_start". I would expect that either
> > both or none are called (I prefer both). What say you?
> >
> > Thanks!
> >
> > Carlos
> >
>
>
>


-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From thurs... at cs.queensu.ca  Sat Jul 14 20:47:02 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Sat, 14 Jul 2007 16:47:02 -0400
Subject: [ragel-users] Re: Bug or feature?
In-Reply-To: <cb2ad8b50707141324j44ae5d7qb80b98ea1c89ca0a@mail.gmail.com>
References: <cb2ad8b50707132335j2b71486ara2c50949932c4b60@mail.gmail.com> <46992D4D.5050108@cs.queensu.ca> <cb2ad8b50707141324j44ae5d7qb80b98ea1c89ca0a@mail.gmail.com>
Message-ID: <46993646.8000607@cs.queensu.ca>

Carlos,

The leaving action is run because the machine accepts the zero-length
word at the time that it is embedded. That is, the start state is also
final. When you 'pass over' a machine that accepts the zero-length word
you are always passing through the start state which is also final. And
so you are 'leaving' it.

But entering actions are always associated with transitions inside the
machine. This is how you can leave a machine you have never 'entered.'

It's true, the wording of things doesn't perfectly match the semantics,
and they used to match better (see the thread), but to me the current
state of things seems the best way to go. The semantics of the operators
are simple and easy to define.

If you make a habit of factoring out zero-length machines then you can
avoid this problem.

word = char+ >enter %leave;
opt_word = word?;

-Adrian

Carlos Antunes wrote:
> Adrian,
> 
> Ok, read the thread and that message specifically. I still don't get
> why a machine that doesn't get entered gets to be exited. If a
> transition goes around, not through, the machine, why would the exit
> action of that machine be called? After all, that optional machine
> final state may never be transitioned to, right? How come it can be
> transitioned from, then?
> 
> Thanks!
> 
> Carlos
> 
> On 7/14/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>> Hi Carlos,
>>
>> See this thread:
>>
>> http://groups.google.com/group/ragel-users/browse_thread/thread/9509ab83d7f022f1/
>>
>> And in particular this message:
>>
>> http://groups.google.com/group/ragel-users/msg/79546a93494e6773
>>
>> -Adrian
>>
>> Carlos Antunes wrote:
>>> Adrian,
>>>
>>> I have the following construct:
>>>
>>> password = password_char**
>>>                >{ capture_start(capid_password, p); }
>>>                %{ capture_stop(capid_password, p); };
>>>
>>> When I feed a string that doesn't match "password", "capture_stop" is
>>> immediately called but not "capture_start". I would expect that either
>>> both or none are called (I prefer both). What say you?
>>>
>>> Thanks!
>>>
>>> Carlos
>>>
>>
>>
> 
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20070714/32252be3/attachment-0001.sig>

From cmantu... at gmail.com  Sat Jul 14 20:54:12 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Sat, 14 Jul 2007 16:54:12 -0400
Subject: [ragel-users] Re: Bug or feature?
In-Reply-To: <46993646.8000607@cs.queensu.ca>
References: <cb2ad8b50707132335j2b71486ara2c50949932c4b60@mail.gmail.com>
	 <46992D4D.5050108@cs.queensu.ca>
	 <cb2ad8b50707141324j44ae5d7qb80b98ea1c89c...@mail.gmail.com>
	 <46993646.8000...@cs.queensu.ca>
Message-ID: <cb2ad8b50707141354r135c014y4c3331d8fd5809c7@mail.gmail.com>

Adrian,

Let me start by saying that I was wrong when I said that the optional
machine is bypassed. You are right, there is a state which is both the
start and finish and that state is always transitioned to. Attahed,
you'll find the image that convinced me of that. I'm going to reread
that thread to see if I "get it". To be honest with you, I am still
confused so expect additional questions from me. I hope you don't
kind! :)

Thanks!

Carlos

On 7/14/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> Carlos,
>
> The leaving action is run because the machine accepts the zero-length
> word at the time that it is embedded. That is, the start state is also
> final. When you 'pass over' a machine that accepts the zero-length word
> you are always passing through the start state which is also final. And
> so you are 'leaving' it.
>
> But entering actions are always associated with transitions inside the
> machine. This is how you can leave a machine you have never 'entered.'
>
> It's true, the wording of things doesn't perfectly match the semantics,
> and they used to match better (see the thread), but to me the current
> state of things seems the best way to go. The semantics of the operators
> are simple and easy to define.
>
> If you make a habit of factoring out zero-length machines then you can
> avoid this problem.
>
> word = char+ >enter %leave;
> opt_word = word?;
>
> -Adrian
>
> Carlos Antunes wrote:
> > Adrian,
> >
> > Ok, read the thread and that message specifically. I still don't get
> > why a machine that doesn't get entered gets to be exited. If a
> > transition goes around, not through, the machine, why would the exit
> > action of that machine be called? After all, that optional machine
> > final state may never be transitioned to, right? How come it can be
> > transitioned from, then?
> >
> > Thanks!
> >
> > Carlos
> >
> > On 7/14/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> >> Hi Carlos,
> >>
> >> See this thread:
> >>
> >> http://groups.google.com/group/ragel-users/browse_thread/thread/9509ab83d7f022f1/
> >>
> >> And in particular this message:
> >>
> >> http://groups.google.com/group/ragel-users/msg/79546a93494e6773
> >>
> >> -Adrian
> >>
> >> Carlos Antunes wrote:
> >>> Adrian,
> >>>
> >>> I have the following construct:
> >>>
> >>> password = password_char**
> >>>                >{ capture_start(capid_password, p); }
> >>>                %{ capture_stop(capid_password, p); };
> >>>
> >>> When I feed a string that doesn't match "password", "capture_stop" is
> >>> immediately called but not "capture_start". I would expect that either
> >>> both or none are called (I prefer both). What say you?
> >>>
> >>> Thanks!
> >>>
> >>> Carlos
> >>>
> >>
> >>
> >
> >
>
>
>


-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson
-------------- next part --------------
A non-text attachment was scrubbed...
Name: graph-dot[1].png
Type: image/png
Size: 868 bytes
Desc: not available
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20070714/032e3704/attachment-0001.png>

From cmantu... at gmail.com  Sat Jul 14 21:11:08 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Sat, 14 Jul 2007 17:11:08 -0400
Subject: [ragel-users] Re: Bug or feature?
In-Reply-To: <cb2ad8b50707141354r135c014y4c3331d8fd5809c7@mail.gmail.com>
References: <cb2ad8b50707132335j2b71486ara2c50949932c4...@mail.gmail.com>
	 <46992D4D.5050...@cs.queensu.ca>
	 <cb2ad8b50707141324j44ae5d7qb80b98ea1c89c...@mail.gmail.com>
	 <46993646.8000...@cs.queensu.ca>
	 <cb2ad8b50707141354r135c014y4c3331d8fd580...@mail.gmail.com>
Message-ID: <cb2ad8b50707141411r2c3167bas40a877fb323252e8@mail.gmail.com>

Adrian,

I just reread the thread and, for the life of me, I don't understand
why the OUT transition (not shown on the graph on the previous msg)
gets its action executed but the IN transition doesn't get the same
treatment.

You've said, and I quote you:

"Prior to version 4.0, the entering action operator actually did exactly
what you describe. If the machine's start state was final, then it also
embedded the action into the start state as a leaving action. Initially
I thought this was very intuitive, however over time I gradually took
the opinion that all operators should have a single purpose."

Now, it appears to me that you were associating the entering action
with the OUT transition when both the start and final states are the
same. I agree with you, this is not intuitive. However, what I don't
understand is why you don't associate the entering action with the IN
transition. Entering action goes with IN and leaving action goes with
OUT. No dual purpose here, or am I still missing something?

Thanks!

Carlos

On 7/14/07, Carlos Antunes <cmantu... at gmail.com> wrote:
> Adrian,
>
> Let me start by saying that I was wrong when I said that the optional
> machine is bypassed. You are right, there is a state which is both the
> start and finish and that state is always transitioned to. Attahed,
> you'll find the image that convinced me of that. I'm going to reread
> that thread to see if I "get it". To be honest with you, I am still
> confused so expect additional questions from me. I hope you don't
> kind! :)
>
> Thanks!
>
> Carlos
>
> On 7/14/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> > Carlos,
> >
> > The leaving action is run because the machine accepts the zero-length
> > word at the time that it is embedded. That is, the start state is also
> > final. When you 'pass over' a machine that accepts the zero-length word
> > you are always passing through the start state which is also final. And
> > so you are 'leaving' it.
> >
> > But entering actions are always associated with transitions inside the
> > machine. This is how you can leave a machine you have never 'entered.'
> >
> > It's true, the wording of things doesn't perfectly match the semantics,
> > and they used to match better (see the thread), but to me the current
> > state of things seems the best way to go. The semantics of the operators
> > are simple and easy to define.
> >
> > If you make a habit of factoring out zero-length machines then you can
> > avoid this problem.
> >
> > word = char+ >enter %leave;
> > opt_word = word?;
> >
> > -Adrian
> >
> > Carlos Antunes wrote:
> > > Adrian,
> > >
> > > Ok, read the thread and that message specifically. I still don't get
> > > why a machine that doesn't get entered gets to be exited. If a
> > > transition goes around, not through, the machine, why would the exit
> > > action of that machine be called? After all, that optional machine
> > > final state may never be transitioned to, right? How come it can be
> > > transitioned from, then?
> > >
> > > Thanks!
> > >
> > > Carlos
> > >
> > > On 7/14/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> > >> Hi Carlos,
> > >>
> > >> See this thread:
> > >>
> > >> http://groups.google.com/group/ragel-users/browse_thread/thread/9509ab83d7f022f1/
> > >>
> > >> And in particular this message:
> > >>
> > >> http://groups.google.com/group/ragel-users/msg/79546a93494e6773
> > >>
> > >> -Adrian
> > >>
> > >> Carlos Antunes wrote:
> > >>> Adrian,
> > >>>
> > >>> I have the following construct:
> > >>>
> > >>> password = password_char**
> > >>>                >{ capture_start(capid_password, p); }
> > >>>                %{ capture_stop(capid_password, p); };
> > >>>
> > >>> When I feed a string that doesn't match "password", "capture_stop" is
> > >>> immediately called but not "capture_start". I would expect that either
> > >>> both or none are called (I prefer both). What say you?
> > >>>
> > >>> Thanks!
> > >>>
> > >>> Carlos
> > >>>
> > >>
> > >>
> > >
> > >
> >
> >
> >
>
>
> --
> "We hold [...] that all men are created equal; that they are
> endowed [...] with certain inalienable rights; that among
> these are life, liberty, and the pursuit of happiness"
>         -- Thomas Jefferson
>
>


-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From cmantu... at gmail.com  Sat Jul 14 21:23:49 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Sat, 14 Jul 2007 17:23:49 -0400
Subject: [ragel-users] Re: Bug or feature?
In-Reply-To: <cb2ad8b50707141422n51e6fd18h453c0b543e12cc32@mail.gmail.com>
References: <cb2ad8b50707132335j2b71486ara2c50949932c4b60@mail.gmail.com>
	 <46992D4D.5050...@cs.queensu.ca>
	 <cb2ad8b50707141324j44ae5d7qb80b98ea1c89c...@mail.gmail.com>
	 <46993646.8000...@cs.queensu.ca>
	 <cb2ad8b50707141354r135c014y4c3331d8fd580...@mail.gmail.com>
	 <cb2ad8b50707141411r2c3167bas40a877fb32325...@mail.gmail.com>
	 <cb2ad8b50707141422n51e6fd18h453c0b543e12c...@mail.gmail.com>
Message-ID: <cb2ad8b50707141423s143ee837v820d00ab824faf0f@mail.gmail.com>

[Now with the machine attached]

Adrian,

Just built the following example machine:

action action_in {}
action action_out {}

testmach := lower* >action_in %action_out '$';

Graph is attached. Now, I am even more confused. Does that mean that
the entering action is really not the entering action into the machine
but it is the action that gets executed after a character is matched
for the first time? If that's the case, I think there is one operator
missing for symmetry, no? One which gets executed with the IN
transition?

Thanks and sorry about all the "thinking aloud" here. "thinking aloud" here.

Carlos



> On 7/14/07, Carlos Antunes <cmantu... at gmail.com> wrote:
> > Adrian,
> >
> > I just reread the thread and, for the life of me, I don't understand
> > why the OUT transition (not shown on the graph on the previous msg)
> > gets its action executed but the IN transition doesn't get the same
> > treatment.
> >
> > You've said, and I quote you:
> >
> > "Prior to version 4.0, the entering action operator actually did exactly
> > what you describe. If the machine's start state was final, then it also
> > embedded the action into the start state as a leaving action. Initially
> > I thought this was very intuitive, however over time I gradually took
> > the opinion that all operators should have a single purpose."
> >
> > Now, it appears to me that you were associating the entering action
> > with the OUT transition when both the start and final states are the
> > same. I agree with you, this is not intuitive. However, what I don't
> > understand is why you don't associate the entering action with the IN
> > transition. Entering action goes with IN and leaving action goes with
> > OUT. No dual purpose here, or am I still missing something?
> >
> > Thanks!
> >
> > Carlos
> >
> > On 7/14/07, Carlos Antunes <cmantu... at gmail.com> wrote:
> > > Adrian,
> > >
> > > Let me start by saying that I was wrong when I said that the optional
> > > machine is bypassed. You are right, there is a state which is both the
> > > start and finish and that state is always transitioned to. Attahed,
> > > you'll find the image that convinced me of that. I'm going to reread
> > > that thread to see if I "get it". To be honest with you, I am still
> > > confused so expect additional questions from me. I hope you don't
> > > kind! :)
> > >
> > > Thanks!
> > >
> > > Carlos
> > >
> > > On 7/14/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> > > > Carlos,
> > > >
> > > > The leaving action is run because the machine accepts the zero-length
> > > > word at the time that it is embedded. That is, the start state is also
> > > > final. When you 'pass over' a machine that accepts the zero-length word
> > > > you are always passing through the start state which is also final. And
> > > > so you are 'leaving' it.
> > > >
> > > > But entering actions are always associated with transitions inside the
> > > > machine. This is how you can leave a machine you have never 'entered.'
> > > >
> > > > It's true, the wording of things doesn't perfectly match the semantics,
> > > > and they used to match better (see the thread), but to me the current
> > > > state of things seems the best way to go. The semantics of the operators
> > > > are simple and easy to define.
> > > >
> > > > If you make a habit of factoring out zero-length machines then you can
> > > > avoid this problem.
> > > >
> > > > word = char+ >enter %leave;
> > > > opt_word = word?;
> > > >
> > > > -Adrian
> > > >
> > > > Carlos Antunes wrote:
> > > > > Adrian,
> > > > >
> > > > > Ok, read the thread and that message specifically. I still don't get
> > > > > why a machine that doesn't get entered gets to be exited. If a
> > > > > transition goes around, not through, the machine, why would the exit
> > > > > action of that machine be called? After all, that optional machine
> > > > > final state may never be transitioned to, right? How come it can be
> > > > > transitioned from, then?
> > > > >
> > > > > Thanks!
> > > > >
> > > > > Carlos
> > > > >
> > > > > On 7/14/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> > > > >> Hi Carlos,
> > > > >>
> > > > >> See this thread:
> > > > >>
> > > > >> http://groups.google.com/group/ragel-users/browse_thread/thread/9509ab83d7f022f1/
> > > > >>
> > > > >> And in particular this message:
> > > > >>
> > > > >> http://groups.google.com/group/ragel-users/msg/79546a93494e6773
> > > > >>
> > > > >> -Adrian
> > > > >>
> > > > >> Carlos Antunes wrote:
> > > > >>> Adrian,
> > > > >>>
> > > > >>> I have the following construct:
> > > > >>>
> > > > >>> password = password_char**
> > > > >>>                >{ capture_start(capid_password, p); }
> > > > >>>                %{ capture_stop(capid_password, p); };
> > > > >>>
> > > > >>> When I feed a string that doesn't match "password", "capture_stop" is
> > > > >>> immediately called but not "capture_start". I would expect that either
> > > > >>> both or none are called (I prefer both). What say you?
> > > > >>>
> > > > >>> Thanks!
> > > > >>>
> > > > >>> Carlos
> > > > >>>
> > > > >>
> > > > >>
> > > > >
> > > > >
> > > >
> > > >
> > > >
> > >
> > >
> > > --
> > > "We hold [...] that all men are created equal; that they are
> > > endowed [...] with certain inalienable rights; that among
> > > these are life, liberty, and the pursuit of happiness"
> > >         -- Thomas Jefferson
> > >
> > >
> >
> >
> > --
> > "We hold [...] that all men are created equal; that they are
> > endowed [...] with certain inalienable rights; that among
> > these are life, liberty, and the pursuit of happiness"
> >         -- Thomas Jefferson
> >
>
>
> --
> "We hold [...] that all men are created equal; that they are
> endowed [...] with certain inalienable rights; that among
> these are life, liberty, and the pursuit of happiness"
>         -- Thomas Jefferson
>


-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson
-------------- next part --------------
A non-text attachment was scrubbed...
Name: graph-dot[1].png
Type: image/png
Size: 2908 bytes
Desc: not available
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20070714/412a29f0/attachment-0001.png>

From thurs... at cs.queensu.ca  Sat Jul 14 22:01:46 2007
From: thurs... at cs.queensu.ca (=?utf-8?B?QWRyaWFuIFRodXJzdG9u?=)
Date: Sat, 14 Jul 2007 22:01:46 +0000
Subject: [ragel-users] Re: Bug or feature?
In-Reply-To: <cb2ad8b50707141423s143ee837v820d00ab824faf0f@mail.gmail.com>
References: <cb2ad8b50707132335j2b71486ara2c50949932c4b60@mail.gmail.com> <46992D4D.5050108@cs.queensu.ca> <cb2ad8b50707141324j44ae5d7qb80b98ea1c89ca0a@mail.gmail.com> <46993646.8000607@cs.queensu.ca> <cb2ad8b50707141354r135c014y4c3331d8fd5809c7@mail.gmail.com> <cb2ad8b50707141411r2c3167bas40a877fb323252e8@mail.gmail.com> <cb2ad8b50707141422n51e6fd18h453c0b543e12cc32@mail.gmail.com><cb2ad8b50707141423s143ee837v820d00ab824faf0f@mail.gmail.com>
Message-ID: <824544157-1184450505-cardhu_decombobulator_blackberry.rim.net-731876917-@bxe123.bisx.prod.on.blackberry>

Yes the entering action is associated with the first transitions of the machine. Remember that there is no transition into the start state. There is only the previous machine's transitions into its final state, which is the same as the following machine's start state (speaking about concatenation). 

If you look near the end of that thread I'd like to revive the old semantics (the missing operator you speak of) however there are no more symbols left. Instead I want to add an identifier-based embedding operator but I haven't had the time.

The old semantics would embed entering actions as they are currently known, but it would also embed the action as a leaving action if the start state was final. This made it symmetrical. 

Adrian
-----Original Message-----
From: "Carlos Antunes" <cmantunes at gmail.com>

Date: Sat, 14 Jul 2007 17:23:49 
To:ragel-users at googlegroups.com
Subject: [ragel-users] Re: Bug or feature?


[Now with the machine attached]

Adrian,

Just built the following example machine:

action action_in {}
action action_out {}

testmach := lower* >action_in %action_out '$';

Graph is attached. Now, I am even more confused. Does that mean that
the entering action is really not the entering action into the machine
but it is the action that gets executed after a character is matched
for the first time? If that's the case, I think there is one operator
missing for symmetry, no? One which gets executed with the IN
transition?

Thanks and sorry about all the "thinking aloud" here. "thinking aloud" here.

Carlos



> On 7/14/07, Carlos Antunes <cmantunes at gmail.com> wrote:
> > Adrian,
> >
> > I just reread the thread and, for the life of me, I don't understand
> > why the OUT transition (not shown on the graph on the previous msg)
> > gets its action executed but the IN transition doesn't get the same
> > treatment.
> >
> > You've said, and I quote you:
> >
> > "Prior to version 4.0, the entering action operator actually did exactly
> > what you describe. If the machine's start state was final, then it also
> > embedded the action into the start state as a leaving action. Initially
> > I thought this was very intuitive, however over time I gradually took
> > the opinion that all operators should have a single purpose."
> >
> > Now, it appears to me that you were associating the entering action
> > with the OUT transition when both the start and final states are the
> > same. I agree with you, this is not intuitive. However, what I don't
> > understand is why you don't associate the entering action with the IN
> > transition. Entering action goes with IN and leaving action goes with
> > OUT. No dual purpose here, or am I still missing something?
> >
> > Thanks!
> >
> > Carlos
> >
> > On 7/14/07, Carlos Antunes <cmantunes at gmail.com> wrote:
> > > Adrian,
> > >
> > > Let me start by saying that I was wrong when I said that the optional
> > > machine is bypassed. You are right, there is a state which is both the
> > > start and finish and that state is always transitioned to. Attahed,
> > > you'll find the image that convinced me of that. I'm going to reread
> > > that thread to see if I "get it". To be honest with you, I am still
> > > confused so expect additional questions from me. I hope you don't
> > > kind! :)
> > >
> > > Thanks!
> > >
> > > Carlos
> > >
> > > On 7/14/07, Adrian Thurston <thurston at cs.queensu.ca> wrote:
> > > > Carlos,
> > > >
> > > > The leaving action is run because the machine accepts the zero-length
> > > > word at the time that it is embedded. That is, the start state is also
> > > > final. When you 'pass over' a machine that accepts the zero-length word
> > > > you are always passing through the start state which is also final. And
> > > > so you are 'leaving' it.
> > > >
> > > > But entering actions are always associated with transitions inside the
> > > > machine. This is how you can leave a machine you have never 'entered.'
> > > >
> > > > It's true, the wording of things doesn't perfectly match the semantics,
> > > > and they used to match better (see the thread), but to me the current
> > > > state of things seems the best way to go. The semantics of the operators
> > > > are simple and easy to define.
> > > >
> > > > If you make a habit of factoring out zero-length machines then you can
> > > > avoid this problem.
> > > >
> > > > word = char+ >enter %leave;
> > > > opt_word = word?;
> > > >
> > > > -Adrian
> > > >
> > > > Carlos Antunes wrote:
> > > > > Adrian,
> > > > >
> > > > > Ok, read the thread and that message specifically. I still don't get
> > > > > why a machine that doesn't get entered gets to be exited. If a
> > > > > transition goes around, not through, the machine, why would the exit
> > > > > action of that machine be called? After all, that optional machine
> > > > > final state may never be transitioned to, right? How come it can be
> > > > > transitioned from, then?
> > > > >
> > > > > Thanks!
> > > > >
> > > > > Carlos
> > > > >
> > > > > On 7/14/07, Adrian Thurston <thurston at cs.queensu.ca> wrote:
> > > > >> Hi Carlos,
> > > > >>
> > > > >> See this thread:
> > > > >>
> > > > >> http://groups.google.com/group/ragel-users/browse_thread/thread/9509ab83d7f022f1/
> > > > >>
> > > > >> And in particular this message:
> > > > >>
> > > > >> http://groups.google.com/group/ragel-users/msg/79546a93494e6773
> > > > >>
> > > > >> -Adrian
> > > > >>
> > > > >> Carlos Antunes wrote:
> > > > >>> Adrian,
> > > > >>>
> > > > >>> I have the following construct:
> > > > >>>
> > > > >>> password = password_char**
> > > > >>>                >{ capture_start(capid_password, p); }
> > > > >>>                %{ capture_stop(capid_password, p); };
> > > > >>>
> > > > >>> When I feed a string that doesn't match "password", "capture_stop" is
> > > > >>> immediately called but not "capture_start". I would expect that either
> > > > >>> both or none are called (I prefer both). What say you?
> > > > >>>
> > > > >>> Thanks!
> > > > >>>
> > > > >>> Carlos
> > > > >>>
> > > > >>
> > > > >>
> > > > >
> > > > >
> > > >
> > > >
> > > >
> > >
> > >
> > > --
> > > "We hold [...] that all men are created equal; that they are
> > > endowed [...] with certain inalienable rights; that among
> > > these are life, liberty, and the pursuit of happiness"
> > >         -- Thomas Jefferson
> > >
> > >
> >
> >
> > --
> > "We hold [...] that all men are created equal; that they are
> > endowed [...] with certain inalienable rights; that among
> > these are life, liberty, and the pursuit of happiness"
> >         -- Thomas Jefferson
> >
>
>
> --
> "We hold [...] that all men are created equal; that they are
> endowed [...] with certain inalienable rights; that among
> these are life, liberty, and the pursuit of happiness"
>         -- Thomas Jefferson
>


-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson




From cmantu... at gmail.com  Sat Jul 14 22:20:30 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Sat, 14 Jul 2007 18:20:30 -0400
Subject: [ragel-users] Re: Bug or feature?
In-Reply-To: <824544157-1184450505-cardhu_decombobulator_blackberry.rim.net-731876917-@bxe123.bisx.prod.on.blackberry>
References: <cb2ad8b50707132335j2b71486ara2c50949932c4...@mail.gmail.com>
	 <46992D4D.5050...@cs.queensu.ca>
	 <cb2ad8b50707141324j44ae5d7qb80b98ea1c89c...@mail.gmail.com>
	 <46993646.8000...@cs.queensu.ca>
	 <cb2ad8b50707141354r135c014y4c3331d8fd580...@mail.gmail.com>
	 <cb2ad8b50707141411r2c3167bas40a877fb32325...@mail.gmail.com>
	 <cb2ad8b50707141422n51e6fd18h453c0b543e12c...@mail.gmail.com>
	 <cb2ad8b50707141423s143ee837v820d00ab824fa...@mail.gmail.com>
	 <824544157-1184450505-cardhu_decombobulator_blackberry.rim.net-7318769...@bxe123.bisx.prod.on.blackberry>
Message-ID: <cb2ad8b50707141520w2c37f0aic8811bd7101d72b5@mail.gmail.com>

On 7/14/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>
> If you look near the end of that thread I'd like to revive the old semantics (the missing operator you speak of) however there are no more symbols left.
>

Do you see any harm in reviving the old semantics? How about a compile
time switch for the entering operator or maybe an option to write
init? The default would be the new semantics. I guess this would be
easier than to code additional operators. Personally, I find the old
semantics more intuitive and from a pragmatic point of view, they
would be more useful to me (in this particular case, I have to deal
with the possibility of an empty password; the old semantics would
work very well here.)

>
>Instead I want to add an identifier-based embedding operator
>

A what!? :) You lost me with the identifier-based...

Thanks!

Carlos


> -----Original Message-----
> From: "Carlos Antunes" <cmantu... at gmail.com>
>
> Date: Sat, 14 Jul 2007 17:23:49
> To:ragel-users at googlegroups.com
> Subject: [ragel-users] Re: Bug or feature?
>
>
> [Now with the machine attached]
>
> Adrian,
>
> Just built the following example machine:
>
> action action_in {}
> action action_out {}
>
> testmach := lower* >action_in %action_out '$';
>
> Graph is attached. Now, I am even more confused. Does that mean that
> the entering action is really not the entering action into the machine
> but it is the action that gets executed after a character is matched
> for the first time? If that's the case, I think there is one operator
> missing for symmetry, no? One which gets executed with the IN
> transition?
>
> Thanks and sorry about all the "thinking aloud" here. "thinking aloud" here.
>
> Carlos
>
>
>
> > On 7/14/07, Carlos Antunes <cmantu... at gmail.com> wrote:
> > > Adrian,
> > >
> > > I just reread the thread and, for the life of me, I don't understand
> > > why the OUT transition (not shown on the graph on the previous msg)
> > > gets its action executed but the IN transition doesn't get the same
> > > treatment.
> > >
> > > You've said, and I quote you:
> > >
> > > "Prior to version 4.0, the entering action operator actually did exactly
> > > what you describe. If the machine's start state was final, then it also
> > > embedded the action into the start state as a leaving action. Initially
> > > I thought this was very intuitive, however over time I gradually took
> > > the opinion that all operators should have a single purpose."
> > >
> > > Now, it appears to me that you were associating the entering action
> > > with the OUT transition when both the start and final states are the
> > > same. I agree with you, this is not intuitive. However, what I don't
> > > understand is why you don't associate the entering action with the IN
> > > transition. Entering action goes with IN and leaving action goes with
> > > OUT. No dual purpose here, or am I still missing something?
> > >
> > > Thanks!
> > >
> > > Carlos
> > >
> > > On 7/14/07, Carlos Antunes <cmantu... at gmail.com> wrote:
> > > > Adrian,
> > > >
> > > > Let me start by saying that I was wrong when I said that the optional
> > > > machine is bypassed. You are right, there is a state which is both the
> > > > start and finish and that state is always transitioned to. Attahed,
> > > > you'll find the image that convinced me of that. I'm going to reread
> > > > that thread to see if I "get it". To be honest with you, I am still
> > > > confused so expect additional questions from me. I hope you don't
> > > > kind! :)
> > > >
> > > > Thanks!
> > > >
> > > > Carlos
> > > >
> > > > On 7/14/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> > > > > Carlos,
> > > > >
> > > > > The leaving action is run because the machine accepts the zero-length
> > > > > word at the time that it is embedded. That is, the start state is also
> > > > > final. When you 'pass over' a machine that accepts the zero-length word
> > > > > you are always passing through the start state which is also final. And
> > > > > so you are 'leaving' it.
> > > > >
> > > > > But entering actions are always associated with transitions inside the
> > > > > machine. This is how you can leave a machine you have never 'entered.'
> > > > >
> > > > > It's true, the wording of things doesn't perfectly match the semantics,
> > > > > and they used to match better (see the thread), but to me the current
> > > > > state of things seems the best way to go. The semantics of the operators
> > > > > are simple and easy to define.
> > > > >
> > > > > If you make a habit of factoring out zero-length machines then you can
> > > > > avoid this problem.
> > > > >
> > > > > word = char+ >enter %leave;
> > > > > opt_word = word?;
> > > > >
> > > > > -Adrian
> > > > >
> > > > > Carlos Antunes wrote:
> > > > > > Adrian,
> > > > > >
> > > > > > Ok, read the thread and that message specifically. I still don't get
> > > > > > why a machine that doesn't get entered gets to be exited. If a
> > > > > > transition goes around, not through, the machine, why would the exit
> > > > > > action of that machine be called? After all, that optional machine
> > > > > > final state may never be transitioned to, right? How come it can be
> > > > > > transitioned from, then?
> > > > > >
> > > > > > Thanks!
> > > > > >
> > > > > > Carlos
> > > > > >
> > > > > > On 7/14/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> > > > > >> Hi Carlos,
> > > > > >>
> > > > > >> See this thread:
> > > > > >>
> > > > > >> http://groups.google.com/group/ragel-users/browse_thread/thread/9509ab83d7f022f1/
> > > > > >>
> > > > > >> And in particular this message:
> > > > > >>
> > > > > >> http://groups.google.com/group/ragel-users/msg/79546a93494e6773
> > > > > >>
> > > > > >> -Adrian
> > > > > >>
> > > > > >> Carlos Antunes wrote:
> > > > > >>> Adrian,
> > > > > >>>
> > > > > >>> I have the following construct:
> > > > > >>>
> > > > > >>> password = password_char**
> > > > > >>>                >{ capture_start(capid_password, p); }
> > > > > >>>                %{ capture_stop(capid_password, p); };
> > > > > >>>
> > > > > >>> When I feed a string that doesn't match "password", "capture_stop" is
> > > > > >>> immediately called but not "capture_start". I would expect that either
> > > > > >>> both or none are called (I prefer both). What say you?
> > > > > >>>
> > > > > >>> Thanks!
> > > > > >>>
> > > > > >>> Carlos
> > > > > >>>
> > > > > >>
> > > > > >>
> > > > > >
> > > > > >
> > > > >
> > > > >
> > > > >
> > > >
> > > >
> > > > --
> > > > "We hold [...] that all men are created equal; that they are
> > > > endowed [...] with certain inalienable rights; that among
> > > > these are life, liberty, and the pursuit of happiness"
> > > >         -- Thomas Jefferson
> > > >
> > > >
> > >
> > >
> > > --
> > > "We hold [...] that all men are created equal; that they are
> > > endowed [...] with certain inalienable rights; that among
> > > these are life, liberty, and the pursuit of happiness"
> > >         -- Thomas Jefferson
> > >
> >
> >
> > --
> > "We hold [...] that all men are created equal; that they are
> > endowed [...] with certain inalienable rights; that among
> > these are life, liberty, and the pursuit of happiness"
> >         -- Thomas Jefferson
> >
>
>
> --
> "We hold [...] that all men are created equal; that they are
> endowed [...] with certain inalienable rights; that among
> these are life, liberty, and the pursuit of happiness"
>         -- Thomas Jefferson
>
>
>
>
> >
>


-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From thurs... at cs.queensu.ca  Sat Jul 14 22:45:59 2007
From: thurs... at cs.queensu.ca (=?utf-8?B?QWRyaWFuIFRodXJzdG9u?=)
Date: Sat, 14 Jul 2007 22:45:59 +0000
Subject: [ragel-users] Re: Bug or feature?
In-Reply-To: <cb2ad8b50707141520w2c37f0aic8811bd7101d72b5@mail.gmail.com>
References: <cb2ad8b50707132335j2b71486ara2c50949932c4b60@mail.gmail.com> <46992D4D.5050108@cs.queensu.ca> <cb2ad8b50707141324j44ae5d7qb80b98ea1c89ca0a@mail.gmail.com> <46993646.8000607@cs.queensu.ca> <cb2ad8b50707141354r135c014y4c3331d8fd5809c7@mail.gmail.com> <cb2ad8b50707141411r2c3167bas40a877fb323252e8@mail.gmail.com> <cb2ad8b50707141422n51e6fd18h453c0b543e12cc32@mail.gmail.com> <cb2ad8b50707141423s143ee837v820d00ab824faf0f@mail.gmail.com> <824544157-1184450505-cardhu_decombobulator_blackberry.rim.net-731876917-@bxe123.bisx.prod.on.blackberry><cb2ad8b50707141520w2c37f0aic8811bd7101d72b5@mail.gmail.com>
Message-ID: <769225302-1184453157-cardhu_decombobulator_blackberry.rim.net-1259516554-@bxe123.bisx.prod.on.blackberry>

I think a compile time switch that affects language semantics is a bad idea. It would be like forking the language.

Was thinking like this:

main := char? <-old_enter(a1) %a2;

Where a1 and a2 are the entering and leaving actions.

For literal actions the syntax would be like this:

<-old_enter{code}

Adrian

-----Original Message-----
From: "Carlos Antunes" <cmantunes at gmail.com>

Date: Sat, 14 Jul 2007 18:20:30 
To:ragel-users at googlegroups.com
Subject: [ragel-users] Re: Bug or feature?



On 7/14/07, Adrian Thurston <thurston at cs.queensu.ca> wrote:
>
> If you look near the end of that thread I'd like to revive the old semantics (the missing operator you speak of) however there are no more symbols left.
>

Do you see any harm in reviving the old semantics? How about a compile
time switch for the entering operator or maybe an option to write
init? The default would be the new semantics. I guess this would be
easier than to code additional operators. Personally, I find the old
semantics more intuitive and from a pragmatic point of view, they
would be more useful to me (in this particular case, I have to deal
with the possibility of an empty password; the old semantics would
work very well here.)

>
>Instead I want to add an identifier-based embedding operator
>

A what!? :) You lost me with the identifier-based...

Thanks!

Carlos


> -----Original Message-----
> From: "Carlos Antunes" <cmantunes at gmail.com>
>
> Date: Sat, 14 Jul 2007 17:23:49
> To:ragel-users at googlegroups.com
> Subject: [ragel-users] Re: Bug or feature?
>
>
> [Now with the machine attached]
>
> Adrian,
>
> Just built the following example machine:
>
> action action_in {}
> action action_out {}
>
> testmach := lower* >action_in %action_out '$';
>
> Graph is attached. Now, I am even more confused. Does that mean that
> the entering action is really not the entering action into the machine
> but it is the action that gets executed after a character is matched
> for the first time? If that's the case, I think there is one operator
> missing for symmetry, no? One which gets executed with the IN
> transition?
>
> Thanks and sorry about all the "thinking aloud" here. "thinking aloud" here.
>
> Carlos
>
>
>
> > On 7/14/07, Carlos Antunes <cmantunes at gmail.com> wrote:
> > > Adrian,
> > >
> > > I just reread the thread and, for the life of me, I don't understand
> > > why the OUT transition (not shown on the graph on the previous msg)
> > > gets its action executed but the IN transition doesn't get the same
> > > treatment.
> > >
> > > You've said, and I quote you:
> > >
> > > "Prior to version 4.0, the entering action operator actually did exactly
> > > what you describe. If the machine's start state was final, then it also
> > > embedded the action into the start state as a leaving action. Initially
> > > I thought this was very intuitive, however over time I gradually took
> > > the opinion that all operators should have a single purpose."
> > >
> > > Now, it appears to me that you were associating the entering action
> > > with the OUT transition when both the start and final states are the
> > > same. I agree with you, this is not intuitive. However, what I don't
> > > understand is why you don't associate the entering action with the IN
> > > transition. Entering action goes with IN and leaving action goes with
> > > OUT. No dual purpose here, or am I still missing something?
> > >
> > > Thanks!
> > >
> > > Carlos
> > >
> > > On 7/14/07, Carlos Antunes <cmantunes at gmail.com> wrote:
> > > > Adrian,
> > > >
> > > > Let me start by saying that I was wrong when I said that the optional
> > > > machine is bypassed. You are right, there is a state which is both the
> > > > start and finish and that state is always transitioned to. Attahed,
> > > > you'll find the image that convinced me of that. I'm going to reread
> > > > that thread to see if I "get it". To be honest with you, I am still
> > > > confused so expect additional questions from me. I hope you don't
> > > > kind! :)
> > > >
> > > > Thanks!
> > > >
> > > > Carlos
> > > >
> > > > On 7/14/07, Adrian Thurston <thurston at cs.queensu.ca> wrote:
> > > > > Carlos,
> > > > >
> > > > > The leaving action is run because the machine accepts the zero-length
> > > > > word at the time that it is embedded. That is, the start state is also
> > > > > final. When you 'pass over' a machine that accepts the zero-length word
> > > > > you are always passing through the start state which is also final. And
> > > > > so you are 'leaving' it.
> > > > >
> > > > > But entering actions are always associated with transitions inside the
> > > > > machine. This is how you can leave a machine you have never 'entered.'
> > > > >
> > > > > It's true, the wording of things doesn't perfectly match the semantics,
> > > > > and they used to match better (see the thread), but to me the current
> > > > > state of things seems the best way to go. The semantics of the operators
> > > > > are simple and easy to define.
> > > > >
> > > > > If you make a habit of factoring out zero-length machines then you can
> > > > > avoid this problem.
> > > > >
> > > > > word = char+ >enter %leave;
> > > > > opt_word = word?;
> > > > >
> > > > > -Adrian
> > > > >
> > > > > Carlos Antunes wrote:
> > > > > > Adrian,
> > > > > >
> > > > > > Ok, read the thread and that message specifically. I still don't get
> > > > > > why a machine that doesn't get entered gets to be exited. If a
> > > > > > transition goes around, not through, the machine, why would the exit
> > > > > > action of that machine be called? After all, that optional machine
> > > > > > final state may never be transitioned to, right? How come it can be
> > > > > > transitioned from, then?
> > > > > >
> > > > > > Thanks!
> > > > > >
> > > > > > Carlos
> > > > > >
> > > > > > On 7/14/07, Adrian Thurston <thurston at cs.queensu.ca> wrote:
> > > > > >> Hi Carlos,
> > > > > >>
> > > > > >> See this thread:
> > > > > >>
> > > > > >> http://groups.google.com/group/ragel-users/browse_thread/thread/9509ab83d7f022f1/
> > > > > >>
> > > > > >> And in particular this message:
> > > > > >>
> > > > > >> http://groups.google.com/group/ragel-users/msg/79546a93494e6773
> > > > > >>
> > > > > >> -Adrian
> > > > > >>
> > > > > >> Carlos Antunes wrote:
> > > > > >>> Adrian,
> > > > > >>>
> > > > > >>> I have the following construct:
> > > > > >>>
> > > > > >>> password = password_char**
> > > > > >>>                >{ capture_start(capid_password, p); }
> > > > > >>>                %{ capture_stop(capid_password, p); };
> > > > > >>>
> > > > > >>> When I feed a string that doesn't match "password", "capture_stop" is
> > > > > >>> immediately called but not "capture_start". I would expect that either
> > > > > >>> both or none are called (I prefer both). What say you?
> > > > > >>>
> > > > > >>> Thanks!
> > > > > >>>
> > > > > >>> Carlos
> > > > > >>>
> > > > > >>
> > > > > >>
> > > > > >
> > > > > >
> > > > >
> > > > >
> > > > >
> > > >
> > > >
> > > > --
> > > > "We hold [...] that all men are created equal; that they are
> > > > endowed [...] with certain inalienable rights; that among
> > > > these are life, liberty, and the pursuit of happiness"
> > > >         -- Thomas Jefferson
> > > >
> > > >
> > >
> > >
> > > --
> > > "We hold [...] that all men are created equal; that they are
> > > endowed [...] with certain inalienable rights; that among
> > > these are life, liberty, and the pursuit of happiness"
> > >         -- Thomas Jefferson
> > >
> >
> >
> > --
> > "We hold [...] that all men are created equal; that they are
> > endowed [...] with certain inalienable rights; that among
> > these are life, liberty, and the pursuit of happiness"
> >         -- Thomas Jefferson
> >
>
>
> --
> "We hold [...] that all men are created equal; that they are
> endowed [...] with certain inalienable rights; that among
> these are life, liberty, and the pursuit of happiness"
>         -- Thomas Jefferson
>
>
>
>
> >
>


-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson




From cmantu... at gmail.com  Sat Jul 14 22:55:05 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Sat, 14 Jul 2007 18:55:05 -0400
Subject: [ragel-users] Re: Bug or feature?
In-Reply-To: <769225302-1184453157-cardhu_decombobulator_blackberry.rim.net-1259516554-@bxe123.bisx.prod.on.blackberry>
References: <cb2ad8b50707132335j2b71486ara2c50949932c4...@mail.gmail.com>
	 <cb2ad8b50707141324j44ae5d7qb80b98ea1c89c...@mail.gmail.com>
	 <46993646.8000...@cs.queensu.ca>
	 <cb2ad8b50707141354r135c014y4c3331d8fd580...@mail.gmail.com>
	 <cb2ad8b50707141411r2c3167bas40a877fb32325...@mail.gmail.com>
	 <cb2ad8b50707141422n51e6fd18h453c0b543e12c...@mail.gmail.com>
	 <cb2ad8b50707141423s143ee837v820d00ab824fa...@mail.gmail.com>
	 <824544157-1184450505-cardhu_decombobulator_blackberry.rim.net-7318769...@bxe123.bisx.prod.on.blackberry>
	 <cb2ad8b50707141520w2c37f0aic8811bd7101d7...@mail.gmail.com>
	 <769225302-1184453157-cardhu_decombobulator_blackberry.rim.net-12595165...@bxe123.bisx.prod.on.blackberry>
Message-ID: <cb2ad8b50707141555h363f8c4xebeef95aa24eba8d@mail.gmail.com>

On 7/14/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> I think a compile time switch that affects language semantics is a bad idea. It would be like forking the language.
>

Yes, you are right.

>
> Was thinking like this:
>
> main := char? <-old_enter(a1) %a2;
>
> Where a1 and a2 are the entering and leaving actions.
>
> For literal actions the syntax would be like this:
>
> <-old_enter{code}
>

Ok, got it! I just don't like the "old" prefix. How about "right_enter"? :)

Question: would you be able to associate the "old_enter" action with
the final state's OUT transition from the previous machine? This would
be equivalent to associating "old_enter" action with the IN transition
of the current machine.

Thanks!

Carlos

> Adrian
>
> -----Original Message-----
> From: "Carlos Antunes" <cmantu... at gmail.com>
>
> Date: Sat, 14 Jul 2007 18:20:30
> To:ragel-users at googlegroups.com
> Subject: [ragel-users] Re: Bug or feature?
>
>
>
> On 7/14/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> >
> > If you look near the end of that thread I'd like to revive the old semantics (the missing operator you speak of) however there are no more symbols left.
> >
>
> Do you see any harm in reviving the old semantics? How about a compile
> time switch for the entering operator or maybe an option to write
> init? The default would be the new semantics. I guess this would be
> easier than to code additional operators. Personally, I find the old
> semantics more intuitive and from a pragmatic point of view, they
> would be more useful to me (in this particular case, I have to deal
> with the possibility of an empty password; the old semantics would
> work very well here.)
>
> >
> >Instead I want to add an identifier-based embedding operator
> >
>
> A what!? :) You lost me with the identifier-based...
>
> Thanks!
>
> Carlos
>
>
> > -----Original Message-----
> > From: "Carlos Antunes" <cmantu... at gmail.com>
> >
> > Date: Sat, 14 Jul 2007 17:23:49
> > To:ragel-users at googlegroups.com
> > Subject: [ragel-users] Re: Bug or feature?
> >
> >
> > [Now with the machine attached]
> >
> > Adrian,
> >
> > Just built the following example machine:
> >
> > action action_in {}
> > action action_out {}
> >
> > testmach := lower* >action_in %action_out '$';
> >
> > Graph is attached. Now, I am even more confused. Does that mean that
> > the entering action is really not the entering action into the machine
> > but it is the action that gets executed after a character is matched
> > for the first time? If that's the case, I think there is one operator
> > missing for symmetry, no? One which gets executed with the IN
> > transition?
> >
> > Thanks and sorry about all the "thinking aloud" here. "thinking aloud" here.
> >
> > Carlos
> >
> >
> >
> > > On 7/14/07, Carlos Antunes <cmantu... at gmail.com> wrote:
> > > > Adrian,
> > > >
> > > > I just reread the thread and, for the life of me, I don't understand
> > > > why the OUT transition (not shown on the graph on the previous msg)
> > > > gets its action executed but the IN transition doesn't get the same
> > > > treatment.
> > > >
> > > > You've said, and I quote you:
> > > >
> > > > "Prior to version 4.0, the entering action operator actually did exactly
> > > > what you describe. If the machine's start state was final, then it also
> > > > embedded the action into the start state as a leaving action. Initially
> > > > I thought this was very intuitive, however over time I gradually took
> > > > the opinion that all operators should have a single purpose."
> > > >
> > > > Now, it appears to me that you were associating the entering action
> > > > with the OUT transition when both the start and final states are the
> > > > same. I agree with you, this is not intuitive. However, what I don't
> > > > understand is why you don't associate the entering action with the IN
> > > > transition. Entering action goes with IN and leaving action goes with
> > > > OUT. No dual purpose here, or am I still missing something?
> > > >
> > > > Thanks!
> > > >
> > > > Carlos
> > > >
> > > > On 7/14/07, Carlos Antunes <cmantu... at gmail.com> wrote:
> > > > > Adrian,
> > > > >
> > > > > Let me start by saying that I was wrong when I said that the optional
> > > > > machine is bypassed. You are right, there is a state which is both the
> > > > > start and finish and that state is always transitioned to. Attahed,
> > > > > you'll find the image that convinced me of that. I'm going to reread
> > > > > that thread to see if I "get it". To be honest with you, I am still
> > > > > confused so expect additional questions from me. I hope you don't
> > > > > kind! :)
> > > > >
> > > > > Thanks!
> > > > >
> > > > > Carlos
> > > > >
> > > > > On 7/14/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> > > > > > Carlos,
> > > > > >
> > > > > > The leaving action is run because the machine accepts the zero-length
> > > > > > word at the time that it is embedded. That is, the start state is also
> > > > > > final. When you 'pass over' a machine that accepts the zero-length word
> > > > > > you are always passing through the start state which is also final. And
> > > > > > so you are 'leaving' it.
> > > > > >
> > > > > > But entering actions are always associated with transitions inside the
> > > > > > machine. This is how you can leave a machine you have never 'entered.'
> > > > > >
> > > > > > It's true, the wording of things doesn't perfectly match the semantics,
> > > > > > and they used to match better (see the thread), but to me the current
> > > > > > state of things seems the best way to go. The semantics of the operators
> > > > > > are simple and easy to define.
> > > > > >
> > > > > > If you make a habit of factoring out zero-length machines then you can
> > > > > > avoid this problem.
> > > > > >
> > > > > > word = char+ >enter %leave;
> > > > > > opt_word = word?;
> > > > > >
> > > > > > -Adrian
> > > > > >
> > > > > > Carlos Antunes wrote:
> > > > > > > Adrian,
> > > > > > >
> > > > > > > Ok, read the thread and that message specifically. I still don't get
> > > > > > > why a machine that doesn't get entered gets to be exited. If a
> > > > > > > transition goes around, not through, the machine, why would the exit
> > > > > > > action of that machine be called? After all, that optional machine
> > > > > > > final state may never be transitioned to, right? How come it can be
> > > > > > > transitioned from, then?
> > > > > > >
> > > > > > > Thanks!
> > > > > > >
> > > > > > > Carlos
> > > > > > >
> > > > > > > On 7/14/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> > > > > > >> Hi Carlos,
> > > > > > >>
> > > > > > >> See this thread:
> > > > > > >>
> > > > > > >> http://groups.google.com/group/ragel-users/browse_thread/thread/9509ab83d7f022f1/
> > > > > > >>
> > > > > > >> And in particular this message:
> > > > > > >>
> > > > > > >> http://groups.google.com/group/ragel-users/msg/79546a93494e6773
> > > > > > >>
> > > > > > >> -Adrian
> > > > > > >>
> > > > > > >> Carlos Antunes wrote:
> > > > > > >>> Adrian,
> > > > > > >>>
> > > > > > >>> I have the following construct:
> > > > > > >>>
> > > > > > >>> password = password_char**
> > > > > > >>>                >{ capture_start(capid_password, p); }
> > > > > > >>>                %{ capture_stop(capid_password, p); };
> > > > > > >>>
> > > > > > >>> When I feed a string that doesn't match "password", "capture_stop" is
> > > > > > >>> immediately called but not "capture_start". I would expect that either
> > > > > > >>> both or none are called (I prefer both). What say you?
> > > > > > >>>
> > > > > > >>> Thanks!
> > > > > > >>>
> > > > > > >>> Carlos
> > > > > > >>>
> > > > > > >>
> > > > > > >>
> > > > > > >
> > > > > > >
> > > > > >
> > > > > >
> > > > > >
> > > > >
> > > > >
> > > > > --
> > > > > "We hold [...] that all men are created equal; that they are
> > > > > endowed [...] with certain inalienable rights; that among
> > > > > these are life, liberty, and the pursuit of happiness"
> > > > >         -- Thomas Jefferson
> > > > >
> > > > >
> > > >
> > > >
> > > > --
> > > > "We hold [...] that all men are created equal; that they are
> > > > endowed [...] with certain inalienable rights; that among
> > > > these are life, liberty, and the pursuit of happiness"
> > > >         -- Thomas Jefferson
> > > >
> > >
> > >
> > > --
> > > "We hold [...] that all men are created equal; that they are
> > > endowed [...] with certain inalienable rights; that among
> > > these are life, liberty, and the pursuit of happiness"
> > >         -- Thomas Jefferson
> > >
> >
> >
> > --
> > "We hold [...] that all men are created equal; that they are
> > endowed [...] with certain inalienable rights; that among
> > these are life, liberty, and the pursuit of happiness"
> >         -- Thomas Jefferson
> >
> >
> >
> >
> > >
> >
>
>
> --
> "We hold [...] that all men are created equal; that they are
> endowed [...] with certain inalienable rights; that among
> these are life, liberty, and the pursuit of happiness"
>         -- Thomas Jefferson
>
>
>
>
> >
>


-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From thurs... at cs.queensu.ca  Fri Jul 20 03:31:13 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Thu, 19 Jul 2007 23:31:13 -0400
Subject: [ragel-users] Re: Bug or feature?
In-Reply-To: <cb2ad8b50707141555h363f8c4xebeef95aa24eb...@mail.gmail.com>
References: <cb2ad8b50707132335j2b71486ara2c50949932c4b60@mail.gmail.com> <cb2ad8b50707141324j44ae5d7qb80b98ea1c89ca0a@mail.gmail.com> <46993646.8000607@cs.queensu.ca> <cb2ad8b50707141354r135c014y4c3331d8fd5809c7@mail.gmail.com> <cb2ad8b50707141411r2c3167bas40a877fb323252e8@mail.gmail.com> <cb2ad8b50707141422n51e6fd18h453c0b543e12cc32@mail.gmail.com> <cb2ad8b50707141423s143ee837v820d00ab824faf0f@mail.gmail.com> <824544157-1184450505-cardhu_decombobulator_blackberry.rim.net-731876917-@bxe123.bisx.prod.on.blackberry> <cb2ad8b50707141520w2c37f0aic8811bd7101d72b5@mail.gmail.com> <769225302-1184453157-cardhu_decombobulator_blackberry.rim.net-1259516554-@bxe123.bisx.prod.on.blackberry> <cb2ad8b50707141555h363f8c4xebeef95aa24eba8d@mail.gmail.com>
Message-ID: <46A02C81.4060307@cs.queensu.ca>

Hi Carlos,

If I understand you correctly, this happens automatically. When you
concatenation two machines the start state of the second machine is
effectively copied into the final states of the first machine by way of
an epsilon transition.

Adrian

Carlos Antunes wrote:
> Question: would you be able to associate the "old_enter" action with
> the final state's OUT transition from the previous machine? This would
> be equivalent to associating "old_enter" action with the IN transition
> of the current machine.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20070719/c8a84f07/attachment-0001.sig>

From cmantu... at gmail.com  Fri Jul 20 04:46:11 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Fri, 20 Jul 2007 00:46:11 -0400
Subject: [ragel-users] Re: Bug or feature?
In-Reply-To: <46A02C81.4060307@cs.queensu.ca>
References: <cb2ad8b50707132335j2b71486ara2c50949932c4...@mail.gmail.com>
	 <cb2ad8b50707141354r135c014y4c3331d8fd580...@mail.gmail.com>
	 <cb2ad8b50707141411r2c3167bas40a877fb32325...@mail.gmail.com>
	 <cb2ad8b50707141422n51e6fd18h453c0b543e12c...@mail.gmail.com>
	 <cb2ad8b50707141423s143ee837v820d00ab824fa...@mail.gmail.com>
	 <824544157-1184450505-cardhu_decombobulator_blackberry.rim.net-7318769...@bxe123.bisx.prod.on.blackberry>
	 <cb2ad8b50707141520w2c37f0aic8811bd7101d7...@mail.gmail.com>
	 <769225302-1184453157-cardhu_decombobulator_blackberry.rim.net-12595165...@bxe123.bisx.prod.on.blackberry>
	 <cb2ad8b50707141555h363f8c4xebeef95aa24eb...@mail.gmail.com>
	 <46A02C81.4060...@cs.queensu.ca>
Message-ID: <cb2ad8b50707192146t85e3448ve2d95f34200b06a@mail.gmail.com>

Adrian,

Yes, that what I was mentioning. However, that was not the behavior of
old_enter, was it? Old_enter still needed something to process first,
no?

In any case, I was trying to get to something. Let me illustrate:

machine_a = machine_b %action_b machine_c

Now, this is semantically equivalent to (assuming that ">" is really
associated with the start state:

machine_a = machine_b  machine_c >action_b

This means that, from a semantic point of view,

machine_c >action_b <=> %action_b machine_c

So, why not actually use something like:

machine_d = %entering_c machine_c?

After all, because the start and final states are collapsed, they are
essential the same and this sameness is reflected in the "same" symbol
to represent both. The only change would  be to accept two %% in
sequence (one final, the other start), for consistency purposes. For
example:

machine_a = expr1 %final_a

machine_b = %start_b expr2

machine_c = machine_a machine_b <=> machine_c = expr1 ( %final_a
%start_b ) expr2

The bottom line is that, because the start and final states are
indistinguishable, the symbols that represents transition actions into
them should be too. The syntax just needs to be slightly adjusted to
reflect this and all will be good.

Thanks!

Carlos

On 7/19/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> Hi Carlos,
>
> If I understand you correctly, this happens automatically. When you
> concatenation two machines the start state of the second machine is
> effectively copied into the final states of the first machine by way of
> an epsilon transition.
>
> Adrian
>
> Carlos Antunes wrote:
> > Question: would you be able to associate the "old_enter" action with
> > the final state's OUT transition from the previous machine? This would
> > be equivalent to associating "old_enter" action with the IN transition
> > of the current machine.
>
>
>


-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From thurs... at cs.queensu.ca  Fri Jul 20 06:03:58 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Fri, 20 Jul 2007 02:03:58 -0400
Subject: [ragel-users] Re: Bug or feature?
In-Reply-To: <cb2ad8b50707192146t85e3448ve2d95f34200b...@mail.gmail.com>
References: <cb2ad8b50707132335j2b71486ara2c50949932c4b60@mail.gmail.com> <cb2ad8b50707141354r135c014y4c3331d8fd5809c7@mail.gmail.com> <cb2ad8b50707141411r2c3167bas40a877fb323252e8@mail.gmail.com> <cb2ad8b50707141422n51e6fd18h453c0b543e12cc32@mail.gmail.com> <cb2ad8b50707141423s143ee837v820d00ab824faf0f@mail.gmail.com> <824544157-1184450505-cardhu_decombobulator_blackberry.rim.net-731876917-@bxe123.bisx.prod.on.blackberry> <cb2ad8b50707141520w2c37f0aic8811bd7101d72b5@mail.gmail.com> <769225302-1184453157-cardhu_decombobulator_blackberry.rim.net-1259516554-@bxe123.bisx.prod.on.blackberry> <cb2ad8b50707141555h363f8c4xebeef95aa24eba8d@mail.gmail.com> <46A02C81.4060307@cs.queensu.ca> <cb2ad8b50707192146t85e3448ve2d95f34200b06a@mail.gmail.com>
Message-ID: <46A0504E.6020503@cs.queensu.ca>

Carlos Antunes wrote:
> machine_a = machine_b %action_b machine_c
> 
> Now, this is semantically equivalent to (assuming that ">" is really
> associated with the start state:
> 
> machine_a = machine_b  machine_c >action_b

They are not quite equivalent. Consider the case of machine_c accepting
the zero-length word (start state is final). Then action_b will be a
pending out action of machine_a.

Note however that the first form above is equivalent to the second form
under the old semantics of >.

One thing I don't like about the syntax you propose is that it creates
an ambiguity in the ragel language itself. When you parse % is it
associated with the tree on the left or the tree on the right? Right now
all embedding operators are currently of this form:

<expr> <op> <action>

and this syntax changes that.

Also note that you can achieve the same thing using the existing
language by putting "" in front of %. Like this:

machine_a = machine_b ( ""%action_b machine_c );

So that brings up an interesting point. The line directly above is
another way to emulate the old semantics of >.

-Adrian

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20070720/64309d04/attachment-0001.sig>

From cmantu... at gmail.com  Fri Jul 20 15:00:29 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Fri, 20 Jul 2007 11:00:29 -0400
Subject: [ragel-users] Re: Bug or feature?
In-Reply-To: <46A0504E.6020503@cs.queensu.ca>
References: <cb2ad8b50707132335j2b71486ara2c50949932c4...@mail.gmail.com>
	 <cb2ad8b50707141422n51e6fd18h453c0b543e12c...@mail.gmail.com>
	 <cb2ad8b50707141423s143ee837v820d00ab824fa...@mail.gmail.com>
	 <824544157-1184450505-cardhu_decombobulator_blackberry.rim.net-7318769...@bxe123.bisx.prod.on.blackberry>
	 <cb2ad8b50707141520w2c37f0aic8811bd7101d7...@mail.gmail.com>
	 <769225302-1184453157-cardhu_decombobulator_blackberry.rim.net-12595165...@bxe123.bisx.prod.on.blackberry>
	 <cb2ad8b50707141555h363f8c4xebeef95aa24eb...@mail.gmail.com>
	 <46A02C81.4060...@cs.queensu.ca>
	 <cb2ad8b50707192146t85e3448ve2d95f34200b...@mail.gmail.com>
	 <46A0504E.6020...@cs.queensu.ca>
Message-ID: <cb2ad8b50707200800g3a31eaf9nf54eff12e757469d@mail.gmail.com>

On 7/20/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> Carlos Antunes wrote:
> > machine_a = machine_b %action_b machine_c
> >
> > Now, this is semantically equivalent to (assuming that ">" is really
> > associated with the start state:
> >
> > machine_a = machine_b  machine_c >action_b
>
> They are not quite equivalent. Consider the case of machine_c accepting
> the zero-length word (start state is final). Then action_b will be a
> pending out action of machine_a.
>

Adrian, my point is that when the start and final states are one and
the same, there is no difference between "pending in" and "pending
out". In the example above, and using the old semantics, ">action_b"
may indeed represent a "pending out". But this is consistent with what
I've said: there is no semantic difference between "pending_in" and
"pending_out" when start and final states are one and the same. And
the empty machine just so happens to have a start state
indistinguishable from a final one, no?

>
> One thing I don't like about the syntax you propose is that it creates
> an ambiguity in the ragel language itself. When you parse % is it
> associated with the tree on the left or the tree on the right?
>

At the end of the day, I don't think it matters. The end result, from
a semantic point of view, is the same. After all, from a semantic
point of view "(expr1 %action) expr2" is the same as "expr1 (%action
expr2)".

>
>Right now all embedding operators are currently of this form:
>
> <expr> <op> <action>
>
> and this syntax changes that.
>

Yes, you are right.

>
> Also note that you can achieve the same thing using the existing
> language by putting "" in front of %. Like this:
>
> machine_a = machine_b ( ""%action_b machine_c );
>
> So that brings up an interesting point. The line directly above is
> another way to emulate the old semantics of >.
>

Indeed and that is, right now, the best practical way to recover the
old semantics.

However, allow me to be mathematical one more time:

machine_a = machine_b ( ""%action_b machine_c )

<=> machine_a = ( machine_b ""%action_b ) machine_c

<=> machine_a = ( machine_b "" ) %action_b machine_c

<=> machine_a = ( machine_b ) %action_b machine_c

<=> machine_a = machine_b ( %action_b machine_c)

Obviously, "<=>" refers to semantic rather than syntactic equivalence.
But the end result is always the same: no difference in the way the
FSM "sees" the "%" operator. In reality, I guess one could call it
simply the "transition between machines" operator because that's the
way a FSM sees it. The ">" in the old semantics would simply be a
redundant beast.

However, I understand the syntactic simplicity of "<expr> <op>
<action>" and, as much as I think it would be cool, it is not that
important from a practical point of view. Maybe, as a suggestion, you
could mention the ( "" %action ) trick in the documentation?

Thanks!

Carlos

-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From thurs... at cs.queensu.ca  Fri Jul 20 16:16:10 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Fri, 20 Jul 2007 12:16:10 -0400
Subject: [ragel-users] Re: Bug or feature?
In-Reply-To: <cb2ad8b50707200800g3a31eaf9nf54eff12e757469d@mail.gmail.com>
References: <cb2ad8b50707132335j2b71486ara2c50949932c4b60@mail.gmail.com> <cb2ad8b50707141422n51e6fd18h453c0b543e12cc32@mail.gmail.com> <cb2ad8b50707141423s143ee837v820d00ab824faf0f@mail.gmail.com> <824544157-1184450505-cardhu_decombobulator_blackberry.rim.net-731876917-@bxe123.bisx.prod.on.blackberry> <cb2ad8b50707141520w2c37f0aic8811bd7101d72b5@mail.gmail.com> <769225302-1184453157-cardhu_decombobulator_blackberry.rim.net-1259516554-@bxe123.bisx.prod.on.blackberry> <cb2ad8b50707141555h363f8c4xebeef95aa24eba8d@mail.gmail.com> <46A02C81.4060307@cs.queensu.ca> <cb2ad8b50707192146t85e3448ve2d95f34200b06a@mail.gmail.com> <46A0504E.6020503@cs.queensu.ca> <cb2ad8b50707200800g3a31eaf9nf54eff12e757469d@mail.gmail.com>
Message-ID: <46A0DFCA.2000604@cs.queensu.ca>


Carlos Antunes wrote:
> Adrian, my point is that when the start and final states are one and
> the same, there is no difference between "pending in" and "pending
> out". In the example above, and using the old semantics, ">action_b"
> may indeed represent a "pending out". But this is consistent with what
> I've said: there is no semantic difference between "pending_in" and
> "pending_out" when start and final states are one and the same. And
> the empty machine just so happens to have a start state
> indistinguishable from a final one, no?

Yes, that's right. I do like the idea of reducing the number of
operators and if I were to redesign ragel from the ground up this kind
of operator would be something to consider.

It would depend on the whole redesign, but I think a starting operator
(the current semantics) could still be desirable. Consider:

m1 = ':';
m2 = [a-z]*;

action act1 { printf( "first char of m2 is %c\n", *p ); }

m = m1 ""%act1 m2 '\n';

Just to be clear, this is equivalent to the old semantics of >. With
this you get the message on the newline in the case that m2 matches
nothing, which is wrong. You have to refactor things in order to "fight"
the behaviour of the operator. I don't like that. I'd rather you have to
refactor things to add the above effect when you want it. This is one of
the reasons for me simplifying > and making it go ONLY on the first
characters of the machine, not also on pending out actions when the
start state is final.

> However, I understand the syntactic simplicity of "<expr> <op>
> <action>" and, as much as I think it would be cool, it is not that
> important from a practical point of view. Maybe, as a suggestion, you
> could mention the ( "" %action ) trick in the documentation?

I think a ragel "tricks/hacks" section would be good. I can think of
other stuff to put in there :)

-Adrian

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20070720/cf9cbefd/attachment-0001.sig>

From thurs... at cs.queensu.ca  Fri Jul 20 18:58:33 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Fri, 20 Jul 2007 14:58:33 -0400
Subject: renaming the ">" operator
Message-ID: <46A105D9.6010100@cs.queensu.ca>

Hi,

Looking at a couple discussions on this list I realize that the ">"
operator needs to be renamed. The current name "entering" suggests that
it is symmetrical with the leaving operator. In fact, it once was, so
back then it was a good name.

But the semantics have since changed and the name should have been
changed along with the semantics. Since it is now closer to being
symmetrical with the finishing transition operator it should be named
"starting".

So now the transition-based embedding operators are like this:

">" - starting a machine - transitions leaving the start state
"@" - finishing a machine - transitions into a final state
"%" - leaving a machine - transitions out of a final state
"$" - all transitions

Now in the case that the start state is final we can say that it is
possible to "leave" the machine without ever "starting" it and it
doesn't sound as much like a contradiction. After all, you can leave a
lot of things without actually starting them :)

Regards,
 Adrian

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20070720/62404cc5/attachment-0001.sig>

From cmantu... at gmail.com  Mon Jul 23 13:27:59 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Mon, 23 Jul 2007 09:27:59 -0400
Subject: [ragel-users] renaming the ">" operator
In-Reply-To: <46A105D9.6010100@cs.queensu.ca>
References: <46A105D9.6010...@cs.queensu.ca>
Message-ID: <cb2ad8b50707230627q6d557f72v9f076a103236cfcb@mail.gmail.com>

On 7/20/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>
> Since it is now closer to being symmetrical with the finishing transition operator
> it should be named "starting".
>

Yeap, make sense.

>
> ">" - starting a machine - transitions leaving the start state
>

I guess you could include a note in the docs mentioning that if the
start and final states are one and the same, ">" won't apply, maybe?

Carlos

-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From thurs... at cs.queensu.ca  Mon Jul 23 14:49:30 2007
From: thurs... at cs.queensu.ca (=?utf-8?B?QWRyaWFuIFRodXJzdG9u?=)
Date: Mon, 23 Jul 2007 14:49:30 +0000
Subject: [ragel-users] Re: renaming the ">" operator
In-Reply-To: <cb2ad8b50707230627q6d557f72v9f076a103236cfcb@mail.gmail.com>
References: <46A105D9.6010100@cs.queensu.ca><cb2ad8b50707230627q6d557f72v9f076a103236cfcb@mail.gmail.com>
Message-ID: <2051553119-1185202150-cardhu_decombobulator_blackberry.rim.net-1605775854-@bxe121.bisx.prod.on.blackberry>

I think it's already mentioned in the description of ">". Except I speak about "bypassing" the machine in case the start state is final. 

Adrian
-----Original Message-----
From: "Carlos Antunes" <cmantunes at gmail.com>

Date: Mon, 23 Jul 2007 09:27:59 
To:ragel-users at googlegroups.com
Subject: [ragel-users] Re: renaming the ">" operator



On 7/20/07, Adrian Thurston <thurston at cs.queensu.ca> wrote:
>
> Since it is now closer to being symmetrical with the finishing transition operator
> it should be named "starting".
>

Yeap, make sense.

>
> ">" - starting a machine - transitions leaving the start state
>

I guess you could include a note in the docs mentioning that if the
start and final states are one and the same, ">" won't apply, maybe?

Carlos

-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson




From cmantu... at gmail.com  Mon Jul 23 15:15:05 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Mon, 23 Jul 2007 11:15:05 -0400
Subject: [ragel-users] Re: renaming the ">" operator
In-Reply-To: <2051553119-1185202150-cardhu_decombobulator_blackberry.rim.net-1605775854-@bxe121.bisx.prod.on.blackberry>
References: <46A105D9.6010...@cs.queensu.ca>
	 <cb2ad8b50707230627q6d557f72v9f076a103236c...@mail.gmail.com>
	 <2051553119-1185202150-cardhu_decombobulator_blackberry.rim.net-16057758...@bxe121.bisx.prod.on.blackberry>
Message-ID: <cb2ad8b50707230815t357fe2b3o80ecf677e1dbc7b1@mail.gmail.com>

On 7/23/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
> I think it's already mentioned in the description of ">". Except I speak about "bypassing" the machine in case the start state is final.
>

The "bypass" word suggests, to me at least, that the machine is
entirely bypassed and absolutely no action would be performed,
including those associated with "%".

Carlos

-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From stephenhorne... at aol.com  Sun Jul 22 23:07:24 2007
From: stephenhorne... at aol.com (Steve Horne)
Date: Sun, 22 Jul 2007 16:07:24 -0700
Subject: Stack handling for fcall and fret
Message-ID: <1185145644.396780.96820@r34g2000hsd.googlegroups.com>

I was recently toying with the idea of using Ragel to create a
recursive descent parser. I figured that for simple DSLs, this would
be convenient - allowing the scanner and parser to be developed using
the same language and tools. While thinking about this, I noticed a
wider issue with Ragels stack handling.

The stack consists of the user-defined variables 'stack' and 'top',
with presumably 'top' being a stack pointer subscript into 'stack'.
Fine - but Ragel doesn't appear to know how big the stack is, and
therefore cannot detect when it is full.

This is a problem for recursive descent parsing as there is no way to
resize the stack when needed, but then I'm not sure Ragel can handle
recursive descent parsing of expressions etc anyway. But potential
stack overflow is also a wider problem.

I understand that Ragel is being used to generate protocol handlers,
where security is potentially a major concern. A stack overflow is
basically a buffer overflow, which is of course the classic security
flaw.

Most likely this is a phantom issue - such code probably doesn't use
fcall/fret and doesn't have a stack at all. Even if it does, in many
cases the stack will have a fixed maximum possible size (though you
are still dependent on the user working this out accurately).

Even so, having a mechanism to allow the push and pop code to be
modified seems like a good idea. Maybe something like...

  %%stack push { stk.push ( $ );  }
  %%stack pop { $ = stk.pop ();  }

In the above, the content of the braces is like action code, except
that the '$' is replaced by the source/target expression by Ragel.

Also, could you add a small section to the "Interface to Host" section
of the manual, that lists all the variables that the user may need to
declare (cs, p, pe etc) with short descriptions and links to
appropriate sections of the manual.

I find that I tend to work out all the regular expression stuff first,
and then come back to add actions and code later. It's so easy to
forget that, for instance, since I used a |* ... *| construct I need
the 'act' variable - tokstart and tokend I always remember, but act
loves to drive me mad!


From thurs... at cs.queensu.ca  Mon Jul 23 15:24:38 2007
From: thurs... at cs.queensu.ca (=?utf-8?B?QWRyaWFuIFRodXJzdG9u?=)
Date: Mon, 23 Jul 2007 15:24:38 +0000
Subject: [ragel-users] Stack handling for fcall and fret
In-Reply-To: <1185145644.396780.96820@r34g2000hsd.googlegroups.com>
References: <1185145644.396780.96820@r34g2000hsd.googlegroups.com>
Message-ID: <403679371-1185204259-cardhu_decombobulator_blackberry.rim.net-912206922-@bxe121.bisx.prod.on.blackberry>

When I first made fcall/fret I only imagined a fixed size stack as being useful, but now I recognise this as an issue. People want to handle simple recursion of arbitrary depth. Someting to this effect is in the TODO but as usual I haven't gotten around to it.  Public requests always speed things up though. :)

In regards to the new section that's already done. It will be there in the next release. 

Adrian

-----Original Message-----
From: Steve Horne <stephenhorne100 at aol.com>

Date: Sun, 22 Jul 2007 16:07:24 
To:ragel-users <ragel-users at googlegroups.com>
Subject: [ragel-users] Stack handling for fcall and fret



I was recently toying with the idea of using Ragel to create a
recursive descent parser. I figured that for simple DSLs, this would
be convenient - allowing the scanner and parser to be developed using
the same language and tools. While thinking about this, I noticed a
wider issue with Ragels stack handling.

The stack consists of the user-defined variables 'stack' and 'top',
with presumably 'top' being a stack pointer subscript into 'stack'.
Fine - but Ragel doesn't appear to know how big the stack is, and
therefore cannot detect when it is full.

This is a problem for recursive descent parsing as there is no way to
resize the stack when needed, but then I'm not sure Ragel can handle
recursive descent parsing of expressions etc anyway. But potential
stack overflow is also a wider problem.

I understand that Ragel is being used to generate protocol handlers,
where security is potentially a major concern. A stack overflow is
basically a buffer overflow, which is of course the classic security
flaw.

Most likely this is a phantom issue - such code probably doesn't use
fcall/fret and doesn't have a stack at all. Even if it does, in many
cases the stack will have a fixed maximum possible size (though you
are still dependent on the user working this out accurately).

Even so, having a mechanism to allow the push and pop code to be
modified seems like a good idea. Maybe something like...

  %%stack push { stk.push ( $ );  }
  %%stack pop { $ = stk.pop ();  }

In the above, the content of the braces is like action code, except
that the '$' is replaced by the source/target expression by Ragel.

Also, could you add a small section to the "Interface to Host" section
of the manual, that lists all the variables that the user may need to
declare (cs, p, pe etc) with short descriptions and links to
appropriate sections of the manual.

I find that I tend to work out all the regular expression stuff first,
and then come back to add actions and code later. It's so easy to
forget that, for instance, since I used a |* ... *| construct I need
the 'act' variable - tokstart and tokend I always remember, but act
loves to drive me mad!





From stephenhorne... at aol.com  Mon Jul 23 19:46:22 2007
From: stephenhorne... at aol.com (Steve Horne)
Date: Mon, 23 Jul 2007 12:46:22 -0700
Subject: Stack handling for fcall and fret
In-Reply-To: <403679371-1185204259-cardhu_decombobulator_blackberry.rim.net-912206922-@bxe121.bisx.prod.on.blackberry>
References: <1185145644.396780.96820@r34g2000hsd.googlegroups.com>
   <403679371-1185204259-cardhu_decombobulator_blackberry.rim.net-912206922-@bxe121.bisx.prod.on.blackberry>
Message-ID: <1185219982.695587.21350@k79g2000hse.googlegroups.com>

Thanks.

Don't put too much priority on the stack thing, though - I don't have
any real immediate need.


From thurs... at cs.queensu.ca  Tue Jul 24 21:38:14 2007
From: thurs... at cs.queensu.ca (Adrian Thurston)
Date: Tue, 24 Jul 2007 17:38:14 -0400
Subject: ragel 5.23 released
Message-ID: <46A67146.7020209@cs.queensu.ca>

Hi,

Ragel 5.23 has been released. It includes updates to the documentation
and changes to the Ruby code generator. Ola Bini reports considerable
speed improvements with the elimination of callcc.

This will be the last development release of the 5.X line. I am going to
begin work on version 6.

Cheers,
 Adrian




-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: OpenPGP digital signature
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20070724/73e63e94/attachment-0001.sig>

From cmantu... at gmail.com  Tue Jul 24 21:57:51 2007
From: cmantu... at gmail.com (Carlos Antunes)
Date: Tue, 24 Jul 2007 17:57:51 -0400
Subject: [ragel-users] ragel 5.23 released
In-Reply-To: <46A67146.7020209@cs.queensu.ca>
References: <46A67146.7020...@cs.queensu.ca>
Message-ID: <cb2ad8b50707241457y111b1b88pbe45dee0248b51ce@mail.gmail.com>

On 7/24/07, Adrian Thurston <thurs... at cs.queensu.ca> wrote:
>
> I am going to begin work on version 6.
>

Yippee! :)

-- 
"We hold [...] that all men are created equal; that they are
endowed [...] with certain inalienable rights; that among
these are life, liberty, and the pursuit of happiness"
        -- Thomas Jefferson


From stephenhorne... at aol.com  Wed Jul 25 08:04:05 2007
From: stephenhorne... at aol.com (Steve Horne)
Date: Wed, 25 Jul 2007 01:04:05 -0700
Subject: ragel 5.23 released
In-Reply-To: <46A67146.7020209@cs.queensu.ca>
References: <46A67146.7020209@cs.queensu.ca>
Message-ID: <1185350645.365300.67370@w3g2000hsg.googlegroups.com>


On Jul 24, 10:38 pm, Adrian Thurston <thurs... at cs.queensu.ca> wrote:

> This will be the last development release of the 5.X line. I am going to
> begin work on version 6.

Probably a good time to make a few suggestions then...

First, any chance of a new built-in machine? - one that never matches
anything? The idea is to use it in placeholder rules, that will be
filled in later - options that aren't implemented yet.

Second, consider this fragment of the code generated by Ragel in
response to a 'write data' command...

static const char _mwt_scn2_actions[] = {
  <blah>
};

First the really trivial issue - according to the C and C++ standards,
identifiers beginning with an underscore or containing a double-
underscore anywhere are reserved (non-standard keywords and standard
library stuff). A trailing single underscore is perfectly fine,
however. Yes, I know, sorry, I can't help it.

More significantly, this cannot be embedded in a class or struct, at
least in some compilers (Microsoft VC++ 2003 being the case in point).
There was an older approach to this kind of thing, where the static
const data is declared in the class but defined (given values)
outside, and usually in the .cpp file rather than the header. Syntax
is IIRC...

class classname
{
  static const int membername;
};
...
static const int classname::membername = 5;

(not quite 100% on this - not sure if the 'static' should be repeated)

I'm not really clear on the state of this in the standard. Certainly,
more recent compilers can cope with static const data in the class
definition, but I don't know if there are any limitations. In any
case, it might be useful to some (i.e. me) if you could have 'write
data declarations' and 'write data definitions in scopename' or
similar options.

But only if it's easy, of course - there's plenty of ways of working
around this issue. I tend to just put the 'write data' in a global
area ATM.


