From adrian.thurston at esentire.com  Thu Apr  1 14:27:01 2010
From: adrian.thurston at esentire.com (Adrian Thurston)
Date: Thu, 01 Apr 2010 10:27:01 -0400
Subject: [ragel-users] Example of RFC822 address parser?
In-Reply-To: <E552B5A5-DC0B-463B-A9AF-3F30922120E2@360vl.com>
References: <E552B5A5-DC0B-463B-A9AF-3F30922120E2@360vl.com>
Message-ID: <4BB4AD35.8070504@esentire.com>

Sorry I don't know of one.

-Adrian

Landon Cox wrote:
> 
> Can anyone point me to an example of a Ragel parser (any target language 
> will do) for parsing the address specification for an RFC822 email 
> address?  Looking not to reinvent, cob, if possible.
> 
> Landon
> 
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users
> 

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From landon at 360vl.com  Thu Apr  1 14:47:47 2010
From: landon at 360vl.com (Landon Cox)
Date: Thu, 1 Apr 2010 08:47:47 -0600
Subject: [ragel-users] Example of RFC822 address parser?
In-Reply-To: <4BB4AD35.8070504@esentire.com>
References: <E552B5A5-DC0B-463B-A9AF-3F30922120E2@360vl.com>
	<4BB4AD35.8070504@esentire.com>
Message-ID: <9E6F2CDD-9D45-4FDD-BB8F-6C6AF86898CE@360vl.com>

On Apr 1, 2010, at 8:27 AM, Adrian Thurston wrote:

> Sorry I don't know of one.
>
> -Adrian

Thanks, Adrian, good to know I'm not missing something obvious that's  
already been done.

Landon

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From landon at 360vl.com  Fri Apr  9 16:48:07 2010
From: landon at 360vl.com (Landon Cox)
Date: Fri, 9 Apr 2010 10:48:07 -0600
Subject: [ragel-users] pronounciation
Message-ID: <B5191CEC-8574-491C-86D8-D718EDF28C35@360vl.com>

Hi Adrian and others,

Simple question:  What is the pronunciation of "Ragel"?

Is it "Ray-Gull" or "Rag-El" (like dish rag) or "Rage-El" ?

Thanks,

Landon

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From thurston at complang.org  Sat Apr 10 16:01:50 2010
From: thurston at complang.org (Adrian Thurston)
Date: Sat, 10 Apr 2010 12:01:50 -0400
Subject: [ragel-users] pronounciation
In-Reply-To: <B5191CEC-8574-491C-86D8-D718EDF28C35@360vl.com>
References: <B5191CEC-8574-491C-86D8-D718EDF28C35@360vl.com>
Message-ID: <4BC0A0EE.70202@complang.org>

Hi Landon, I usually say something like "rah-ghel." I had no phonetic 
basis for it when I picked it. I just took my nickname "Age" and wrapped 
it in the R and L of regular languages. I've since learned that it means 
"man" in Arabic.

Adrian

Landon Cox wrote:
> Hi Adrian and others,
> 
> Simple question:  What is the pronunciation of "Ragel"?
> 
> Is it "Ray-Gull" or "Rag-El" (like dish rag) or "Rage-El" ?
> 
> Thanks,
> 
> Landon
> 
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From joe at elusive.cx  Wed Apr 21 22:44:49 2010
From: joe at elusive.cx (Joe Wildish)
Date: Wed, 21 Apr 2010 23:44:49 +0100
Subject: [ragel-users] Maintaining char & line counts in a scanner
Message-ID: <60716CE1-81D9-48A2-AD94-26025AC7176C@elusive.cx>

Hi All,

I'm using ragel as a scanner to tokenise input for parsing of a database query language. I'd like to maintain a line number and character offset in the struct that represents a matched token but I'm having a little difficulty.

My question is this: Is it possible to define a match for a expression (e.g. a newline), but to have that expression match NOT consume the input, and instead pass the input on to other expressions? At the same time, the original expression would execute a user action.

My idea would be to have two expressions - one that matches a newline and one that matches any other character. Clearly there would be an associated action with these expressions to maintain variables for the line and char count. Currently I have various expressions, some of which can potentially match multiple newlines (think multi-line comments), and some of which consume dead input (whitespace). I have played around keeping a tally of the counts on each successful match of a token (outside of the machine exex), but as in some cases I am discarding input completely within the state machine and not creating a token, it becomes difficult to track.... ideally, I'd like to keep it all within the machine, but can't see the best way to proceed.

Any help or pointers would be much appreciated.

Cheers,
-Joe
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From adrian.thurston at esentire.com  Fri Apr 23 18:31:12 2010
From: adrian.thurston at esentire.com (Adrian Thurston)
Date: Fri, 23 Apr 2010 14:31:12 -0400
Subject: [ragel-users] Maintaining char & line counts in a scanner
In-Reply-To: <60716CE1-81D9-48A2-AD94-26025AC7176C@elusive.cx>
References: <60716CE1-81D9-48A2-AD94-26025AC7176C@elusive.cx>
Message-ID: <4BD1E770.1080802@esentire.com>

Hi Joe,

There are a few approaches to this problem. The simplest approach is to 
simply count newlines in the matched text in every match action. The 
downside to this is that you are passing over everything twice.

If a second pass over each token is something you'd like to avoid, then 
you can go down the sub-scanner road. Basically, any pattern that can 
contain a newline, such as multi-line comments, or strings, can be 
implemented with a sub-scanner. In the main scanner you write a pattern 
for whatever sequence of characters takes you into comments, for 
example, then jump into a separate scanner for comments. You end up with 
broken down comments though, as opposed to a whole match of a comment.

A third approach is to write patterns that count newlines as they go. 
This is my favourite approach. The only worry is backtracking. If your 
scanner patterns backtrack over newlines, then you've got double 
counting happening. With a well-designed scanner, this isn't normally a 
problem though. Try something like this:

counter = ( any | '\n' @inc )*;
comment = ( '/*' any* :>> '*/' ) & counter;

Or embed the counting deep:

comment = ( '/*' ( any | '\n' @inc )* :>> '*/' ) & counter;

-Adrian

> Hi All,
> 
> I'm using ragel as a scanner to tokenise input for parsing of a database query language. I'd like to maintain a line number and character offset in the struct that represents a matched token but I'm having a little difficulty.
> 

> 
> My idea would be to have two expressions - one that matches a newline and one that matches any other character. Clearly there would be an associated action with these expressions to maintain variables for the line and char count. Currently I have various expressions, some of which can potentially match multiple newlines (think multi-line comments), and some of which consume dead input (whitespace). I have played around keeping a tally of the counts on each successful match of a token (outside of the machine exex), but as in some cases I am discarding input completely within the state machine and not creating a token, it becomes difficult to track.... ideally, I'd like to keep it all within the machine, but can't see the best way to proceed.
> 
> Any help or pointers would be much appreciated.
> 
> Cheers,
> -Joe
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users
> 

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From joe at elusive.cx  Sun Apr 25 15:18:26 2010
From: joe at elusive.cx (Joe Wildish)
Date: Sun, 25 Apr 2010 16:18:26 +0100
Subject: [ragel-users] Maintaining char & line counts in a scanner
In-Reply-To: <4BD1E770.1080802@esentire.com>
References: <60716CE1-81D9-48A2-AD94-26025AC7176C@elusive.cx>
	<4BD1E770.1080802@esentire.com>
Message-ID: <3E3BA333-8D5A-4443-85E2-6908DFDD0386@elusive.cx>

Hi Adrian,

Thanks for the response. I agree that the third approach you mention is the most elegant. Having said all that, I've just finished implementing the counters with a second pass (ie. the first approach).

The reason is that I actually want to record the starting positions (line & column) *and* the ending positions for each token. I therefore played around with having an action on entry that recorded the existing positions, and a final action that then wrote the starting and ending positions into the token struct... however, I started to get myself confused with how the backtracking might come into play, so opted to take the whole counting-malarky outside of the machine :) I may well revisit this, but have since moved onto the cfg parser as the second-pass approach actually does work OK... it's just not as "nice" as keeping it all self-contained in the machine. 

A quick question though; regarding your examples below, are you suggesting that the use of the intersection means that the backtracking won't occur? 

Many thanks,

-Joe

On 23 Apr 2010, at 19:31, Adrian Thurston wrote:

> Hi Joe,
> 
> There are a few approaches to this problem. The simplest approach is to simply count newlines in the matched text in every match action. The downside to this is that you are passing over everything twice.
> 
> If a second pass over each token is something you'd like to avoid, then you can go down the sub-scanner road. Basically, any pattern that can contain a newline, such as multi-line comments, or strings, can be implemented with a sub-scanner. In the main scanner you write a pattern for whatever sequence of characters takes you into comments, for example, then jump into a separate scanner for comments. You end up with broken down comments though, as opposed to a whole match of a comment.
> 
> A third approach is to write patterns that count newlines as they go. This is my favourite approach. The only worry is backtracking. If your scanner patterns backtrack over newlines, then you've got double counting happening. With a well-designed scanner, this isn't normally a problem though. Try something like this:
> 
> counter = ( any | '\n' @inc )*;
> comment = ( '/*' any* :>> '*/' ) & counter;
> 
> Or embed the counting deep:
> 
> comment = ( '/*' ( any | '\n' @inc )* :>> '*/' ) & counter;
> 
> -Adrian


_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From adrian.thurston at esentire.com  Thu Apr  1 14:27:01 2010
From: adrian.thurston at esentire.com (Adrian Thurston)
Date: Thu, 01 Apr 2010 10:27:01 -0400
Subject: [ragel-users] Example of RFC822 address parser?
In-Reply-To: <E552B5A5-DC0B-463B-A9AF-3F30922120E2@360vl.com>
References: <E552B5A5-DC0B-463B-A9AF-3F30922120E2@360vl.com>
Message-ID: <4BB4AD35.8070504@esentire.com>

Sorry I don't know of one.

-Adrian

Landon Cox wrote:
> 
> Can anyone point me to an example of a Ragel parser (any target language 
> will do) for parsing the address specification for an RFC822 email 
> address?  Looking not to reinvent, cob, if possible.
> 
> Landon
> 
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users
> 

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From landon at 360vl.com  Thu Apr  1 14:47:47 2010
From: landon at 360vl.com (Landon Cox)
Date: Thu, 1 Apr 2010 08:47:47 -0600
Subject: [ragel-users] Example of RFC822 address parser?
In-Reply-To: <4BB4AD35.8070504@esentire.com>
References: <E552B5A5-DC0B-463B-A9AF-3F30922120E2@360vl.com>
	<4BB4AD35.8070504@esentire.com>
Message-ID: <9E6F2CDD-9D45-4FDD-BB8F-6C6AF86898CE@360vl.com>

On Apr 1, 2010, at 8:27 AM, Adrian Thurston wrote:

> Sorry I don't know of one.
>
> -Adrian

Thanks, Adrian, good to know I'm not missing something obvious that's  
already been done.

Landon

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From landon at 360vl.com  Fri Apr  9 16:48:07 2010
From: landon at 360vl.com (Landon Cox)
Date: Fri, 9 Apr 2010 10:48:07 -0600
Subject: [ragel-users] pronounciation
Message-ID: <B5191CEC-8574-491C-86D8-D718EDF28C35@360vl.com>

Hi Adrian and others,

Simple question:  What is the pronunciation of "Ragel"?

Is it "Ray-Gull" or "Rag-El" (like dish rag) or "Rage-El" ?

Thanks,

Landon

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From thurston at complang.org  Sat Apr 10 16:01:50 2010
From: thurston at complang.org (Adrian Thurston)
Date: Sat, 10 Apr 2010 12:01:50 -0400
Subject: [ragel-users] pronounciation
In-Reply-To: <B5191CEC-8574-491C-86D8-D718EDF28C35@360vl.com>
References: <B5191CEC-8574-491C-86D8-D718EDF28C35@360vl.com>
Message-ID: <4BC0A0EE.70202@complang.org>

Hi Landon, I usually say something like "rah-ghel." I had no phonetic 
basis for it when I picked it. I just took my nickname "Age" and wrapped 
it in the R and L of regular languages. I've since learned that it means 
"man" in Arabic.

Adrian

Landon Cox wrote:
> Hi Adrian and others,
> 
> Simple question:  What is the pronunciation of "Ragel"?
> 
> Is it "Ray-Gull" or "Rag-El" (like dish rag) or "Rage-El" ?
> 
> Thanks,
> 
> Landon
> 
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From joe at elusive.cx  Wed Apr 21 22:44:49 2010
From: joe at elusive.cx (Joe Wildish)
Date: Wed, 21 Apr 2010 23:44:49 +0100
Subject: [ragel-users] Maintaining char & line counts in a scanner
Message-ID: <60716CE1-81D9-48A2-AD94-26025AC7176C@elusive.cx>

Hi All,

I'm using ragel as a scanner to tokenise input for parsing of a database query language. I'd like to maintain a line number and character offset in the struct that represents a matched token but I'm having a little difficulty.

My question is this: Is it possible to define a match for a expression (e.g. a newline), but to have that expression match NOT consume the input, and instead pass the input on to other expressions? At the same time, the original expression would execute a user action.

My idea would be to have two expressions - one that matches a newline and one that matches any other character. Clearly there would be an associated action with these expressions to maintain variables for the line and char count. Currently I have various expressions, some of which can potentially match multiple newlines (think multi-line comments), and some of which consume dead input (whitespace). I have played around keeping a tally of the counts on each successful match of a token (outside of the machine exex), but as in some cases I am discarding input completely within the state machine and not creating a token, it becomes difficult to track.... ideally, I'd like to keep it all within the machine, but can't see the best way to proceed.

Any help or pointers would be much appreciated.

Cheers,
-Joe
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From adrian.thurston at esentire.com  Fri Apr 23 18:31:12 2010
From: adrian.thurston at esentire.com (Adrian Thurston)
Date: Fri, 23 Apr 2010 14:31:12 -0400
Subject: [ragel-users] Maintaining char & line counts in a scanner
In-Reply-To: <60716CE1-81D9-48A2-AD94-26025AC7176C@elusive.cx>
References: <60716CE1-81D9-48A2-AD94-26025AC7176C@elusive.cx>
Message-ID: <4BD1E770.1080802@esentire.com>

Hi Joe,

There are a few approaches to this problem. The simplest approach is to 
simply count newlines in the matched text in every match action. The 
downside to this is that you are passing over everything twice.

If a second pass over each token is something you'd like to avoid, then 
you can go down the sub-scanner road. Basically, any pattern that can 
contain a newline, such as multi-line comments, or strings, can be 
implemented with a sub-scanner. In the main scanner you write a pattern 
for whatever sequence of characters takes you into comments, for 
example, then jump into a separate scanner for comments. You end up with 
broken down comments though, as opposed to a whole match of a comment.

A third approach is to write patterns that count newlines as they go. 
This is my favourite approach. The only worry is backtracking. If your 
scanner patterns backtrack over newlines, then you've got double 
counting happening. With a well-designed scanner, this isn't normally a 
problem though. Try something like this:

counter = ( any | '\n' @inc )*;
comment = ( '/*' any* :>> '*/' ) & counter;

Or embed the counting deep:

comment = ( '/*' ( any | '\n' @inc )* :>> '*/' ) & counter;

-Adrian

> Hi All,
> 
> I'm using ragel as a scanner to tokenise input for parsing of a database query language. I'd like to maintain a line number and character offset in the struct that represents a matched token but I'm having a little difficulty.
> 

> 
> My idea would be to have two expressions - one that matches a newline and one that matches any other character. Clearly there would be an associated action with these expressions to maintain variables for the line and char count. Currently I have various expressions, some of which can potentially match multiple newlines (think multi-line comments), and some of which consume dead input (whitespace). I have played around keeping a tally of the counts on each successful match of a token (outside of the machine exex), but as in some cases I am discarding input completely within the state machine and not creating a token, it becomes difficult to track.... ideally, I'd like to keep it all within the machine, but can't see the best way to proceed.
> 
> Any help or pointers would be much appreciated.
> 
> Cheers,
> -Joe
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users
> 

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


From joe at elusive.cx  Sun Apr 25 15:18:26 2010
From: joe at elusive.cx (Joe Wildish)
Date: Sun, 25 Apr 2010 16:18:26 +0100
Subject: [ragel-users] Maintaining char & line counts in a scanner
In-Reply-To: <4BD1E770.1080802@esentire.com>
References: <60716CE1-81D9-48A2-AD94-26025AC7176C@elusive.cx>
	<4BD1E770.1080802@esentire.com>
Message-ID: <3E3BA333-8D5A-4443-85E2-6908DFDD0386@elusive.cx>

Hi Adrian,

Thanks for the response. I agree that the third approach you mention is the most elegant. Having said all that, I've just finished implementing the counters with a second pass (ie. the first approach).

The reason is that I actually want to record the starting positions (line & column) *and* the ending positions for each token. I therefore played around with having an action on entry that recorded the existing positions, and a final action that then wrote the starting and ending positions into the token struct... however, I started to get myself confused with how the backtracking might come into play, so opted to take the whole counting-malarky outside of the machine :) I may well revisit this, but have since moved onto the cfg parser as the second-pass approach actually does work OK... it's just not as "nice" as keeping it all self-contained in the machine. 

A quick question though; regarding your examples below, are you suggesting that the use of the intersection means that the backtracking won't occur? 

Many thanks,

-Joe

On 23 Apr 2010, at 19:31, Adrian Thurston wrote:

> Hi Joe,
> 
> There are a few approaches to this problem. The simplest approach is to simply count newlines in the matched text in every match action. The downside to this is that you are passing over everything twice.
> 
> If a second pass over each token is something you'd like to avoid, then you can go down the sub-scanner road. Basically, any pattern that can contain a newline, such as multi-line comments, or strings, can be implemented with a sub-scanner. In the main scanner you write a pattern for whatever sequence of characters takes you into comments, for example, then jump into a separate scanner for comments. You end up with broken down comments though, as opposed to a whole match of a comment.
> 
> A third approach is to write patterns that count newlines as they go. This is my favourite approach. The only worry is backtracking. If your scanner patterns backtrack over newlines, then you've got double counting happening. With a well-designed scanner, this isn't normally a problem though. Try something like this:
> 
> counter = ( any | '\n' @inc )*;
> comment = ( '/*' any* :>> '*/' ) & counter;
> 
> Or embed the counting deep:
> 
> comment = ( '/*' ( any | '\n' @inc )* :>> '*/' ) & counter;
> 
> -Adrian


_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users


