From gerald.gutierrez at gmail.com  Tue Feb  7 02:47:35 2012
From: gerald.gutierrez at gmail.com (Gerald Gutierrez)
Date: Mon, 6 Feb 2012 18:47:35 -0800
Subject: [ragel-users] Web Sequence Diagrams language
Message-ID: <CAPZrZPOaGY=mKbv255WbdiL_5B4t+NG0rXPmKBznuXXwWohTeQ@mail.gmail.com>

There is a very useful web site called
http://www.websequencediagrams.com/that allows you to "write" sequence
diagrams in text and generate the
images. Example text:

A->B: text
A-->B: text
A->B: text
activate B
B-->A: text
deactivate B
A->A: text
alt text1
    A->B: text
else text2
    A->B: text
end

Is this text that Ragel would be able to easily parse?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel/attachments/20120206/dcd4efc8/attachment.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From ivan.reche at gmail.com  Sun Feb 19 21:37:09 2012
From: ivan.reche at gmail.com (Ivan Reche)
Date: Sun, 19 Feb 2012 19:37:09 -0200
Subject: [ragel-users] Action for leaving a machine from a non-final state
Message-ID: <CACRFBJUaGqKjizpGuEz9dQ+-8efrcNM8zKzbJ2ZS53ZO3ReD5A@mail.gmail.com>

Hello there,

I'm using ragel to read peripherals input using a microcontroller. I need
to have two machines: one for parsing commands and the other for storing
data.

Let's suppose that my setup is like this: when the device is turned on, I
know that I'm in command mode and I will parse some ASCII words to
acknowledge the peripheral's state. However, if I get the word *OPEN*,
every character that I received after the second * will be stored as data.
While in this data mode (where I store every character), if I receive the
*CLOS* string, I should NOT store *CLOS* in my data buffer and leave the
data mode (switch to the other machine).

I've accomplished almost everything that I need with this machines, except
the part of not storing the *CLOS* object. My first solution was to just
delete it after a match of *CLOS*, but this causes problems with parallel
execution in my environment because in a give moment I might have data in
my buffer that is not really data.

So I created some locks that will prevent the data machine from storing the
caracters when I begin to match what is a candidate of *CLOS* (example:
*CL). This works fine if the candidate proves to be, indeed, a *CLOS*
string, but I don't know how to associate an action to the event of *CL not
ending up in a *CLOS* (example: *CLabc). At this point, I want to store
*CLabc in my buffer and continue storing characters.

I'm kind of new to Ragel and I'm enjoying it very much. However, I don't
know if I'm doing things in an awkward or if I am indeed in the right track.

How do I achieve what I want to do? Is there a better way?

Cheers,

Ivan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel/attachments/20120219/45d6f81e/attachment.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From ragel-user at jgoettgens.de  Mon Feb 20 13:44:56 2012
From: ragel-user at jgoettgens.de (ragel-user at jgoettgens.de)
Date: Mon, 20 Feb 2012 14:44:56 +0100
Subject: [ragel-users] Action for leaving a machine from a non-final
	state
In-Reply-To: <CACRFBJUaGqKjizpGuEz9dQ+-8efrcNM8zKzbJ2ZS53ZO3ReD5A@mail.gmail.com>
References: <CACRFBJUaGqKjizpGuEz9dQ+-8efrcNM8zKzbJ2ZS53ZO3ReD5A@mail.gmail.com>
Message-ID: <A0AACB583C1540A7A33F5D14E39DA0FE@localdomain>

Ivan,

so you need to mark the beginning and the end of either “command” or “data” mode given the keywords “*OPEN*”  and “*CLOS*”. Right? Once matched it is entirely up to you what to do with the matched text (User Actions, chapter 3). You could post a typical token stream and an outline of your ragel specs. Otherwise it is difficult to see the cause of your problem. 

jg
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel/attachments/20120220/95d39195/attachment.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From ivan.reche at gmail.com  Tue Feb 21 23:27:18 2012
From: ivan.reche at gmail.com (Ivan Reche)
Date: Tue, 21 Feb 2012 21:27:18 -0200
Subject: [ragel-users] Action for leaving a machine from a non-final
	state
In-Reply-To: <A0AACB583C1540A7A33F5D14E39DA0FE@localdomain>
References: <CACRFBJUaGqKjizpGuEz9dQ+-8efrcNM8zKzbJ2ZS53ZO3ReD5A@mail.gmail.com>
	<A0AACB583C1540A7A33F5D14E39DA0FE@localdomain>
Message-ID: <CACRFBJXZ5xx0q9H7av-FS73H-3-9v_wXqFH3cssQLgtwpKOsYA@mail.gmail.com>

2012/2/20 <ragel-user at jgoettgens.de>

>   Ivan,
>
> so you need to mark the beginning and the end of either “command” or
> “data” mode given the keywords “*OPEN*”  and “*CLOS*”. Right? Once matched
> it is entirely up to you what to do with the matched text (User Actions,
> chapter 3). You could post a typical token stream and an outline of your
> ragel specs. Otherwise it is difficult to see the cause of your problem.
>
> jg
>
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users
>

I'm sorry if my post wasn't clear enough.

I've managed to achieve the results that I expect, although I don't know if
it is the most effective way to do it. I'm gonna post it in this e-mail. My
objective is to read the stream of characters between the *OPEN* and *CLOS*
"tokens". Thanks in advance for any tips or insights on this.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

%%{

    machine test;

    action open_found {
        printf("FOUND OPEN\r\n");
        fgoto data;
    }
    action close_found {
        printf("FOUND CLOSE\r\n");
        fgoto main;
    }
    action new_data_char {
        printf("NEW CHAR: %c, lock: %d\n", fc, lock_data);
        if (!lock_data)
            rec[count++] = fc;
    }
    action close_candidate {
        printf("CLOSE CANDIDATE: %c\n", fc);
        lock_data = true;
        cacount = 0;
        fhold; fgoto clos;
    }
    action not_close {
        printf("NOT CLOSE: %c, candidate: %s, cacount: %d\n", fc,
candidate, cacount);
        lock_data = false;
        strncat(rec, candidate, cacount);
        count += cacount;
        fgoto data;
    }
    action store_candidate_char {
        printf("CANDIDATE CHAR: %c\n", fc);
        candidate[cacount++] = fc;
    }

    open = /.*\*OPEN\*/;
    close = /.*\*CLOS\*/;

    main :=
        (open %open_found)+;

    data := /.*\*/ @~new_data_char %~close_candidate;
    clos := /\*CLOS\*/ $/{fbreak;} $store_candidate_char @!(not_close)
@close_found;

}%%

%% write data;

const char *p, *pe, *eof;
int cs;
const char *ts, *te;
int act;
int stack[128] = {0};
int top;

char rec[1024] = {0};
unsigned int count = 0;
char candidate[1024] = {0};;
unsigned int cacount = 0;
bool lock_data = false;

bool parse(const char * str) {
    p = str; pe = str + strlen(str); eof = pe;

    %% write exec;

    return true;
}

int main(int argc, char **argv) {
    char buf[2048] =
"aaaaaaaaaa*OPEN*bbbbbbbb*CLbbbbbbbbb*CLOS*aaaaaaaaaaaaaaaaaaaa";

    %% write init;

    parse(buf);

    printf("data[%d] = %s\n", count, rec);
    return 0;
}
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel/attachments/20120221/b2aabe79/attachment.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From silverdirk-rgl at silverdirk.com  Tue Feb 28 16:47:31 2012
From: silverdirk-rgl at silverdirk.com (M Conrad)
Date: Tue, 28 Feb 2012 11:47:31 -0500
Subject: [ragel-users] Action for leaving a machine from a non-final
	state
In-Reply-To: <CACRFBJXZ5xx0q9H7av-FS73H-3-9v_wXqFH3cssQLgtwpKOsYA@mail.gmail.com>
References: <CACRFBJUaGqKjizpGuEz9dQ+-8efrcNM8zKzbJ2ZS53ZO3ReD5A@mail.gmail.com>
	<A0AACB583C1540A7A33F5D14E39DA0FE@localdomain>
	<CACRFBJXZ5xx0q9H7av-FS73H-3-9v_wXqFH3cssQLgtwpKOsYA@mail.gmail.com>
Message-ID: <op.waed9hmkah38gt@osangar.int.intellitree.com>

There's lots of ways to accomplish what you want, and it's hard to say if
one way is really better than another, but my favorite way to work with
these sorts of problems is to have all my data in one buffer, and then use
pointers to mark the bounds.

So, instead of copying one character at a time, and "goto" bouncing
between states, I would

     open = /.*\*OPEN\*/ %{ start_of_data= p; };
     close = /\*CLOS\*/ >{ if (!end_of_data) end_of_data= p; }
         @!{ end_of_data= NULL; }
         %{ process_data(); start_of_data= end_of_data= NULL; fret; };
     data := . | close;

end_of_data gets set every time the machine sees a "*", but then if it
doesn't complete the pattern it will get set again later.  Meanwhile, you
need to keep enlarging the buffer in other code, and if the buffer address
changes, alter the start_of_data and end_of_data pointers to match.

If you would rather use a static buffer, and process the data in pieces,
you would need something like this each time your buffer was full:

     shift_buffer() {
       if (start_of_data) {
         int ofs= start_of_data - buffer;
         int data_count= (end_of_data)? end_of_data - start_of_data
                       : sizeof(buffer) - ofs;
         int keep_count= sizeof(buffer) - ofs - data_count;

         // process portion of data
         printf("Data: '%.*s'\n", data_count, start_of_data);

         memmove(buffer, start_of_data+data_count, keep_count);
         start_of_data= buffer;
         end_of_data= buffer;
         p= buffer+keep_count;
       }
     }

The pointers and fixed buffer are more complicated, but it results in a
faster machine, since you don't write to memory on most data characters.

Hope that helps.

-Mike

On Tue, 21 Feb 2012 18:27:18 -0500, Ivan Reche <ivan.reche at gmail.com>
wrote:

> 2012/2/20 <ragel-user at jgoettgens.de>
>
>>   Ivan,
>>
>> so you need to mark the beginning and the end of either “command” or
>> “data” mode given the keywords “*OPEN*”  and “*CLOS*”. Right? Once  
>> matched
>> it is entirely up to you what to do with the matched text (User Actions,
>> chapter 3). You could post a typical token stream and an outline of your
>> ragel specs. Otherwise it is difficult to see the cause of your problem.
>>
>> jg
>>
>>
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at complang.org
>> http://www.complang.org/mailman/listinfo/ragel-users
>>
>
> I'm sorry if my post wasn't clear enough.
>
> I've managed to achieve the results that I expect, although I don't know  
> if
> it is the most effective way to do it. I'm gonna post it in this e-mail.  
> My
> objective is to read the stream of characters between the *OPEN* and  
> *CLOS*
> "tokens". Thanks in advance for any tips or insights on this.
>
> #include <stdio.h>
> #include <stdlib.h>
> #include <string.h>
> #include <stdbool.h>
>
> %%{
>
>     machine test;
>
>     action open_found {
>         printf("FOUND OPEN\r\n");
>         fgoto data;
>     }
>     action close_found {
>         printf("FOUND CLOSE\r\n");
>         fgoto main;
>     }
>     action new_data_char {
>         printf("NEW CHAR: %c, lock: %d\n", fc, lock_data);
>         if (!lock_data)
>             rec[count++] = fc;
>     }
>     action close_candidate {
>         printf("CLOSE CANDIDATE: %c\n", fc);
>         lock_data = true;
>         cacount = 0;
>         fhold; fgoto clos;
>     }
>     action not_close {
>         printf("NOT CLOSE: %c, candidate: %s, cacount: %d\n", fc,
> candidate, cacount);
>         lock_data = false;
>         strncat(rec, candidate, cacount);
>         count += cacount;
>         fgoto data;
>     }
>     action store_candidate_char {
>         printf("CANDIDATE CHAR: %c\n", fc);
>         candidate[cacount++] = fc;
>     }
>
>     open = /.*\*OPEN\*/;
>     close = /.*\*CLOS\*/;
>
>     main :=
>         (open %open_found)+;
>
>     data := /.*\*/ @~new_data_char %~close_candidate;
>     clos := /\*CLOS\*/ $/{fbreak;} $store_candidate_char @!(not_close)
> @close_found;
>
> }%%
>
> %% write data;
>
> const char *p, *pe, *eof;
> int cs;
> const char *ts, *te;
> int act;
> int stack[128] = {0};
> int top;
>
> char rec[1024] = {0};
> unsigned int count = 0;
> char candidate[1024] = {0};;
> unsigned int cacount = 0;
> bool lock_data = false;
>
> bool parse(const char * str) {
>     p = str; pe = str + strlen(str); eof = pe;
>
>     %% write exec;
>
>     return true;
> }
>
> int main(int argc, char **argv) {
>     char buf[2048] =
> "aaaaaaaaaa*OPEN*bbbbbbbb*CLbbbbbbbbb*CLOS*aaaaaaaaaaaaaaaaaaaa";
>
>     %% write init;
>
>     parse(buf);
>
>     printf("data[%d] = %s\n", count, rec);
>     return 0;
> }

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From gerald.gutierrez at gmail.com  Tue Feb  7 02:47:35 2012
From: gerald.gutierrez at gmail.com (Gerald Gutierrez)
Date: Mon, 6 Feb 2012 18:47:35 -0800
Subject: [ragel-users] Web Sequence Diagrams language
Message-ID: <CAPZrZPOaGY=mKbv255WbdiL_5B4t+NG0rXPmKBznuXXwWohTeQ@mail.gmail.com>

There is a very useful web site called
http://www.websequencediagrams.com/that allows you to "write" sequence
diagrams in text and generate the
images. Example text:

A->B: text
A-->B: text
A->B: text
activate B
B-->A: text
deactivate B
A->A: text
alt text1
    A->B: text
else text2
    A->B: text
end

Is this text that Ragel would be able to easily parse?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20120206/dcd4efc8/attachment-0001.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From ivan.reche at gmail.com  Sun Feb 19 21:37:09 2012
From: ivan.reche at gmail.com (Ivan Reche)
Date: Sun, 19 Feb 2012 19:37:09 -0200
Subject: [ragel-users] Action for leaving a machine from a non-final state
Message-ID: <CACRFBJUaGqKjizpGuEz9dQ+-8efrcNM8zKzbJ2ZS53ZO3ReD5A@mail.gmail.com>

Hello there,

I'm using ragel to read peripherals input using a microcontroller. I need
to have two machines: one for parsing commands and the other for storing
data.

Let's suppose that my setup is like this: when the device is turned on, I
know that I'm in command mode and I will parse some ASCII words to
acknowledge the peripheral's state. However, if I get the word *OPEN*,
every character that I received after the second * will be stored as data.
While in this data mode (where I store every character), if I receive the
*CLOS* string, I should NOT store *CLOS* in my data buffer and leave the
data mode (switch to the other machine).

I've accomplished almost everything that I need with this machines, except
the part of not storing the *CLOS* object. My first solution was to just
delete it after a match of *CLOS*, but this causes problems with parallel
execution in my environment because in a give moment I might have data in
my buffer that is not really data.

So I created some locks that will prevent the data machine from storing the
caracters when I begin to match what is a candidate of *CLOS* (example:
*CL). This works fine if the candidate proves to be, indeed, a *CLOS*
string, but I don't know how to associate an action to the event of *CL not
ending up in a *CLOS* (example: *CLabc). At this point, I want to store
*CLabc in my buffer and continue storing characters.

I'm kind of new to Ragel and I'm enjoying it very much. However, I don't
know if I'm doing things in an awkward or if I am indeed in the right track.

How do I achieve what I want to do? Is there a better way?

Cheers,

Ivan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20120219/45d6f81e/attachment-0001.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From ragel-user at jgoettgens.de  Mon Feb 20 13:44:56 2012
From: ragel-user at jgoettgens.de (ragel-user at jgoettgens.de)
Date: Mon, 20 Feb 2012 14:44:56 +0100
Subject: [ragel-users] Action for leaving a machine from a non-final
	state
In-Reply-To: <CACRFBJUaGqKjizpGuEz9dQ+-8efrcNM8zKzbJ2ZS53ZO3ReD5A@mail.gmail.com>
References: <CACRFBJUaGqKjizpGuEz9dQ+-8efrcNM8zKzbJ2ZS53ZO3ReD5A@mail.gmail.com>
Message-ID: <A0AACB583C1540A7A33F5D14E39DA0FE@localdomain>

Ivan,

so you need to mark the beginning and the end of either “command” or “data” mode given the keywords “*OPEN*”  and “*CLOS*”. Right? Once matched it is entirely up to you what to do with the matched text (User Actions, chapter 3). You could post a typical token stream and an outline of your ragel specs. Otherwise it is difficult to see the cause of your problem. 

jg
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20120220/95d39195/attachment-0001.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From ivan.reche at gmail.com  Tue Feb 21 23:27:18 2012
From: ivan.reche at gmail.com (Ivan Reche)
Date: Tue, 21 Feb 2012 21:27:18 -0200
Subject: [ragel-users] Action for leaving a machine from a non-final
	state
In-Reply-To: <A0AACB583C1540A7A33F5D14E39DA0FE@localdomain>
References: <CACRFBJUaGqKjizpGuEz9dQ+-8efrcNM8zKzbJ2ZS53ZO3ReD5A@mail.gmail.com>
	<A0AACB583C1540A7A33F5D14E39DA0FE@localdomain>
Message-ID: <CACRFBJXZ5xx0q9H7av-FS73H-3-9v_wXqFH3cssQLgtwpKOsYA@mail.gmail.com>

2012/2/20 <ragel-user at jgoettgens.de>

>   Ivan,
>
> so you need to mark the beginning and the end of either “command” or
> “data” mode given the keywords “*OPEN*”  and “*CLOS*”. Right? Once matched
> it is entirely up to you what to do with the matched text (User Actions,
> chapter 3). You could post a typical token stream and an outline of your
> ragel specs. Otherwise it is difficult to see the cause of your problem.
>
> jg
>
>
> _______________________________________________
> ragel-users mailing list
> ragel-users at complang.org
> http://www.complang.org/mailman/listinfo/ragel-users
>

I'm sorry if my post wasn't clear enough.

I've managed to achieve the results that I expect, although I don't know if
it is the most effective way to do it. I'm gonna post it in this e-mail. My
objective is to read the stream of characters between the *OPEN* and *CLOS*
"tokens". Thanks in advance for any tips or insights on this.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

%%{

    machine test;

    action open_found {
        printf("FOUND OPEN\r\n");
        fgoto data;
    }
    action close_found {
        printf("FOUND CLOSE\r\n");
        fgoto main;
    }
    action new_data_char {
        printf("NEW CHAR: %c, lock: %d\n", fc, lock_data);
        if (!lock_data)
            rec[count++] = fc;
    }
    action close_candidate {
        printf("CLOSE CANDIDATE: %c\n", fc);
        lock_data = true;
        cacount = 0;
        fhold; fgoto clos;
    }
    action not_close {
        printf("NOT CLOSE: %c, candidate: %s, cacount: %d\n", fc,
candidate, cacount);
        lock_data = false;
        strncat(rec, candidate, cacount);
        count += cacount;
        fgoto data;
    }
    action store_candidate_char {
        printf("CANDIDATE CHAR: %c\n", fc);
        candidate[cacount++] = fc;
    }

    open = /.*\*OPEN\*/;
    close = /.*\*CLOS\*/;

    main :=
        (open %open_found)+;

    data := /.*\*/ @~new_data_char %~close_candidate;
    clos := /\*CLOS\*/ $/{fbreak;} $store_candidate_char @!(not_close)
@close_found;

}%%

%% write data;

const char *p, *pe, *eof;
int cs;
const char *ts, *te;
int act;
int stack[128] = {0};
int top;

char rec[1024] = {0};
unsigned int count = 0;
char candidate[1024] = {0};;
unsigned int cacount = 0;
bool lock_data = false;

bool parse(const char * str) {
    p = str; pe = str + strlen(str); eof = pe;

    %% write exec;

    return true;
}

int main(int argc, char **argv) {
    char buf[2048] =
"aaaaaaaaaa*OPEN*bbbbbbbb*CLbbbbbbbbb*CLOS*aaaaaaaaaaaaaaaaaaaa";

    %% write init;

    parse(buf);

    printf("data[%d] = %s\n", count, rec);
    return 0;
}
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://www.colm.net/pipermail/ragel-users/attachments/20120221/b2aabe79/attachment-0001.html>
-------------- next part --------------
_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

From silverdirk-rgl at silverdirk.com  Tue Feb 28 16:47:31 2012
From: silverdirk-rgl at silverdirk.com (M Conrad)
Date: Tue, 28 Feb 2012 11:47:31 -0500
Subject: [ragel-users] Action for leaving a machine from a non-final
	state
In-Reply-To: <CACRFBJXZ5xx0q9H7av-FS73H-3-9v_wXqFH3cssQLgtwpKOsYA@mail.gmail.com>
References: <CACRFBJUaGqKjizpGuEz9dQ+-8efrcNM8zKzbJ2ZS53ZO3ReD5A@mail.gmail.com>
	<A0AACB583C1540A7A33F5D14E39DA0FE@localdomain>
	<CACRFBJXZ5xx0q9H7av-FS73H-3-9v_wXqFH3cssQLgtwpKOsYA@mail.gmail.com>
Message-ID: <op.waed9hmkah38gt@osangar.int.intellitree.com>

There's lots of ways to accomplish what you want, and it's hard to say if
one way is really better than another, but my favorite way to work with
these sorts of problems is to have all my data in one buffer, and then use
pointers to mark the bounds.

So, instead of copying one character at a time, and "goto" bouncing
between states, I would

     open = /.*\*OPEN\*/ %{ start_of_data= p; };
     close = /\*CLOS\*/ >{ if (!end_of_data) end_of_data= p; }
         @!{ end_of_data= NULL; }
         %{ process_data(); start_of_data= end_of_data= NULL; fret; };
     data := . | close;

end_of_data gets set every time the machine sees a "*", but then if it
doesn't complete the pattern it will get set again later.  Meanwhile, you
need to keep enlarging the buffer in other code, and if the buffer address
changes, alter the start_of_data and end_of_data pointers to match.

If you would rather use a static buffer, and process the data in pieces,
you would need something like this each time your buffer was full:

     shift_buffer() {
       if (start_of_data) {
         int ofs= start_of_data - buffer;
         int data_count= (end_of_data)? end_of_data - start_of_data
                       : sizeof(buffer) - ofs;
         int keep_count= sizeof(buffer) - ofs - data_count;

         // process portion of data
         printf("Data: '%.*s'\n", data_count, start_of_data);

         memmove(buffer, start_of_data+data_count, keep_count);
         start_of_data= buffer;
         end_of_data= buffer;
         p= buffer+keep_count;
       }
     }

The pointers and fixed buffer are more complicated, but it results in a
faster machine, since you don't write to memory on most data characters.

Hope that helps.

-Mike

On Tue, 21 Feb 2012 18:27:18 -0500, Ivan Reche <ivan.reche at gmail.com>
wrote:

> 2012/2/20 <ragel-user at jgoettgens.de>
>
>>   Ivan,
>>
>> so you need to mark the beginning and the end of either “command” or
>> “data” mode given the keywords “*OPEN*”  and “*CLOS*”. Right? Once  
>> matched
>> it is entirely up to you what to do with the matched text (User Actions,
>> chapter 3). You could post a typical token stream and an outline of your
>> ragel specs. Otherwise it is difficult to see the cause of your problem.
>>
>> jg
>>
>>
>> _______________________________________________
>> ragel-users mailing list
>> ragel-users at complang.org
>> http://www.complang.org/mailman/listinfo/ragel-users
>>
>
> I'm sorry if my post wasn't clear enough.
>
> I've managed to achieve the results that I expect, although I don't know  
> if
> it is the most effective way to do it. I'm gonna post it in this e-mail.  
> My
> objective is to read the stream of characters between the *OPEN* and  
> *CLOS*
> "tokens". Thanks in advance for any tips or insights on this.
>
> #include <stdio.h>
> #include <stdlib.h>
> #include <string.h>
> #include <stdbool.h>
>
> %%{
>
>     machine test;
>
>     action open_found {
>         printf("FOUND OPEN\r\n");
>         fgoto data;
>     }
>     action close_found {
>         printf("FOUND CLOSE\r\n");
>         fgoto main;
>     }
>     action new_data_char {
>         printf("NEW CHAR: %c, lock: %d\n", fc, lock_data);
>         if (!lock_data)
>             rec[count++] = fc;
>     }
>     action close_candidate {
>         printf("CLOSE CANDIDATE: %c\n", fc);
>         lock_data = true;
>         cacount = 0;
>         fhold; fgoto clos;
>     }
>     action not_close {
>         printf("NOT CLOSE: %c, candidate: %s, cacount: %d\n", fc,
> candidate, cacount);
>         lock_data = false;
>         strncat(rec, candidate, cacount);
>         count += cacount;
>         fgoto data;
>     }
>     action store_candidate_char {
>         printf("CANDIDATE CHAR: %c\n", fc);
>         candidate[cacount++] = fc;
>     }
>
>     open = /.*\*OPEN\*/;
>     close = /.*\*CLOS\*/;
>
>     main :=
>         (open %open_found)+;
>
>     data := /.*\*/ @~new_data_char %~close_candidate;
>     clos := /\*CLOS\*/ $/{fbreak;} $store_candidate_char @!(not_close)
> @close_found;
>
> }%%
>
> %% write data;
>
> const char *p, *pe, *eof;
> int cs;
> const char *ts, *te;
> int act;
> int stack[128] = {0};
> int top;
>
> char rec[1024] = {0};
> unsigned int count = 0;
> char candidate[1024] = {0};;
> unsigned int cacount = 0;
> bool lock_data = false;
>
> bool parse(const char * str) {
>     p = str; pe = str + strlen(str); eof = pe;
>
>     %% write exec;
>
>     return true;
> }
>
> int main(int argc, char **argv) {
>     char buf[2048] =
> "aaaaaaaaaa*OPEN*bbbbbbbb*CLbbbbbbbbb*CLOS*aaaaaaaaaaaaaaaaaaaa";
>
>     %% write init;
>
>     parse(buf);
>
>     printf("data[%d] = %s\n", count, rec);
>     return 0;
> }

_______________________________________________
ragel-users mailing list
ragel-users at complang.org
http://www.complang.org/mailman/listinfo/ragel-users

