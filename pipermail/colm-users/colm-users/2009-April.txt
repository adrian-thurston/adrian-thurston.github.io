From thurston at complang.org  Sat Apr  4 22:57:39 2009
From: thurston at complang.org (Adrian Thurston)
Date: Sat, 04 Apr 2009 18:57:39 -0400
Subject: [colm-users] update
Message-ID: <49D7E5E3.4050308@complang.org>

Hi,

I wanted to give an update on the status of Colm. The most important 
thing I wanted to say is that Colm is not dead! It is true that Colm is 
no longer my primary responsibility since I have graduated, but I am 
still working on it in my spare time.

-Adrian



From thurston at complang.org  Sat Apr  4 23:02:19 2009
From: thurston at complang.org (Adrian Thurston)
Date: Sat, 04 Apr 2009 19:02:19 -0400
Subject: [colm-users] yacc-style precedence rules
Message-ID: <49D7E6FB.3050904@complang.org>

Hello,

Colm now supports yacc-style precedence specifications. Many programming 
languages use them and supporting them in Colm makes the specification 
of these languages easier.

Colm runs the yacc-style precedence resolution after actions have been 
ordered by its own algorithm, therefore the yacc-style precedence rules 
take priority. Unlike Colm's ordering algorithm, the yacc-style 
precedence rules result in a permanent resolution of the conflict.

Here's an example from a Ruby grammar:

right '='
left 'rescue'
right '?', ':'
nonassoc '..', '...'
left '||'
left '&&'
nonassoc '<=>', '==', '===', '!=', '=~', '!~'
left '>', '>=', '<', '<='
left '|', '^'
left '&'
left '<<', '>>'
left '+', '-'
left '*', '/', '%'
#right tUMINUS_NUM tUMINUS
right tUMINUS
right '**'
right '!', '~', tUPLUS

def arg
     [lhs '=' arg]
|   [lhs '=' arg 'rescue' arg]
|   [arg '?' arg ':' arg]
|   [arg '..' arg]
|   [arg '...' arg]
|   [arg '||' arg]
|   [arg '&&' arg]
|   [arg '<=>' arg]
|   [arg '==' arg]
|   [arg '===' arg]
|   [arg '!=' arg]
|   [arg '=~' arg]
|   [arg '!~' arg]
|   [arg '>' arg]
|   [arg '>=' arg]
|   [arg '<' arg]
|   [arg '<=' arg]
|   [arg '|' arg]
|   [arg '^' arg]
|   [arg '&' arg]
|   [arg '<<' arg]
|   [arg '>>' arg]
|   [arg '+' arg]
|   [arg '-' arg]
|   [arg '*' arg]
|   [arg '/' arg]
|   [arg '%' arg]
|   [arg '**' arg]
|   ['!' primary]
|   ['~' primary]
|   [tUMINUS primary]
|   [tUPLUS primary]
|   ['defined?' arg]
|   [primary]



From thurston at complang.org  Sat Apr  4 22:57:39 2009
From: thurston at complang.org (Adrian Thurston)
Date: Sat, 04 Apr 2009 18:57:39 -0400
Subject: [colm-users] update
Message-ID: <49D7E5E3.4050308@complang.org>

Hi,

I wanted to give an update on the status of Colm. The most important 
thing I wanted to say is that Colm is not dead! It is true that Colm is 
no longer my primary responsibility since I have graduated, but I am 
still working on it in my spare time.

-Adrian



From thurston at complang.org  Sat Apr  4 23:02:19 2009
From: thurston at complang.org (Adrian Thurston)
Date: Sat, 04 Apr 2009 19:02:19 -0400
Subject: [colm-users] yacc-style precedence rules
Message-ID: <49D7E6FB.3050904@complang.org>

Hello,

Colm now supports yacc-style precedence specifications. Many programming 
languages use them and supporting them in Colm makes the specification 
of these languages easier.

Colm runs the yacc-style precedence resolution after actions have been 
ordered by its own algorithm, therefore the yacc-style precedence rules 
take priority. Unlike Colm's ordering algorithm, the yacc-style 
precedence rules result in a permanent resolution of the conflict.

Here's an example from a Ruby grammar:

right '='
left 'rescue'
right '?', ':'
nonassoc '..', '...'
left '||'
left '&&'
nonassoc '<=>', '==', '===', '!=', '=~', '!~'
left '>', '>=', '<', '<='
left '|', '^'
left '&'
left '<<', '>>'
left '+', '-'
left '*', '/', '%'
#right tUMINUS_NUM tUMINUS
right tUMINUS
right '**'
right '!', '~', tUPLUS

def arg
     [lhs '=' arg]
|   [lhs '=' arg 'rescue' arg]
|   [arg '?' arg ':' arg]
|   [arg '..' arg]
|   [arg '...' arg]
|   [arg '||' arg]
|   [arg '&&' arg]
|   [arg '<=>' arg]
|   [arg '==' arg]
|   [arg '===' arg]
|   [arg '!=' arg]
|   [arg '=~' arg]
|   [arg '!~' arg]
|   [arg '>' arg]
|   [arg '>=' arg]
|   [arg '<' arg]
|   [arg '<=' arg]
|   [arg '|' arg]
|   [arg '^' arg]
|   [arg '&' arg]
|   [arg '<<' arg]
|   [arg '>>' arg]
|   [arg '+' arg]
|   [arg '-' arg]
|   [arg '*' arg]
|   [arg '/' arg]
|   [arg '%' arg]
|   [arg '**' arg]
|   ['!' primary]
|   ['~' primary]
|   [tUMINUS primary]
|   [tUPLUS primary]
|   ['defined?' arg]
|   [primary]



From thurston at complang.org  Sat Apr  4 22:57:39 2009
From: thurston at complang.org (Adrian Thurston)
Date: Sat, 04 Apr 2009 18:57:39 -0400
Subject: [colm-users] update
Message-ID: <49D7E5E3.4050308@complang.org>

Hi,

I wanted to give an update on the status of Colm. The most important 
thing I wanted to say is that Colm is not dead! It is true that Colm is 
no longer my primary responsibility since I have graduated, but I am 
still working on it in my spare time.

-Adrian



From thurston at complang.org  Sat Apr  4 23:02:19 2009
From: thurston at complang.org (Adrian Thurston)
Date: Sat, 04 Apr 2009 19:02:19 -0400
Subject: [colm-users] yacc-style precedence rules
Message-ID: <49D7E6FB.3050904@complang.org>

Hello,

Colm now supports yacc-style precedence specifications. Many programming 
languages use them and supporting them in Colm makes the specification 
of these languages easier.

Colm runs the yacc-style precedence resolution after actions have been 
ordered by its own algorithm, therefore the yacc-style precedence rules 
take priority. Unlike Colm's ordering algorithm, the yacc-style 
precedence rules result in a permanent resolution of the conflict.

Here's an example from a Ruby grammar:

right '='
left 'rescue'
right '?', ':'
nonassoc '..', '...'
left '||'
left '&&'
nonassoc '<=>', '==', '===', '!=', '=~', '!~'
left '>', '>=', '<', '<='
left '|', '^'
left '&'
left '<<', '>>'
left '+', '-'
left '*', '/', '%'
#right tUMINUS_NUM tUMINUS
right tUMINUS
right '**'
right '!', '~', tUPLUS

def arg
     [lhs '=' arg]
|   [lhs '=' arg 'rescue' arg]
|   [arg '?' arg ':' arg]
|   [arg '..' arg]
|   [arg '...' arg]
|   [arg '||' arg]
|   [arg '&&' arg]
|   [arg '<=>' arg]
|   [arg '==' arg]
|   [arg '===' arg]
|   [arg '!=' arg]
|   [arg '=~' arg]
|   [arg '!~' arg]
|   [arg '>' arg]
|   [arg '>=' arg]
|   [arg '<' arg]
|   [arg '<=' arg]
|   [arg '|' arg]
|   [arg '^' arg]
|   [arg '&' arg]
|   [arg '<<' arg]
|   [arg '>>' arg]
|   [arg '+' arg]
|   [arg '-' arg]
|   [arg '*' arg]
|   [arg '/' arg]
|   [arg '%' arg]
|   [arg '**' arg]
|   ['!' primary]
|   ['~' primary]
|   [tUMINUS primary]
|   [tUPLUS primary]
|   ['defined?' arg]
|   [primary]



From thurston at complang.org  Sat Apr  4 22:57:39 2009
From: thurston at complang.org (Adrian Thurston)
Date: Sat, 04 Apr 2009 18:57:39 -0400
Subject: [colm-users] update
Message-ID: <49D7E5E3.4050308@complang.org>

Hi,

I wanted to give an update on the status of Colm. The most important 
thing I wanted to say is that Colm is not dead! It is true that Colm is 
no longer my primary responsibility since I have graduated, but I am 
still working on it in my spare time.

-Adrian



From thurston at complang.org  Sat Apr  4 23:02:19 2009
From: thurston at complang.org (Adrian Thurston)
Date: Sat, 04 Apr 2009 19:02:19 -0400
Subject: [colm-users] yacc-style precedence rules
Message-ID: <49D7E6FB.3050904@complang.org>

Hello,

Colm now supports yacc-style precedence specifications. Many programming 
languages use them and supporting them in Colm makes the specification 
of these languages easier.

Colm runs the yacc-style precedence resolution after actions have been 
ordered by its own algorithm, therefore the yacc-style precedence rules 
take priority. Unlike Colm's ordering algorithm, the yacc-style 
precedence rules result in a permanent resolution of the conflict.

Here's an example from a Ruby grammar:

right '='
left 'rescue'
right '?', ':'
nonassoc '..', '...'
left '||'
left '&&'
nonassoc '<=>', '==', '===', '!=', '=~', '!~'
left '>', '>=', '<', '<='
left '|', '^'
left '&'
left '<<', '>>'
left '+', '-'
left '*', '/', '%'
#right tUMINUS_NUM tUMINUS
right tUMINUS
right '**'
right '!', '~', tUPLUS

def arg
     [lhs '=' arg]
|   [lhs '=' arg 'rescue' arg]
|   [arg '?' arg ':' arg]
|   [arg '..' arg]
|   [arg '...' arg]
|   [arg '||' arg]
|   [arg '&&' arg]
|   [arg '<=>' arg]
|   [arg '==' arg]
|   [arg '===' arg]
|   [arg '!=' arg]
|   [arg '=~' arg]
|   [arg '!~' arg]
|   [arg '>' arg]
|   [arg '>=' arg]
|   [arg '<' arg]
|   [arg '<=' arg]
|   [arg '|' arg]
|   [arg '^' arg]
|   [arg '&' arg]
|   [arg '<<' arg]
|   [arg '>>' arg]
|   [arg '+' arg]
|   [arg '-' arg]
|   [arg '*' arg]
|   [arg '/' arg]
|   [arg '%' arg]
|   [arg '**' arg]
|   ['!' primary]
|   ['~' primary]
|   [tUMINUS primary]
|   [tUPLUS primary]
|   ['defined?' arg]
|   [primary]



