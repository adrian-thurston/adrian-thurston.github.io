MMAP(2)                     BSD System Calls Manual                    MMAP(2)

NNAAMMEE
     mmmmaapp -- map files or devices into memory

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssyyss//mmmmaann..hh>>

     _v_o_i_d _*
     mmmmaapp(_v_o_i_d _*_a_d_d_r, _s_i_z_e___t _l_e_n, _i_n_t _p_r_o_t, _i_n_t _f_l_a_g_s, _i_n_t _f_i_l_d_e_s,
         _o_f_f___t _o_f_f_s_e_t);

DDEESSCCRRIIPPTTIIOONN
     The mmmmaapp function causes the pages starting at _a_d_d_r and continuing for at
     most _l_e_n bytes to be mapped from the object described by _f_i_l_d_e_s, starting
     at byte offset _o_f_f_s_e_t.  If _o_f_f_s_e_t or _l_e_n is not a multiple of the page-
     size, the mapped region may extend past the specified range.

     If _a_d_d_r is non-zero, it is used as a hint to the system.  (As a conve-
     nience to the system, the actual address of the region may differ from
     the address supplied.)  If _a_d_d_r is zero, an address will be selected by
     the system.  The actual starting address of the region is returned.  A
     successful _m_m_a_p deletes any previous mapping in the allocated address
     range.

     The protections (region accessibility) are specified in the _p_r_o_t argument
     by _o_r'ing the following values:

     PROT_EXEC   Pages may be executed.

     PROT_READ   Pages may be read.

     PROT_WRITE  Pages may be written.

     The _f_l_a_g_s parameter specifies the type of the mapped object, mapping
     options, and whether modifications made to the mapped copy of the page
     are private to the process (copy-on-write) or are to be shared with other
     references.  Sharing, mapping type, and options are specified in the
     _f_l_a_g_s argument by _o_r'ing the following values:

     MAP_ANON           Map anonymous memory not associated with any specific
                        file.  Mac OS X specific: the file descriptor used for
                        creating MAP_ANON regions can be used to pass some
                        Mach VM flags, and can be specified as -1 if no such
                        flags are associated with the region.  Mach VM flags
                        are defined in <mach/vm_statistics.h> and the ones
                        that currently apply to mmmmaapp are:

                        VM_FLAGS_PURGABLE   to create Mach purgable (i.e.
                        volatile) memory VM_MAKE_TAG(tag)    to associate an
                        8-bit tag with the region

                        <mach/vm_statistics.h> defines some preset tags (with
                        a VM_MEMORY_ prefix).  Users are encouraged to use
                        tags between 240 and 255.  Tags are used by tools such
                        as vmmap(1) to help identify specific memory regions.

     MAP_FILE           Mapped from a regular file or character-special device
                        memory.  (This is the default mapping type, and need
                        not be specified.)

     MAP_FIXED          Do not permit the system to select a different address
                        than the one specified.  If the specified address can-
                        not be used, mmmmaapp will fail.  If MAP_FIXED is speci-
                        fied, _a_d_d_r must be a multiple of the pagesize.  Use of
                        this option is discouraged.

     MAP_HASSEMAPHORE   Notify the kernel that the region may contain sema-
                        phores and that special handling may be necessary.

     MAP_PRIVATE        Modifications are private (copy-on-write).

     MAP_SHARED         Modifications are shared.

     MAP_NOCACHE        Pages in this mapping are not retained in the kernel's
                        memory cache.  If the system runs low on memory, pages
                        in MAP_NOCACHE mappings will be among the first to be
                        reclaimed.  This flag is intended for mappings that
                        have little locality and provides a hint to the kernel
                        that pages in this mapping are unlikely to be needed
                        again in the near future.

     Conforming applications must specify either MAP_PRIVATE or MAP_SHARED.

     The close(2) function does not unmap pages, see munmap(2) for further
     information.

     The current design does not allow a process to specify the location of
     swap space.  In the future we may define an additional mapping type,
     MAP_SWAP, in which the file descriptor argument specifies a file or
     device to which swapping should be done.

RREETTUURRNN VVAALLUUEESS
     Upon successful completion, mmmmaapp returns a pointer to the mapped region.
     Otherwise, a value of -1 is returned and _e_r_r_n_o is set to indicate the
     error.

EERRRROORRSS
     MMmmaapp() will fail if:

     [EACCES]           _F_i_l_d_e_s is not open for reading.

     [EACCES]           The flags PROT_WRITE and MAP_SHARED are specified as
                        part of the _f_l_a_g_s and _p_r_o_t parameters and _f_i_l_d_e_s is
                        not open for writing.

     [EBADF]            _f_i_l_d_e_s is not a valid file descriptor for an open
                        file.

     [EINVAL]           MAP_FIXED is specified and the parameter is not page
                        aligned.

     [EINVAL]           _f_i_l_d_e_s does not reference a regular or character spe-
                        cial file.

     [EINVAL]           _f_l_a_g_s does not include either MAP_PRIVATE or
                        MAP_SHARED.

     [EINVAL]           _l_e_n is not greater than zero.

     [EINVAL]           _o_f_f_s_e_t is not a multiple of the page size, as returned
                        by sysconf(3).

     [EMFILE]           The limit on mapped regions (per process or system) is
                        exceeded.

     [ENODEV]           The file type for _f_i_l_d_e_s is not supported for mapping.

     [ENOMEM]           MAP_FIXED is specified and the address range specified
                        exceeds the address space limit for the process.

     [ENOMEM]           MAP_FIXED is specified and the address specified by
                        the _a_d_d_r parameter isn't available.

     [ENOMEM]           MAP_ANON is specified and insufficient memory is
                        available.

     [ENXIO]            Addresses in the specified range are invalid for
                        fildes.

     [EOVERFLOW]        Addresses in the specified range exceed the maximum
                        offset set for fildes.

LLEEGGAACCYY SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssyyss//ttyyppeess..hh>>
     ##iinncclluuddee <<ssyyss//mmmmaann..hh>>

     The include file <_s_y_s_/_t_y_p_e_s_._h> is necessary.

CCOOMMPPAATTIIBBIILLIITTYY
     mmmmaapp() now returns with _e_r_r_n_o set to EINVAL in places that historically
     succeeded.  The rules have changed as follows:

     ++oo   The _f_l_a_g_s parameter must specify either MAP_PRIVATE or MAP_SHARED.

     ++oo   The _s_i_z_e parameter must not be 0.

     ++oo   The _o_f_f parameter must be a multiple of pagesize, as returned by
         ssyyssccoonnff().

SSEEEE AALLSSOO
     getpagesize(2), madvise(2), mincore(2), mlock(2), mprotect(2), msync(2),
     munmap(2), sysconf(3), compat(5)

4th Berkeley Distribution        June 4, 1993        4th Berkeley Distribution
