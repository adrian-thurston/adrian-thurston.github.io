From thurston at complang.org  Tue Sep  1 01:14:27 2009
From: thurston at complang.org (Adrian Thurston)
Date: Mon, 31 Aug 2009 21:14:27 -0400
Subject: [colm-users] two new iterators
Message-ID: <4A9C7573.1090408@complang.org>

Hello,

So I'm back to working on Colm, after a much-needed break from the 
topic. I spent my time away from it designing a Distributed Social 
Networking Protocol. While that is far from done, it is time to get back 
to my roots and hack on computer language tools.

I started with two new iterators: repeat and rev_repeat. These are for 
walking right-recursive lists without recursing into the element of the 
list. An example can be found here:

http://svn.complang.org/colm/trunk/test/repeat.lm

The rev_repeat iterator is especially useful for picking items out of a 
right-recursive list.

-Adrian



From thurston at complang.org  Tue Sep  1 22:57:14 2009
From: thurston at complang.org (Adrian Thurston)
Date: Tue, 01 Sep 2009 18:57:14 -0400
Subject: [colm-users] parsing the text of a tree
Message-ID: <4A9DA6CA.5020708@complang.org>

It is now possible to parse the text of a tree. The effect is the same 
as calling print() on the tree and then parsing the result.

Attached is an example.

-Adrian
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: tmp.lm
URL: <http://www.colm.net/pipermail/colm/attachments/20090901/57ef924d/attachment.ksh>

From thurston at complang.org  Sat Sep  5 16:41:06 2009
From: thurston at complang.org (Adrian Thurston)
Date: Sat, 05 Sep 2009 12:41:06 -0400
Subject: [colm-users] include statement
Message-ID: <4AA294A2.7080808@complang.org>

Colm now has a working include statement.

include 'somefile.lm'

-Adrian




From edward.og at gmail.com  Sun Sep  6 14:59:39 2009
From: edward.og at gmail.com (Edward Ocampo-Gooding)
Date: Sun, 6 Sep 2009 10:59:39 -0400
Subject: [colm-users] include statement
In-Reply-To: <4AA294A2.7080808@complang.org>
References: <4AA294A2.7080808@complang.org>
Message-ID: <33E2E22A-8FFF-4394-ADA7-3F963DB82C8C@gmail.com>

Sweet. Thatâ€™s going to come in handy.
On 2009-09-05, at 12:41 PM, Adrian Thurston wrote:

> Colm now has a working include statement.
>
> include 'somefile.lm'
>
> -Adrian
>
>
> _______________________________________________
> colm-users mailing list
> colm-users at complang.org
> http://www.complang.org/mailman/listinfo/colm-users




From thurston at complang.org  Wed Sep  9 23:54:42 2009
From: thurston at complang.org (Adrian Thurston)
Date: Wed, 09 Sep 2009 19:54:42 -0400
Subject: [colm-users] new way of constructing trees
Message-ID: <4AA84042.8080205@complang.org>

Hi,

I'm experimenting with a new way in Colm to make trees. The existing 
construct expression is useful for building trees in a bottom up 
fashion. It is parsed at compile-time to give some static assurance of 
success.

The existing parse expression can be used to parse from a stream source, 
or reparse the text of a tree as a new type. The parsing happens at 
run-time and may fail.

A new third method, the accumulator, can be used to incrementally build 
a tree by parsing little bits at a time. This is useful for building an 
output tree over the course of a top-down, left-right traversal.

See here for a simple example:

http://svn.complang.org/colm/trunk/test/accum.lm
http://svn.complang.org/colm/trunk/test/accum.in

-Adrian




From cordy at cs.queensu.ca  Thu Sep 10 00:21:42 2009
From: cordy at cs.queensu.ca (Jim Cordy)
Date: Wed, 9 Sep 2009 20:21:42 -0400
Subject: [colm-users] new way of constructing trees
In-Reply-To: <4AA84042.8080205@complang.org>
References: <4AA84042.8080205@complang.org>
Message-ID: <31DF7BFC-9D59-4AC7-AC37-E0E5529C0667@cs.queensu.ca>

Cool, I think - not sure that I understand!

Jim


On 9-Sep-09, at 7:54 PM, Adrian Thurston wrote:

> Hi,
>
> I'm experimenting with a new way in Colm to make trees. The existing
> construct expression is useful for building trees in a bottom up
> fashion. It is parsed at compile-time to give some static assurance of
> success.
>
> The existing parse expression can be used to parse from a stream  
> source,
> or reparse the text of a tree as a new type. The parsing happens at
> run-time and may fail.
>
> A new third method, the accumulator, can be used to incrementally  
> build
> a tree by parsing little bits at a time. This is useful for building  
> an
> output tree over the course of a top-down, left-right traversal.
>
> See here for a simple example:
>
> http://svn.complang.org/colm/trunk/test/accum.lm
> http://svn.complang.org/colm/trunk/test/accum.in
>
> -Adrian
>
>
> _______________________________________________
> colm-users mailing list
> colm-users at complang.org
> http://www.complang.org/mailman/listinfo/colm-users




From thurston at complang.org  Thu Sep 10 01:28:39 2009
From: thurston at complang.org (Adrian Thurston)
Date: Wed, 09 Sep 2009 21:28:39 -0400
Subject: [colm-users] new way of constructing trees
In-Reply-To: <31DF7BFC-9D59-4AC7-AC37-E0E5529C0667@cs.queensu.ca>
References: <4AA84042.8080205@complang.org>
	<31DF7BFC-9D59-4AC7-AC37-E0E5529C0667@cs.queensu.ca>
Message-ID: <4AA85647.2070901@complang.org>

Like reparse in TXL, except you don't have to give it all the text at 
once. You can can give it bit-by-bit.

The syntax might not be right. I'm currently using the same syntax as 
for match and construct (literals in "). Both of these have a type 
associated with them and are parsed at compile-time. This does not have 
a type, instead it's just like text that gets parsed at run-time. That's 
one syntax, two meanings. Not the greatest.

I'm thinking maybe use backticks instead to specify text with embedded 
variables.

Output <<
	`void f( int i, [SomeType] j );`

-Adrian

Jim Cordy wrote:
> Cool, I think - not sure that I understand!
> 
> Jim
> 
> 
> On 9-Sep-09, at 7:54 PM, Adrian Thurston wrote:
> 
>> Hi,
>>
>> I'm experimenting with a new way in Colm to make trees. The existing
>> construct expression is useful for building trees in a bottom up
>> fashion. It is parsed at compile-time to give some static assurance of
>> success.
>>
>> The existing parse expression can be used to parse from a stream  
>> source,
>> or reparse the text of a tree as a new type. The parsing happens at
>> run-time and may fail.
>>
>> A new third method, the accumulator, can be used to incrementally  
>> build
>> a tree by parsing little bits at a time. This is useful for building  
>> an
>> output tree over the course of a top-down, left-right traversal.
>>
>> See here for a simple example:
>>
>> http://svn.complang.org/colm/trunk/test/accum.lm
>> http://svn.complang.org/colm/trunk/test/accum.in
>>
>> -Adrian
>>
>>
>> _______________________________________________
>> colm-users mailing list
>> colm-users at complang.org
>> http://www.complang.org/mailman/listinfo/colm-users
> 
> 
> _______________________________________________
> colm-users mailing list
> colm-users at complang.org
> http://www.complang.org/mailman/listinfo/colm-users



From thurston at complang.org  Sun Sep 27 16:16:32 2009
From: thurston at complang.org (Adrian Thurston)
Date: Sun, 27 Sep 2009 12:16:32 -0400
Subject: [colm-users] dns.lm test working again AND test suite started
Message-ID: <4ABF8FE0.1060900@complang.org>

The DNS test case is functional again. For a while, the token position 
information was not functional. This test case depended on that the 
extraction of the the byte-offset of tokens.

In order to ensure regressions to not take place, a test suite has been 
started, with dns.lm being the first case.

To run it go: cd test && ./runtests

There will be more tests added in the future.

-Adrian



From thurston at complang.org  Sun Sep 27 16:17:28 2009
From: thurston at complang.org (Adrian Thurston)
Date: Sun, 27 Sep 2009 12:17:28 -0400
Subject: [colm-users] colm now has an issue tracker
Message-ID: <4ABF9018.40500@complang.org>

http://www.complang.org/trac/colm/



From thurston at complang.org  Tue Sep  1 01:14:27 2009
From: thurston at complang.org (Adrian Thurston)
Date: Mon, 31 Aug 2009 21:14:27 -0400
Subject: [colm-users] two new iterators
Message-ID: <4A9C7573.1090408@complang.org>

Hello,

So I'm back to working on Colm, after a much-needed break from the 
topic. I spent my time away from it designing a Distributed Social 
Networking Protocol. While that is far from done, it is time to get back 
to my roots and hack on computer language tools.

I started with two new iterators: repeat and rev_repeat. These are for 
walking right-recursive lists without recursing into the element of the 
list. An example can be found here:

http://svn.complang.org/colm/trunk/test/repeat.lm

The rev_repeat iterator is especially useful for picking items out of a 
right-recursive list.

-Adrian



From thurston at complang.org  Tue Sep  1 22:57:14 2009
From: thurston at complang.org (Adrian Thurston)
Date: Tue, 01 Sep 2009 18:57:14 -0400
Subject: [colm-users] parsing the text of a tree
Message-ID: <4A9DA6CA.5020708@complang.org>

It is now possible to parse the text of a tree. The effect is the same 
as calling print() on the tree and then parsing the result.

Attached is an example.

-Adrian
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: tmp.lm
URL: <http://www.colm.net/pipermail/colm/attachments/20090901/57ef924d/attachment-0001.ksh>

From thurston at complang.org  Sat Sep  5 16:41:06 2009
From: thurston at complang.org (Adrian Thurston)
Date: Sat, 05 Sep 2009 12:41:06 -0400
Subject: [colm-users] include statement
Message-ID: <4AA294A2.7080808@complang.org>

Colm now has a working include statement.

include 'somefile.lm'

-Adrian




From edward.og at gmail.com  Sun Sep  6 14:59:39 2009
From: edward.og at gmail.com (Edward Ocampo-Gooding)
Date: Sun, 6 Sep 2009 10:59:39 -0400
Subject: [colm-users] include statement
In-Reply-To: <4AA294A2.7080808@complang.org>
References: <4AA294A2.7080808@complang.org>
Message-ID: <33E2E22A-8FFF-4394-ADA7-3F963DB82C8C@gmail.com>

Sweet. Thatâ€™s going to come in handy.
On 2009-09-05, at 12:41 PM, Adrian Thurston wrote:

> Colm now has a working include statement.
>
> include 'somefile.lm'
>
> -Adrian
>
>
> _______________________________________________
> colm-users mailing list
> colm-users at complang.org
> http://www.complang.org/mailman/listinfo/colm-users




From thurston at complang.org  Wed Sep  9 23:54:42 2009
From: thurston at complang.org (Adrian Thurston)
Date: Wed, 09 Sep 2009 19:54:42 -0400
Subject: [colm-users] new way of constructing trees
Message-ID: <4AA84042.8080205@complang.org>

Hi,

I'm experimenting with a new way in Colm to make trees. The existing 
construct expression is useful for building trees in a bottom up 
fashion. It is parsed at compile-time to give some static assurance of 
success.

The existing parse expression can be used to parse from a stream source, 
or reparse the text of a tree as a new type. The parsing happens at 
run-time and may fail.

A new third method, the accumulator, can be used to incrementally build 
a tree by parsing little bits at a time. This is useful for building an 
output tree over the course of a top-down, left-right traversal.

See here for a simple example:

http://svn.complang.org/colm/trunk/test/accum.lm
http://svn.complang.org/colm/trunk/test/accum.in

-Adrian




From cordy at cs.queensu.ca  Thu Sep 10 00:21:42 2009
From: cordy at cs.queensu.ca (Jim Cordy)
Date: Wed, 9 Sep 2009 20:21:42 -0400
Subject: [colm-users] new way of constructing trees
In-Reply-To: <4AA84042.8080205@complang.org>
References: <4AA84042.8080205@complang.org>
Message-ID: <31DF7BFC-9D59-4AC7-AC37-E0E5529C0667@cs.queensu.ca>

Cool, I think - not sure that I understand!

Jim


On 9-Sep-09, at 7:54 PM, Adrian Thurston wrote:

> Hi,
>
> I'm experimenting with a new way in Colm to make trees. The existing
> construct expression is useful for building trees in a bottom up
> fashion. It is parsed at compile-time to give some static assurance of
> success.
>
> The existing parse expression can be used to parse from a stream  
> source,
> or reparse the text of a tree as a new type. The parsing happens at
> run-time and may fail.
>
> A new third method, the accumulator, can be used to incrementally  
> build
> a tree by parsing little bits at a time. This is useful for building  
> an
> output tree over the course of a top-down, left-right traversal.
>
> See here for a simple example:
>
> http://svn.complang.org/colm/trunk/test/accum.lm
> http://svn.complang.org/colm/trunk/test/accum.in
>
> -Adrian
>
>
> _______________________________________________
> colm-users mailing list
> colm-users at complang.org
> http://www.complang.org/mailman/listinfo/colm-users




From thurston at complang.org  Thu Sep 10 01:28:39 2009
From: thurston at complang.org (Adrian Thurston)
Date: Wed, 09 Sep 2009 21:28:39 -0400
Subject: [colm-users] new way of constructing trees
In-Reply-To: <31DF7BFC-9D59-4AC7-AC37-E0E5529C0667@cs.queensu.ca>
References: <4AA84042.8080205@complang.org>
	<31DF7BFC-9D59-4AC7-AC37-E0E5529C0667@cs.queensu.ca>
Message-ID: <4AA85647.2070901@complang.org>

Like reparse in TXL, except you don't have to give it all the text at 
once. You can can give it bit-by-bit.

The syntax might not be right. I'm currently using the same syntax as 
for match and construct (literals in "). Both of these have a type 
associated with them and are parsed at compile-time. This does not have 
a type, instead it's just like text that gets parsed at run-time. That's 
one syntax, two meanings. Not the greatest.

I'm thinking maybe use backticks instead to specify text with embedded 
variables.

Output <<
	`void f( int i, [SomeType] j );`

-Adrian

Jim Cordy wrote:
> Cool, I think - not sure that I understand!
> 
> Jim
> 
> 
> On 9-Sep-09, at 7:54 PM, Adrian Thurston wrote:
> 
>> Hi,
>>
>> I'm experimenting with a new way in Colm to make trees. The existing
>> construct expression is useful for building trees in a bottom up
>> fashion. It is parsed at compile-time to give some static assurance of
>> success.
>>
>> The existing parse expression can be used to parse from a stream  
>> source,
>> or reparse the text of a tree as a new type. The parsing happens at
>> run-time and may fail.
>>
>> A new third method, the accumulator, can be used to incrementally  
>> build
>> a tree by parsing little bits at a time. This is useful for building  
>> an
>> output tree over the course of a top-down, left-right traversal.
>>
>> See here for a simple example:
>>
>> http://svn.complang.org/colm/trunk/test/accum.lm
>> http://svn.complang.org/colm/trunk/test/accum.in
>>
>> -Adrian
>>
>>
>> _______________________________________________
>> colm-users mailing list
>> colm-users at complang.org
>> http://www.complang.org/mailman/listinfo/colm-users
> 
> 
> _______________________________________________
> colm-users mailing list
> colm-users at complang.org
> http://www.complang.org/mailman/listinfo/colm-users



From thurston at complang.org  Sun Sep 27 16:16:32 2009
From: thurston at complang.org (Adrian Thurston)
Date: Sun, 27 Sep 2009 12:16:32 -0400
Subject: [colm-users] dns.lm test working again AND test suite started
Message-ID: <4ABF8FE0.1060900@complang.org>

The DNS test case is functional again. For a while, the token position 
information was not functional. This test case depended on that the 
extraction of the the byte-offset of tokens.

In order to ensure regressions to not take place, a test suite has been 
started, with dns.lm being the first case.

To run it go: cd test && ./runtests

There will be more tests added in the future.

-Adrian



From thurston at complang.org  Sun Sep 27 16:17:28 2009
From: thurston at complang.org (Adrian Thurston)
Date: Sun, 27 Sep 2009 12:17:28 -0400
Subject: [colm-users] colm now has an issue tracker
Message-ID: <4ABF9018.40500@complang.org>

http://www.complang.org/trac/colm/



From thurston at complang.org  Tue Sep  1 01:14:27 2009
From: thurston at complang.org (Adrian Thurston)
Date: Mon, 31 Aug 2009 21:14:27 -0400
Subject: [colm-users] two new iterators
Message-ID: <4A9C7573.1090408@complang.org>

Hello,

So I'm back to working on Colm, after a much-needed break from the 
topic. I spent my time away from it designing a Distributed Social 
Networking Protocol. While that is far from done, it is time to get back 
to my roots and hack on computer language tools.

I started with two new iterators: repeat and rev_repeat. These are for 
walking right-recursive lists without recursing into the element of the 
list. An example can be found here:

http://svn.complang.org/colm/trunk/test/repeat.lm

The rev_repeat iterator is especially useful for picking items out of a 
right-recursive list.

-Adrian



From thurston at complang.org  Tue Sep  1 22:57:14 2009
From: thurston at complang.org (Adrian Thurston)
Date: Tue, 01 Sep 2009 18:57:14 -0400
Subject: [colm-users] parsing the text of a tree
Message-ID: <4A9DA6CA.5020708@complang.org>

It is now possible to parse the text of a tree. The effect is the same 
as calling print() on the tree and then parsing the result.

Attached is an example.

-Adrian
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: tmp.lm
URL: <http://www.colm.net/pipermail/colm/attachments/20090901/57ef924d/attachment-0002.ksh>

From thurston at complang.org  Sat Sep  5 16:41:06 2009
From: thurston at complang.org (Adrian Thurston)
Date: Sat, 05 Sep 2009 12:41:06 -0400
Subject: [colm-users] include statement
Message-ID: <4AA294A2.7080808@complang.org>

Colm now has a working include statement.

include 'somefile.lm'

-Adrian




From edward.og at gmail.com  Sun Sep  6 14:59:39 2009
From: edward.og at gmail.com (Edward Ocampo-Gooding)
Date: Sun, 6 Sep 2009 10:59:39 -0400
Subject: [colm-users] include statement
In-Reply-To: <4AA294A2.7080808@complang.org>
References: <4AA294A2.7080808@complang.org>
Message-ID: <33E2E22A-8FFF-4394-ADA7-3F963DB82C8C@gmail.com>

Sweet. Thatâ€™s going to come in handy.
On 2009-09-05, at 12:41 PM, Adrian Thurston wrote:

> Colm now has a working include statement.
>
> include 'somefile.lm'
>
> -Adrian
>
>
> _______________________________________________
> colm-users mailing list
> colm-users at complang.org
> http://www.complang.org/mailman/listinfo/colm-users




From thurston at complang.org  Wed Sep  9 23:54:42 2009
From: thurston at complang.org (Adrian Thurston)
Date: Wed, 09 Sep 2009 19:54:42 -0400
Subject: [colm-users] new way of constructing trees
Message-ID: <4AA84042.8080205@complang.org>

Hi,

I'm experimenting with a new way in Colm to make trees. The existing 
construct expression is useful for building trees in a bottom up 
fashion. It is parsed at compile-time to give some static assurance of 
success.

The existing parse expression can be used to parse from a stream source, 
or reparse the text of a tree as a new type. The parsing happens at 
run-time and may fail.

A new third method, the accumulator, can be used to incrementally build 
a tree by parsing little bits at a time. This is useful for building an 
output tree over the course of a top-down, left-right traversal.

See here for a simple example:

http://svn.complang.org/colm/trunk/test/accum.lm
http://svn.complang.org/colm/trunk/test/accum.in

-Adrian




From cordy at cs.queensu.ca  Thu Sep 10 00:21:42 2009
From: cordy at cs.queensu.ca (Jim Cordy)
Date: Wed, 9 Sep 2009 20:21:42 -0400
Subject: [colm-users] new way of constructing trees
In-Reply-To: <4AA84042.8080205@complang.org>
References: <4AA84042.8080205@complang.org>
Message-ID: <31DF7BFC-9D59-4AC7-AC37-E0E5529C0667@cs.queensu.ca>

Cool, I think - not sure that I understand!

Jim


On 9-Sep-09, at 7:54 PM, Adrian Thurston wrote:

> Hi,
>
> I'm experimenting with a new way in Colm to make trees. The existing
> construct expression is useful for building trees in a bottom up
> fashion. It is parsed at compile-time to give some static assurance of
> success.
>
> The existing parse expression can be used to parse from a stream  
> source,
> or reparse the text of a tree as a new type. The parsing happens at
> run-time and may fail.
>
> A new third method, the accumulator, can be used to incrementally  
> build
> a tree by parsing little bits at a time. This is useful for building  
> an
> output tree over the course of a top-down, left-right traversal.
>
> See here for a simple example:
>
> http://svn.complang.org/colm/trunk/test/accum.lm
> http://svn.complang.org/colm/trunk/test/accum.in
>
> -Adrian
>
>
> _______________________________________________
> colm-users mailing list
> colm-users at complang.org
> http://www.complang.org/mailman/listinfo/colm-users




From thurston at complang.org  Thu Sep 10 01:28:39 2009
From: thurston at complang.org (Adrian Thurston)
Date: Wed, 09 Sep 2009 21:28:39 -0400
Subject: [colm-users] new way of constructing trees
In-Reply-To: <31DF7BFC-9D59-4AC7-AC37-E0E5529C0667@cs.queensu.ca>
References: <4AA84042.8080205@complang.org>
	<31DF7BFC-9D59-4AC7-AC37-E0E5529C0667@cs.queensu.ca>
Message-ID: <4AA85647.2070901@complang.org>

Like reparse in TXL, except you don't have to give it all the text at 
once. You can can give it bit-by-bit.

The syntax might not be right. I'm currently using the same syntax as 
for match and construct (literals in "). Both of these have a type 
associated with them and are parsed at compile-time. This does not have 
a type, instead it's just like text that gets parsed at run-time. That's 
one syntax, two meanings. Not the greatest.

I'm thinking maybe use backticks instead to specify text with embedded 
variables.

Output <<
	`void f( int i, [SomeType] j );`

-Adrian

Jim Cordy wrote:
> Cool, I think - not sure that I understand!
> 
> Jim
> 
> 
> On 9-Sep-09, at 7:54 PM, Adrian Thurston wrote:
> 
>> Hi,
>>
>> I'm experimenting with a new way in Colm to make trees. The existing
>> construct expression is useful for building trees in a bottom up
>> fashion. It is parsed at compile-time to give some static assurance of
>> success.
>>
>> The existing parse expression can be used to parse from a stream  
>> source,
>> or reparse the text of a tree as a new type. The parsing happens at
>> run-time and may fail.
>>
>> A new third method, the accumulator, can be used to incrementally  
>> build
>> a tree by parsing little bits at a time. This is useful for building  
>> an
>> output tree over the course of a top-down, left-right traversal.
>>
>> See here for a simple example:
>>
>> http://svn.complang.org/colm/trunk/test/accum.lm
>> http://svn.complang.org/colm/trunk/test/accum.in
>>
>> -Adrian
>>
>>
>> _______________________________________________
>> colm-users mailing list
>> colm-users at complang.org
>> http://www.complang.org/mailman/listinfo/colm-users
> 
> 
> _______________________________________________
> colm-users mailing list
> colm-users at complang.org
> http://www.complang.org/mailman/listinfo/colm-users



From thurston at complang.org  Sun Sep 27 16:16:32 2009
From: thurston at complang.org (Adrian Thurston)
Date: Sun, 27 Sep 2009 12:16:32 -0400
Subject: [colm-users] dns.lm test working again AND test suite started
Message-ID: <4ABF8FE0.1060900@complang.org>

The DNS test case is functional again. For a while, the token position 
information was not functional. This test case depended on that the 
extraction of the the byte-offset of tokens.

In order to ensure regressions to not take place, a test suite has been 
started, with dns.lm being the first case.

To run it go: cd test && ./runtests

There will be more tests added in the future.

-Adrian



From thurston at complang.org  Sun Sep 27 16:17:28 2009
From: thurston at complang.org (Adrian Thurston)
Date: Sun, 27 Sep 2009 12:17:28 -0400
Subject: [colm-users] colm now has an issue tracker
Message-ID: <4ABF9018.40500@complang.org>

http://www.complang.org/trac/colm/



From thurston at complang.org  Tue Sep  1 01:14:27 2009
From: thurston at complang.org (Adrian Thurston)
Date: Mon, 31 Aug 2009 21:14:27 -0400
Subject: [colm-users] two new iterators
Message-ID: <4A9C7573.1090408@complang.org>

Hello,

So I'm back to working on Colm, after a much-needed break from the 
topic. I spent my time away from it designing a Distributed Social 
Networking Protocol. While that is far from done, it is time to get back 
to my roots and hack on computer language tools.

I started with two new iterators: repeat and rev_repeat. These are for 
walking right-recursive lists without recursing into the element of the 
list. An example can be found here:

http://svn.complang.org/colm/trunk/test/repeat.lm

The rev_repeat iterator is especially useful for picking items out of a 
right-recursive list.

-Adrian



From thurston at complang.org  Tue Sep  1 22:57:14 2009
From: thurston at complang.org (Adrian Thurston)
Date: Tue, 01 Sep 2009 18:57:14 -0400
Subject: [colm-users] parsing the text of a tree
Message-ID: <4A9DA6CA.5020708@complang.org>

It is now possible to parse the text of a tree. The effect is the same 
as calling print() on the tree and then parsing the result.

Attached is an example.

-Adrian
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: tmp.lm
URL: <http://www.colm.net/pipermail/colm-users/attachments/20090901/57ef924d/attachment-0003.ksh>

From thurston at complang.org  Sat Sep  5 16:41:06 2009
From: thurston at complang.org (Adrian Thurston)
Date: Sat, 05 Sep 2009 12:41:06 -0400
Subject: [colm-users] include statement
Message-ID: <4AA294A2.7080808@complang.org>

Colm now has a working include statement.

include 'somefile.lm'

-Adrian




From edward.og at gmail.com  Sun Sep  6 14:59:39 2009
From: edward.og at gmail.com (Edward Ocampo-Gooding)
Date: Sun, 6 Sep 2009 10:59:39 -0400
Subject: [colm-users] include statement
In-Reply-To: <4AA294A2.7080808@complang.org>
References: <4AA294A2.7080808@complang.org>
Message-ID: <33E2E22A-8FFF-4394-ADA7-3F963DB82C8C@gmail.com>

Sweet. Thatâ€™s going to come in handy.
On 2009-09-05, at 12:41 PM, Adrian Thurston wrote:

> Colm now has a working include statement.
>
> include 'somefile.lm'
>
> -Adrian
>
>
> _______________________________________________
> colm-users mailing list
> colm-users at complang.org
> http://www.complang.org/mailman/listinfo/colm-users




From thurston at complang.org  Wed Sep  9 23:54:42 2009
From: thurston at complang.org (Adrian Thurston)
Date: Wed, 09 Sep 2009 19:54:42 -0400
Subject: [colm-users] new way of constructing trees
Message-ID: <4AA84042.8080205@complang.org>

Hi,

I'm experimenting with a new way in Colm to make trees. The existing 
construct expression is useful for building trees in a bottom up 
fashion. It is parsed at compile-time to give some static assurance of 
success.

The existing parse expression can be used to parse from a stream source, 
or reparse the text of a tree as a new type. The parsing happens at 
run-time and may fail.

A new third method, the accumulator, can be used to incrementally build 
a tree by parsing little bits at a time. This is useful for building an 
output tree over the course of a top-down, left-right traversal.

See here for a simple example:

http://svn.complang.org/colm/trunk/test/accum.lm
http://svn.complang.org/colm/trunk/test/accum.in

-Adrian




From cordy at cs.queensu.ca  Thu Sep 10 00:21:42 2009
From: cordy at cs.queensu.ca (Jim Cordy)
Date: Wed, 9 Sep 2009 20:21:42 -0400
Subject: [colm-users] new way of constructing trees
In-Reply-To: <4AA84042.8080205@complang.org>
References: <4AA84042.8080205@complang.org>
Message-ID: <31DF7BFC-9D59-4AC7-AC37-E0E5529C0667@cs.queensu.ca>

Cool, I think - not sure that I understand!

Jim


On 9-Sep-09, at 7:54 PM, Adrian Thurston wrote:

> Hi,
>
> I'm experimenting with a new way in Colm to make trees. The existing
> construct expression is useful for building trees in a bottom up
> fashion. It is parsed at compile-time to give some static assurance of
> success.
>
> The existing parse expression can be used to parse from a stream  
> source,
> or reparse the text of a tree as a new type. The parsing happens at
> run-time and may fail.
>
> A new third method, the accumulator, can be used to incrementally  
> build
> a tree by parsing little bits at a time. This is useful for building  
> an
> output tree over the course of a top-down, left-right traversal.
>
> See here for a simple example:
>
> http://svn.complang.org/colm/trunk/test/accum.lm
> http://svn.complang.org/colm/trunk/test/accum.in
>
> -Adrian
>
>
> _______________________________________________
> colm-users mailing list
> colm-users at complang.org
> http://www.complang.org/mailman/listinfo/colm-users




From thurston at complang.org  Thu Sep 10 01:28:39 2009
From: thurston at complang.org (Adrian Thurston)
Date: Wed, 09 Sep 2009 21:28:39 -0400
Subject: [colm-users] new way of constructing trees
In-Reply-To: <31DF7BFC-9D59-4AC7-AC37-E0E5529C0667@cs.queensu.ca>
References: <4AA84042.8080205@complang.org>
	<31DF7BFC-9D59-4AC7-AC37-E0E5529C0667@cs.queensu.ca>
Message-ID: <4AA85647.2070901@complang.org>

Like reparse in TXL, except you don't have to give it all the text at 
once. You can can give it bit-by-bit.

The syntax might not be right. I'm currently using the same syntax as 
for match and construct (literals in "). Both of these have a type 
associated with them and are parsed at compile-time. This does not have 
a type, instead it's just like text that gets parsed at run-time. That's 
one syntax, two meanings. Not the greatest.

I'm thinking maybe use backticks instead to specify text with embedded 
variables.

Output <<
	`void f( int i, [SomeType] j );`

-Adrian

Jim Cordy wrote:
> Cool, I think - not sure that I understand!
> 
> Jim
> 
> 
> On 9-Sep-09, at 7:54 PM, Adrian Thurston wrote:
> 
>> Hi,
>>
>> I'm experimenting with a new way in Colm to make trees. The existing
>> construct expression is useful for building trees in a bottom up
>> fashion. It is parsed at compile-time to give some static assurance of
>> success.
>>
>> The existing parse expression can be used to parse from a stream  
>> source,
>> or reparse the text of a tree as a new type. The parsing happens at
>> run-time and may fail.
>>
>> A new third method, the accumulator, can be used to incrementally  
>> build
>> a tree by parsing little bits at a time. This is useful for building  
>> an
>> output tree over the course of a top-down, left-right traversal.
>>
>> See here for a simple example:
>>
>> http://svn.complang.org/colm/trunk/test/accum.lm
>> http://svn.complang.org/colm/trunk/test/accum.in
>>
>> -Adrian
>>
>>
>> _______________________________________________
>> colm-users mailing list
>> colm-users at complang.org
>> http://www.complang.org/mailman/listinfo/colm-users
> 
> 
> _______________________________________________
> colm-users mailing list
> colm-users at complang.org
> http://www.complang.org/mailman/listinfo/colm-users



From thurston at complang.org  Sun Sep 27 16:16:32 2009
From: thurston at complang.org (Adrian Thurston)
Date: Sun, 27 Sep 2009 12:16:32 -0400
Subject: [colm-users] dns.lm test working again AND test suite started
Message-ID: <4ABF8FE0.1060900@complang.org>

The DNS test case is functional again. For a while, the token position 
information was not functional. This test case depended on that the 
extraction of the the byte-offset of tokens.

In order to ensure regressions to not take place, a test suite has been 
started, with dns.lm being the first case.

To run it go: cd test && ./runtests

There will be more tests added in the future.

-Adrian



From thurston at complang.org  Sun Sep 27 16:17:28 2009
From: thurston at complang.org (Adrian Thurston)
Date: Sun, 27 Sep 2009 12:17:28 -0400
Subject: [colm-users] colm now has an issue tracker
Message-ID: <4ABF9018.40500@complang.org>

http://www.complang.org/trac/colm/



