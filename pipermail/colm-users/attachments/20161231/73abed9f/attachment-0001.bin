From e7c8abd8e38bfb05a515a180e3398118a2dec154 Mon Sep 17 00:00:00 2001
From: Peter Reijnders <peter.reijnders@verpeteren.nl>
Date: Wed, 28 Dec 2016 14:16:17 +0100
Subject: [PATCH] Refractored the two 'compileOutput' functions and activated
 that -I (and -L) command line options.

---
 src/main.cc | 122 +++++++++++++++++++++++++++++-------------------------------
 1 file changed, 58 insertions(+), 64 deletions(-)

diff --git a/src/main.cc b/src/main.cc
index e0165ba..93ad182 100644
--- a/src/main.cc
+++ b/src/main.cc
@@ -90,6 +90,7 @@ bool gblLibrary = false;
 long gblActiveRealm = 0;
 
 ArgsVector includePaths;
+ArgsVector libraryPaths;
 DefineVector defineArgs;
 ArgsVector additionalCodeFiles;
 
@@ -184,6 +185,7 @@ void usage()
 "   -E N=V               set a string value availabe in the program\n"
 "   -I <path>            additional include path for the compiler\n"
 "   -i                   activate branchpoint information\n"
+"   -L <path>            additional library path for the linker\n"
 "   -l                   activate logging\n"
 "   -c                   compile only (don't produce binary)\n"
 "   -V                   print dot format (graphiz)\n"
@@ -406,88 +408,77 @@ void openCommit( )
 
 void compileOutputCommand( const char *command )
 {
-	//cout << "compiling with: " << command << endl;
+	//cout << "compiling with: '" << command << "'" << endl;
 	int res = system( command );
 	if ( res != 0 )
 		error() << "there was a problem compiling the output" << endl;
 }
 
-void compileOutputInstalled( const char *argv0 )
+void compileOutput( const char *argv0, const bool installed )
 {
 	/* Find the location of the colm program that is executing. */
 	char *location = strdup( argv0 );
-	char *last = location + strlen(location) - 1;
-	while ( true ) {
-		if ( last == location ) {
-			last[0] = '.';
-			last[1] = 0;
-			break;
-		}
-		if ( *last == '/' ) {
-			last[0] = 0;
-			break;
+	char *last;
+	int length = 1024 + strlen(intermedFn) + strlen(binaryFn);
+	if ( installed ) {
+		last = location + strlen(location) - 1;
+		while ( true ) {
+			if ( last == location ) {
+				last[0] = '.';
+				last[1] = 0;
+				break;
+			}
+			if ( *last == '/' ) {
+				last[0] = 0;
+				break;
+			}
+			last -= 1;
 		}
-		last -= 1;
+	} else {
+		last = strrchr( location, '/' );
+		assert( last != 0 );
+		last[0] = 0;
+		length += 3 * strlen( location );
 	}
-
-
-	int length = 1024 + strlen(intermedFn) + strlen(binaryFn);
-
 	for ( ArgsVector::Iter af = additionalCodeFiles; af.lte(); af++ )
 		length += strlen( *af ) + 2;
-
+	for ( ArgsVector::Iter ip = includePaths; ip.lte(); ip++ )
+		length += strlen( *ip ) + 3;
+	for ( ArgsVector::Iter lp = libraryPaths; lp.lte(); lp++ )
+		length += strlen( *lp ) + 3;
+#define COMPILE_COMMAND_STRING "gcc -Wall -Wwrite-strings" \
+		" -g" \
+		" -lcolm" \
+		" -o %s" \
+		" %s"
 	char *command = new char[length];
-
-	sprintf( command, 
-		"gcc -Wall -Wwrite-strings"
+	if ( installed) {
+		sprintf( command,
+			COMPILE_COMMAND_STRING
 		" -I" PREFIX "/include"
-		" -g"
-		" -o %s"
-		" %s"
-		" -L" PREFIX "/lib"
-		" -lcolm",
+		" -L" PREFIX "/lib",
 		binaryFn, intermedFn );
-	
-	for ( ArgsVector::Iter af = additionalCodeFiles; af.lte(); af++ ) {
-		strcat( command, " " );
-		strcat( command, *af );
-	}
-
-	compileOutputCommand( command );
-
-	delete[] command;
-}
-
-void compileOutputInSource( const char *argv0 )
-{
-	/* Find the location of the colm program that is executing. */
-	char *location = strdup( argv0 );
-	char *last = strrchr( location, '/' );
-	assert( last != 0 );
-	last[0] = 0;
-
-	int length = 1024 + 3 * strlen(location) + strlen(intermedFn) + strlen(binaryFn);
-
-	for ( ArgsVector::Iter af = additionalCodeFiles; af.lte(); af++ )
-		length += strlen( *af ) + 2;
-
-	char *command = new char[length];
-	sprintf( command, 
-		"gcc -Wall -Wwrite-strings"
+	} else {
+		sprintf( command,
+			COMPILE_COMMAND_STRING
 		" -I%s/../aapl"
 		" -I%s/include"
-		" -g"
-		" -o %s"
-		" %s"
-		" -L%s"
-		" -lcolm",
-		location, location,
-		binaryFn, intermedFn, location );
-
+		" -L%s",
+		binaryFn, intermedFn, location, location, location );
+	}
+#undef COMPILE_COMMAND_STRING
 	for ( ArgsVector::Iter af = additionalCodeFiles; af.lte(); af++ ) {
 		strcat( command, " " );
 		strcat( command, *af );
 	}
+	for ( ArgsVector::Iter ip = includePaths; ip.lte(); ip++ ) {
+		strcat( command, " -I" );
+		strcat( command, *ip );
+	}
+	for ( ArgsVector::Iter lp = libraryPaths; lp.lte(); lp++ ) {
+		strcat( command, " -L" );
+		strcat( command, *lp );
+	}
 
 	compileOutputCommand( command );
 
@@ -516,7 +507,7 @@ bool inSourceTree( const char *argv0 )
 
 void processArgs( int argc, const char **argv )
 {
-	ParamCheck pc( "cD:e:x:I:vdlio:S:M:vHh?-:sVa:m:b:E:", argc, argv );
+	ParamCheck pc( "cD:e:x:I:L:vdlio:S:M:vHh?-:sVa:m:b:E:", argc, argv );
 
 	while ( pc.check() ) {
 		switch ( pc.state ) {
@@ -535,6 +526,9 @@ void processArgs( int argc, const char **argv )
 			case 'l':
 				logging = true;
 				break;
+			case 'L':
+				libraryPaths.append( pc.parameterArg );
+				break;
 			case 'i':
 				branchPointInfo = true;
 				break;
@@ -749,9 +743,9 @@ int main(int argc, const char **argv)
 
 		if ( !gblLibrary ) {
 			if ( inSourceTree( argv[0] ) )
-				compileOutputInSource( argv[0] );
+				compileOutput( argv[0], false );
 			else
-				compileOutputInstalled( argv[0] );
+				compileOutput( argv[0], true );
 		}
 
 		if ( exportHeaderFn != 0 ) {
-- 
2.1.4

